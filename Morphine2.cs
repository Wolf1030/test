/* 
TITS License

Copyright (o)(o) 2021 GOD

Credits (* = number of weeks I have tornmented that individual - # = stole / manipulated / inspired by code)
Project Canyon#
AcidBubbles**********#
Jajaywon********#
MacGruber*******#
CaptainVarghoss**
Amaimon****
Hazmhox**#
Wolf***

Changelog:

V1:
Revolutionized VAM phase 1 complete.
*/

using System;
using System.Net;

using System.Security.Policy;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Globalization;
using System.Reflection;
using System.Security.Cryptography;
using System.Runtime.CompilerServices;
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.Scripting;
using UnityEngine.UI;
using UnityEngine.Events;
using UnityEngine.VR;
using UnityEngine.XR;
using UnityEngine.EventSystems;
using UnityEngine.Networking;
using UnityEngineInternal;
using System.Threading;
using System.Net.Sockets;
using ZenFulcrum.EmbeddedBrowser;
using SimpleJSON;
using MVR.FileManagementSecure;
using MVR.FileManagement;
using MeshVR;
using System.Linq;

namespace God
{
    public class MORPHINE : MVRScript
    {
		
/////// used for central version-update checks via morphinecentral.
		public int version=25;
		private bool debugger=false;

/////// HUD-main variables

		public EventSystem m_EventSystem;
        public static CanvasGroup errorcanvas = null;
        public static CanvasGroup on = null;
        public static CanvasGroup off = null;
		public static Canvas copy = null;
        public static CanvasGroup copygroup = null;
        public static CanvasGroup lowHUDgroup = null;
		public static Canvas lowHUD = null;
        public static CanvasGroup lowHUDtextgroup = null;
		public static Canvas cam = null;
        public static CanvasGroup camgroup = null;		
		public static Canvas lowHUDtext = null;		
		public static Canvas chat = null;
        public static CanvasGroup chatgroup = null;
		public static Canvas web = null;
        public static CanvasGroup webgroup = null;
		public static Canvas url = null;
        public static CanvasGroup urlgroup = null;
		public static Canvas users = null;
        public static CanvasGroup usersgroup = null;
		public static Canvas models = null;
        public static CanvasGroup modelsgroup = null;
		public static Canvas wiz = null;
        public static CanvasGroup wizgroup = null;		
		public static Canvas sliderui = null;
        public static CanvasGroup slideruigroup = null;
		public static Canvas hide = null;
        public static CanvasGroup hidegroup = null;
		public static Canvas trans = null;
        public static CanvasGroup transgroup = null;		
        public static Canvas bg = null;
        public static CanvasGroup bggroup = null;
        public static Canvas infopanel = null;
        public static CanvasGroup infopanelgroup = null;
        public static Canvas adv = null;
        public static CanvasGroup advgroup = null;
        public static Canvas scroll = null;
        public static CanvasGroup scrollgroup = null;
        public static Canvas morphinebutton = null;
        public static CanvasGroup morphinebuttongroup = null;
        public static Canvas ui = null;
        public static CanvasGroup uigroup = null;
        public static Canvas hud = null;
        public static CanvasGroup hudgroup = null;	
        public static Canvas atomhud = null;
        public static CanvasGroup atomhudgroup = null;			
        public static Canvas lcopy = null;
        public static CanvasGroup lcopygroup = null;
		private float UIScale = 1.0f;
	private float cx = 0f;
	private float cy = 0f;
	private float cz = 0f;
	private Transform id;
	private Transform uione;
	private Transform g;
	private string ppath = "";
	private string startmessage = "new";
	private int buttons=0;
	private int lastlevel=0;
	
private string dday=System.DateTime.Now.ToString("dddd");
private string ttime=System.DateTime.Now.ToString("H:m:s");
private string timeofday="";
private string hhour="";
private string ssecond="";
private string mminute="";
public IEnumerator initiate() {
        try {
            if (containingAtom == null) {
                containingAtom = GetContainingAtom();
                if (containingAtom == null) {
                    SuperController.LogError("MORPHINE could not find containing atom!");
                    yield break;
                }
            }

            if (_persistentCanvas == null) {
                SuperController.LogMessage("Creating MORPHINE persistent canvas");
                _persistentCanvas = new GameObject().AddComponent<Canvas>();
                _persistentCanvas.name = "MORPHINE Persistent Canvas";
                _persistentCanvas.renderMode = RenderMode.ScreenSpaceOverlay;
                _persistentCanvas.sortingOrder = int.MaxValue;

                var canvasScaler = _persistentCanvas.gameObject.AddComponent<CanvasScaler>();
                canvasScaler.scaleFactor = 10f;
                canvasScaler.dynamicPixelsPerUnit = 10f;
                canvasScaler.referenceResolution = new Vector2(1920f, 1080f);

                var graphicsRaycaster = _persistentCanvas.gameObject.AddComponent<GraphicRaycaster>();
            }

            if (_menu == null) {
                SuperController.LogMessage("Creating MORPHINE menu");
                _menu = SuperController.singleton.MenuManager.CreateMenu("MORPHINE");
                var button = _menu.CreateButton("MORPHINE Button", 120f, 40f);
                button.transform.Translate(new Vector3(550f, -220f, 0f));
                button.onClick.AddListener(ShowMorphineWindow);
            }

            // Call ShowMorphineWindow() to display the window
            ShowMorphineWindow();
        } catch (Exception e) {
            SuperController.LogError("Exception caught: " + e);
        }
        ready = true;
        yield return null;
    }

/////// HUD-main variables end

	private UIDynamicToggle[] MorphToggles;
	private bool _init = false;
	private bool popup = false;
	private bool isactive = false;
	private bool change = false;
	private bool waspeople = false;
	private bool selecting = false;
	private bool people = false;
	private int pnum;
	private int _genmorphs = 0;
	private int textfields = 0;
	private UIDynamicButton morphine;
	private UIDynamicButton bodyc;
	private UIDynamicButton headc;
	private UIDynamicButton headp;
	private UIDynamicButton bodyp;
	private UIDynamicButton headl;
	private UIDynamicButton heads;
	private UIDynamicButton merge;
	private UIDynamicButton split;
	private UIDynamicButton title;
	private UIDynamicButton info;
	private UIDynamicButton[] userbutton;
	private UIDynamicButton[] hudbutton;
	private string prvalues="";

	private Dictionary<string,GameObject> element = new Dictionary<string,GameObject>();
	private Dictionary<string,string> getbuffer = new Dictionary<string,string>();
	private Dictionary<string,string> sendmorph = new Dictionary<string,string>();
	private Dictionary<string,DAZMorph> afmorphs = new Dictionary<string,DAZMorph>();
	private Dictionary<string,float> afvalues = new Dictionary<string,float>();
	private Dictionary<string,Vector3> acvalues = new Dictionary<string,Vector3>();

//private Dictionary<string,string> prvalues = new Dictionary<string,string>();
	private Dictionary<string,Button> openbuttons = new Dictionary<string,Button>();
	private Dictionary<string,Button> removebuttons = new Dictionary<string,Button>();
	private Dictionary<string,Toggle> plugintoggles = new Dictionary<string,Toggle>();
	private Dictionary<string,DAZMorph> allmorphs = new Dictionary<string,DAZMorph>();
	private Dictionary<string,DAZMorph> getmorph = new Dictionary<string,DAZMorph>();
	private Dictionary<string,string> islicensed = new Dictionary<string,string>(StringComparer.InvariantCultureIgnoreCase);
	private Dictionary<string,float> keepdupe = new Dictionary<string,float>(StringComparer.InvariantCultureIgnoreCase);
	private Dictionary<string,string> isdupe = new Dictionary<string,string>(StringComparer.InvariantCultureIgnoreCase);
	private Dictionary<string,string> duplicates = new Dictionary<string,string>(StringComparer.InvariantCultureIgnoreCase);
	private Dictionary<string,float> morphvalue = new Dictionary<string,float>();
	private Dictionary<string,float> lastvalue = new Dictionary<string,float>();
	private Dictionary<string,float> hmorphcopy = new Dictionary<string,float>();
	private Dictionary<string,float> hmorphoriginal = new Dictionary<string,float>();
	private Dictionary<string,float> bmorphcopy = new Dictionary<string,float>();
	private Dictionary<string,float> bmorphoriginal = new Dictionary<string,float>();
	private Dictionary<string,int> numvalue = new Dictionary<string,int>();
	private Dictionary<string,int> slidehits = new Dictionary<string,int>();
	private Dictionary<string,bool> slideon = new Dictionary<string,bool>();
	private Dictionary<string,string> slidevals = new Dictionary<string,string>();
	private Dictionary<string,float> mstart = new Dictionary<string,float>();
	private Dictionary<string,float> mstop = new Dictionary<string,float>();
	private SortedDictionary<string,string> insert = new SortedDictionary<string,string>();
	private int _morphs = 0;
	private int _mcount;
	private string mouseover;
	private int _msubcount;
	private int _moldcount = 9999;
	private int chg;
	private string _crowd = "init";
	private string _plugindir = "Saves\\PluginData";
	private string _pluginowner = "\\God";
	private string _plugin = "\\MORPHINE";
	private string _ini = "MORPHINE.ini";
	private int echocount = 0;
	private int once = 0;
	private int _count;
	private int _txtcount = 0;
	private string _oldtxt = "";
	private bool _refreshing;
	private int selectedmorphs;
        private Atom _person;
        private string _personid;
        private string _backup;
		private bool showhelptips=true;
		private bool helptipson=true;
	private string _refresh;
	private string _morphNameInputField_text;
	private string _prefixNameInputField_text = "Morphine";
	private string _groupNameInputField_text = "Morphine";
	private string _regionNameInputField_text;
	private string _maxInputField_text = "3000";
	private string _minInputField_text = "-3000";
	private string _creatorInputField_text;
	private string _filterNameInputField_text;
	private string _pwInputField_text;
	private string _creator;
	private float oldparpos;
        public DAZMorph[] Morphnum;
        public DAZMorph[] Previews;
		private UIDynamicButton[] letterbox;
		private UIDynamicButton[] ibox;
		private UIDynamicButton[] pbox;
		private UIDynamicButton[] gbox;
		
		private int _errors;
        private UIDynamicButton _infoButton;
        private UIDynamicButton _refreshButton;
        private UIDynamicButton _selectAllButton;
        private UIDynamicButton _filterButton;
        private UIDynamicButton _copyButton;
        private UIDynamicButton _mergeButton;
        private UIDynamicButton _splitButton;
        private UIDynamicButton _orderButton;
        private UIDynamicButton _DButton;
		private UIDynamicButton _saveButton;
        private UIDynamicButton _loadButton;
		private string headVerticiesFix;
		private string[] _people;
        private List<string> _clips;
        private List<SM> _mainBank;
        private List<SM> _genitalBank;
        private DAZCharacterSelector _characterSelector;

	private UIDynamicTextField intro;
	private UIDynamicTextField introtext;
        private UIDynamicTextField resultfiller;
        private UIDynamicTextField _copyField;
        private UIDynamicTextField _titleTextField;
		private Texture2D resultbox;
        private UIDynamicTextField _input;
        private UIDynamicTextField _prefixTextField;
        private UIDynamicTextField _genitalsTextField;
        private UIDynamicTextField filterTextField;
        private UIDynamicTextField _creatorTextField;
        private UIDynamicTextField _pwTextField;
		public bool ready=false;
		private UIDynamicTextField morphNameLabel;
		private UIDynamicTextField groupNameLabel;
		private UIDynamicTextField regionNameLabel;
		private UIDynamicTextField maxNameLabel;
		private UIDynamicTextField minNameLabel;
		private UIDynamicTextField prefixNameLabel;
		private UIDynamicTextField morphNameTextField;
		private UIDynamicTextField prefixTextField;
		private UIDynamicTextField groupNameTextField;
		private UIDynamicTextField regionNameTextField;
		private UIDynamicTextField maxTextField;
		private UIDynamicTextField minTextField;
		private UIDynamicTextField creatorTextField;
		private UIDynamicTextField pwTextField;
		private UIDynamicTextField creatorLabel;
		private UIDynamicTextField pwLabel;
		private UIDynamicTextField ltitle;
		private UIDynamicTextField rtitle;
		private UIDynamicTextField ltop;
		private UIDynamicTextField rtop;
		private UIDynamicTextField lend;
		private UIDynamicTextField rend;
		private bool findletter=true;
		private float lettertime=0f;
		private string inactive="";
		private string show="all";
        
		private InputField _maxInputField;
        private InputField _minInputField;
        private InputField _infoTextField;
        private InputField _morphNameInputField;
        private InputField _groupNameInputField;
        private InputField _regionNameInputField;
        private InputField _prefixNameInputField;
        private InputField _genitalNameInputField;
        private InputField _filterNameInputField;
        private InputField _creatorInputField;
        private InputField _pwInputField;
 	public UIDynamicButton[] morphinfo;
 	public UIDynamicSlider[] slider;

public GameObject createbox(Transform tr, float w=10, float h=10, float x=0, float y=0,float z=0, float r=1f, float g=1f,float b=1f,float a=1f,Color cc= new Color()){

GameObject aa=new GameObject("coco");
Image bb=aa.AddComponent<Image>();
bb.color=cc;
aa.transform.SetParent(tr, false);
scaler(aa.transform,w,h);
aa.transform.localPosition=new Vector3(x,y,z);

return aa;
}



 	private Slider mainSlider;
	private UIDynamicPopup menulabel;
					private string pers="Female Dummy,Female 1 (Base female),Female 2 (Victoria),Female 3 (Olympia),Female 4 (Anna),Female 5 (Stephanie),Female 6 (Gia),Female 7 (Norma),Female 8 (Nyssa),Female 9 (Kori),Female 10 (Danika),Female 11 (Adrianna),Female 12 (Vianne),"+
					"Female 13 (Monique),Female 14 (Mei Lin),Female 15 (Izarra),Female 16 (Lilith),Female 17 (Lorraine),Candy (by Ren),Evey (by Ren),Janie (by Ren),Kayla (by Ren),Lexi (by Ren),Maria (by Ren),"+
					"Mia (by Ren),Simone (by Ren),Tara (by Ren),Tina (by Ren),Candy (by Ren),Female Custom,Male Dummy,Male 1 (Michael),Male 2 (Hector),Male 3 (Darius),Male 4 (Base Male),Male 5 (Taric),Male 6 (Ryze),"+
					"Male 7 (Jeremy),Male 8 (Lee),Male 9 (Scott),Lee (by Jackaroo),Julian (by Jackaroo),Male Custom (by Jackaroo),Futa Kayla (by Weeb),Futa Lexi (by Weeb),Futa Maria (by Weeb),Futa Mia (by Weeb),Futa Simone (by Weeb)";

	private string[] hudnames=
("AutoLayoutArea/ButtonMainMenu/,"+
"AutoLayoutArea/ButtonOpenScene/,"+
"AutoLayoutArea/ButtonOpenSceneFullDialog/,"+
"AutoLayoutArea/ButtonSaveScene/,"+
"AutoLayoutArea/ButtonOnlineBrowse/,"+
"AutoLayoutArea/ButtonOpenPackageManager/,"+
"AutoLayoutArea/ButtonOpenErrorLog/,"+
"AutoLayoutArea/ButtonPossessAndAlignHead/,"+
"AutoLayoutArea/ButtonToggleMotionControllerModels/,"+
"AutoLayoutArea/ButtonToggleMotionControllerCollision/,"+
"AutoLayoutArea/ButtonBlank/,"+
"AutoLayoutArea/ButtonAddPersonAtom/,"+
"AutoLayoutArea/ButtonAddCustomUnityAssetAtom/,"+
"AutoLayoutArea/ButtonAddSubSceneAtom/,"+
"AutoLayoutArea/ButtonAddAtom/,"+
"AutoLayoutAreaBottom/ButtonTopMenu/,"+
"AutoLayoutAreaBottom/ButtonOpenSceneForEdit/,"+
"AutoLayoutAreaBottom/ButtonOpenTemplateForEdit/,"+
"AutoLayoutAreaBottom/ButtonScreenshotMode/,"+
"AutoLayoutAreaBottom/ButtonHubBrowse/,"+
"AutoLayoutAreaBottom/ButtonOpenPackageBuilder/,"+
"AutoLayoutAreaBottom/ButtonOpenMessageLog/,"+
"AutoLayoutAreaBottom/ButtonStopPossess/,"+
"AutoLayoutAreaBottom/ButtonToggleLeapHands/,"+
"AutoLayoutAreaBottom/ButtonResetPlayback/,"+
"AutoLayoutAreaBottom/ButtonStartPlayback/,"+
"AutoLayoutAreaBottom/ButtonInactiveTargetsOption/,"+
"AutoLayoutAreaBottom/ButtonInactiveTargetsOption/ButtonHideInactiveTargets/,"+
"AutoLayoutAreaBottom/ButtonSelect/,"+
"AutoLayoutAreaBottom/ButtonSelectPerson/,"+
"AutoLayoutAreaBottom/ButtonSelectedOptions").Split(","[0]);

	private string futalist="\nMichael 6 BodyFBMMichael6\n,\nMichael 6 HeadFHMMichael6\n,\nMVR_G2FemaleMVR_G2Female\n";
	private string futamake="\nMichael 6 BodyFBMMichael6\t0\tMichael 6 Body\nMVR_G2FemaleMVR_G2Female\t1\tMVR_G2Female\nMichael 6 HeadFHMMichael6\t0\tMichael 6 Head\nTestes_HeightPBMTestesHeight\t-0.5553855\tTestes_Height\nPenis WidthPBMPenisWidth\t0.6603601\tPenis Width\nPenis LengthPBMPenisLength\t3.816248\tPenis Length\nFlaccid / Erecterect01\t-0.1931644\tFlaccid / Erect\nFlaccid / Erect Adjusterect02\t-0.08621562\tFlaccid / Erect Adjust\nPenis Base Left / Rightpenisblr\t-0.01354005\tPenis Base Left / Right\nPenis Base Up / Downpenisbud\t0.4256641\tPenis Base Up / Down\nScrotum Back / Forwardscrfallb\t0.472156\tScrotum Back / Forward\nScrotum Pendulousscrpendo\t0.5553855\tScrotum Pendulous\nScrotum Taperscrtaper\t-1.140535\tScrotum Taper\nGl_Shortgl_short\t-3\tGl_Short\nGl_Slopegl_Slope\t-0.462935\tGl_Slope\nGl_Urethra_Opengl_ure_open\t0.5222046\tGl_Urethra_Open\nGl_Urethra_Scalegl_ure_scale\t1.173216\tGl_Urethra_Scale\nSc_Adheredsc_adhered\t-0.4695889\tSc_Adhered\nSc_Definesc_define\t1\tSc_Define\nSc_Depthsc_depth\t0.07299232\tSc_Depth\nSc_Flagsc_flag\t1.151404\tSc_Flag\nSc_Front_Backsc_front_back\t-1\tSc_Front_Back\nSc_Front_Bulgesc_front_bulge\t1\tSc_Front_Bulge\nSc_Globesc_globe\t0.1007538\tSc_Globe\nSc_Smallsc_small\t-0.04664671\tSc_Small\nSc_Smooth_Backsc_smooth_back\t1.17272\tSc_Smooth_Back\nSc_Twistsc_twist\t0.4859865\tSc_Twist\nSc_Widthsc_width\t-0.1036114\tSc_Width\nSh_Flat_Topsh_flat_top\t-4\tSh_Flat_Top\nSh_Girth_Basesh_girt_base\t1\tSh_Girth_Base\nSh_Heightsh_heig\t1.8\tSh_Height\nSh_Lengthsh_len\t1\tSh_Length\nSh_TaperSh_Taper\t-1\tSh_Taper\nGlans_MushroomMushroom\t0.5007697\tGlans_Mushroom\nGlans-Shaft_SplitGlans-Shaft_Split\t1\tGlans-Shaft_Split\nShaft WrinklesShaft Wrinkles\t1\tShaft Wrinkles\nShaft_BalloonShaft_Balloon\t1.020686\tShaft_Balloon\nShaft_Base ThickShaft_Base Thick\t0.1853014\tShaft_Base Thick\nShaft_SpongiosumShaft_Spongiosum\t0.1572437\tShaft_Spongiosum\nShaft_Spongiosum-WideShaft_Spongiosum-Wide\t1.619578\tShaft_Spongiosum-Wide\nTestes_ShaftSkinTestes_ShaftSkin\t0.1596903\tTestes_ShaftSkin";
	private string femalemake="\nAreola DepthAreola Depth\t0.469293\tAreola Depth\nAreola SizeAreola Size\t0.3722373\tAreola Size\nAreola UpDown LeftL Areola UpDown\t-1.101868\tAreola UpDown Left\nAreola UpDown RightR Areola UpDown\t-0.7090777\tAreola UpDown Right\nAreolae DiameterPBMAreolaeDiameter\t0.469293\tAreolae Diameter\nAreolae PerkPBMAreolaePerk\t0.2237991\tAreolae Perk\nArmpit CurveArmpit Curve\t-0.105\tArmpit Curve\nBellySideSmoothBellySideSmooth\t-0.414485\tBellySideSmooth\nBody SizeFBMBodySize\t-0.02055298\tBody Size\nBody ToneFBMBodyTone\t0.6165894\tBody Tone\nBreast Diameter!Breast Diameter\t0.4304707\tBreast Diameter\nBreast HeightBreast Height\t-1.00367\tBreast Height\nBreast Height LeftL Height\t0.5183917\tBreast Height Left\nBreast Height Lower!Breast Height Bottom\t-0.04338961\tBreast Height Lower\nBreast Height RightR Height\t0.1747003\tBreast Height Right\nBreast Height Upper!Breast Height Top\t0.469293\tBreast Height Upper\nBreast Height1 LeftL Height1\t0.5183917\tBreast Height1 Left\nBreast Height1 RightR Height1\t0.1747003\tBreast Height1 Right\nBreast Pointed!Breast Pointed\t0.6302913\tBreast Pointed\nBreast Rotate Up LeftL Rotate Up\t-0.2180899\tBreast Rotate Up Left\nBreast Rotate X Out LeftL Rotate X Out\t0.04453145\tBreast Rotate X Out Left\nBreast Rotate X Out RightR Rotate X Out\t0.04453145\tBreast Rotate X Out Right\nBreast RoundBreast Round\t-0.3642444\tBreast Round\nBreast Sag1!Breast Sag\t0.469293\tBreast Sag1\nBreast Sag2!Breast Sag2\t0.09020474\tBreast Sag2\nBreast Top Curve1!Breast Slope\t-0.1198924\tBreast Top Curve1\nBreast Top Curve2!Breast Top Curve2\t0.4201942\tBreast Top Curve2\nBreast Under Smoother1!Breast Under Smoother1\t-0.7444745\tBreast Under Smoother1\nBreast Under Smoother2!Breast Under Smoother2\t-0.07193542\tBreast Under Smoother2\nBreast Width LeftL Width\t0.400783\tBreast Width Left\nBreast Width RightR Width\t0.469293\tBreast Width Right\nBreasts CleavagePBMBreastsCleavage\t-0.1198924\tBreasts Cleavage\nBreasts Rotate S2S Op2 Rotate Side2Side Op\t-0.04453145\tBreasts Rotate S2S Op\nBreasts Shape 07PBMBreastsShape07\t0.08449557\tBreasts Shape 07\nBreasts Shape 08PBMBreastsShape08\t0.1267434\tBreasts Shape 08\nBreasts Shift S2S RightL Shift S2S\t-0.163282\tBreasts Shift S2S Right\nBreasts SizePBMBreastsSize\t0.3356986\tBreasts Size\nBreasts TogetherApart!TogetherApart\t-0.1689911\tBreasts TogetherApart\nBreastsCreaseBreastsCrease\t-0.1689911\tBreastsCrease\nCenter Gap DepthCenter Gap Depth\t0.3219966\tCenter Gap Depth\nCenter Gap NarrowWide!Centre Gap\t-0.062\tCenter Gap NarrowWide\nCenter Gap SmoothCenter Gap Smooth\t-0.414485\tCenter Gap Smooth\nCenter Gap UpDownCenter Gap UpDown\t-0.5617813\tCenter Gap UpDown\nCentre Gap WideCentre Gap Wide\t0.062\tCentre Gap Wide\nChest SmootherChest Smoother\t0.2237991\tChest Smoother\nChestSeparateBreastsChestSeparateBreasts\t0.2728978\tChestSeparateBreasts\nChestShapeChestShape\t0.02740397\tChestShape\nChestSmoothCenterChestSmoothCenter\t0.8620832\tChestSmoothCenter\nChestUpChestUp\t0.2237991\tChestUp\nChestUpperNarrowChestUpperNarrow\t0.4201942\tChestUpperNarrow\nForearms SizePBMForearmsSize\t0.02400001\tForearms Size\nHip Bend SmootherBend H Smoother\t-0.7581764\tHip Bend Smoother\nHip Bone CrestPBMHipBoneCrest\t-0.842672\tHip Bone Crest\nHip Bone SizePBMHipBoneSize\t0.2728978\tHip Bone Size\nHip SizePBMHipSize\t0.07650276\tHip Size\nHips HighHips High\t0.1256015\tHips High\nHipShape1HipShape1\t0.665688\tHipShape1\nHipSmallHipSmall\t1.79496\tHipSmall\nHipSmoothHipSmooth\t0.6588371\tHipSmooth\nHipSoftenCurvesHipSoftenCurves\t-0.6108802\tHipSoftenCurves\nHipThighYoungHipThighYoung\t-0.5126826\tHipThighYoung\nInner Thigh GapInner Thigh Gap\t0.4201942\tInner Thigh Gap\nLegs LengthPBMLegsLength\t0.02912642\tLegs Length\nLegShape1LegShape1\t0.5830002\tLegShape1\nLegShape2LegShape2\t0.02400001\tLegShape2\nLove HandlesPBMLoveHandles\t0.3070002\tLove Handles\nNipple DiameterNipple Diameter\t0.5674905\tNipple Diameter\nNipple LengthNipple Length\t0.911182\tNipple Length\nNipple SizeNipple Size (fixed)\t-0.2180899\tNipple Size\nNipplesPBMNipples\t-0.00570916\tNipples\nNipples ApplyNipples Apply\t0.8129844\tNipples Apply\nNipples DepthPBMNipplesDepth\t-0.1187505\tNipples Depth\nNipples DiameterPBMNipplesDiameter\t0.3722373\tNipples Diameter\nNipples SizePBMNipplesVolume\t0.1747003\tNipples Size\nThigh Bone SizeThigh Bone Size\t0.07650276\tThigh Bone Size\nThigh Upper Gapthighuppergap\t-0.4989806\tThigh Upper Gap\nThighs SizePBMThighsSize\t0.399\tThighs Size\nThighs TonePBMThighsTone\t1.514069\tThighs Tone\nThighShapeThighShape\t0.02740397\tThighShape\nThighStraightThighStraight\t0.299\tThighStraight\nUpper Arms SizePBMUpperArmsSize\t0.1110001\tUpper Arms Size\nVoluptuousFBMVoluptuous\t0.661\tVoluptuous\nWaistBellyInOutWaistBellyIn\t1.579154\tWaistBellyInOut\nWaistHipDefineWaistHipDefine\t1.219477\tWaistHipDefine";
	private string femalemake2="\nAbdomenCreaseSmoothAbdomenCreaseSmooth\t0.002\tAbdomenCreaseSmooth\nAbdomenSmoothAbdomenSmooth\t0.002\tAbdomenSmooth\nAbs MuscleAbs Muscle\t0.002\tAbs Muscle\nAbsUpperLessAbsUpperLess\t0.002\tAbsUpperLess\nAreola DepthAreola Depth\t0.3722346\tAreola Depth\nAreola SizeAreola Size\t0.2952518\tAreola Size\nAreola UpDown LeftL Areola UpDown\t-0.8739815\tAreola UpDown Left\nAreola UpDown RightR Areola UpDown\t-0.5624275\tAreola UpDown Right\nAreolae DiameterPBMAreolaeDiameter\t0.3722346\tAreolae Diameter\nAreolae PerkPBMAreolaePerk\t0.1775133\tAreolae Perk\nArmpit CurveArmpit Curve\t-0.08328407\tArmpit Curve\nBellySideSmoothBellySideSmooth\t-0.3287619\tBellySideSmooth\nBody SizeFBMBodySize\t-0.01630225\tBody Size\nBody ToneFBMBodyTone\t0.4890674\tBody Tone\nBodybuilder DetailsFBMBodybuilderDetails\t0.041\tBodybuilder Details\nBodybuilder SizeFBMBodybuilder\t0.042\tBodybuilder Size\nBreast Diameter!Breast Diameter\t0.4208856\tBreast Diameter\nBreast HeightBreast Height\t0.33\tBreast Height\nBreast Height LeftL Height\t0.4111788\tBreast Height Left\nBreast Height Lower!Breast Height Bottom\t-0.04242347\tBreast Height Lower\nBreast Height RightR Height\t0.1385691\tBreast Height Right\nBreast Height Upper!Breast Height Top\t0.4588435\tBreast Height Upper\nBreast Height1 LeftL Height1\t0.4111788\tBreast Height1 Left\nBreast Height1 RightR Height1\t0.1385691\tBreast Height1 Right\nBreast Pointed!Breast Pointed\t1.201\tBreast Pointed\nBreast Rotate Up LeftL Rotate Up\t-0.1729849\tBreast Rotate Up Left\nBreast Rotate X Out LeftL Rotate X Out\t0.269\tBreast Rotate X Out Left\nBreast Rotate X Out RightR Rotate X Out\t0.269\tBreast Rotate X Out Right\nBreast RoundBreast Round\t0.398\tBreast Round\nBreast Sag1!Breast Sag\t0.252\tBreast Sag1\nBreast Sag2!Breast Sag2\t-0.007\tBreast Sag2\nBreast Top Curve1!Breast Slope\t-0.265\tBreast Top Curve1\nBreast Top Curve2!Breast Top Curve2\t0.4108379\tBreast Top Curve2\nBreast Under Smoother1!Breast Under Smoother1\t-0.7278976\tBreast Under Smoother1\nBreast Under Smoother2!Breast Under Smoother2\t-0.07033367\tBreast Under Smoother2\nBreast Width LeftL Width\t0.3178937\tBreast Width Left\nBreast Width RightR Width\t0.3722346\tBreast Width Right\nBreasts CleavagePBMBreastsCleavage\t0.165\tBreasts Cleavage\nBreasts Rotate S2S Op2 Rotate Side2Side Op\t-0.269\tBreasts Rotate S2S Op\nBreasts Shape 07PBMBreastsShape07\t0.08261414\tBreasts Shape 07\nBreasts Shape 08PBMBreastsShape08\t0.1239213\tBreasts Shape 08\nBreasts Shift S2S RightL Shift S2S\t-0.1295123\tBreasts Shift S2S Right\nBreasts SizePBMBreastsSize\t0.36\tBreasts Size\nBreasts TogetherApart!TogetherApart\t-0.024\tBreasts TogetherApart\nBreastsCreaseBreastsCrease\t0.074\tBreastsCrease\nBrow DefineCTRLBrowDefine\t0.002\tBrow Define\nBrow Define LeftPHMBrowDefineL\t0.002\tBrow Define Left\nBrow Define RightPHMBrowDefineR\t0.002\tBrow Define Right\nBrow DepthCTRLBrowDepth\t0.002\tBrow Depth\nBrow Depth LeftPHMBrowDepthL\t0.002\tBrow Depth Left\nBrow Depth RightPHMBrowDepthR\t0.002\tBrow Depth Right\nBrow Down LeftPHMBrowDownL\t0.002\tBrow Down Left\nBrow Down RightPHMBrowDownR\t0.002\tBrow Down Right\nBrow HeightBrow Height\t0.002\tBrow Height\nBrow Inner HeightBrow Inner Height\t0.002\tBrow Inner Height\nBrow Inner Up LeftPHMBrowInnerUpL\t0.002\tBrow Inner Up Left\nBrow Inner Up RightPHMBrowInnerUpR\t0.002\tBrow Inner Up Right\nBrow Inner WidthBrow Inner Width\t0.002\tBrow Inner Width\nBrow Outer DepthBrow Outer Depth\t0.002\tBrow Outer Depth\nBrow Outer Down LeftPHMBrowOuterDownL\t0.002\tBrow Outer Down Left\nBrow Outer Down RightPHMBrowOuterDownR\t0.002\tBrow Outer Down Right\nBrow Outer HeightBrow Outer Height\t0.002\tBrow Outer Height\nBrow Outer ShiftBrow Outer Shift\t0.002\tBrow Outer Shift\nBrow Outer WidthBrow Outer Width\t0.002\tBrow Outer Width\nBrow Shape InnerBrow Shape Inner\t0.002\tBrow Shape Inner\nBrow Shape MiddleBrow Arch\t0.002\tBrow Shape Middle\nBrow Shape OuterBrow Shape Outer\t0.002\tBrow Shape Outer\nBrow SqueezePHMBrowSqueeze\t0.002\tBrow Squeeze\nBrow Width LeftPHMBrowWidthL\t0.002\tBrow Width Left\nBrow Width RightPHMBrowWidthR\t0.002\tBrow Width Right\nBrowAreaSmoothBrowAreaSmooth\t0.002\tBrowAreaSmooth\nBrowAreaSmooth2BrowAreaSmooth2\t0.002\tBrowAreaSmooth2\nBrows ArchBrows Arch (B)\t0.002\tBrows Arch\nBrows SizeBrows Thickness. 2\t0.002\tBrows Size\nCenter Gap DepthCenter Gap Depth\t-0.108\tCenter Gap Depth\nCenter Gap NarrowWide!Centre Gap\t-0.04917726\tCenter Gap NarrowWide\nCenter Gap SmoothCenter Gap Smooth\t-0.263\tCenter Gap Smooth\nCenter Gap UpDownCenter Gap UpDown\t-0.247\tCenter Gap UpDown\nCentre Gap WideCentre Gap Wide\t0.04917726\tCentre Gap Wide\nCheek Bones Upper DepthCheek Bones Upper Depth\t0.002\tCheek Bones Upper Depth\nCheek Bones WidthPHMCheekBonesWidth\t0.002\tCheek Bones Width\nCheek Bones Width Middle Cheek Bones Width Middle \t0.002\tCheek Bones Width Middle \nCheek Bones Width OuterCheekBones  Width Outer\t0.002\tCheek Bones Width Outer\nCheek FlexCTRLCheekFlex\t0.002\tCheek Flex\nCheek Flex LeftPHMCheekFlexL\t0.002\tCheek Flex Left\nCheek Flex RightPHMCheekFlexR\t0.002\tCheek Flex Right\nCheek JowlCheek Jowl\t0.002\tCheek Jowl\nCheek Lower DepthCheek Lower Depth\t0.002\tCheek Lower Depth\nCheekHollowsCheekHollows\t0.002\tCheekHollows\nCheeks DefinePHMCheeksDefine\t0.002\tCheeks Define\nCheeks DepthCTRLCheeksDepth\t0.002\tCheeks Depth\nCheeks Depth LeftPHMCheeksDepthL\t0.002\tCheeks Depth Left\nCheeks Depth MiddleCheeks Depth Middle\t0.002\tCheeks Depth Middle\nCheeks Depth RightPHMCheeksDepthR\t0.002\tCheeks Depth Right\nCheeks Depth UpperCheeks Depth Upper\t0.002\tCheeks Depth Upper\nCheeks HeightCheeks Height\t0.002\tCheeks Height\nCheeks Sink LowerCheeks Sink Lower\t0.002\tCheeks Sink Lower\nCheeks Upper CreaseCheeks Upper Crease\t0.002\tCheeks Upper Crease\nCheekShape3CheekShape3\t0.002\tCheekShape3\nCheeksOutCheeksOut\t0.002\tCheeksOut\nCheeksPuffLowerCheeksPuffLower\t0.002\tCheeksPuffLower\nCheeksSmoothCheeksSmooth\t0.002\tCheeksSmooth\nChest SmootherChest Smoother\t0.287\tChest Smoother\nChestSeparateBreastsChestSeparateBreasts\t-0.009\tChestSeparateBreasts\nChestShapeChestShape\t0.137\tChestShape\nChestSmoothCenterChestSmoothCenter\t0.8428876\tChestSmoothCenter\nChestUpChestUp\t0.201\tChestUp\nChestUpperNarrowChestUpperNarrow\t0.264\tChestUpperNarrow\nChin CreasePHMChinCrease\t0.002\tChin Crease\nChin DepthPHMChinDepth\t0.002\tChin Depth\nChin HeightChin Height\t0.002\tChin Height\nChin RoundChin Round\t0.002\tChin Round\nChin SquareChin Square\t0.002\tChin Square\nChin Width 2Chin Width 2\t0.002\tChin Width 2\nChinOutRoundChinOutRound\t0.002\tChinOutRound\nChinShapeChinShape\t0.002\tChinShape\nChinWiderChinWider\t0.002\tChinWider\nCurvyLipsMouthCurves3\t0.002\tCurvyLips\nEye FoldEye Fold\t0.002\tEye Fold\nEye Shape Bottom MEye Shape Bottom M\t0.002\tEye Shape Bottom M\nEye Upper Shape MEye Upper Shape M\t0.002\tEye Upper Shape M\nEyeAreaSmoothEyeAreaSmooth\t0.002\tEyeAreaSmooth\nEyeAreaThinEyeAreaThin\t0.002\tEyeAreaThin\nEyelashes CurlPHMEyelashesCurl\t0.002\tEyelashes Curl\nEyelashes LengthPHMEyelashesLength\t0.002\tEyelashes Length\nEyelid Lower CreaseEyelid Lower Crease\t0.002\tEyelid Lower Crease\nEyelid Lower ShapeEyelid Lower Shape\t0.002\tEyelid Lower Shape\nEyelid Upper Inner ShapeEyelid Upper Inner Shape\t0.002\tEyelid Upper Inner Shape\nEyelid Upper Shape  OuterEyelid Upper Shape  Outer\t0.002\tEyelid Upper Shape  Outer\nEyelids Bottom DefinePHMEyelidsBottomDefine\t0.002\tEyelids Bottom Define\nEyelids Bottom In HeightPHMEyelidsBottomInHeight\t0.002\tEyelids Bottom In Height\nEyelids Bottom Out HeightPHMEyelidsBottomOutHeight\t0.002\tEyelids Bottom Out Height\nEyelids Fold DownPHMEyelidsFoldDown\t0.002\tEyelids Fold Down\nEyelids HeavyPHMEyelidsHeavy\t0.002\tEyelids Heavy\nEyelids Height Inner Eyelids Height Inner \t0.002\tEyelids Height Inner \nEyelids Lower HeightPHMEyelidsLowerHeight\t0.002\tEyelids Lower Height\nEyelids Lower PuffyEyelids Lower Puffy\t0.002\tEyelids Lower Puffy\nEyelids Shape 1Eyelids Shape 1\t0.002\tEyelids Shape 1\nEyelids Shape 2Eyelids Shape 2\t0.002\tEyelids Shape 2\nEyelids SmoothPHMEyelidsSmooth\t0.002\tEyelids Smooth\nEyelids Top Out HeightPHMEyelidsTopOutHeight\t0.002\tEyelids Top Out Height\nEyelids Upper SquareEyelids Upper Square\t0.002\tEyelids Upper Square\nEyeOutUpDownEyeCornerUpDown\t0.002\tEyeOutUpDown\nEyes AngleCTRLEyesAngle\t0.002\tEyes Angle\nEyes Angle LeftPHMEyesAngleL\t0.002\tEyes Angle Left\nEyes Angle RightPHMEyesAngleR\t0.002\tEyes Angle Right\nEyes BagsEyes Bags\t0.002\tEyes Bags\nEyes ClosedCTRLEyesClosed\t0.002\tEyes Closed\nEyes Closed LeftPHMEyesClosedL\t0.002\tEyes Closed Left\nEyes Closed RightPHMEyesClosedR\t0.002\tEyes Closed Right\nEyes DepthCTRLEyesDepth\t0.002\tEyes Depth\nEyes Depth LeftPHMEyesDepthL\t0.002\tEyes Depth Left\nEyes Depth RightPHMEyesDepthR\t0.002\tEyes Depth Right\nEyes HeightCTRLEyesHeight\t0.002\tEyes Height\nEyes Height BottomEyes Height Bottom\t0.002\tEyes Height Bottom\nEyes Height InnerPHMEyesHeightInner\t0.002\tEyes Height Inner\nEyes Height LeftPHMEyesHeightL\t0.002\tEyes Height Left\nEyes Height RightPHMEyesHeightR\t0.002\tEyes Height Right\nEyes Height UpperEyes Height Upper\t0.002\tEyes Height Upper\nEyes Inner  ShapeEyes Inner Shape\t0.002\tEyes Inner  Shape\nEyes Inner Corner WidthEyes Inner Corner Width\t0.002\tEyes Inner Corner Width\nEyes Inner DepthPHMEyesInnerDepth\t0.002\tEyes Inner Depth\nEyes Inner SquareEyes Inner Square\t0.002\tEyes Inner Square\nEyes OpenEyes Open\t0.002\tEyes Open\nEyes Puffy LowerPHMEyesPuffyLower\t0.002\tEyes Puffy Lower\nEyes Puffy OuterEyes Puffy Outer\t0.002\tEyes Puffy Outer\nEyes Puffy UpperPHMEyesPuffyUpper\t0.002\tEyes Puffy Upper\nEyes Puffy Upper Center Eyes Puffy Upper Center \t0.002\tEyes Puffy Upper Center \nEyes Round LowerEyes Round Lower\t0.002\tEyes Round Lower\nEyes Round UpperEyes Round Upper\t0.002\tEyes Round Upper\nEyes SizeCTRLEyesSize\t0.002\tEyes Size\nEyes Size LeftPHMEyesSizeL\t0.002\tEyes Size Left\nEyes Size RightPHMEyesSizeR\t0.002\tEyes Size Right\nEyes SquintCTRLEyesSquint\t0.002\tEyes Squint\nEyes Squint LeftPHMEyesSquintL\t0.002\tEyes Squint Left\nEyes Squint RightPHMEyesSquintR\t0.002\tEyes Squint Right\nEyes WidthCTRLEyesWidth\t0.002\tEyes Width\nEyes Width LeftPHMEyesWidthL\t0.002\tEyes Width Left\nEyes Width RightPHMEyesWidthR\t0.002\tEyes Width Right\nEyes WrinklePHMEyesWrinkle\t0.002\tEyes Wrinkle\nEyeShapeLargerEyeShapeLarger\t0.002\tEyeShapeLarger\nEyesNoseWidthFemaleProportion5\t0.002\tEyesNoseWidth\nForearms SizePBMForearmsSize\t0.01903637\tForearms Size\nHip Bend SmootherBend H Smoother\t-0.6013716\tHip Bend Smoother\nHip Bone CrestPBMHipBoneCrest\t-0.668392\tHip Bone Crest\nHip Bone SizePBMHipBoneSize\t0.2164575\tHip Bone Size\nHip SizePBMHipSize\t0.06068059\tHip Size\nHips HighHips High\t0.09962481\tHips High\nHipShape1HipShape1\t0.5280115\tHipShape1\nHipSmallHipSmall\t1.423729\tHipSmall\nHipSmoothHipSmooth\t0.5225775\tHipSmooth\nHipSoftenCurvesHipSoftenCurves\t-0.484539\tHipSoftenCurves\nHipThighYoungHipThighYoung\t-0.4066505\tHipThighYoung";
	private string keeplist="\nEyeballs DepthEyeballs Depth\t0.2\tEyeballs Depth\nEyes Cornea BulgePHMEyesCorneaBulge\t2.5\tEyes Cornea Bulge\nCornea DepthCornea Depth\t1.5\tCornea Depth\nEyes Iris CorrectionPHMEyesIrisCorrection\t0.423\tEyes Iris Correction\nEyes Iris SizePHMEyesIrisSize\t-0.191\tEyes Iris Size";
    private string jsondefault="{'atoms':[ {'id':'Person#3', 'on':'true', 'type':'Person', 'position':{'x':'0', 'y':'0', 'z':'0'}, 'rotation':{'x':'0', 'y':'0', 'z':'0'}, 'containerPosition':{'x':'0', 'y':'0', 'z':'0'}, 'containerRotation':{'x':'0', 'y':'0', 'z':'0'}, 'storables':[ {'id':'control', 'position':{'x':'0', 'y':'0', 'z':'0'}, 'rotation':{'x':'0', 'y':'0', 'z':'0'}}, {'id':'AllJointsControl', 'damperPercent':'0.7161335', 'maxVeloctiy':'0.4'}, {'id':'hipControl', 'maxVelocity':'0.4', 'holdPositionDamper':'71.61335', 'holdRotationSpring':'200', 'holdRotationDamper':'7.161335', 'positionState':'Off', 'rotationState':'Off', 'localPosition':{'x':'-0.0008088708', 'y':'1.059884', 'z':'-0.03316135'}, 'localRotation':{'x':'13.25012', 'y':'2.866879', 'z':'2.699068'}}, {'id':'pelvisControl', 'maxVelocity':'0.4', 'holdPositionDamper':'71.61335', 'holdRotationSpring':'200', 'holdRotationDamper':'7.161335', 'localPosition':{'x':'-0.0006635064', 'y':'1.073893', 'z':'-0.01110945'}, 'localRotation':{'x':'11.61397', 'y':'4.170731', 'z':'4.870293'}}, {'id':'chestControl', 'maxVelocity':'0.4', 'holdPositionDamper':'71.61335', 'holdRotationSpring':'200', 'holdRotationDamper':'7.161335', 'localPosition':{'x':'-0.001668006', 'y':'1.405398', 'z':'-0.05103266'}, 'localRotation':{'x':'355.2745', 'y':'4.700556', 'z':'10.06317'}}, {'id':'headControl', 'maxVelocity':'0.4', 'holdPositionDamper':'71.61335', 'holdRotationSpring':'200', 'holdRotationDamper':'7.161335', 'positionState':'Comply', 'rotationState':'Comply', 'localPosition':{'x':'0.002689864', 'y':'1.623852', 'z':'-0.05088842'}, 'localRotation':{'x':'7.946047', 'y':'0.7509114', 'z':'357.3067'}}, {'id':'rHandControl', 'maxVelocity':'0.4', 'holdPositionDamper':'71.61335', 'holdRotationSpring':'200', 'holdRotationDamper':'7.161335', 'positionState':'ParentLink', 'rotationState':'ParentLink', 'localPosition':{'x':'0.634331', 'y':'1.40577', 'z':'0.04380111'}, 'localRotation':{'x':'333.8909', 'y':'286.5867', 'z':'67.95502'}, 'linkTo':'Person#3:lHand'}, {'id':'lHandControl', 'maxVelocity':'0.4', 'holdPositionDamper':'71.61335', 'holdPositionMaxForce':'505.455', 'holdRotationSpring':'200', 'holdRotationDamper':'7.161335', 'positionState':'ParentLink', 'rotationState':'ParentLink', 'localPosition':{'x':'-0.4900793', 'y':'1.484115', 'z':'0.1133702'}, 'localRotation':{'x':'357.5788', 'y':'9.951364', 'z':'307.2952'}, 'linkTo':'Person#3:headControl'}, {'id':'rFootControl', 'maxVelocity':'0.4', 'holdPositionDamper':'71.61335', 'holdRotationSpring':'200', 'holdRotationDamper':'7.161335', 'positionState':'Off', 'localPosition':{'x':'0.2330921', 'y':'0.06285328', 'z':'-0.07196264'}, 'localRotation':{'x':'21.61302', 'y':'7.14707', 'z':'2.642837'}}, {'id':'lFootControl', 'maxVelocity':'0.4', 'holdPositionDamper':'71.61335', 'holdRotationSpring':'200', 'holdRotationDamper':'7.161335', 'positionState':'Off', 'localPosition':{'x':'-0.25102', 'y':'0.04255855', 'z':'-0.03514924'}, 'localRotation':{'x':'21.07845', 'y':'357.6118', 'z':'2.661656'}}, {'id':'neckControl', 'maxVelocity':'0.4', 'holdPositionDamper':'71.61335', 'holdRotationSpring':'200', 'holdRotationDamper':'7.161335', 'localPosition':{'x':'0.01511047', 'y':'1.548963', 'z':'-0.08467643'}, 'localRotation':{'x':'19.9514', 'y':'0.6866649', 'z':'1.976701'}}, {'id':'eyeTargetControl', 'mass':'0.01', 'localPosition':{'x':'0', 'y':'1.7', 'z':'1'}, 'localRotation':{'x':'0', 'y':'0', 'z':'0'}}, {'id':'rNippleControl', 'localPosition':{'x':'0.1695985', 'y':'1.346227', 'z':'0.1766468'}, 'localRotation':{'x':'15.55805', 'y':'212.5147', 'z':'16.32718'}}, {'id':'lNippleControl', 'localPosition':{'x':'-0.1238533', 'y':'1.35601', 'z':'0.1895789'}, 'localRotation':{'x':'17.03204', 'y':'153.5931', 'z':'347.0038'}}, {'id':'testesControl', 'localPosition':{'x':'-0.04570609', 'y':'0.8498101', 'z':'-0.1075318'}, 'localRotation':{'x':'2.203644', 'y':'8.294543', 'z':'0.1186595'}}, {'id':'penisBaseControl', 'localPosition':{'x':'-0.04319175', 'y':'0.8680677', 'z':'-0.08580445'}, 'localRotation':{'x':'40.04436', 'y':'10.18131', 'z':'2.16961'}}, {'id':'penisMidControl', 'localPosition':{'x':'-0.03098018', 'y':'0.8101541', 'z':'-0.01770011'}, 'localRotation':{'x':'52.79034', 'y':'10.81693', 'z':'2.623673'}}, {'id':'penisTipControl', 'localPosition':{'x':'-0.01938401', 'y':'0.729652', 'z':'0.04316582'}, 'localRotation':{'x':'61.37014', 'y':'11.59633', 'z':'3.274715'}}, {'id':'rElbowControl', 'maxVelocity':'0.4', 'holdPositionDamper':'71.61335', 'holdRotationSpring':'200', 'holdRotationDamper':'7.161335', 'localPosition':{'x':'0.4277561', 'y':'1.384529', 'z':'-0.08448105'}, 'localRotation':{'x':'321.9639', 'y':'323.7628', 'z':'4.702003'}}, {'id':'lElbowControl', 'maxVelocity':'0.4', 'holdPositionDamper':'71.61335', 'holdRotationSpring':'200', 'holdRotationDamper':'7.161335', 'localPosition':{'x':'-0.3917586', 'y':'1.391518', 'z':'-0.07032631'}, 'localRotation':{'x':'10.08775', 'y':'54.7868', 'z':'339.3112'}}, {'id':'rKneeControl', 'maxVelocity':'0.4', 'holdPositionDamper':'71.61335', 'holdRotationSpring':'200', 'holdRotationDamper':'7.161335', 'localPosition':{'x':'0.1841811', 'y':'0.5420299', 'z':'0.01811976'}, 'localRotation':{'x':'10.79057', 'y':'0.5551878', 'z':'5.457022'}}, {'id':'lKneeControl', 'maxVelocity':'0.4', 'holdPositionDamper':'71.61335', 'holdRotationSpring':'200', 'holdRotationDamper':'7.161335', 'localPosition':{'x':'-0.1713241', 'y':'0.5246292', 'z':'0.008372772'}, 'localRotation':{'x':'5.700315', 'y':'2.191669', 'z':'351.2272'}}, {'id':'rToeControl', 'maxVelocity':'0.4', 'holdPositionDamper':'71.61335', 'holdRotationSpring':'200', 'holdRotationDamper':'7.161335', 'positionState':'Lock', 'localPosition':{'x':'0.2547944', 'y':'0.01329803', 'z':'0.04088446'}, 'localRotation':{'x':'17.27792', 'y':'9.262081', 'z':'4.943774'}}, {'id':'lToeControl', 'maxVelocity':'0.4', 'holdPositionDamper':'71.61335', 'holdRotationSpring':'200', 'holdRotationDamper':'7.161335', 'positionState':'Lock', 'localPosition':{'x':'-0.2695802', 'y':'-0.01613331', 'z':'0.07755238'}, 'localRotation':{'x':'18.19821', 'y':'352.6075', 'z':'355.135'}}, {'id':'abdomenControl', 'maxVelocity':'0.4', 'holdPositionDamper':'71.61335', 'holdRotationSpring':'200', 'holdRotationDamper':'7.161335', 'localPosition':{'x':'-0.001100326', 'y':'1.052567', 'z':'-0.0505286'}, 'localRotation':{'x':'5.941764', 'y':'2.548222', 'z':'358.1411'}}, {'id':'abdomen2Control', 'maxVelocity':'0.4', 'holdPositionDamper':'71.61335', 'holdRotationSpring':'200', 'holdRotationDamper':'7.161335', 'localPosition':{'x':'0.002887123', 'y':'1.149067', 'z':'-0.03225283'}, 'localRotation':{'x':'349.2809', 'y':'2.950936', 'z':'356.5873'}}, {'id':'rThighControl', 'maxVelocity':'0.4', 'holdPositionDamper':'71.61335', 'holdRotationSpring':'200', 'holdRotationDamper':'7.161335', 'localPosition':{'x':'0.08998312', 'y':'0.9875927', 'z':'-0.04991657'}, 'localRotation':{'x':'351.0974', 'y':'3.731816', 'z':'12.22267'}}, {'id':'lThighControl', 'maxVelocity':'0.4', 'holdPositionDamper':'71.61335', 'holdRotationSpring':'200', 'holdRotationDamper':'7.161335', 'localPosition':{'x':'-0.07955218', 'y':'0.973197', 'z':'-0.04045186'}, 'localRotation':{'x':'354.3391', 'y':'0.1022874', 'z':'347.4858'}}, {'id':'rArmControl', 'maxVelocity':'0.4', 'holdPositionDamper':'71.61335', 'holdRotationSpring':'200', 'holdRotationDamper':'7.161335', 'localPosition':{'x':'0.1537589', 'y':'1.496556', 'z':'-0.0908509'}, 'localRotation':{'x':'333.6152', 'y':'10.91767', 'z':'334.9412'}}, {'id':'lArmControl', 'maxVelocity':'0.4', 'holdPositionDamper':'71.61335', 'holdRotationSpring':'200', 'holdRotationDamper':'7.161335', 'localPosition':{'x':'-0.120588', 'y':'1.507461', 'z':'-0.08856237'}, 'localRotation':{'x':'330.9879', 'y':'349.6292', 'z':'26.74356'}}, {'id':'rShoulderControl', 'maxVelocity':'0.4', 'holdPositionDamper':'71.61335', 'holdRotationSpring':'200', 'holdRotationDamper':'7.161335', 'localPosition':{'x':'0.03168556', 'y':'1.486004', 'z':'-0.03722347'}, 'localRotation':{'x':'339.9458', 'y':'16.61913', 'z':'20.88602'}}, {'id':'lShoulderControl', 'maxVelocity':'0.4', 'holdPositionDamper':'71.61335', 'holdRotationSpring':'200', 'holdRotationDamper':'7.161335', 'localPosition':{'x':'-0.00028058', 'y':'1.486745', 'z':'-0.03589701'}, 'localRotation':{'x':'338.9427', 'y':'345.5782', 'z':'334.3567'}}, {'id':'hairTool1Control', 'mass':'0.01', 'position':{'x':'1.058828', 'y':'1.983839', 'z':'-0.07488596'}, 'rotation':{'x':'0', 'y':'11.70771', 'z':'0'}}, {'id':'hairTool1UIControl', 'mass':'0.01', 'position':{'x':'1.058828', 'y':'2.133839', 'z':'-0.07488591'}, 'rotation':{'x':'0', 'y':'11.70771', 'z':'0'}}, {'id':'hairTool2Control', 'mass':'0.01', 'position':{'x':'0.303868', 'y':'1.979839', 'z':'0.08156465'}, 'rotation':{'x':'0', 'y':'11.70771', 'z':'0'}}, {'id':'hairTool2UIControl', 'mass':'0.01', 'position':{'x':'0.303868', 'y':'2.129839', 'z':'0.08156461'}, 'rotation':{'x':'0', 'y':'11.70771', 'z':'0'}}, {'id':'hairTool3Control', 'mass':'0.01', 'position':{'x':'1.151851', 'y':'1.955839', 'z':'-0.09416327'}, 'rotation':{'x':'0', 'y':'11.70771', 'z':'0'}}, {'id':'hairTool3UIControl', 'mass':'0.01', 'position':{'x':'1.387837', 'y':'2.075839', 'z':'-0.1430667'}, 'rotation':{'x':'0', 'y':'11.70771', 'z':'0'}}, {'id':'hairTool4Control', 'mass':'0.01', 'position':{'x':'0.2196572', 'y':'1.937839', 'z':'0.09901568'}, 'rotation':{'x':'0', 'y':'11.70771', 'z':'0'}}, {'id':'hairTool4UIControl', 'mass':'0.01', 'position':{'x':'-0.005557775', 'y':'2.056839', 'z':'0.145687'}, 'rotation':{'x':'0', 'y':'11.70771', 'z':'0'}}, {'id':'hairScalpMaskToolControl', 'mass':'0.01', 'position':{'x':'1.043161', 'y':'2.180839', 'z':'-0.07163925'}, 'rotation':{'x':'0', 'y':'11.70771', 'z':'0'}}, {'id':'hairScalpMaskToolUIControl', 'mass':'0.01', 'position':{'x':'1.043161', 'y':'2.330839', 'z':'-0.07163921'}, 'rotation':{'x':'0', 'y':'11.70771', 'z':'0'}}, {'id':'PluginManager', 'plugins':{}}, {'id':'PhysicsModel', 'dynamicFriction':'1', 'staticFriction':'1', 'frictionCombine':'Maximum', 'bounceCombine':'Minimum'}, {'id':'hip', 'relativeRootPosition':{'x':'-1.220137E-09', 'y':'4.349195E-11', 'z':'-5.950958E-11'}, 'relativeRootRotation':{'x':'-8.537737E-07', 'y':'-6.403303E-07', 'z':'1.86763E-06'}, 'rootPosition':{'x':'-0.000808872', 'y':'1.059884', 'z':'-0.03316135'}, 'rootRotation':{'x':'13.25012', 'y':'2.866879', 'z':'2.69907'}}, {'id':'pelvis', 'position':{'x':'-7.676266E-05', 'y':'0.01871047', 'z':'0.01823409'}, 'rotation':{'x':'358.4292', 'y':'1.353146', 'z':'1.871941'}}, {'id':'LabiaTrigger', 'trigger':{'displayName':'LabiaTrigger', 'startActions':[  ], 'transitionActions':[  ], 'endActions':[  ]}}, {'id':'VaginaTrigger', 'trigger':{'displayName':'VaginaTrigger', 'startActions':[  ], 'transitionActions':[  ], 'endActions':[  ]}}, {'id':'DeepVaginaTrigger', 'trigger':{'displayName':'DeepVaginaTrigger', 'startActions':[  ], 'transitionActions':[  ], 'endActions':[  ]}}, {'id':'DeeperVaginaTrigger', 'trigger':{'displayName':'DeeperVaginaTrigger', 'startActions':[  ], 'transitionActions':[  ], 'endActions':[  ]}}, {'id':'Testes', 'position':{'x':'-2.156943E-06', 'y':'-0.197807', 'z':'0.05725057'}, 'rotation':{'x':'353.5928', 'y':'0.3677422', 'z':'358.5388'}}, {'id':'rThigh', 'position':{'x':'0.08516657', 'y':'-0.09858508', 'z':'-0.0140805'}, 'rotation':{'x':'339.5219', 'y':'1.35878', 'z':'7.117479'}}, {'id':'rShin', 'position':{'x':'-0.008080028', 'y':'-0.4603756', 'z':'0.004177764'}, 'rotation':{'x':'18.51739', 'y':'352.4557', 'z':'352.0559'}}, {'id':'rFoot', 'position':{'x':'0.003197044', 'y':'-0.4900045', 'z':'0.001691416'}, 'rotation':{'x':'11.51048', 'y':'7.160507', 'z':'358.4574'}}, {'id':'rToe', 'position':{'x':'0.002742675', 'y':'-0.005711729', 'z':'0.1256561'}, 'rotation':{'x':'355.8466', 'y':'0.428829', 'z':'359.3028'}}, {'id':'rBigToe', 'position':{'x':'-0.03143124', 'y':'0.007205477', 'z':'0.01192249'}, 'rotation':{'x':'4.607688', 'y':'4.361084', 'z':'355.2978'}}, {'id':'rSmallToe1', 'position':{'x':'-0.008758711', 'y':'0.008575061', 'z':'0.01666845'}, 'rotation':{'x':'9.232292', 'y':'3.293358', 'z':'354.8642'}}, {'id':'rSmallToe2', 'position':{'x':'0.006965304', 'y':'0.007122042', 'z':'0.01711722'}, 'rotation':{'x':'13.32828', 'y':'1.320875', 'z':'356.0946'}}, {'id':'rSmallToe3', 'position':{'x':'0.0180383', 'y':'0.00213108', 'z':'0.01371253'}, 'rotation':{'x':'15.20875', 'y':'359.6866', 'z':'352.3314'}}, {'id':'rSmallToe4', 'position':{'x':'0.03407056', 'y':'-0.003044258', 'z':'0.009943674'}, 'rotation':{'x':'17.58336', 'y':'356.6931', 'z':'350.0995'}}, {'id':'LGlute', 'position':{'x':'-0.0599984', 'y':'-0.1477802', 'z':'4.91878E-06'}, 'rotation':{'x':'9.994041', 'y':'-0.0003542909', 'z':'0.01913657'}}, {'id':'Gen1', 'position':{'x':'-9.778887E-07', 'y':'-0.1764717', 'z':'0.0761328'}, 'rotation':{'x':'31.46873', 'y':'0.9240941', 'z':'-0.001420005'}}, {'id':'Gen2', 'position':{'x':'-1.216156E-05', 'y':'0.000181742', 'z':'0.09022975'}, 'rotation':{'x':'12.753', 'y':'359.9031', 'z':'359.9799'}}, {'id':'Gen3', 'position':{'x':'-2.136323E-06', 'y':'0.0006672088', 'z':'0.1015886'}, 'rotation':{'x':'8.589531', 'y':'359.9815', 'z':'359.9936'}}, {'id':'RGlute', 'position':{'x':'0.06000244', 'y':'-0.1477795', 'z':'1.447275E-05'}, 'rotation':{'x':'9.974426', 'y':'359.9939', 'z':'359.9381'}}, {'id':'lThigh', 'position':{'x':'-0.08524172', 'y':'-0.09880107', 'z':'-0.01401367'}, 'rotation':{'x':'342.4598', 'y':'357.2842', 'z':'343.2483'}}, {'id':'lShin', 'position':{'x':'0.008085787', 'y':'-0.4603653', 'z':'0.004176602'}, 'rotation':{'x':'10.62549', 'y':'4.556911', 'z':'4.164619'}}, {'id':'lFoot', 'position':{'x':'-0.003195278', 'y':'-0.4905356', 'z':'0.001573958'}, 'rotation':{'x':'18.31767', 'y':'353.8091', 'z':'5.371694'}}, {'id':'lToe', 'position':{'x':'-0.002874875', 'y':'-0.007478915', 'z':'0.1265314'}, 'rotation':{'x':'355.4505', 'y':'359.3589', 'z':'359.9799'}}, {'id':'lBigToe', 'position':{'x':'0.03163201', 'y':'0.008689579', 'z':'0.01117622'}, 'rotation':{'x':'4.634161', 'y':'355.5882', 'z':'4.605841'}}, {'id':'lSmallToe1', 'position':{'x':'0.008926887', 'y':'0.009967191', 'z':'0.01596512'}, 'rotation':{'x':'9.315592', 'y':'356.6075', 'z':'4.430541'}}, {'id':'lSmallToe2', 'position':{'x':'-0.006823967', 'y':'0.008419501', 'z':'0.01646197'}, 'rotation':{'x':'13.46783', 'y':'358.6531', 'z':'4.277006'}}, {'id':'lSmallToe3', 'position':{'x':'-0.01793661', 'y':'0.003341644', 'z':'0.01308023'}, 'rotation':{'x':'15.43956', 'y':'0.1058553', 'z':'6.675287'}}, {'id':'lSmallToe4', 'position':{'x':'-0.03397755', 'y':'-0.001913598', 'z':'0.009358373'}, 'rotation':{'x':'17.66903', 'y':'3.395159', 'z':'10.67513'}}, {'id':'abdomen', 'position':{'x':'5.413697E-05', 'y':'-0.01111625', 'z':'-0.01522083'}, 'rotation':{'x':'352.685', 'y':'0.02683695', 'z':'355.4935'}}, {'id':'abdomen2', 'position':{'x':'-6.157439E-06', 'y':'0.09794129', 'z':'0.008346493'}, 'rotation':{'x':'343.335', 'y':'359.8566', 'z':'358.4843'}}, {'id':'chest', 'position':{'x':'8.303532E-05', 'y':'0.1329737', 'z':'0.006284807'}, 'rotation':{'x':'5.267899', 'y':'359.9453', 'z':'1.917788'}}, {'id':'rCollar', 'position':{'x':'0.01600487', 'y':'0.2034667', 'z':'0.03437943'}, 'rotation':{'x':'344.9164', 'y':'13.25454', 'z':'23.70418'}}, {'id':'rShldr', 'position':{'x':'0.1291656', 'y':'-0.03263176', 'z':'-0.01185607'}, 'rotation':{'x':'352.1738', 'y':'357.4952', 'z':'311.9737'}}, {'id':'rForeArm', 'position':{'x':'0.296073', 'y':'-0.0008810461', 'z':'0.002306866'}, 'rotation':{'x':'357.7183', 'y':'318.9574', 'z':'4.292561'}}, {'id':'rHand', 'position':{'x':'0.2321832', 'y':'-0.0001307335', 'z':'0.0003238283'}, 'rotation':{'x':'359.8751', 'y':'331.1506', 'z':'36.12101'}}, {'id':'rCarpal2', 'position':{'x':'0.02256207', 'y':'0.002701102', 'z':'-0.01116429'}, 'rotation':{'x':'349.6302', 'y':'11.16971', 'z':'354.6045'}}, {'id':'rRing1', 'position':{'x':'0.05875309', 'y':'0.003295177', 'z':'0.01089455'}, 'rotation':{'x':'5.235771', 'y':'357.2858', 'z':'347.9213'}}, {'id':'rRing2', 'position':{'x':'0.03458936', 'y':'0.001797992', 'z':'-2.680928E-05'}, 'rotation':{'x':'359.0152', 'y':'357.7819', 'z':'342.6394'}}, {'id':'rRing3', 'position':{'x':'0.02028718', 'y':'4.120034E-05', 'z':'-0.0001673745'}, 'rotation':{'x':'354.7847', 'y':'358.1971', 'z':'344.5506'}}, {'id':'rPinky1', 'position':{'x':'0.05426218', 'y':'-0.002424345', 'z':'-0.009723191'}, 'rotation':{'x':'1.00072', 'y':'1.020358', 'z':'351.1869'}}, {'id':'rPinky2', 'position':{'x':'0.02680432', 'y':'-4.79228E-05', 'z':'0.000388151'}, 'rotation':{'x':'0.09508621', 'y':'355.8824', 'z':'331.4482'}}, {'id':'rPinky3', 'position':{'x':'0.01610678', 'y':'0.001530097', 'z':'-0.0002867988'}, 'rotation':{'x':'358.8382', 'y':'1.945463', 'z':'353.5477'}}, {'id':'rCarpal1', 'position':{'x':'0.02189835', 'y':'0.004569467', 'z':'0.0129295'}, 'rotation':{'x':'0.8882261', 'y':'354.9318', 'z':'359.1989'}}, {'id':'rIndex1', 'position':{'x':'0.0613884', 'y':'0.002445338', 'z':'0.01021378'}, 'rotation':{'x':'4.156874', 'y':'354.9114', 'z':'346.049'}}, {'id':'rIndex2', 'position':{'x':'0.03385134', 'y':'0.002664494', 'z':'-0.0004429043'}, 'rotation':{'x':'359.5361', 'y':'1.748535', 'z':'342.584'}}, {'id':'rIndex3', 'position':{'x':'0.0201372', 'y':'-0.00175277', 'z':'-6.340105E-05'}, 'rotation':{'x':'359.0742', 'y':'0.5349901', 'z':'345.7417'}}, {'id':'rMid1', 'position':{'x':'0.06281865', 'y':'0.003444962', 'z':'-0.01118683'}, 'rotation':{'x':'359.3404', 'y':'4.262611', 'z':'348.317'}}, {'id':'rMid2', 'position':{'x':'0.03752463', 'y':'0.0008468414', 'z':'0.0002110433'}, 'rotation':{'x':'357.8069', 'y':'358.5909', 'z':'339.1833'}}, {'id':'rMid3', 'position':{'x':'0.02414818', 'y':'-0.0001102061', 'z':'0.0001649226'}, 'rotation':{'x':'2.089434', 'y':'2.258941', 'z':'348.5503'}}, {'id':'rThumb1', 'position':{'x':'0.02400299', 'y':'-0.005999297', 'z':'0.02005427'}, 'rotation':{'x':'357.6773', 'y':'304.6374', 'z':'338.3198'}}, {'id':'rThumb2', 'position':{'x':'0.04127556', 'y':'-8.832756E-05', 'z':'-8.326117E-05'}, 'rotation':{'x':'332.1383', 'y':'28.85089', 'z':'358.2938'}}, {'id':'rThumb3', 'position':{'x':'0.02817451', 'y':'-7.259101E-05', 'z':'-3.36552E-05'}, 'rotation':{'x':'353.946', 'y':'356.4242', 'z':'1.033533'}}, {'id':'lPectoral', 'position':{'x':'-0.03021859', 'y':'0.04611534', 'z':'-0.04140748'}, 'rotation':{'x':'356.0499', 'y':'338.7817', 'z':'-5.776696E-06'}}, {'id':'lNipple', 'position':{'x':'-0.00565598', 'y':'-0.01806841', 'z':'0.3041582'}, 'rotation':{'x':'7.632329', 'y':'172.7324', 'z':'348.9254'}}, {'id':'lNippleTrigger', 'trigger':{'displayName':'lNippleTrigger', 'startActions':[  ], 'transitionActions':[  ], 'endActions':[  ]}}, {'id':'rPectoral', 'position':{'x':'0.03011842', 'y':'0.0461307', 'z':'-0.04128196'}, 'rotation':{'x':'356.0724', 'y':'21.6799', 'z':'359.8761'}}, {'id':'rNipple', 'position':{'x':'0.005816983', 'y':'-0.02034312', 'z':'0.3042418'}, 'rotation':{'x':'7.629632', 'y':'187.2712', 'z':'11.64097'}}, {'id':'rNippleTrigger', 'trigger':{'displayName':'rNippleTrigger', 'startActions':[  ], 'transitionActions':[  ], 'endActions':[  ]}}, {'id':'neck', 'position':{'x':'-0.000101977', 'y':'0.2703402', 'z':'-0.007558741'}, 'rotation':{'x':'25.45281', 'y':'358.7126', 'z':'3.371236'}}, {'id':'head', 'position':{'x':'-0.0001851288', 'y':'0.08919218', 'z':'0.001296125'}, 'rotation':{'x':'347.8817', 'y':'0.3362082', 'z':'356.8473'}}, {'id':'LipTrigger', 'trigger':{'displayName':'LipTrigger', 'startActions':[  ], 'transitionActions':[  ], 'endActions':[  ]}}, {'id':'HeadAudioSource', 'trigger':{'startActions':[  ], 'transitionActions':[  ], 'endActions':[  ]}}, {'id':'MouthTrigger', 'trigger':{'displayName':'MouthTrigger', 'startActions':[  ], 'transitionActions':[  ], 'endActions':[  ]}}, {'id':'ThroatTrigger', 'trigger':{'displayName':'ThroatTrigger', 'startActions':[  ], 'transitionActions':[  ], 'endActions':[  ]}}, {'id':'rEye', 'position':{'x':'0.03105221', 'y':'0.06014559', 'z':'0.07684095'}, 'rotation':{'x':'5.927229', 'y':'3.437131', 'z':'359.9396'}}, {'id':'lEye', 'position':{'x':'-0.03101614', 'y':'0.06014604', 'z':'0.07684106'}, 'rotation':{'x':'5.906655', 'y':'5.894324', 'z':'359.8965'}}, {'id':'upperJaw', 'position':{'x':'-9.918484E-05', 'y':'0.01212975', 'z':'0.02066516'}, 'rotation':{'x':'0.08988612', 'y':'359.9898', 'z':'359.9902'}}, {'id':'lowerJaw', 'position':{'x':'3.51473E-05', 'y':'0.01140945', 'z':'0.01863544'}, 'rotation':{'x':'22.52516', 'y':'0.001253191', 'z':'0.07936974'}}, {'id':'tongueBase', 'position':{'x':'-8.283323E-05', 'y':'-0.01642258', 'z':'0.0447964'}, 'rotation':{'x':'274.9462', 'y':'180.3638', 'z':'179.6283'}}, {'id':'tongue01', 'position':{'x':'-1.762809E-06', 'y':'0.000408656', 'z':'0.007501702'}, 'rotation':{'x':'46.04902', 'y':'0.009548321', 'z':'-0.0004074617'}}, {'id':'tongue02', 'position':{'x':'-0.000184454', 'y':'-0.0003289278', 'z':'0.006682877'}, 'rotation':{'x':'15.76345', 'y':'0.000783738', 'z':'359.986'}}, {'id':'tongue03', 'position':{'x':'6.653131E-07', 'y':'-0.0002345715', 'z':'0.005387873'}, 'rotation':{'x':'8.243342', 'y':'0.002994184', 'z':'0.000507109'}}, {'id':'tongue04', 'position':{'x':'-2.352451E-05', 'y':'-0.0002960137', 'z':'0.00504311'}, 'rotation':{'x':'3.330942', 'y':'0.008703641', 'z':'-0.004561095'}}, {'id':'tongue05', 'position':{'x':'-5.876723E-08', 'y':'-0.0003507425', 'z':'0.004086245'}, 'rotation':{'x':'359.3642', 'y':'-0.001046642', 'z':'0.001431288'}}, {'id':'tongueTip', 'position':{'x':'-1.775826E-05', 'y':'-0.0009608639', 'z':'0.003501638'}, 'rotation':{'x':'354.2185', 'y':'0.001624493', 'z':'-0.0006242135'}}, {'id':'lCollar', 'position':{'x':'-0.01599729', 'y':'0.2034113', 'z':'0.03433581'}, 'rotation':{'x':'344.5883', 'y':'343.136', 'z':'334.131'}}, {'id':'lShldr', 'position':{'x':'-0.1285033', 'y':'-0.03185692', 'z':'-0.01219385'}, 'rotation':{'x':'351.2453', 'y':'359.737', 'z':'54.12601'}}, {'id':'lForeArm', 'position':{'x':'-0.2954718', 'y':'-0.0009050667', 'z':'0.002145413'}, 'rotation':{'x':'45.8884', 'y':'66.56972', 'z':'356.352'}}, {'id':'lHand', 'position':{'x':'-0.2320846', 'y':'-9.591505E-05', 'z':'0.0003812313'}, 'rotation':{'x':'4.820324', 'y':'322.9265', 'z':'334.2382'}}, {'id':'lCarpal2', 'position':{'x':'-0.02260229', 'y':'0.002661717', 'z':'-0.01119158'}, 'rotation':{'x':'349.5909', 'y':'348.8807', 'z':'5.395622'}}, {'id':'lRing1', 'position':{'x':'-0.05867963', 'y':'0.003362658', 'z':'0.01093978'}, 'rotation':{'x':'5.240537', 'y':'2.708208', 'z':'12.07756'}}, {'id':'lRing2', 'position':{'x':'-0.03446363', 'y':'0.001850314', 'z':'3.820684E-05'}, 'rotation':{'x':'358.9364', 'y':'2.314458', 'z':'17.29686'}}, {'id':'lRing3', 'position':{'x':'-0.02028714', 'y':'4.14222E-05', 'z':'-0.000167223'}, 'rotation':{'x':'354.5636', 'y':'1.741507', 'z':'15.47927'}}, {'id':'lPinky1', 'position':{'x':'-0.05415079', 'y':'-0.002344495', 'z':'-0.009669832'}, 'rotation':{'x':'1.003055', 'y':'358.9797', 'z':'8.801098'}}, {'id':'lPinky2', 'position':{'x':'-0.02680429', 'y':'-4.681343E-05', 'z':'0.0003885122'}, 'rotation':{'x':'0.07159267', 'y':'4.104743', 'z':'28.56958'}}, {'id':'lPinky3', 'position':{'x':'-0.01603911', 'y':'0.001531948', 'z':'-0.0002412654'}, 'rotation':{'x':'358.8319', 'y':'358.0934', 'z':'6.467838'}}, {'id':'lCarpal1', 'position':{'x':'-0.0219342', 'y':'0.004511781', 'z':'0.01289263'}, 'rotation':{'x':'0.8502317', 'y':'5.118091', 'z':'0.7988619'}}, {'id':'lIndex1', 'position':{'x':'-0.06134664', 'y':'0.002510454', 'z':'0.01025008'}, 'rotation':{'x':'3.299318', 'y':'5.027158', 'z':'13.95126'}}, {'id':'lIndex2', 'position':{'x':'-0.03376817', 'y':'0.002731991', 'z':'-0.0003853664'}, 'rotation':{'x':'359.4336', 'y':'358.3071', 'z':'17.32841'}}, {'id':'lIndex3', 'position':{'x':'-0.02013777', 'y':'-0.001751996', 'z':'-6.383213E-05'}, 'rotation':{'x':'358.954', 'y':'359.4344', 'z':'14.38467'}}, {'id':'lMid1', 'position':{'x':'-0.06276132', 'y':'0.003536515', 'z':'-0.01114483'}, 'rotation':{'x':'359.3418', 'y':'355.7392', 'z':'11.6702'}}, {'id':'lMid2', 'position':{'x':'-0.03751823', 'y':'0.0008371702', 'z':'0.0002124757'}, 'rotation':{'x':'357.751', 'y':'1.387944', 'z':'20.8406'}}, {'id':'lMid3', 'position':{'x':'-0.02409532', 'y':'-9.202451E-05', 'z':'0.0002181821'}, 'rotation':{'x':'2.070465', 'y':'357.804', 'z':'11.48916'}}, {'id':'lThumb1', 'position':{'x':'-0.02398004', 'y':'-0.005961213', 'z':'0.02008061'}, 'rotation':{'x':'357.6602', 'y':'55.38301', 'z':'21.71027'}}, {'id':'lThumb2', 'position':{'x':'-0.04126388', 'y':'-2.313964E-05', 'z':'-1.766812E-05'}, 'rotation':{'x':'332.1214', 'y':'331.6624', 'z':'1.35409'}}, {'id':'lThumb3', 'position':{'x':'-0.02817389', 'y':'-7.225992E-05', 'z':'-3.316812E-05'}, 'rotation':{'x':'353.9375', 'y':'3.035386', 'z':'359.116'}}, {'id':'geometry', 'useAuxBreastColliders':'false', 'character':'Kayla', 'clothing':[  ], 'hair':[  ], 'morphs':[ {'uid':'Forearms Size', 'name':'Forearms Size', 'value':'0.08520088'}, {'uid':'Shoulder Width', 'name':'Shoulder Width', 'value':'0.02751278'}, {'uid':'Shoulders Size', 'name':'Shoulders Size', 'value':'-0.09318846'}, {'uid':'Upper Arms Size', 'name':'Upper Arms Size', 'value':'0.05236304'}, {'uid':'Lats Size', 'name':'Lats Size', 'value':'0.2103397'}, {'uid':'Body Size', 'name':'Body Size', 'value':'-0.1465659'}, {'uid':'Fitness Details', 'name':'Fitness Details', 'value':'0.1996895'}, {'uid':'Fitness Size', 'name':'Fitness Size', 'value':'0.07543827'}, {'uid':'Lower Body Length', 'name':'Lower Body Length', 'value':'-0.06922571'}, {'uid':'Pear Figure', 'name':'Pear Figure', 'value':'-0.04526296'}, {'uid':'Voluptuous', 'name':'Voluptuous', 'value':'1.044777'}, {'uid':'Areola Depth', 'name':'Areola Depth', 'value':'0.8602446'}, {'uid':'Areola Puffy Edge', 'name':'Areola Puffy Edge', 'value':'2.444178'}, {'uid':'Areola Size', 'name':'Areola Size', 'value':'1.335353'}, {'uid':'Areola Size X', 'name':'Areola Size X', 'value':'1.542491'}, {'uid':'Areola Size Y', 'name':'Areola Size Y', 'value':'1.115966'}, {'uid':'Areolae Depth', 'name':'Areolae Depth', 'value':'0.2760153'}, {'uid':'Areolae Diameter', 'name':'Areolae Diameter', 'value':'2.262181'}, {'uid':'Areolae Perk', 'name':'Areolae Perk', 'value':'0.3576662'}, {'uid':'Breast Centered', 'name':'Breast Centered', 'value':'-0.226781'}, {'uid':'Breast Diameter', 'name':'Breast Diameter', 'value':'0.6111789'}, {'uid':'Breast Height', 'name':'Breast Height', 'value':'-0.2933193'}, {'uid':'Breast Height Lower', 'name':'Breast Height Lower', 'value':'-0.1215887'}, {'uid':'Breast Height Upper', 'name':'Breast Height Upper', 'value':'0.6773722'}, {'uid':'Breast Large', 'name':'Breast Large', 'value':'0.658258'}, {'uid':'Breast Pointed', 'name':'Breast Pointed', 'value':'-0.5227429'}, {'uid':'Breast Round', 'name':'Breast Round', 'value':'-0.3862209'}, {'uid':'Breast Sag1', 'name':'Breast Sag1', 'value':'0.2010329'}, {'uid':'Breast Sag2', 'name':'Breast Sag2', 'value':'0.3301534'}, {'uid':'Breast Side Smoother', 'name':'Breast Side Smoother', 'value':'0.3038893'}, {'uid':'Breast Top Curve1', 'name':'Breast Top Curve1', 'value':'-0.04082542'}, {'uid':'Breast Top Curve2', 'name':'Breast Top Curve2', 'value':'0.4099883'}, {'uid':'Breast Under Smoother1', 'name':'Breast Under Smoother1', 'value':'-0.2175702'}, {'uid':'Breast Under Smoother2', 'name':'Breast Under Smoother2', 'value':'-0.1260263'}, {'uid':'Breast Under Smoother3', 'name':'Breast Under Smoother3', 'value':'0.004437545'}, {'uid':'Breast Under Smoother4', 'name':'Breast Under Smoother4', 'value':'0.5268449'}, {'uid':'Breast Under Smoother5', 'name':'Breast Under Smoother5', 'value':'0.2698027'}, {'uid':'Breasts Cleavage', 'name':'Breasts Cleavage', 'value':'-0.101176'}, {'uid':'Breasts Heavy', 'name':'Breasts Heavy', 'value':'0.06478816'}, {'uid':'Breasts Natural Left', 'name':'Breasts Natural Left', 'value':'0.1455515'}, {'uid':'Breasts Natural Right', 'name':'Breasts Natural Right', 'value':'0.2236523'}, {'uid':'Breasts Perk Side', 'name':'Breasts Perk Side', 'value':'0.1303256'}, {'uid':'Breasts Shape 07', 'name':'Breasts Shape 07', 'value':'-0.1047261'}, {'uid':'Breasts Shape 08', 'name':'Breasts Shape 08', 'value':'-0.03816289'}, {'uid':'Breasts Size', 'name':'Breasts Size', 'value':'0.5917332'}, {'uid':'Breasts Under Curve', 'name':'Breasts Under Curve', 'value':'-0.02041271'}, {'uid':'Breasts Upward Slope', 'name':'Breasts Upward Slope', 'value':'-0.09705038'}, {'uid':'BreastsCrease', 'name':'BreastsCrease', 'value':'-0.1402265'}, {'uid':'BreastsShape1', 'name':'BreastsShape1', 'value':'0.6177064'}, {'uid':'BreastsShape2', 'name':'BreastsShape2', 'value':'-0.2743159'}, {'uid':'BreastsShape3', 'name':'BreastsShape3', 'value':'-0.09407597'}, {'uid':'Nipple Diameter', 'name':'Nipple Diameter', 'value':'0.09376852'}, {'uid':'Nipple Length', 'name':'Nipple Length', 'value':'1.416369'}, {'uid':'Nipple Size', 'name':'Nipple Size', 'value':'0.9593973'}, {'uid':'Nipples', 'name':'Nipples', 'value':'0.3655471'}, {'uid':'Nipples Apply', 'name':'Nipples Apply', 'value':'-0.2094193'}, {'uid':'Nipples Depth', 'name':'Nipples Depth', 'value':'1.036611'}, {'uid':'Nipples Diameter', 'name':'Nipples Diameter', 'value':'0.7676954'}, {'uid':'Nipples Large', 'name':'Nipples Large', 'value':'-1.670292'}, {'uid':'Nipples Size', 'name':'Nipples Size', 'value':'1.405814'}, {'uid':'Armpit Curve', 'name':'Armpit Curve', 'value':'0.2138897'}, {'uid':'Center Gap Depth', 'name':'Center Gap Depth', 'value':'0.1166455'}, {'uid':'Center Gap Height', 'name':'Center Gap Height', 'value':'0.1783342'}, {'uid':'Center Gap NarrowWide', 'name':'Center Gap NarrowWide', 'value':'-0.113239'}, {'uid':'Center Gap Smooth', 'name':'Center Gap Smooth', 'value':'-0.6682944'}, {'uid':'Center Gap UpDown', 'name':'Center Gap UpDown', 'value':'-0.5014426'}, {'uid':'Centre Gap Wide', 'name':'Centre Gap Wide', 'value':'0.113239'}, {'uid':'Chest Height', 'name':'Chest Height', 'value':'0.06745069'}, {'uid':'Chest Smoother', 'name':'Chest Smoother', 'value':'0.5946311'}, {'uid':'ChestSeparateBreasts', 'name':'ChestSeparateBreasts', 'value':'0.1548401'}, {'uid':'ChestShape', 'name':'ChestShape', 'value':'-0.1570891'}, {'uid':'ChestSmoothCenter', 'name':'ChestSmoothCenter', 'value':'0.2311814'}, {'uid':'ChestUnderBreast', 'name':'ChestUnderBreast', 'value':'-0.3038893'}, {'uid':'ChestUp', 'name':'ChestUp', 'value':'0.164773'}, {'uid':'ChestUpperNarrow', 'name':'ChestUpperNarrow', 'value':'0.2401988'}, {'uid':'Collarbone Detail', 'name':'Collarbone Detail', 'value':'0.2325824'}, {'uid':'CollarBoneDefine', 'name':'CollarBoneDefine', 'value':'-0.23874'}, {'uid':'CollarBoneIn', 'name':'CollarBoneIn', 'value':'-0.2378524'}, {'uid':'CollarBoneStraight', 'name':'CollarBoneStraight', 'value':'-1.072111'}, {'uid':'CollarNotchStrength', 'name':'CollarNotchStrength', 'value':'-0.04082542'}, {'uid':'Costal Angle Arched', 'name':'Costal Angle Arched', 'value':'0.3576662'}, {'uid':'Costal Angle Pointed', 'name':'Costal Angle Pointed', 'value':'0.74107'}, {'uid':'Ribcage Size', 'name':'Ribcage Size', 'value':'-0.04615047'}, {'uid':'RibCageDefine', 'name':'RibCageDefine', 'value':'-0.150676'}, {'uid':'RibCageWidth', 'name':'RibCageWidth', 'value':'0.09673849'}, {'uid':'Ribs Definition', 'name':'Ribs Definition', 'value':'0.05058802'}, {'uid':'Ribs Width', 'name':'Ribs Width', 'value':'-0.1118262'}, {'uid':'Sternum Depth', 'name':'Sternum Depth', 'value':'0.142889'}, {'uid':'Sternum Height', 'name':'Sternum Height', 'value':'0.1588245'}, {'uid':'Sternum Width', 'name':'Sternum Width', 'value':'0.4748174'}, {'uid':'Gen_Innie', 'name':'Gen_Innie', 'value':'0.3842914'}, {'uid':'Genitals-extreme expansion', 'name':'Genitals-extreme expansion', 'value':'0.195252'}, {'uid':'Labia majora-relaxation', 'name':'Labia majora-relaxation', 'value':'0.3461286'}, {'uid':'Labia minora-exstrophy', 'name':'Labia minora-exstrophy', 'value':'0.4668298'}, {'uid':'Labia minora-spread-LLow', 'name':'Labia minora-spread-LLow', 'value':'0.02573776'}, {'uid':'Labia minora-spread-LMid', 'name':'Labia minora-spread-LMid', 'value':'0.09940102'}, {'uid':'Labia minora-spread-LUp', 'name':'Labia minora-spread-LUp', 'value':'-0.02662527'}, {'uid':'Labia minora-spread-RLow', 'name':'Labia minora-spread-RLow', 'value':'-0.02573776'}, {'uid':'Labia minora-spread-RMid', 'name':'Labia minora-spread-RMid', 'value':'0.08520088'}, {'uid':'Labia minora-spread-RUp', 'name':'Labia minora-spread-RUp', 'value':'-0.142889'}, {'uid':'Labia minora-style1', 'name':'Labia minora-style1', 'value':'0.007100073'}, {'uid':'Labia minora-style2', 'name':'Labia minora-style2', 'value':'0.1686267'}, {'uid':'Labia minora-style3', 'name':'Labia minora-style3', 'value':'0.1943645'}, {'uid':'Labia minora-style4', 'name':'Labia minora-style4', 'value':'0.2804529'}, {'uid':'Hands Thickness', 'name':'Hands Thickness', 'value':'0.3221658'}, {'uid':'Brow Define', 'name':'Brow Define', 'value':'0.07027747'}, {'uid':'Brow Define Left', 'name':'Brow Define Left', 'value':'0.07027747'}, {'uid':'Brow Define Right', 'name':'Brow Define Right', 'value':'0.07027747'}, {'uid':'Brow Inner Height', 'name':'Brow Inner Height', 'value':'-0.07715925'}, {'uid':'Brow Shape Outer', 'name':'Brow Shape Outer', 'value':'0.105146'}, {'uid':'BrowAreaSmooth', 'name':'BrowAreaSmooth', 'value':'-0.1023949'}, {'uid':'Brows Size', 'name':'Brows Size', 'value':'-0.04914573'}, {'uid':'Cheek Bones Width Upper', 'name':'Cheek Bones Width Upper', 'value':'-0.1111919'}, {'uid':'Cheek Jowl', 'name':'Cheek Jowl', 'value':'-0.1090269'}, {'uid':'Cheek Lower Width', 'name':'Cheek Lower Width', 'value':'-0.0002166961'}, {'uid':'CheekBonesMore', 'name':'CheekBonesMore', 'value':'0.06088041'}, {'uid':'CheekHollows', 'name':'CheekHollows', 'value':'0.3163198'}, {'uid':'CheekInnerPuff', 'name':'CheekInnerPuff', 'value':'-0.04783922'}, {'uid':'Cheeks Depth Upper', 'name':'Cheeks Depth Upper', 'value':'-0.09678914'}, {'uid':'Cheeks Flat', 'name':'Cheeks Flat', 'value':'-0.1086362'}, {'uid':'Chin Crease', 'name':'Chin Crease', 'value':'0.1522289'}, {'uid':'Chin Crease B', 'name':'Chin Crease B', 'value':'0.2620295'}, {'uid':'Chin Depth', 'name':'Chin Depth', 'value':'0.01164425'}, {'uid':'Chin Height', 'name':'Chin Height', 'value':'-0.03186465'}, {'uid':'Chin Square', 'name':'Chin Square', 'value':'0.1218871'}, {'uid':'ChinOut', 'name':'ChinOut', 'value':'-0.04058681'}, {'uid':'ChinOutRound', 'name':'ChinOutRound', 'value':'-0.07113522'}, {'uid':'ChinShape', 'name':'ChinShape', 'value':'-0.02609292'}, {'uid':'ChinWider', 'name':'ChinWider', 'value':'0.1260156'}, {'uid':'Earlobes Attached', 'name':'Earlobes Attached', 'value':'1.417352'}, {'uid':'Earlobes Size', 'name':'Earlobes Size', 'value':'0.4996676'}, {'uid':'Ears  Angle Upper', 'name':'Ears  Angle Upper', 'value':'-0.1056136'}, {'uid':'Ears Angle', 'name':'Ears Angle', 'value':'-0.08742337'}, {'uid':'Ears Angle Left', 'name':'Ears Angle Left', 'value':'-0.08742337'}, {'uid':'Ears Angle Right', 'name':'Ears Angle Right', 'value':'-0.08742337'}, {'uid':'Ears Depth', 'name':'Ears Depth', 'value':'0.1490865'}, {'uid':'Ears Height Left', 'name':'Ears Height Left', 'value':'-0.1047261'}, {'uid':'Ears Height Right', 'name':'Ears Height Right', 'value':'0.08342585'}, {'uid':'Ears Size', 'name':'Ears Size', 'value':'-0.07250001'}, {'uid':'Ears Size Left', 'name':'Ears Size Left', 'value':'-0.07250001'}, {'uid':'Ears Size Right', 'name':'Ears Size Right', 'value':'-0.07250001'}, {'uid':'Cornea Depth', 'name':'Cornea Depth', 'value':'1.422'}, {'uid':'Crows Feet', 'name':'Crows Feet', 'value':'0.5591307'}, {'uid':'Eye Fold', 'name':'Eye Fold', 'value':'0.08364423'}, {'uid':'Eye Upper Shape M', 'name':'Eye Upper Shape M', 'value':'0.05789761'}, {'uid':'EyeAreaSmooth', 'name':'EyeAreaSmooth', 'value':'-0.08708262'}, {'uid':'EyeAreaThin', 'name':'EyeAreaThin', 'value':'0.0871237'}, {'uid':'Eyeballs Depth', 'name':'Eyeballs Depth', 'value':'0.218'}, {'uid':'Eyelashes Curl', 'name':'Eyelashes Curl', 'value':'0.05582866'}, {'uid':'Eyelashes Length', 'name':'Eyelashes Length', 'value':'0.09179542'}, {'uid':'Eyelashes Top Point', 'name':'Eyelashes Top Point', 'value':'0.02713932'}, {'uid':'Eyelid Lower Crease', 'name':'Eyelid Lower Crease', 'value':'0.2213472'}, {'uid':'Eyelid Lower Shape', 'name':'Eyelid Lower Shape', 'value':'-0.06643523'}, {'uid':'Eyelid Upper Inner Shape', 'name':'Eyelid Upper Inner Shape', 'value':'-0.05926614'}, {'uid':'Eyelid Upper Shape  Outer', 'name':'Eyelid Upper Shape  Outer', 'value':'0.03038404'}, {'uid':'Eyelids Bottom Define', 'name':'Eyelids Bottom Define', 'value':'0.1488652'}, {'uid':'Eyelids Heavy', 'name':'Eyelids Heavy', 'value':'0.06866639'}, {'uid':'Eyelids Height Inner ', 'name':'Eyelids Height Inner ', 'value':'-0.1442978'}, {'uid':'Eyelids Lower Puffy', 'name':'Eyelids Lower Puffy', 'value':'0.05503185'}, {'uid':'Eyelids Shape 1', 'name':'Eyelids Shape 1', 'value':'0.1228304'}, {'uid':'Eyelids Shape 2', 'name':'Eyelids Shape 2', 'value':'0.1000475'}, {'uid':'Eyelids Smooth', 'name':'Eyelids Smooth', 'value':'0.03523036'}, {'uid':'Eyelids Top In Height', 'name':'Eyelids Top In Height', 'value':'-0.04686752'}, {'uid':'Eyelids Top Out Height', 'name':'Eyelids Top Out Height', 'value':'0.06538408'}, {'uid':'Eyelids Upper Height', 'name':'Eyelids Upper Height', 'value':'0.03788294'}, {'uid':'Eyelids Upper Height (Outer)', 'name':'Eyelids Upper Height (Outer)', 'value':'0.01847967'}, {'uid':'Eyelids Upper Height Left', 'name':'Eyelids Upper Height Left', 'value':'0.03788294'}, {'uid':'Eyelids Upper Height Right', 'name':'Eyelids Upper Height Right', 'value':'0.03788294'}, {'uid':'Eyelids Upper Square', 'name':'Eyelids Upper Square', 'value':'0.0126657'}, {'uid':'Eyes Angle', 'name':'Eyes Angle', 'value':'0.03858358'}, {'uid':'Eyes Angle Left', 'name':'Eyes Angle Left', 'value':'0.03858358'}, {'uid':'Eyes Angle Right', 'name':'Eyes Angle Right', 'value':'0.03858358'}, {'uid':'Eyes Closed (REN)', 'name':'Eyes Closed (REN)', 'value':'0.02126569'}, {'uid':'Eyes Cornea Bulge', 'name':'Eyes Cornea Bulge', 'value':'1.949'}, {'uid':'Eyes Depth', 'name':'Eyes Depth', 'value':'0.02893163'}, {'uid':'Eyes Depth Left', 'name':'Eyes Depth Left', 'value':'0.02893163'}, {'uid':'Eyes Depth Right', 'name':'Eyes Depth Right', 'value':'0.02893163'}, {'uid':'Eyes Height', 'name':'Eyes Height', 'value':'-0.01908271'}, {'uid':'Eyes Height Bottom', 'name':'Eyes Height Bottom', 'value':'0.06803791'}, {'uid':'Eyes Height Inner', 'name':'Eyes Height Inner', 'value':'-0.01105275'}, {'uid':'Eyes Height Left', 'name':'Eyes Height Left', 'value':'-0.01908271'}, {'uid':'Eyes Height Outer', 'name':'Eyes Height Outer', 'value':'-0.1192209'}, {'uid':'Eyes Height Right', 'name':'Eyes Height Right', 'value':'-0.01908271'}, {'uid':'Eyes Height Upper', 'name':'Eyes Height Upper', 'value':'0.03473934'}, {'uid':'Eyes Inner  Shape', 'name':'Eyes Inner  Shape', 'value':'-0.08740307'}, {'uid':'Eyes Inner Corner Height', 'name':'Eyes Inner Corner Height', 'value':'-0.1089411'}, {'uid':'Eyes Inner Corner Width', 'name':'Eyes Inner Corner Width', 'value':'0.1120102'}, {'uid':'Eyes Inner Depth', 'name':'Eyes Inner Depth', 'value':'0.0472148'}, {'uid':'Eyes Inner Square', 'name':'Eyes Inner Square', 'value':'0.006776956'}, {'uid':'Eyes Iris Correction', 'name':'Eyes Iris Correction', 'value':'0.3624605'}, {'uid':'Eyes Iris Size', 'name':'Eyes Iris Size', 'value':'-0.1666728'}, {'uid':'Eyes Lower Shape', 'name':'Eyes Lower Shape', 'value':'-0.03783196'}, {'uid':'Eyes Open', 'name':'Eyes Open', 'value':'-0.1180387'}, {'uid':'Eyes Outer Shape', 'name':'Eyes Outer Shape', 'value':'-0.1192209'}, {'uid':'Eyes Puffy Lower', 'name':'Eyes Puffy Lower', 'value':'-0.01662306'}, {'uid':'Eyes Puffy Upper', 'name':'Eyes Puffy Upper', 'value':'0.06083258'}, {'uid':'Eyes Puffy Upper Center ', 'name':'Eyes Puffy Upper Center ', 'value':'0.0005612396'}, {'uid':'Eyes Round Lower', 'name':'Eyes Round Lower', 'value':'-0.06965922'}, {'uid':'Eyes Round Upper', 'name':'Eyes Round Upper', 'value':'0.08953959'}, {'uid':'Eyes Shift Lower', 'name':'Eyes Shift Lower', 'value':'-0.05034183'}, {'uid':'Eyes Shift Upper', 'name':'Eyes Shift Upper', 'value':'-0.0575511'}, {'uid':'Eyes Size', 'name':'Eyes Size', 'value':'-0.05937677'}, {'uid':'Eyes Size Left', 'name':'Eyes Size Left', 'value':'-0.05937677'}, {'uid':'Eyes Size Right', 'name':'Eyes Size Right', 'value':'-0.05937677'}, {'uid':'Eyes Slant Outer ', 'name':'Eyes Slant Outer ', 'value':'0.0282218'}, {'uid':'Eyes Width Left', 'name':'Eyes Width Left', 'value':'-0.101915'}, {'uid':'Eyes Width Right', 'name':'Eyes Width Right', 'value':'-0.09079232'}, {'uid':'EyeShape6', 'name':'EyeShape6', 'value':'-0.02488576'}, {'uid':'Lacrimals Pinch', 'name':'Lacrimals Pinch', 'value':'0.04738394'}, {'uid':'Lacrimals Size', 'name':'Lacrimals Size', 'value':'-0.175693'}, {'uid':'LacrimalStretch', 'name':'LacrimalStretch', 'value':'-0.0607322'}, {'uid':'LacrimalYoung', 'name':'LacrimalYoung', 'value':'-0.0006195928'}, {'uid':'Pupils Dialate', 'name':'Pupils Dialate', 'value':'-0.1748393'}, {'uid':'Face Angle', 'name':'Face Angle', 'value':'-0.03354808'}, {'uid':'Face Center Depth', 'name':'Face Center Depth', 'value':'0.05964486'}, {'uid':'Face Flat', 'name':'Face Flat', 'value':'-0.03147678'}, {'uid':'Face Flat Left', 'name':'Face Flat Left', 'value':'-0.03147678'}, {'uid':'Face Flat Right', 'name':'Face Flat Right', 'value':'-0.03147678'}, {'uid':'Face Heart', 'name':'Face Heart', 'value':'0.06144464'}, {'uid':'Face Heart Left', 'name':'Face Heart Left', 'value':'0.06144464'}, {'uid':'Face Heart Right', 'name':'Face Heart Right', 'value':'0.06144464'}, {'uid':'Face Height', 'name':'Face Height', 'value':'-0.003246587'}, {'uid':'Face Lower Thin', 'name':'Face Lower Thin', 'value':'0.1717553'}, {'uid':'Face Round', 'name':'Face Round', 'value':'-0.0416044'}, {'uid':'Face Round Left', 'name':'Face Round Left', 'value':'-0.0416044'}, {'uid':'Face Round Right', 'name':'Face Round Right', 'value':'-0.0416044'}, {'uid':'Face Size', 'name':'Face Size', 'value':'-0.0169544'}, {'uid':'Face Square', 'name':'Face Square', 'value':'0.02825732'}, {'uid':'Face Square Left', 'name':'Face Square Left', 'value':'0.02825732'}, {'uid':'Face Square Right', 'name':'Face Square Right', 'value':'0.02825732'}, {'uid':'Face Upper Width', 'name':'Face Upper Width', 'value':'-0.0388388'}, {'uid':'Face Young', 'name':'Face Young', 'value':'0.07202614'}, {'uid':'FaceAllWider', 'name':'FaceAllWider', 'value':'-0.02152367'}, {'uid':'FaceExotic', 'name':'FaceExotic', 'value':'0.02813708'}, {'uid':'FaceFemale4', 'name':'FaceFemale4', 'value':'0.04725587'}, {'uid':'FaceMidProportion', 'name':'FaceMidProportion', 'value':'-0.00336683'}, {'uid':'FaceMidProportion2', 'name':'FaceMidProportion2', 'value':'0.01984025'}, {'uid':'FaceMidProportion3', 'name':'FaceMidProportion3', 'value':'0.03871855'}, {'uid':'FaceModel', 'name':'FaceModel', 'value':'-0.0158722'}, {'uid':'FaceModel2', 'name':'FaceModel2', 'value':'-0.009619514'}, {'uid':'FaceRoundFlat2', 'name':'FaceRoundFlat2', 'value':'-0.001683414'}, {'uid':'FaceShape3', 'name':'FaceShape3', 'value':'0.02092244'}, {'uid':'FaceShapeFlat1', 'name':'FaceShapeFlat1', 'value':'-0.02645366'}, {'uid':'FaceShapeHeart2', 'name':'FaceShapeHeart2', 'value':'0.02674377'}, {'uid':'FaceShapeOval', 'name':'FaceShapeOval', 'value':'-0.0060122'}, {'uid':'FaceShapeThin', 'name':'FaceShapeThin', 'value':'-0.01563171'}, {'uid':'FaceSmoothAll', 'name':'FaceSmoothAll', 'value':'0.08008248'}, {'uid':'FaceSmoothLower', 'name':'FaceSmoothLower', 'value':'0.02657391'}, {'uid':'Jaw Angle', 'name':'Jaw Angle', 'value':'0.1473436'}, {'uid':'Jaw Chin Shape', 'name':'Jaw Chin Shape', 'value':'-0.07217202'}, {'uid':'Jaw Corner Shape', 'name':'Jaw Corner Shape', 'value':'-0.08016129'}, {'uid':'Jaw Curve', 'name':'Jaw Curve', 'value':'-0.03549173'}, {'uid':'Jaw Define', 'name':'Jaw Define', 'value':'-0.04494261'}, {'uid':'Jaw Height', 'name':'Jaw Height', 'value':'0.0293782'}, {'uid':'Jaw Height Left', 'name':'Jaw Height Left', 'value':'0.0293782'}, {'uid':'Jaw Height Right', 'name':'Jaw Height Right', 'value':'0.0293782'}, {'uid':'JawlineRecede', 'name':'JawlineRecede', 'value':'0.140439'}, {'uid':'JawlineReduce', 'name':'JawlineReduce', 'value':'0.1192209'}, {'uid':'Teeth Gap', 'name':'Teeth Gap', 'value':'0.09720643'}, {'uid':'Teeth Top Size', 'name':'Teeth Top Size', 'value':'0.1042992'}, {'uid':'Teeth Upper Jaw Size Width', 'name':'Teeth Upper Jaw Size Width', 'value':'0.08970833'}, {'uid':'Tongue Forked', 'name':'Tongue Forked', 'value':'0.05267341'}, {'uid':'CurvyLips', 'name':'CurvyLips', 'value':'0.06276734'}, {'uid':'Lip Lower Size', 'name':'Lip Lower Size', 'value':'-0.03380599'}, {'uid':'Lip Top Peak', 'name':'Lip Top Peak', 'value':'0.3446404'}, {'uid':'Lip Upper Curves', 'name':'Lip Upper Curves', 'value':'0.1192209'}, {'uid':'Lips Bottom Shape ', 'name':'Lips Bottom Shape ', 'value':'0.07382979'}, {'uid':'Lips Bottom Small', 'name':'Lips Bottom Small', 'value':'0.03141578'}, {'uid':'Lips Bow Height', 'name':'Lips Bow Height', 'value':'-0.1098913'}, {'uid':'Lips Bow Shape', 'name':'Lips Bow Shape', 'value':'0.1611206'}, {'uid':'Lips Center Angle', 'name':'Lips Center Angle', 'value':'0.07463716'}, {'uid':'Lips Corners Pinch', 'name':'Lips Corners Pinch', 'value':'-0.004022678'}, {'uid':'Lips Edge Define', 'name':'Lips Edge Define', 'value':'0.1262713'}, {'uid':'Lips Heart', 'name':'Lips Heart', 'value':'0.02707235'}, {'uid':'LIps Top Width', 'name':'LIps Top Width', 'value':'0.1472987'}, {'uid':'Lips Upper Center Depth', 'name':'Lips Upper Center Depth', 'value':'-0.04280685'}, {'uid':'Lips Upper Curves  Round', 'name':'Lips Upper Curves  Round', 'value':'0.007334885'}, {'uid':'LipsPuffOut', 'name':'LipsPuffOut', 'value':'0.02272612'}, {'uid':'Lower Mouth Puffy', 'name':'Lower Mouth Puffy', 'value':'-0.4723328'}, {'uid':'Mouth Corner Depth', 'name':'Mouth Corner Depth', 'value':'0.07683586'}, {'uid':'Mouth Corner Height', 'name':'Mouth Corner Height', 'value':'-0.02681318'}, {'uid':'Mouth Corner Width', 'name':'Mouth Corner Width', 'value':'0.07735558'}, {'uid':'Mouth Curves', 'name':'Mouth Curves', 'value':'0.06640153'}, {'uid':'Mouth Curves  Arch', 'name':'Mouth Curves  Arch', 'value':'-0.09479559'}, {'uid':'Mouth Curves Arch Corner', 'name':'Mouth Curves Arch Corner', 'value':'-0.1629264'}, {'uid':'Mouth Curves Center Width', 'name':'Mouth Curves Center Width', 'value':'-0.0377146'}, {'uid':'Mouth Curves Corner', 'name':'Mouth Curves Corner', 'value':'-0.08537322'}, {'uid':'Mouth Depth', 'name':'Mouth Depth', 'value':'-0.03030346'}, {'uid':'Mouth Height', 'name':'Mouth Height', 'value':'-0.0334753'}, {'uid':'Mouth Marionette lines', 'name':'Mouth Marionette lines', 'value':'-0.4513106'}, {'uid':'Mouth Size', 'name':'Mouth Size', 'value':'-0.0005393059'}, {'uid':'Mouth Width', 'name':'Mouth Width', 'value':'0.04004123'}, {'uid':'Mouth_UpLipDefine', 'name':'Mouth_UpLipDefine', 'value':'-0.0585706'}, {'uid':'MouthArea_InOut', 'name':'MouthArea_InOut', 'value':'-0.05904174'}, {'uid':'MouthCenterXScale', 'name':'MouthCenterXScale', 'value':'-0.05203976'}, {'uid':'MouthCurves1', 'name':'MouthCurves1', 'value':'0.05921093'}, {'uid':'MouthCurves2', 'name':'MouthCurves2', 'value':'0.07549445'}, {'uid':'MouthLarger2', 'name':'MouthLarger2', 'value':'-0.0128661'}, {'uid':'MouthLowLipDefine', 'name':'MouthLowLipDefine', 'value':'0.03294684'}, {'uid':'MouthLowLipShape', 'name':'MouthLowLipShape', 'value':'-0.05787637'}, {'uid':'MouthOuterXScale', 'name':'MouthOuterXScale', 'value':'-0.04741681'}, {'uid':'MouthPouty', 'name':'MouthPouty', 'value':'0.002044148'}, {'uid':'MouthProportion', 'name':'MouthProportion', 'value':'0.05564308'}, {'uid':'MouthShape1', 'name':'MouthShape1', 'value':'-0.003607318'}, {'uid':'MouthShape11', 'name':'MouthShape11', 'value':'0.0310091'}, {'uid':'MouthShape9', 'name':'MouthShape9', 'value':'0.04820845'}, {'uid':'Uvula Size', 'name':'Uvula Size', 'value':'0.1624357'}, {'uid':'Nose Bridge Depth', 'name':'Nose Bridge Depth', 'value':'-0.2066683'}, {'uid':'Nose Bridge Height', 'name':'Nose Bridge Height', 'value':'0.1091035'}, {'uid':'Nose Bridge Middlle Depth', 'name':'Nose Bridge Middlle Depth', 'value':'0.07353926'}, {'uid':'Nose Bridge Root Width', 'name':'Nose Bridge Root Width', 'value':'0.0008089587'}, {'uid':'Nose Bridge Width', 'name':'Nose Bridge Width', 'value':'-0.151844'}, {'uid':'Nose Depth', 'name':'Nose Depth', 'value':'0.06822503'}, {'uid':'Nose Flesh Size', 'name':'Nose Flesh Size', 'value':'-0.06651808'}, {'uid':'Nose Flesh Size Left', 'name':'Nose Flesh Size Left', 'value':'-0.06651808'}, {'uid':'Nose Flesh Size Right', 'name':'Nose Flesh Size Right', 'value':'-0.06651808'}, {'uid':'Nose Pinch', 'name':'Nose Pinch', 'value':'0.06621509'}, {'uid':'Nose Ridge', 'name':'Nose Ridge', 'value':'0.05887437'}, {'uid':'Nose Ridge Width', 'name':'Nose Ridge Width', 'value':'-0.1421739'}, {'uid':'Nose Septum Depth', 'name':'Nose Septum Depth', 'value':'0.05664279'}, {'uid':'Nose Septum Shape', 'name':'Nose Septum Shape', 'value':'-0.2603653'}, {'uid':'Nose Septum Width', 'name':'Nose Septum Width', 'value':'0.09397507'}, {'uid':'Nose Size', 'name':'Nose Size', 'value':'-0.04449083'}, {'uid':'Nose Tip Bottom Shape', 'name':'Nose Tip Bottom Shape', 'value':'-0.125112'}, {'uid':'Nose Tip Depth', 'name':'Nose Tip Depth', 'value':'-0.1056705'}, {'uid':'Nose Tip Height', 'name':'Nose Tip Height', 'value':'-0.06558509'}, {'uid':'Nose Tip Round', 'name':'Nose Tip Round', 'value':'-0.08883203'}, {'uid':'Nose Tip Upper Shape ', 'name':'Nose Tip Upper Shape ', 'value':'0.09428275'}, {'uid':'Nose Tip Width', 'name':'Nose Tip Width', 'value':'0.08594199'}, {'uid':'Nose Tip Width Lower', 'name':'Nose Tip Width Lower', 'value':'-0.0921209'}, {'uid':'Nose Tip Width Upper', 'name':'Nose Tip Width Upper', 'value':'-0.05530457'}, {'uid':'NoseAreaSmooth', 'name':'NoseAreaSmooth', 'value':'-0.2153823'}, {'uid':'NoseShape1', 'name':'NoseShape1', 'value':'-0.04364375'}, {'uid':'NoseShape12', 'name':'NoseShape12', 'value':'-0.0002368516'}, {'uid':'NoseShape9', 'name':'NoseShape9', 'value':'0.06115892'}, {'uid':'Nostrils Bottom Rotate', 'name':'Nostrils Bottom Rotate', 'value':'0.1900432'}, {'uid':'Nostrils Inner Height', 'name':'Nostrils Inner Height', 'value':'0.1300936'}, {'uid':'Nostrils Rotation', 'name':'Nostrils Rotation', 'value':'-0.05282873'}, {'uid':'Nostrils Shape Height', 'name':'Nostrils Shape Height', 'value':'0.1044582'}, {'uid':'Nostrils Shape Top', 'name':'Nostrils Shape Top', 'value':'0.1114903'}, {'uid':'Philtrum Angle', 'name':'Philtrum Angle', 'value':'-0.0831959'}, {'uid':'Philtrum Width', 'name':'Philtrum Width', 'value':'0.1325286'}, {'uid':'Cranium Height', 'name':'Cranium Height', 'value':'0.1073165'}, {'uid':'Cranium Size', 'name':'Cranium Size', 'value':'0.03095382'}, {'uid':'Cranium Slope', 'name':'Cranium Slope', 'value':'0.09578235'}, {'uid':'Cranium Width', 'name':'Cranium Width', 'value':'0.09243903'}, {'uid':'Forehead Define', 'name':'Forehead Define', 'value':'0.06234251'}, {'uid':'Forehead Height', 'name':'Forehead Height', 'value':'0.03113045'}, {'uid':'Forehead Slope', 'name':'Forehead Slope', 'value':'0.09482276'}, {'uid':'ForeHead Top Width', 'name':'ForeHead Top Width', 'value':'-0.1839768'}, {'uid':'Forehead Wrinkle', 'name':'Forehead Wrinkle', 'value':'0.1491054'}, {'uid':'Forehead Wrinkle Left', 'name':'Forehead Wrinkle Left', 'value':'0.1491054'}, {'uid':'Forehead Wrinkle Right', 'name':'Forehead Wrinkle Right', 'value':'0.1491054'}, {'uid':'Head Scale', 'name':'Head Scale', 'value':'-0.03086973'}, {'uid':'Glute Crease', 'name':'Glute Crease', 'value':'0.2869918'}, {'uid':'Glute Crease Left', 'name':'Glute Crease Left', 'value':'0.2869918'}, {'uid':'Glute Crease Right', 'name':'Glute Crease Right', 'value':'0.2869918'}, {'uid':'Glutes Lower Depth', 'name':'Glutes Lower Depth', 'value':'0.6771694'}, {'uid':'Glutes Lower Width', 'name':'Glutes Lower Width', 'value':'0.2050146'}, {'uid':'Glutes Round', 'name':'Glutes Round', 'value':'0.2236523'}, {'uid':'Glutes Size', 'name':'Glutes Size', 'value':'0.07011323'}, {'uid':'Glutes Upper Depth', 'name':'Glutes Upper Depth', 'value':'-1.266475'}, {'uid':'Glutes Width', 'name':'Glutes Width', 'value':'0.535168'}, {'uid':'GlutesUp', 'name':'GlutesUp', 'value':'0.3337034'}, {'uid':'Hip Bone Crest', 'name':'Hip Bone Crest', 'value':'-0.7277575'}, {'uid':'Hip Bone Size', 'name':'Hip Bone Size', 'value':'0.3363659'}, {'uid':'Hip Size', 'name':'Hip Size', 'value':'0.3425785'}, {'uid':'Hips High', 'name':'Hips High', 'value':'0.1242513'}, {'uid':'Hips Round', 'name':'Hips Round', 'value':'-0.2961028'}, {'uid':'HipShape1', 'name':'HipShape1', 'value':'0.3565118'}, {'uid':'HipSmall', 'name':'HipSmall', 'value':'1.686497'}, {'uid':'HipSmall2', 'name':'HipSmall2', 'value':'-0.4109167'}, {'uid':'HipSmooth', 'name':'HipSmooth', 'value':'0.2768537'}, {'uid':'HipSoftenCurves', 'name':'HipSoftenCurves', 'value':'0.07898831'}, {'uid':'HipThighYoung', 'name':'HipThighYoung', 'value':'-0.440688'}, {'uid':'Iliac Line', 'name':'Iliac Line', 'value':'-0.4038166'}, {'uid':'Pubic Area Width', 'name':'Pubic Area Width', 'value':'0.5094302'}, {'uid':'PubicAreaOut', 'name':'PubicAreaOut', 'value':'-0.165269'}, {'uid':'Knee Bones Size', 'name':'Knee Bones Size', 'value':'-0.2414025'}, {'uid':'Legs Length', 'name':'Legs Length', 'value':'0.1526516'}, {'uid':'LegShape1', 'name':'LegShape1', 'value':'1.876624'}, {'uid':'LegShape2', 'name':'LegShape2', 'value':'0.2831154'}, {'uid':'Shins Size', 'name':'Shins Size', 'value':'0.04260044'}, {'uid':'ShinsStraighten', 'name':'ShinsStraighten', 'value':'0.9167969'}, {'uid':'Thigh Bone Size', 'name':'Thigh Bone Size', 'value':'-0.3198702'}, {'uid':'Thigh Upper Gap', 'name':'Thigh Upper Gap', 'value':'-2.900618'}, {'uid':'Thighs Size', 'name':'Thighs Size', 'value':'-0.1624109'}, {'uid':'Thighs Tone', 'name':'Thighs Tone', 'value':'2.696615'}, {'uid':'ThighShape', 'name':'ThighShape', 'value':'1.1141'}, {'uid':'ThighStraight', 'name':'ThighStraight', 'value':'0.1526516'}, {'uid':'Neck Length', 'name':'Neck Length', 'value':'0.1427832'}, {'uid':'Neck Width', 'name':'Neck Width', 'value':'0.05325054'}, {'uid':'NeckBackIn', 'name':'NeckBackIn', 'value':'-1.400489'}, {'uid':'NeckDefine1', 'name':'NeckDefine1', 'value':'-0.2218773'}, {'uid':'NeckShape1', 'name':'NeckShape1', 'value':'-0.5280679'}, {'uid':'Traps Size', 'name':'Traps Size', 'value':'0.02485025'}, {'uid':'Torso Fitness', 'name':'Torso Fitness', 'value':'0.1082761'}, {'uid':'Upper Body Length', 'name':'Upper Body Length', 'value':'-0.07455076'}, {'uid':'Upper Torso Length', 'name':'Upper Torso Length', 'value':'-0.2316399'}, {'uid':'AbdomenCreaseSmooth', 'name':'AbdomenCreaseSmooth', 'value':'-1.022411'}, {'uid':'AbdomenSmooth', 'name':'AbdomenSmooth', 'value':'-0.01331264'}, {'uid':'Abs Definition', 'name':'Abs Definition', 'value':'1.375639'}, {'uid':'Abs Muscle', 'name':'Abs Muscle', 'value':'1.341026'}, {'uid':'AbsUpperLess', 'name':'AbsUpperLess', 'value':'0.932772'}, {'uid':'Love Handles', 'name':'Love Handles', 'value':'0.01420015'}, {'uid':'Navel Depth', 'name':'Navel Depth', 'value':'0.3345909'}, {'uid':'Navel Horizontal', 'name':'Navel Horizontal', 'value':'-0.08608839'}, {'uid':'Navel Size', 'name':'Navel Size', 'value':'0.2121147'}, {'uid':'Navel Vertical', 'name':'Navel Vertical', 'value':'0.3532286'}, {'uid':'Pregnant', 'name':'Pregnant', 'value':'-0.09585099'}, {'uid':'Rectus Outer Detail', 'name':'Rectus Outer Detail', 'value':'-0.5458181'}, {'uid':'Rectus Width', 'name':'Rectus Width', 'value':'-0.3443536'}, {'uid':'Stomach Depth', 'name':'Stomach Depth', 'value':'0.0292878'}, {'uid':'Stomach Lower Depth', 'name':'Stomach Lower Depth', 'value':'0.07987583'}, {'uid':'Stomach Shape 1', 'name':'Stomach Shape 1', 'value':'-0.05502556'}, {'uid':'Stomach Soften', 'name':'Stomach Soften', 'value':'-0.05236304'}, {'uid':'Waist Narrow Lower', 'name':'Waist Narrow Lower', 'value':'-0.02307524'}, {'uid':'Waist Narrow Upper', 'name':'Waist Narrow Upper', 'value':'0.05147553'}, {'uid':'Waist Width', 'name':'Waist Width', 'value':'0.1526516'}, {'uid':'WaistBellyInOut', 'name':'WaistBellyInOut', 'value':'-0.489905'}, {'uid':'WaistHipDefine', 'name':'WaistHipDefine', 'value':'-0.2227648'}, {'uid':'WaistHourglass', 'name':'WaistHourglass', 'value':'0.1819394'}, {'uid':'WaistLower', 'name':'WaistLower', 'value':'-0.3878415'}, {'uid':'WaistNarrow', 'name':'WaistNarrow', 'value':'0.1091636'}, {'uid':'WaistNarrow2', 'name':'WaistNarrow2', 'value':'0.08342585'}, {'uid':'Breast Impact Front1 Left', 'name':'Breast Impact Front1 Left', 'value':'0.05651665'}, {'uid':'Breast Impact Front1 Right', 'name':'Breast Impact Front1 Right', 'value':'0.0523324'}, {'uid':'Flirting', 'name':'Flirting', 'value':'0.1791602'}, {'uid':'Smile Full Face', 'name':'Smile Full Face', 'value':'0.2633608'}, {'uid':'Eyelids Bottom Down Left', 'name':'Eyelids Bottom Down Left', 'value':'0.4116208'}, {'uid':'Eyelids Bottom Down Right', 'name':'Eyelids Bottom Down Right', 'value':'0.4135466'}, {'uid':'Eyelids Bottom Up Left', 'name':'Eyelids Bottom Up Left', 'value':'2.279499E-05'}, {'uid':'Eyelids Top Down Left', 'name':'Eyelids Top Down Left', 'value':'0.1543578'}, {'uid':'Eyelids Top Down Right', 'name':'Eyelids Top Down Right', 'value':'0.15508'}, {'uid':'Centre Crease', 'name':'Centre Crease', 'value':'1.772356'}, {'uid':'Glute Bend Helper', 'name':'Glute Bend Helper', 'value':'0.1127137'}, {'uid':'Hip Bend Smoother', 'name':'Hip Bend Smoother', 'value':'-0.3461286'}, {'uid':'Inner Thigh Gap', 'name':'Inner Thigh Gap', 'value':'0.24584'}, {'uid':'Inner Thigh Gap2', 'name':'Inner Thigh Gap2', 'value':'-0.2227648'} ]}, {'id':'BreastControl', 'mass':'1.0', 'damper':'0.6159027', 'positionDamperZ':'32.99634'}, {'id':'BreastPhysicsMesh', 'allowSelfCollision':'true', 'softVerticesUseAutoColliderRadius':'false', 'softVerticesCombinedSpring':'46.5924', 'softVerticesCombinedDamper':'1.240339', 'softVerticesMass':'0.2903502', 'softVerticesBackForce':'4.560902', 'softVerticesBackForceThresholdDistance':'0.003079569', 'softVerticesBackForceMaxForce':'11.56193', 'softVerticesColliderRadius':'0.03967487', 'softVerticesDistanceLimit':'0.0461177', 'groupASpringMultiplier':'1.604398', 'groupADamperMultiplier':'2.160765', 'groupBSpringMultiplier':'3.813315', 'groupBDamperMultiplier':'4.072351'}, {'id':'RightHandFingerControl', 'thumbProximalBend':'22.75148', 'thumbProximalSpread':'22.57418', 'thumbProximalTwist':'-16.26044', 'thumbMiddleBend':'32.16537', 'thumbDistalBend':'82.76943', 'indexProximalBend':'28.45423', 'indexProximalSpread':'8.258828', 'indexProximalTwist':'0.9104464', 'indexMiddleBend':'37.48132', 'indexDistalBend':'31.28625', 'middleProximalBend':'24.83536', 'middleProximalSpread':'2.064707', 'middleProximalTwist':'-14.10522', 'middleMiddleBend':'17.08464', 'middleDistalBend':'18.20713', 'ringProximalBend':'16.37657', 'ringProximalSpread':'-2.064707', 'ringProximalTwist':'-8.150055', 'ringMiddleBend':'18.2609', 'ringDistalBend':'15.33151', 'pinkyProximalBend':'12.98338', 'pinkyProximalSpread':'-8.258828', 'pinkyProximalTwist':'-6.976563', 'pinkyMiddleBend':'14.2355', 'pinkyDistalBend':'11.29618'}, {'id':'FemaleEyelashes', 'Diffuse Color':{'h':'0.1111108', 's':'0.2093028', 'v':'0.1686275'}}, {'id':'MaleEyelashes', 'Gloss':'5.6', 'Diffuse Color':{'h':'0.111111', 's':'0.2499996', 'v':'0.0470588'}, 'Specular Color':{'h':'0.07936499', 's':'0.2999999', 'v':'0.2745098'}, 'Subsurface Color':{'h':'0', 's':'0.2509804', 'v':'1'}}, {'id':'sclera', 'Specular Color':{'h':'0.5584416', 's':'0.3019608', 'v':'1'}}, {'id':'AppearancePresets', 'presetName':'BASIC'}, {'id':'skin', 'Specular Texture Offset':'0', 'Specular Intensity':'1.52721', 'Gloss':'6', 'Specular Fresnel':'0.8944258', 'Gloss Texture Offset':'0.2607574', 'Diffuse Texture Offset':'-0.02699256', 'Diffuse Bumpiness':'0.03409049', 'Specular Bumpiness':'0.2218226', 'Global Illumination Filter':'0.9295934', 'Pubic Hair':'Shaved', 'Skin Color':{'h':'0', 's':'0.04453365', 'v':'0.9577042'}, 'Specular Color':{'h':'0.5999998', 's':'0.1176471', 'v':'1'}, 'Subsurface Color':{'h':'0.06976748', 's':'0.1869566', 'v':'0.9019608'}} ]} ]}";
	private UnityEngine.UI.Toggle futa;
	private string femalebackup="";
        private JSONStorableBool minState;
        private JSONStorableBool maxState;
        private JSONStorableFloat minValue;
        private JSONStorableFloat maxValue;
        private UIDynamicSlider minSlider;
        private UIDynamicSlider maxSlider;
		public JSONStorableString commandget;
		public JSONStorableString commandresult;
	
        private void echo2(string s){return;echocount++;SuperController.LogMessage(echocount+": "+s);}
        private void echo3(string s){return;echocount++;SuperController.LogMessage(echocount+": "+s);}
        private void echo4(string s){return;echocount++;SuperController.LogMessage(echocount+": "+s);}
        private void echo5(string s){return;echocount++;SuperController.LogMessage(echocount+": "+s);}
        private void echo6(string s){return;echocount++;SuperController.LogMessage(echocount+": "+s);}
        private void echo7(string s){return;echocount++;SuperController.LogMessage(echocount+": "+s);}
        private void echo8(string s){if(debugger){return;echocount++;SuperController.LogMessage(echocount+": "+s);}}
        private void echo9(string s){if(debugger){return;echocount++;SuperController.LogMessage(echocount+": "+s);}}
        private void echo10(string s){return;echocount++;SuperController.LogMessage(echocount+": "+s);}
        private void echo11(string s){return;echocount++;SuperController.LogMessage(echocount+": "+s);}
        private void echo12(string s){return;echocount++;SuperController.LogMessage(echocount+": "+s);}
        private void echo14(string s){return;echocount++;SuperController.LogMessage(echocount+": "+s);}
        private void echo15(string s){return;echocount++;SuperController.LogMessage(echocount+": "+s);}
        private void echo16(string s){return;echocount++;SuperController.LogMessage(echocount+": "+s);}
        private void echo17(string s){return;echocount++;SuperController.LogMessage(echocount+": "+s);}
        private void echo18(string s){return;echocount++;SuperController.LogMessage(echocount+": "+s);}
        private void echo19(string s){return;echocount++;SuperController.LogMessage(echocount+": "+s);}
        private void echo20(string s){return;echocount++;SuperController.LogMessage(echocount+": "+s);}
        private void echo21(string s){return;echocount++;SuperController.LogMessage(echocount+": "+s);}
        private void echo22(string s){return;echocount++;SuperController.LogMessage(echocount+": "+s);}
        private void echo23(string s){return;echocount++;SuperController.LogMessage(echocount+": "+s);}
        private void echo24(string s){return;echocount++;SuperController.LogMessage(echocount+": "+s);}
        private void echo25(string s){return;echocount++;SuperController.LogMessage(echocount+": "+s);}
        private void echo26(string s){return;echocount++;SuperController.LogMessage(echocount+": "+s);}
        private void echo27(string s){echocount++;SuperController.LogMessage(echocount+": "+s);}
  
        private void echo(string s){return;echocount++;SuperController.LogMessage(echocount+": "+s);}
        private void echobool(bool s){return;echocount++;SuperController.LogMessage(echocount+": "+s.ToString());}
        private void echoint(int s){return;echocount++;SuperController.LogMessage(echocount+": "+s.ToString());}
		
		//colors
		
	    private Color hudslidecolor = new Color(0.1f,0.12f,0.14f,0.88f);
	    private Color hudslidecolorlight = new Color(0.4f,0.38f,0.45f,1f);
	    private Color modelmenucolor = Color.white;
	    private Color modelmenutext = Color.black;
	    private Color skinmenucolor = new Color(0.23f, 0.23f, 0.3f);
	    private Color skinmenucolortrans = new Color(0.23f, 0.23f, 0.3f,0.6f);
	    private Color skinmenucolorlight = new Color(0.33f, 0.33f, 0.4f);
	    private Color skinmenutext = Color.white;
	    private Color titletextcolor = new Color(0.8f, 0.9f, 1f);
	    private Color uiscrollwindowcolor = new Color(0.3f,0.29f,0.34f);
		private Color uiframecolor = new Color(0f,0f,0f,0.8f);
		private Color uibackgroundcolor = new Color(0f,0f,0f);
		private Color chatcolor = new Color(0.23f, 0.21f, 0.21f,0.75f);
		private Color hudbackcolor = new Color(0.23f, 0.21f, 0.21f,1f);
		private Color refreshcolor = new Color(1f, 0.93f, 0.97f);
		private Color addmodelcolor = new Color(0.8f, 0.6f, 0f,1f);
		private Color modelcolor = new Color(0.6f,0.3f,0.1f);
		private Color pastemodelcolor = new Color(0.45f,0.44f,0.49f);
		private Color copymodelcolor = new Color(0.45f,0.44f,0.49f);
		private Color loadmodelcolor = new Color(0.45f,0.44f,0.49f,0.7f);
		private Color savemodelcolor = new Color(0.45f,0.44f,0.49f,0.7f);
		private Color loadmorphcolor = new Color(0.45f,0.44f,0.49f,0.4f);
		private Color savemorphcolor = new Color(0.45f,0.44f,0.49f,0.4f);	
		private Color pastetexturecolor = new Color(0.45f,0.44f,0.49f,0.6f);
		private Color copytexturecolor = new Color(0.45f,0.44f,0.49f,0.6f);
		private Color skinmodelcolor = new Color(0.45f,0.44f,0.49f,0.8f);
		private Color modelcolorlight = new Color(0.81f,0.5f,0.14f);
		private Color streamcolor = new Color(0.45f,0.44f,0.49f,0.8f);
		private Color advancedbuttoncolor =  new Color(0.45f,0.44f,0.49f);
		private Color advancedbuttontextcolor = new Color(0.8f, 0.9f, 1f);
		private Color textbackgroundcolor = new Color(0.35f,0.34f,0.39f);
		private Color textlabelcolor = new Color(0.9f,0.87f,0.91f);
		private Color inputcolor = new Color(0.9f,0.87f,0.91f);
		private Color selectcolor =  new Color(0.20f, 0.18f, 0.18f);
		private Color searchcolor =  new Color(0.20f, 0.18f, 0.18f);
		private Color splitcolor = new Color(0.20f, 0.18f, 0.18f);
		private Color mergecolor = new Color(0.20f, 0.18f, 0.18f);
		private Color verticalscolor =  Color.white;
		private Color verticalssubcolor =  new Color(0.43f, 0.43f, 0.5f);
		private Color allinactivecolor =  new Color(0.8f, 0.6f, 0f);
		private Color allinactivetext =  Color.white;


        private string crowd(){string n="";
		foreach(Atom p in SuperController.singleton.GetAtoms())
		{if(p.type == "Person"){n+=p.name;}}
		return n;
		}

        private bool persons(){bool pp=false;
		foreach(Atom p in SuperController.singleton.GetAtoms())
		{if(p.type == "Person"){pp=true;break;}}
		people=pp;
		return pp;
		}


        public bool morphdir(string creator="God")
        {
            	bool result = false;	
		var dir="Custom\\Atom\\Person\\Morphs";
                if (!FileManagerSecure.DirectoryExists(dir+"\\male\\"+creator)){FileManagerSecure.CreateDirectory(dir+"\\male\\"+creator);}
                if (!FileManagerSecure.DirectoryExists(dir+"\\male_genitalia\\"+creator)){FileManagerSecure.CreateDirectory(dir+"\\male_genitalia\\"+creator);}
                if (!FileManagerSecure.DirectoryExists(dir+"\\female\\"+creator)){FileManagerSecure.CreateDirectory(dir+"\\female\\"+creator);}
                if (!FileManagerSecure.DirectoryExists(dir+"\\female_genitalia\\"+creator)){FileManagerSecure.CreateDirectory(dir+"\\female_genitalia\\"+creator);}		            
		return (result);
        }


        public void plugindir()
        {
            
		 if (!FileManagerSecure.DirectoryExists(_plugindir))
            {
			FileManagerSecure.CreateDirectory(_plugindir);	
			}
            if (FileManagerSecure.DirectoryExists(_plugindir))
            {	
                if (!FileManagerSecure.DirectoryExists(_plugindir+_pluginowner))
		FileManagerSecure.CreateDirectory(_plugindir+_pluginowner);

                if (FileManagerSecure.DirectoryExists(_plugindir+_pluginowner)){
		if (!FileManagerSecure.DirectoryExists(_plugindir+_pluginowner+_plugin))
		FileManagerSecure.CreateDirectory(_plugindir+_pluginowner+_plugin);
		}             
            }
            else SuperController.LogMessage("This function requires the folder Saves\\PluginData to exist.");
            return;
        }

		
        public void removechooser(){}


		private string plist="";
        private void makechooser(string selectp=""){

		if(popup==true){
		//RemovePopup(menulabel);
		popup = false;
		if(_count>0){
		Result("UPDATING MODELS");
		}
		//choices.Clean();
		}

		if(!persons()){echo ("makechooser no persons");Refresh();


         	if (rtitle != null)
                RemoveTextField(rtitle);

		if (ltitle != null)
                RemoveTextField(ltitle);

            	if (lend != null)
                RemoveTextField(lend);
		for(int i=0;i<28;i++){if(letterbox[i]!=null){RemoveButton(letterbox[i]);}}
		toptitle("","");models.enabled = false;wiz.enabled=ui.enabled;if(wiz.enabled){StartCoroutine(iletters(clear:true));}else{StartCoroutine(iletters());}
		plist="";modelbutton.label="No models";modelbutton.buttonColor=modelcolor;
		
		return;
		}

		if(_count>0){
		models.enabled = true;
		Result("UPDATING MODELS - FOUND");}
		List<string> choices = new List<string>();pnum=0;plist="";
		
		if(selectp==""){
		bool pfound=false;
		foreach(string pp in SuperController.singleton.GetAtomUIDs())
		{


		
			if(SuperController.singleton.GetAtomByUid(pp)!=null){


	
			Atom ppp=SuperController.singleton.GetAtomByUid(pp);
		  if(ppp.type=="Person"){
			plist+=ppp.name+"\n";
			pnum++;
			if(!pfound && ppp.on){pfound=true;
			selectp = ppp.name;}
			}
			  
			  
		

			  
			}
		}
		
		}
		
		modelbutton.buttonText.lineSpacing = 0.73f;
		modelbutton.label="Model:\n"+selectp;
		modelbutton.buttonColor=new Color(0.3f,0.6f,0.8f);
			setperson(selectp);
		}



public UIDynamicTextField CreateTextFieldui(Transform u, JSONStorableString jss,float w = 100,float h=20,float x=0,float y=0,float z=0)
{
	UIDynamicTextField uIDynamicTextField = null;
	if (manager != null && manager.configurableTextFieldPrefab != null && jss.text == null)
	{
		Transform tr = GameObject.Instantiate<Transform>(this.manager.configurableTextFieldPrefab);
		transform(tr,w,h,x,y,z,0);
		tr.SetParent(u, false);
		if (tr!= null)
		{
			uIDynamicTextField = tr.GetComponent<UIDynamicTextField>();
			if (uIDynamicTextField != null)
			{
				textFieldToJSONStorableString.Add(uIDynamicTextField, jss);
				jss.dynamicText = uIDynamicTextField;
			}
		}
	}
	return uIDynamicTextField;
}

public UIDynamicPopup CreateScrollablePopupui(JSONStorableStringChooser jsc, bool rightSide = false)
{
	UIDynamicPopup uIDynamicPopup = null;
	if (manager != null && manager.configurableScrollablePopupPrefab != null && jsc.popup == null)
	{
		Transform tr = GameObject.Instantiate<Transform>(this.manager.configurableScrollablePopupPrefab);
		transform(tr,350,82,250,1542);
		tr.SetParent(ui.transform, false);
		//transform.SetParent(SuperController.singleton.mainHUD, false);
		if (tr != null)
		{echo("kok");
			uIDynamicPopup = tr.GetComponent<UIDynamicPopup>();
			if (uIDynamicPopup != null)
			{
				popupToJSONStorableStringChooser.Add(uIDynamicPopup, jsc);
				uIDynamicPopup.label = jsc.name;
				jsc.popup = uIDynamicPopup.popup;
			}
		}
	}
	return uIDynamicPopup;
}

public UIDynamicSlider CreateSliderui(JSONStorableFloat jsf)
{
	UIDynamicSlider uIDynamicSlider = null;
	if (manager != null && manager.configurableSliderPrefab != null && jsf.slider == null)
	{

		Transform tr = GameObject.Instantiate<Transform>(this.manager.configurableSliderPrefab);
		if (tr != null)
		{
			uIDynamicSlider = tr.GetComponent<UIDynamicSlider>();
			if (uIDynamicSlider != null)
			{


				//uIDynamicSlider.Configure(jsf.name,jsf.min,jsf.max,jsf.val,jsf.constrained);
				//uIDynamicSlider.Configure(name: jsf.name,min: jsf.min,max: jsf.max,val: jsf.val,constrained: jsf.constrained,valFormat: "F2");
				uIDynamicSlider.Configure(jsf.name, jsf.min, jsf.max, jsf.val, false,  valFormat: "F2", showQuickButtons: false, showRangeAdjust: false);
				jsf.slider = uIDynamicSlider.slider;
				sliderToJSONStorableFloat.Add(uIDynamicSlider, jsf);
			}
		}
	}
	return uIDynamicSlider;
}



public UIDynamicTextField textbackground(Transform u,float w1, float x, float adjust, float y)
{
                var a = CreateTextFieldui(u,new JSONStorableString(name, ""),w1,59f,x,y);
		a.backgroundColor = textbackgroundcolor;
return a;
}

public UIDynamicTextField tip(Transform u,float w=0, float h=0, float x=50, float y=0)
{
        var a = CreateTextFieldui(u,new JSONStorableString(name, ""),w,h,x,y);
		a.backgroundColor = Color.clear;
		a.textColor=Color.white;
return a;
}


public UIDynamicTextField textlabel(Canvas u, string nam,float w1, float x, float adjust, float y,int size=24)
{
                var d = CreateTextFieldui(u.transform,new JSONStorableString(nam+"Name", nam),w1-100,35f,x,y+9);
                d.backgroundColor = Color.clear;
                d.UItext.color = textlabelcolor;
                d.UItext.fontStyle = FontStyle.Bold;
		d.UItext.fontSize = size;
		
return d;
}

public UIDynamicTextField textfield(Canvas u, float w1, float x, float adjust, float y,float adjusty = 0,float h=0f)
{
                var b=CreateTextFieldui(u.transform,new JSONStorableString(name, ""),w1-adjust,43f+h,x+adjust,y+10+adjusty);
return b;
}

public InputField inputfield(UIDynamicTextField b, string type = "normal")
{
                var c=b.gameObject.AddComponent<InputField>();
                c.textComponent = b.UItext;
				b.UItext.color = inputcolor;
                b.backgroundColor = Color.clear;
                c.textComponent.fontSize = 36;
		if(type=="numeric"){c.contentType = InputField.ContentType.IntegerNumber;}
		//c.lineType = InputField.LineType.MultiLineNewline;

return c;
}

public void removecan(Canvas ccc)
        {	
                if (SuperController.singleton != null)
                    SuperController.singleton.RemoveCanvas(ccc);

                if (ccc != null)
                   {ccc.transform.SetParent(null, false);

                if (ccc.gameObject != null)
                   GameObject.Destroy(ccc.gameObject);
                   }
}

    public Canvas can(bool clean = false, float x = 0, float y=0, float z=0, float xangle=0, float yangle=180, float zangle=0)
        {
	float scale = 0.001f;

	GameObject co=new GameObject();
	co.AddComponent<Canvas>();
	co.GetComponent<Canvas>().renderMode=RenderMode.WorldSpace;
	co.GetComponent<Canvas>().pixelPerfect=false;
	co.AddComponent<CanvasScaler>();
	co.GetComponent<CanvasScaler>().scaleFactor=100;
	co.GetComponent<CanvasScaler>().dynamicPixelsPerUnit=1.5f;
   	co.AddComponent<GraphicRaycaster>();
	co.transform.localScale=new Vector3(scale, scale, scale);
        co.transform.localPosition=new Vector3(x, y, z);
	Canvas cc=co.GetComponent<Canvas>();
	//SuperController.singleton.AddCanvas(cc);
	//cc.transform.SetParent(SuperController.singleton.mainHUD, false);
return cc;
	}

	public Transform holo=SuperController.singleton.navigationHologrid.transform;
	public Transform holoparent=SuperController.singleton.navigationHologrid.transform.parent;
	public bool holoshow=false;
	public float holotrans=0f;

     public void setadv(bool clean = false, float x = 0, float y=0, float z=0, float xangle=0, float yangle=180, float zangle=0)
        {
	float scale = 0.001f;
	if (adv != null)
	{
        if (SuperController.singleton != null)
	SuperController.singleton.RemoveCanvas(adv);
	//
        adv.transform.SetParent(null, false);
	//
        if (adv.gameObject != null)
	GameObject.Destroy(adv.gameObject);
	//
	if (clean == true)
	return;
	}
	//
	GameObject co=new GameObject();
	adv=co.AddComponent<Canvas>();
	adv.renderMode=RenderMode.WorldSpace;
	adv.pixelPerfect=false;
	SuperController.singleton.AddCanvas(adv);
	adv.transform.SetParent(ui.transform, false);
	CanvasScaler c=co.AddComponent<CanvasScaler>();
	c.scaleFactor=100;
	c.dynamicPixelsPerUnit=1.5f;
   	GraphicRaycaster gr = co.AddComponent<GraphicRaycaster>();
	adv.transform.localScale=new Vector3(scale, scale, scale);
        adv.transform.localPosition=new Vector3(x, y, z);
	setangle(adv,xangle,yangle,zangle);
	advgroup=co.AddComponent<CanvasGroup>();
	}


     public void setscroll(bool clean = false, float x = 0, float y=0, float z=0, float xangle=0, float yangle=180, float zangle=0)
        {
	float scale = 0.001f;
	if (scroll != null)
	{
        if (SuperController.singleton != null)
	SuperController.singleton.RemoveCanvas(scroll);
	//
        scroll.transform.SetParent(null, false);
	//
        if (scroll.gameObject != null)
	GameObject.Destroy(scroll.gameObject);
	//
	if (clean == true)
	return;
	}
	//
	GameObject co=new GameObject();
	scroll=co.AddComponent<Canvas>();
	scroll.renderMode=RenderMode.WorldSpace;
	scroll.pixelPerfect=false;
	SuperController.singleton.AddCanvas(scroll);
	scroll.transform.SetParent(ui.transform, false);
	CanvasScaler c=co.AddComponent<CanvasScaler>();
	c.scaleFactor=100;
	c.dynamicPixelsPerUnit=1.5f;
   	GraphicRaycaster gr = co.AddComponent<GraphicRaycaster>();
	scroll.transform.localScale=new Vector3(scale, scale, scale);
        scroll.transform.localPosition=new Vector3(x, y, z);
	setangle(scroll,xangle,yangle,zangle);
	scrollgroup=co.AddComponent<CanvasGroup>();
	}

private string VerticesToHeadFix(string c) {
var r="";foreach(char ch in c){
int n = ch;r+="<"+n.ToString();}
return r;}

private string VerticesToBodyFix(string c) {
var r="";string[] ch = c.Split("<"[0]);
foreach(string s in ch){
if(s!=""){r+= Convert.ToChar(intparse(s.ToString()));}}
return r;}

     public void setui(bool clean = false, float x = 0, float y=0, float z=0, float xangle=0, float yangle=180, float zangle=0)
        {
	float scale = 0.001f;
	if (ui != null)
	{
        if (SuperController.singleton != null)
	SuperController.singleton.RemoveCanvas(ui);
	//
        ui.transform.SetParent(null, false);
	//
        if (ui.gameObject != null)
	GameObject.Destroy(ui.gameObject);
	//
	if (clean == true)
	return;
	}
	//
	GameObject co=new GameObject();
	ui=co.AddComponent<Canvas>();
	ui.renderMode=RenderMode.WorldSpace;
	ui.pixelPerfect=false;
	SuperController.singleton.AddCanvas(ui);
	ui.transform.SetParent(SuperController.singleton.mainHUD, false);
	CanvasScaler c=co.AddComponent<CanvasScaler>();
	c.scaleFactor=100;
	c.dynamicPixelsPerUnit=1.5f;
   	GraphicRaycaster gr = co.AddComponent<GraphicRaycaster>();
	ui.transform.localScale=new Vector3(scale, scale, scale);
        ui.transform.localPosition=new Vector3(x, y, z);
	setangle(ui,xangle,yangle,zangle);
	uigroup=co.AddComponent<CanvasGroup>();
	}

    public void removecanvas(Canvas aa){
	if (aa != null)
	{
        if (SuperController.singleton != null)
	SuperController.singleton.RemoveCanvas(aa);
	//
        aa.transform.SetParent(null, false);
	//
        if (aa.gameObject != null)
	GameObject.Destroy(aa.gameObject);
	}}

//private void setparent(Canvas a,Canvas b){a.transform.SetParent(b.transform, false);}

  public Canvas sethud(float x = 0.32f, float y = -0.197f, float z = 0.0975f, float xangle = 29.5f, float yangle=180, float zangle=0, float scale = 0.0005f)
        {
	return setcanvas(x,y,z,xangle,yangle,zangle,scale);
	}

  public Canvas setcanvas(float x = 0, float y=0, float z=0f, float xangle=0, float yangle=0, float zangle=0, float scale = 0.0005f, Transform cc=null)
        {
	GameObject co=new GameObject();
	Canvas _a=co.AddComponent<Canvas>();
	_a.renderMode=RenderMode.WorldSpace;
	_a.pixelPerfect=true;
	SuperController.singleton.AddCanvas(_a);//SuperController.singleton.mainHUD.Find("MainUICanvas/CloseMainUIButton");
	Transform bb=cc;if(cc==null){bb=SuperController.singleton.mainHUD;}
	_a.transform.SetParent(bb, false);
	CanvasScaler c=co.AddComponent<CanvasScaler>();
	c.scaleFactor=100;
	c.dynamicPixelsPerUnit=1f;
   	GraphicRaycaster gr = co.AddComponent<GraphicRaycaster>();
	on=_a.gameObject.AddComponent<CanvasGroup>();
	_a.transform.localScale=new Vector3(scale, scale, scale);
    _a.transform.localPosition=new Vector3(x, y, z); 
	setangle(_a,xangle,yangle,zangle);
	return _a;
	}

        private void pp(Transform t)
        {
            t.SetParent(ui.transform, false);
        }

 		public float a;
		public Color bgcolor = Color.black;
		public Color fillcolor = Color.white;
		public float bgpos;
		
    void OnSubmit(string line) {
        echo5("OnSubmit("+line+")");
    }
    public void OnGUI()
	
    {
        // Make a button using a custom GUIContent parameter to pass in the tooltip.
       if(pluginLabelJSON.val=="installer"){GUI.Button(new Rect(Screen.width/2-110, 10, 220, 20), new GUIContent("//\\\\/\\\\ORPHINEº V"+version+" installer", ""));
		//GUI.button.transform.position = new Vector2(1000, GUI.button.transform.position.y);

        // Display the tooltip from the element that has mouseover or keyboard focus
	   GUI.Label(new Rect(10, 40, 100, 40), GUI.tooltip);
	   }
		
		/*
        Event e = Event.current;
          if (Event.current.Equals(Event.KeyboardEvent(KeyCode.Return.ToString())))
        {
			if(_chatinput.GetComponent<InputField>().isFocused == true){
				//sendb.SendMessage ("OnClick");
				Clientmessage(chatinput.text,raw: false);_chatinput.ActivateInputField();
			}
            echo5("Detected key code: " + e.keyCode);
        }
		*/
    }
private void setilevel(int level=0){
			if (level==1){_copyButton.label = "Morphs: Inbuilt inactive";_copyButton.buttonColor = new Color(0.5f, 0.48f, 0.52f);_copyButton.textColor = Color.white;}
			else if(level==2){_copyButton.label = "Morphs: Custom inactive";_copyButton.buttonColor = new Color(0.3f, 0.4f, 0.8f);_copyButton.textColor = Color.white;}
			else if(level==3){_copyButton.label = "Morphs: Licenced inactive";_copyButton.buttonColor = new Color(0.7f, 0.3f, 0.3f);_copyButton.textColor = Color.white;}
			else if(level==0){_copyButton.label = "Morphs: All inactive";_copyButton.buttonColor = allinactivecolor; _copyButton.textColor = allinactivetext;}
			else if(level==4){_copyButton.label = "Show only active";_copyButton.buttonColor = new Color(0.3f, 0.28f, 0.32f);_copyButton.textColor = Color.gray;lastlevel=ilevel;}
			ilevel=level;
			}
private bool addingperson=false;private string newperson="any";



private IEnumerator changeskin(string model,bool keeptexture=true){
					if(!people){Result("ADD A MODEL FIRST");yield break;}
_person.GetStorableByID("textures").SaveToStore2();
_person.GetStorableByID("skin").SaveToStore3();


yield return new WaitForSecondsRealtime(1.0f);

		if(model.Contains("Futa")){
		yield return Futa(model,male: false,forceselect: _person.name);
		}
		else if(model.Contains("Male") || model.Contains("Jackaroo")){yield return Futa(model,male: true,forceselect: _person.name);}
		else{_person.GetComponentInChildren<DAZCharacterSelector>(true).SelectCharacterByName(model);}

yield return new WaitForSecondsRealtime(1.0f);
while(loadtime!=0){yield return null;}
_person.GetStorableByID("textures").RestoreAllFromStore2();
_person.GetStorableByID("skin").RestoreAllFromStore3();
echo5("done");
}



private IEnumerator addperson(string model="Kayla",bool quick=false,bool morph=false){
	addingperson=true;
	var pr="";
	foreach(Atom p in SuperController.singleton.GetAtoms()){if(p.type == "Person"){pr+="["+p.name+"]";}}
	yield return new WaitForSecondsRealtime(1.0f);
	echo3("DO NOT TOUCH: "+pr);
	
	addatom("Person");
	

	
	
	for (int i=1;i<10;i++){
	
	foreach(Atom p in SuperController.singleton.GetAtoms()){if(p.type == "Person" && !pr.Contains("["+p.name+"]")){
	p.GetComponentInChildren<DAZCharacterSelector>().RemoveAllClothing();
	p.GetComponentInChildren<DAZCharacterSelector>().RemoveAllHair();}}
	
	if(SuperController.singleton.loadingUI.gameObject.active || SuperController.singleton.loadingIcon.gameObject.active){i--;}
	echo3("loading "+i.ToString());yield return new WaitForSecondsRealtime(0.3f);}

	foreach(Atom p in SuperController.singleton.GetAtoms()){if(p.type == "Person" && !pr.Contains("["+p.name+"]")){
	echo3("NEW: "+p.name);
	newperson=p.name;
	p.GetComponentInChildren<DAZCharacterSelector>().RemoveAllClothing();
	p.GetComponentInChildren<DAZCharacterSelector>().RemoveAllHair();

	makechooser(newperson);}}


			
	for (int i=1;i<3;i++){if(SuperController.singleton.loadingUI.gameObject.active || SuperController.singleton.loadingIcon.gameObject.active){i--;}yield return new WaitForSecondsRealtime(1.0f);}


	
	if(model.Contains("Male")){yield return Futa(model,male: true,forceselect: newperson);}
	else{

/*	
_person.GetComponentInChildren<DAZCharacterSelector>(true).SelectCharacterByName(model);
var ibnks = _characterSelector.femaleMorphBank1.morphs;
foreach(DAZMorph sm in ibnks){
var key="\n"+sm.resolvedDisplayName+sm.morphName+"\t";
var malekey="\n"+sm.resolvedDisplayName+sm.morphName+"\n";
var keystart=sm.morphName+"\t";
var keyend="\t"+sm.resolvedDisplayName;
sm.morphValue=0.0f;sm.Reset();
if(femalemaker.Contains(key) && !sm.uid.Contains("Custom/") && !sm.uid.Contains(":/")){
string[] sub1 = Splitstring(keystart,femalemaker);
string[] sub2 = Splitstring(keyend,sub1[1]);
sm.morphValue=float.Parse(sub2[0]);}
}
*/


			string aj = "";bool custom=false;
			var saveName=_plugindir+_pluginowner+_plugin+"\\default.morphine.json";
			if(!FileManagerSecure.FileExists(saveName)){
			var ajtmp=jsondefault.Replace("'","\"");
			FileManagerSecure.WriteAllText(_plugindir+_pluginowner+_plugin+"\\default.morphine.json",ajtmp);
			aj=ajtmp.Replace("\t","").Replace("\r","").Replace("\n","").Replace(" {\"","{\"").Replace(", \"",",\"").Replace(" ]","]");
			}
			else{custom=true;
			aj = FileManagerSecure.ReadAllText(saveName).Replace("\t","").Replace("\r","").Replace("\n","").Replace(" {\"","{\"").Replace(", \"",",\"").Replace(" ]","]");
			}
			
			var prs="\"type\":\"Person\"";
			if(aj.Contains(prs)){
			aj="{\"atoms\":[ {\"id\":\""+newperson+"\", \"on\":\"true\","+aj.Substring(aj.IndexOf(prs)+prs.Length);
			}
			
			var chr="\"character\":\"";
			if(aj.Contains(chr)){
			var ctmp=aj.Substring(0,aj.IndexOf(chr))+chr;
			var ctmp2=aj.Substring(ctmp.Length);
			aj=ctmp+model+ctmp2.Substring(ctmp2.IndexOf("\""));
			}
			
			var lnk="\"linkTo\":\"";
			var rep=lnk.ToUpper();
			while(aj.Contains(lnk)){
			var atmp=aj.Substring(0,aj.IndexOf(lnk))+rep;
			var atmp2=aj.Substring(atmp.Length);
			aj=atmp+newperson+atmp2.Substring(atmp2.IndexOf(":"));
			}
			
			aj=aj.Replace(rep,lnk).Replace("Futa ","").Replace("by Weeb)","(by Ren)");
			
			if(quick){
			var mtag=",\"morphs\":[{\"";
			if(aj.Contains(mtag)){
			var jstart=aj.Substring(0,aj.IndexOf(mtag));
			var jmorph=aj.Substring(jstart.Length)+mtag.Length;
			aj=jstart+jmorph.Substring(jmorph.IndexOf("\"}]")+3);
			}}
			
			JSONNode jSONNode = JSON.Parse(aj);
			JSONArray asArray = jSONNode["atoms"].AsArray;
			JSONClass asObject = asArray[0].AsObject;
	
			_person.PreRestore(usehumanizer, false);
			_person.RestoreTransform(asObject);
			bool looks=!quick;if(morph){looks=true;}
			_person.Restore(asObject, usehumanizer, looks, false, asArray);
			_person.LateRestore(asObject, usehumanizer, looks, false);
			_person.PostRestore(usehumanizer, looks);
			_person.ResetPhysics(usehumanizer);
			if(addhere){movehere(_person);}
		
for (int i=1;i<3;i++){if(SuperController.singleton.loadingUI.gameObject.active || SuperController.singleton.loadingIcon.gameObject.active){i--;}yield return new WaitForSecondsRealtime(1.0f);}
Refresh();
while(refreshing){}

	if(quick){
	if(morph){Preset(mode:"Morph");}else{Preset();}
	yield break;
	}
	
for (int i=1;i<3;i++){if(SuperController.singleton.loadingUI.gameObject.active || SuperController.singleton.loadingIcon.gameObject.active){i--;}yield return new WaitForSecondsRealtime(1.0f);}

if(userealskin){
Result("APPLYING RealSKIN™");
StartCoroutine(realskin(_person,safe:true));
}

for (int i=1;i<3;i++){if(SuperController.singleton.loadingUI.gameObject.active || SuperController.singleton.loadingIcon.gameObject.active){i--;}yield return new WaitForSecondsRealtime(1.0f);}

selectall(true);


	}
	//_person.GetComponentInChildren<DAZCharacterSelector>().RemoveAllClothing();
	//_person.GetComponentInChildren<DAZCharacterSelector>().RemoveAllHair();
	
	for (int i=1;i<2;i++){if(SuperController.singleton.loadingUI.gameObject.active || SuperController.singleton.loadingIcon.gameObject.active){i--;}yield return new WaitForSecondsRealtime(1.0f);}

echo3("fuck start");

	for(int i=2;i<102;i+=2){
		nosetval=true;
		pslider.slider.value=i;
		//yield return new WaitForSecondsRealtime(0.001f);
	    //sa(i,move:false);
		yield return null;
	}	

	
	newperson="any";
	echo3("DONE!!!!");
	
	
	
		if(model.Contains("Futa")){
			Result("PERSON ADDED - CONVERTING TO FUTA");
			yield return new WaitForSecondsRealtime(1.5f);
		echo3("MAKING FUTA!!");
		yield return Futa(model,male: false,forceselect: newperson,created:false);
		echo3("MADE FUTA!!");
		}else{
			yield return new WaitForSecondsRealtime(1.5f);
			Result("PERSON ADDED - MOVE THE SLIDER BELOW TO ADJUST BODY");
			
		}
	addingperson=false;
	yield return null;
	
}

private bool userealskin=true;
private bool usehumanizer=true;
private bool nosetval=false;


private void hudhelp(string s){
SuperController.singleton.helpHUDText.text=s;
StartCoroutine(IEhudhelp(s));
}	
	
private IEnumerator IEhudhelp(string s){
yield return null;
SuperController.singleton.helpHUDText.text=s;
}	

private void delhudbuttons(){
foreach(UIDynamicButton uid in SuperController.singleton.mainHUDPivot.GetComponentsInChildren<UIDynamicButton>(true)){
if(uid.label=="  "){RemoveButton(uid);}	
}}

private bool shoot=false;
private string photomode="4K";
private IEnumerator sethudbuttons(Color col1, Color col2){
int i=0;bool show=false;bool back=true;	Transform t=SuperController.singleton.mainHUDPivot;
foreach(string s in hudnames){i++;

		
			try{
				
				
					Button hbutton=SuperController.singleton.mainHUDPivot.Find("LowerHUDFlip/Scene Control Canvas/Toolbar/"+s).GetComponentInChildren<Button>(true);
					Transform ht=hbutton.transform;
					int ii=i;
					
				
					echo9(ht.name);
					if(hudbutton[ii]!=null){RemoveButton(hudbutton[ii]);}
					var hsub=newbutton(ht,() => {
						
					if(ii==14){
					addatom("SubScene");
					}
					
					if(ii==5){
					UITransform.gameObject.SetActive(false);
					foreach(MVRDownloadManager md in SuperController.singleton.mainHUD.GetComponentsInChildren<MVRDownloadManager>(true)){
					md.saveFolder="Saves/Downloads";
					}
					
					foreach(Image im in SuperController.singleton.onlineBrowser.transform.parent.gameObject.GetComponentsInChildren<Image>(true)){
					echo18(im.transform.name+" > "+im.ToString()+" > "+im.color.ToString());
					var img=im.transform.name.ToLower();
					//if(img=="background"){im.color=Color.red;}
					if(img=="panel"){im.color=Color.gray;}
					}
					
					SuperController.singleton.onlineBrowser.transform.parent.gameObject.SetActive(true);
					SuperController.singleton.onlineBrowser.transform.gameObject.SetActive(true);
					SuperController.singleton.onlineBrowser.transform.parent.localPosition=new Vector2(0.6f,0.0148f);
					}
					
					else if(ii==13){
					addatom("CustomUnityAsset");
					}
					else if(ii==12){
					addatom("Person");
					}

					else if(ii==19){
			echo26(SuperController.singleton.currentSelectMode.ToString());		
			echo26(SuperController.singleton.currentSelectMode.ToString());		
			if(SuperController.singleton.hiResScreenshotPreview.gameObject.active){
			shoot=false;
			echo26("not shooting");
			//SuperController.singleton.hiResScreenshotPreview.gameObject.SetActive(false);
			SuperController.singleton.SelectModeOff();
			//hbutton.onClick.Invoke();
			}else{
				
				
bool foundtxt=false;
		Transform aud=SuperController.singleton.mainHUD.Find("MainUICanvas/Panel/Content/TabAudio/Content").GetComponent<Transform>();

foreach(Text bt in aud.GetComponentsInChildren<Text>(true)){
if(bt.text=="cam1"){
foundtxt=true;
}
}

if(!foundtxt){
	if(cam1file!="error"){
				URLAudioClipManager bobo=SuperController.singleton.GetAtomByUid("CoreControl").gameObject.GetComponentInChildren<URLAudioClipManager>(true);
				bobo.QueueClip(cam1file,"cam1");
				bobo.QueueClip(cam2file,"cam2");
				}
				camfx=true;
}
		
		
				lastactiveui=SuperController.singleton.activeUI.ToString();
				lastactive=SuperController.singleton.mainHUD.GetComponentInChildren<UITabSelector>(true).activeTabName;
				SuperController.singleton.SetActiveUI("MainMenu");
				SuperController.singleton.ShowMainHUDAuto();				
				echo26(lastactive);
				SuperController.singleton.mainHUD.GetComponentInChildren<UITabSelector>(true).SetActiveTab("TabAudio");
				camactive=true;
				hbutton.onClick.Invoke();
				SkyshopLightController skyshop=SuperController.singleton.GetAtomByUid("CoreControl").gameObject.GetComponentInChildren<SkyshopLightController>(true);
			    skyshop.flashIntensity=SuperController.singleton.mainHUD.Find("MainUICanvas/Panel/Content/TabSceneLighting/Left/Camera Exposure/").GetComponentInChildren<Slider>(true).value;
				echo26("shooting");
				//echo26(SuperController.singleton.hiResScreenshotPreview.gameObject
			shoot=true;
			SuperController.singleton.hiResScreenshotCamera.gameObject.SetActive(true);
			SuperController.singleton.hiResScreenshotCamera.enabled=true;
			SuperController.singleton.hiResScreenshotPreview.gameObject.SetActive(true);
			
			
			}
					
					}					
					else{
						//echo26(ii.ToString());
						hbutton.onClick.Invoke();}
					},"  ",4,60,-2,-60);		
					hsub.buttonColor=new Color(0,0,0,0.0f);
					hudbutton[ii]=hsub;
				//	hbutton.gameObject.GetComponent<EventTrigger>().triggers.RemoveRange (0, hbutton.gameObject.GetComponent<EventTrigger>().triggers.Count);

					hudenter[ii] = new EventTrigger.Entry();
					hudenter[ii].eventID = EventTriggerType.PointerEnter;
					hudenter[ii].callback.AddListener((eventData) => {

					showbox="hud"+ii;

					helptip("hud"+ii);
					//(SuperController.LogMessage(ii.ToString());
					hsub.buttonColor=new Color(0,0,0,0.8f);
					cuaon=true;
					if(ii!=13){cuaon=false;StartCoroutine(hidecuas());}
					if(ii==2 || ii==4 || ii==6 || ii==7 || (ii>11 && ii<16) || ii==26 || ii>28){
					hsub.buttonColor=new Color(0,0.5f,0,0.8f);
					}
					
					if(ii==29){
					if(SuperController.singleton.GetAtomUIDs().Count<3){
					hsub.buttonColor=new Color(0.6f,0.0f,0,0.8f);
					}}
					
					else if(ii==30){
					if(!people){
					hsub.buttonColor=new Color(0.6f,0.0f,0,0.8f);
					}}
					
					else if(ii==6){
					for (int p=1;p<200;p++){
					if(gbox[p]!=null){RemoveButton(gbox[p]);}
					if(pbox[p]!=null){if(pbox[p].label.Contains(cuatag) && vrkeys.gameObject.active){continue;}RemoveButton(pbox[p]);}
					}
					pboxon=true;
					hudhelp("Rescan packages / Open Package Manager");
					 float xmin=0;float ymin=0;float zz=8;if(!vr){zz=-0;ymin=-8;}
					showbox="hud6";StartCoroutine(showmenu(showbox,hudbutton[6].transform,"Rescan packages","scan",cap:16,w:120,offsetx:-231,offsety: -98,nosub:true,spacing: 37,z:-zz,tx:hud.transform,prefx:""));
					}

			
					
					else if(ii==4){
					for (int p=1;p<200;p++){
					if(gbox[p]!=null){RemoveButton(gbox[p]);}
					if(pbox[p]!=null){if(pbox[p].label.Contains(cuatag) && vrkeys.gameObject.active){continue;}RemoveButton(pbox[p]);}
					}
					pboxon=true;
					hudhelp("Advanced Save Scene");
					 float xmin=0;float ymin=0;float zz=8;if(!vr){zz=-0;ymin=-8;}
					showbox="hud4";StartCoroutine(showmenu(showbox,hudbutton[4].transform,"Publish Scene to new Hub-package (VAR)\nPublish Scene to current Hub-package (VAR)","scan",cap:56,w:410,offsetx:-554,offsety: -98,nosub:true, spacing: 37,z:-zz,tx:hud.transform,prefx:""));
					}	

					else if(ii==2){
					for (int p=1;p<200;p++){
					
					if(gbox[p]!=null){RemoveButton(gbox[p]);}
					if(pbox[p]!=null){if(pbox[p].label.Contains(cuatag) && vrkeys.gameObject.active){continue;}RemoveButton(pbox[p]);}
					}
					pboxon=true;
					hudhelp("Advanced Save Load");
					 float xmin=0;float ymin=0;float zz=8;if(!vr){zz=-0;ymin=-8;}
					showbox="hud2";StartCoroutine(showmenu(showbox,hudbutton[2].transform,"Merge Load Scene\nLoad Scene Audio\nNew Scene (empty)","scan",cap:36,w:144,offsetx:-595,offsety: -98,nosub:true, spacing: 37,z:-zz,tx:hud.transform,prefx:""));
					}						

															if(ii==12){
																					
					
					fading=false;
					fromui=false;
					pboxon=true;
					hud.sortingOrder=32;
					change=false;StartCoroutine(showskinmenu(showbox,change:false,tx:hud,sx:4,sy:-96));	
						
					}
					});						
					
					hudexit[ii] = new EventTrigger.Entry();
					hudexit[ii].eventID = EventTriggerType.PointerExit;
					hudexit[ii].callback.AddListener((eventData) => {
					helptip();
					showbox="";
					if(ii==13){
					cuaon=false;
					StartCoroutine(hidecuas());
					}

						if(!fading && ii!=12){
							gboxon=false;
							pboxon=false;
							StartCoroutine(removegbox(change));
							StartCoroutine(removepbox(change));
							}							
					StartCoroutine(fadeout(hsub));
					//if(hsub!=null){RemoveButton(hsub);}
					});
		
				
					hsub.gameObject.AddComponent<EventTrigger>();
					hsub.gameObject.GetComponent<EventTrigger>().triggers.Add(hudenter[ii]);
					hsub.gameObject.GetComponent<EventTrigger>().triggers.Add(hudexit[ii]);
					
					
				
				
				
				
				
				
				
				
					

	
	}catch(Exception e){}
		
		//im.color=col2;
	

}
yield return null;
}

private void bigshotprep(){
echo26("coco");	
}

private IEnumerator fadeout(UIDynamicButton bb){
	
					for(int ti=2;ti<20;ti++){
					float fti=1f-(0.025f*float.Parse(ti.ToString()));
					bb.buttonColor=new Color(0,0,0,fti);
					yield return null;}
					bb.buttonColor=new Color(0,0,0,0);
}
	
private IEnumerator imagefind(Transform t, int match=9999,int stop=9999, float time=0.4f){
int i=0;bool show=false;
foreach(Image im in t.GetComponentsInChildren<Image>()){i++;
	
	if((i>=match && i<=stop) || match==9999){
	Color orig=im.color;
	yield return new WaitForSecondsRealtime(time);
	im.color=Color.red;
	getparent(im.transform,im.name);
	yield return new WaitForSecondsRealtime(time+0.1f);
	im.color=orig;}
	
	
}
}

private void objectfind(Transform t, string str="", bool getroot=false){
foreach(Component im in t.GetComponentsInChildren<Component>(true)){
	if(im != null && im.ToString() !=null && (im.ToString()).ToLower().Contains(str.ToLower())){
	string s = ""; Transform g = im.transform.parent;int i=0;
	var stop=t.name;if(getroot){stop="";}
	while (g != null && g.name!=stop)
	{i++;
	s = g.name + "/" + s;
	g = g.parent;
	}
	var find="\""+s+"/"+im.transform.name+"\"";
	SuperController.LogMessage("Examples:\n"+"thetransformyouinserted"+".Find("+find+").GetComponentInChildren<Button>(true).onClick.Invoke();\n"+"thetransformparamyouinserted"+".transform.Find("+find+").GetComponentInChildren<UIDynamicToggle>(true).toggle=true;\n"+"thetransformparamyouinserted"+".transform.Find("+find+").GetComponentInChildren<Image>(true).color=new Color(0.5f,0.5f,0.5f,0.5f);\n\n");
	}}}

private void textfind(Transform t, string str="", bool getroot=false){
foreach(Text im in t.GetComponentsInChildren<Text>(true)){
	if(im != null && im.text !=null && im.text.ToLower().Contains(str.ToLower())){
	string s = ""; Transform g = im.transform.parent;int i=0;
	var stop=t.name;if(getroot){stop="";}
	while (g != null && g.name!=stop)
	{i++;
	s = g.name + "/" + s;
	g = g.parent;
	}
	var find="\""+s+"/"+im.transform.name+"\"";
	SuperController.LogMessage("Examples:\n"+"thetransformyouinserted"+".Find("+find+").GetComponentInChildren<Button>(true).onClick.Invoke();\n"+"thetransformparamyouinserted"+".transform.Find("+find+").GetComponentInChildren<UIDynamicToggle>(true).toggle=true;\n"+"thetransformparamyouinserted"+".transform.Find("+find+").GetComponentInChildren<Image>(true).color=new Color(0.5f,0.5f,0.5f,0.5f);\n\n");
	}}}
	
private void buttonclick(Transform t, string str="", string mustinclude=""){
foreach(Text im in t.GetComponentsInChildren<Text>(true)){
    if(im != null && im.text !=null && im.text.Contains(str)){
    string s = ""; Transform g = im.transform.parent;int i=0;
    while (g != null && g.name!=t.name)
    {i++;
    s = g.name + "/" + s;
    g = g.parent;
    }
    var find="\""+s+"\"";
    if(find.ToLower().Contains(mustinclude.ToLower()) || mustinclude==""){t.Find("+find+").GetComponentInChildren<Button>(true).onClick.Invoke();}
    }}}
	

private UIDynamicButton usersb;
private UIDynamicButton chansb;
private UIDynamicButton targetb;
private UIDynamicButton sendb;
private UIDynamicButton urlb;
private UIDynamicButton urlbackb;
private UIDynamicButton urlforwardb;
private UIDynamicButton linksb;

	private void getparent(Transform t, string name,string filter=""){
		
	string s = ""; Transform g = t;
	while (g != null)
	{
	s = g.name + "/" + s;
	g = g.parent;
	}
	if(filter=="" || s.ToLower().Contains(filter.ToLower())){SuperController.LogMessage(s);}
	}
	
	private string stringparent(Transform t, string name,string filter=""){
		
	string s = ""; Transform g = t;
	while (g != null)
	{
	s = g.name + "/" + s;
	g = g.parent;
	}
	if(filter=="" || s.ToLower().Contains(filter.ToLower())){return s;}else{return "";}
	}	

private IEnumerator gourl(string txt){
FileManagerSecure.WriteAllText(_plugindir+_pluginowner+_plugin+"\\loading.html","<html><body><span style=\"font-family:Arial,Helvetica,sans-serif\"><span style=\"font-size:20px\"><p style=\"text-align:center\"><span style=\"color:#ffffff\"><strong>MORPHINE processing "+txt+" - please wait</strong></span></span></span></p></body><html>");
var u = SuperController.singleton.NormalizePath(_plugindir+_pluginowner+_plugin+"\\loading.html");
u=FileManagerSecure.GetFullPath(u);
//echo7(u);
webview.url="file://"+u;
yield return new WaitForSecondsRealtime(0.2f);
yield return null;
echo26("TXT: "+txt);
			var YoutubeLinkRegex = "(?:.+?)?(?:\\/v\\/|watch\\/|\\?v=|\\&v=|youtu\\.be\\/|\\/v=|^youtu\\.be\\/)([a-zA-Z0-9_-]{11})+";
            var regex = new Regex(YoutubeLinkRegex, RegexOptions.Compiled);
            foreach (Match match in regex.Matches(txt))
            {
                foreach (var groupdata in match.Groups.Cast<Group>().Where(groupdata =>!groupdata.ToString().StartsWith("youtu")))
                {
                    txt="https://www.youtube.com/watch?v="+groupdata.ToString()+"?rel=0&fs=1&autoplay=1&loop=1&vq=hd720";
					echo26("YOUTUBE: "+txt);
                }
            }


if(txt.Contains("hub.virtamate.com") && txt.Contains("download")){

var lastactive=SuperController.singleton.activeUI.ToString();
if(!obset){obset=true;
obpos=new Vector2(SuperController.singleton.onlineBrowser.transform.parent.localPosition.x,SuperController.singleton.onlineBrowser.transform.parent.localPosition.y);}
SuperController.singleton.onlineBrowser.transform.parent.localPosition=new Vector2(9999,9999);
loadvar=true;
yield return new WaitForSecondsRealtime(1f);
SuperController.singleton.onlineBrowser.transform.parent.gameObject.SetActive(true);
//SuperController.singleton.SetActiveUI("OnlineBrowser");
yield return new WaitForSecondsRealtime(0.5f);
SuperController.singleton.onlineBrowser.url=txt;
yield return new WaitForSecondsRealtime(2f);
txt=txt.Substring(0,txt.IndexOf("/download"))+"/";
SuperController.singleton.onlineBrowser.transform.parent.gameObject.SetActive(false);
//SuperController.singleton.SetActiveUI("MainMenu");
SuperController.singleton.onlineBrowser.transform.parent.localPosition=obpos;

}

echo26("URL: "+txt);
webview.url=txt;

yield return null;
}


private Vector2 obpos;private bool obset=false;private bool loadvar=false;
private UIDynamicButton skinbutton;

private IEnumerator addatomtype(string atomid){

								var pre="";
								foreach(Atom p in SuperController.singleton.GetAtoms()){
								pre+="["+p.name+"]";
								}
									
yield return new WaitForSecondsRealtime(0.5f);

SuperController.singleton.AddAtomByType(atomid,false,false,false);

yield return new WaitForSecondsRealtime(0.5f);
bool notfound=true;
while(notfound){

								foreach(Atom p in SuperController.singleton.GetAtoms()){
								if(!pre.Contains("["+p.name+"]")){
								SuperController.singleton.SelectController(p.mainController, false);
								notfound=false;
								if(addhere){
					p.SetFreezePhysics(true);
					yield return new WaitForSecondsRealtime(0.2f);
					
					
					
					
					Vector3 moveto=SuperController.singleton.mainHUD.position;float zto=0;float xto=-0.7f;
					if(vr){moveto=SuperController.singleton.leftHand.position;xto=0f;zto=0f;
					vrhands.isOn=false;
					}
					p.mainController.transform.position=new Vector3(moveto.x+xto,moveto.y,moveto.z+zto);
	
					
					
					
					//p.mainController.transform.position=new Vector3(SuperController.singleton.mainHUD.position.x+-0.7f,SuperController.singleton.mainHUD.position.y,SuperController.singleton.mainHUD.position.z);
					yield return new WaitForSecondsRealtime(0.5f);
					p.SetFreezePhysics(false);	
}		
								}
								}
								

yield return null;								
	
}


	
}

private void copymorphs(string s){

if(s.contains("start")){
mstart=new Dictionary<string,float>();
}
mstop=new Dictionary<string,float>();

foreach(SM sm in _mainBank.Concat(_genitalBank)){
	if(sm.Selected){
	if(s.contains("start")){
	mstart.Add(sm.Morph.uid,sm.Morph.morphValue*1000);
	}
	else{
	mstop.Add(sm.Morph.uid,sm.Morph.morphValue*1000);
	if(!mstart.ContainsKey(sm.Morph.uid)){mstart.Add(sm.Morph.uid,0);}
	}
}}

Dictionary<string,string> combo=new Dictionary<string,string>();

foreach(KeyValuePair<string, float> v in mstart){
	if(!mstop.ContainsKey(v.Key)){mstop.Add(v.Key,0);}
	combo.Add(v.Key,v.Value.ToString()+","+mstop[v.Key].ToString());
	}

foreach(KeyValuePair<string, float> v in mstop){
	if(!combo.ContainsKey(v.Key)){
	if(!mstart.ContainsKey(v.Key)){mstart.Add(v.Key,0);}
	combo.Add(v.Key,v.Value.ToString()+","+mstart[v.Key].ToString());
		}
	}
	
	copier2=""; 
	foreach(KeyValuePair<string, string> v in combo){
	copier2+="morph:"+_person.name+":"+v.Key+" "+v.Value+"\n";
	}
	
}


private void submenub(Transform t,string str="",string mode="",string submode="",string gotosub="",bool subsub=false,string gotosub2="",float subw2=202f,float gotoadjust2=0f,bool nosub=true,float subw=202f,float w=202f,float h=43f,float suboffsetx=-172,float offsetx=-172,float suboffsety=-54,float offsety=-54,float spacing=37, Transform subtx=null,Transform tx=null, int subcap=0,int cap=0,bool lower=false,string sidemenu="X",float subsadjust=0f,float gotoadjust=0f, float sadjust=0f, float suby=0, float subh=39,string prefx="  ",float z=0){
					gboxon=true;
					pboxon=true;

					var track="";
					if(mode.Contains(":")){track=mode.Substring(mode.IndexOf(":")+1);mode=mode.Substring(0,mode.IndexOf(":"));}
					
					Color col=new Color(0.43f, 0.43f, 0.5f);
					Color subcolor=new Color(0.83f, 0.43f, 0.5f);
					Color gosubcolor=new Color(0.83f, 0.43f, 0.5f);
					if(mode=="person" || mode=="models" || mode=="addatoms" || mode=="atoms" || mode=="errors"){col=gosubcolor=subcolor=skinmenucolor;}
					if(mode=="insert"){prefx="";h=357;w=700;offsetx=181;col=gosubcolor=subcolor=modelcolor;}
					//if(track=="insert"){offsety=300;}
					if(mode=="similar"){col=gosubcolor=subcolor=modelcolor;
					
					}

					for (int p=1;p<200;p++){
					if(gbox[p]!=null){RemoveButton(gbox[p]);
					}}
					
					echo10(str);
					if(mode=="defaults"){nosub=true;}	
					if(mode=="errors"){nosub=true;}	
									
					string [] strsub=str.Split("\n"[0]);
					int i=0;
					foreach(string s in strsub){
						
					var sss="";var plug="";var plugatom="";
					if(s==""){continue;}
					i++;
								
					sss=s;
					var sb=s;
					subsub=false;
					var sbsubs="";
					if(sb.Contains(",")){
					echo10("comma "+sb);
					subsub=true;var sbtmp="";int si=0;
					string [] sbsub=sb.Split(","[0]);
					foreach(string sbb in sbsub){
					if(si==0){sbtmp=sbb;}else{sbsubs+=sbb+"\n";}
					si++;
					}
					sss=sb=sbtmp;
					echo14(sb);
					}	
					
					if(sb.Contains(":") && mode=="person"){
						
					offsetx=-700;w=153;gotoadjust=174;subh=43;suby=-2;
					string[] ssb=sb.Split(":"[0]);
					gotosub=ssb[1];
					sss=sb=ssb[0];			
					}
					
										if(mode=="recorder"){
										plugatom=sb.Substring(0,sb.IndexOf("[] "));
										plug="plugin#"+sb.Substring(sb.IndexOf("[] ")+3);
										
										
										sss=sss.Substring(0,sss.IndexOf("[]"));
										if(plug.Contains("ControllerPlugin")){sss="Controller";}
										
										}
					if(lower){
					sss=sss.ToLower().Replace("\r","").Replace("\n","").Replace("<br>","").Replace("https://","").Replace("http://","");}
					if(cap!=0 && !sss.Contains("@")){
					if(sss.Length>cap+1){sss=sss.Substring(0,cap)+"..";}}
					
					
					Transform tr=null;
					if(tx==null){tr=t.parent.transform;}else{tr=tx;}
					
					float zz=z;float novr=0;if(!vr){zz=0;novr=0;}
					//echo8("padj mode "+mode);
					float padj=0;float pyadj=0;if(mode=="person"){pyadj=2;padj=45;}
					
										
				//	if(mode=="tip" && i>){
					float ysplit=0;float xsplit=0;
					if(mode=="insert"){
					pyadj=-56;padj=31;
					if(int.Parse(track)<31){
						//echo25(track);
						ysplit=30*spacing;xsplit=0;}
					var tmpi=("{"+insert[sb].Substring(0,insert[sb].IndexOf("}"))).Replace("{{","{");
					
					var tmpheight=tmpi.Substring(1,tmpi.LastIndexOf("{"));
					sss=tmpi.Substring(tmpi.LastIndexOf("{")+1);
					if(tmpheight!=""){h=h+float.Parse(tmpheight.Replace("{",""));}
					}
					gbox[i]=newbutton(tr,() => {
						
											var pgbox=gbox[i];

											
if(mode=="insert"){
StartCoroutine(insertcode(sb));
}
					
if(mode=="similar"){
	copymorphs(sb);
}
	
if(mode=="recorder"){
					if(sb.Contains("[]")){
					var atype=sb.Substring(0,sb.IndexOf("[]"));
					Transform bb=SuperController.singleton.mainHUD;
					if(atype!="Session" && atype!="Scene"){bb=SuperController.singleton.GetAtomByUid(atype).transform;}
						
						if(atype!="Session" && atype!="Scene"){
						Atom aa=SuperController.singleton.GetAtomByUid(atype);
						SuperController.singleton.SelectController(aa.mainController);
						aa.transform.GetComponentInChildren<UITabSelector>(true).SetActiveTab("Plugins");
						}else{
						SuperController sc = SuperController.singleton;
						sc.gameMode = SuperController.GameMode.Edit;
						sc.SetActiveUI("MainMenu");
						sc.ShowMainHUDAuto();
						sc.mainHUD.GetComponentInChildren<UITabSelector>(true).SetActiveTab("Tab"+atype+"Plugins");
						}
					
						foreach(Transform tt in bb.GetComponentsInChildren<Transform>(true)){
						if(tt.name=="CloseButton" && tt.parent.name=="ScriptUI(Clone)"){
						tt.parent.gameObject.SetActive(false);
						}}
					
						foreach(Button b in bb.GetComponentsInChildren<Button>(true)){
						var pluginname="";
						if(b.transform.parent.name=="ScriptControllerPanel(Clone)"){
						foreach(Text txt in b.transform.parent.parent.parent.GetComponentsInChildren<Text>(true)){
						if(txt.transform.name=="UID" && txt.text.Contains("plugin#") && txt.text.Contains("_") && txt.text==plug){pluginname=txt.text;}
						if(pluginname!=""){if(b.transform.name=="OpenUIButton" ){b.onClick.Invoke();break;}}}
						}}
						
						}}
							
						if(mode=="addatoms"){
						//echo8("Added "+sb);
						if(sb.Contains("magnet")){
						if(SuperController.singleton.GetAtomByUid(sb)==null){addatom("Empty",sb,hide:true,collide:false,on:true,scale:0.1f);}
						}
						else{
						if(sb.Contains("@") && sb.Contains("slider")){addatom("UISlider",sb,hide:false,collide:false);}
						else if(sb.Contains("@") && sb.Contains("scaler")){addatom("UISlider",sb,hide:false,collide:false);}
						else if(sb.Contains("@") && sb.Contains("script")){addatom("UISlider",sb,hide:true,collide:false,on:false);}
						else{addatom(sb);}
						}
					
						}		
					if(mode=="links"){StartCoroutine(gourl(sss));}		
					else if(mode=="errors"){
						
						var serr=sss;

						if(gbox[i].label=="mute"){
						errormute=true;
						gbox[i].label="unmute";
						}else{
						errormute=false;
						gbox[i].label="mute";
							
						}
						saveini();
						}


else if(mode=="tip" || track=="tip"){
if(track=="tip"){rsa=_person;}
StartCoroutine(realskin(rsa,mode:"paste",bodypart:submode.Replace("full body",""),layer:sb.Replace("all","")));
}
						
					else if(mode=="atoms" || mode=="person"){
						
					//echo8("clicked "+sb);	
					int ii=i;
					StartCoroutine(submenuclick(gbox[i].transform,sb:sb,submode:submode,mode:mode));

					
					}		
					else if(mode=="channels"){targetlist(msgtarget,sss,clicked:true);}		
					else if(mode=="targets"){targetlist(msgtarget,sss,clicked:true);}		
					else if(mode=="models"){setperson(sss);}		
					else if(mode=="defaults"){gboxon=false;setdefaults(sss);
					for (int p=1;p<200;p++){
					if(gbox[p]!=null){
					RemoveButton(gbox[p]);
					}}
					}		
					
					},prefx+sss,w,h,(t.localPosition.x)+xsplit+offsetx+padj,(t.localPosition.y+ysplit+offsety+pyadj+novr)+(spacing*i),z:zz);
					
										if(mode=="tip"){
					
					gbox[i].transform.localEulerAngles=new Vector3(0,180,0);
					
					}	
					
					if(mode=="similar"){
					gbox[i].transform.localPosition=new Vector3(0,137,0);
					scaler(gbox[i].transform,206,40);
					gbox[i].transform.localPosition=new Vector2(0,i*39);
					echo16(i.ToString());
					}
					
					gbox[i].name=sb.Replace(" ","").Replace("#","").Replace(",","");
					gbox[i].buttonColor = col;
					if(sss.Contains("@")){gbox[i].textColor = new Color(1f,0.6f,0);}else{gbox[i].textColor = new Color(1f, 1, 1f);}
					
					
					
					gbox[i].buttonText.fontSize = 23;
					gbox[i].buttonText.alignment = TextAnchor.MiddleLeft;
					if(mode=="errors"){gbox[i].buttonText.alignment = TextAnchor.MiddleCenter;}
					//gbox[i].buttonText.horizontalOverflow = HorizontalWrapMode.Wrap;
					gbox[i].buttonText.lineSpacing = 1f;
					//gbox[i].buttonText.GetComponent<InputField>().lineType = InputField.LineType.SingleLine;
					if(submode=="TimeLine<size=22>™</size>"){
					gbox[i].buttonColor = new Color(0.4f,0.42f,1f);
					gbox[i].textColor =Color.white;						
					gbox[i].buttonText.alignment = TextAnchor.MiddleCenter;
															if(sss.Contains("Controller")){
															gbox[i].buttonColor = new Color(0.1f,0.62f,0.3f);
																
															}
					}
					float subspace=spacing-4;if(spacing>0){subspace=0-spacing-4;}

if(mode=="person"){
string[] pmenu2="No hair,No clothing,Head,Breast,Hip,Pelvis,Abdomen,Left elbow,Right elbow,Left hand,Right hand,Left knee,Right knee,Left foot,Right foot,Left toe,Right toe,Left thigh,Right thigh".Split(","[0]);

try{
if(i<=pmenu2.Length){
					var nn=pmenu2[i-1];Atom pp=SuperController.singleton.GetAtomByUid(submode);
					
					UIDynamicButton gotobutton2=newbutton(gbox[i].transform,() => {
					if(nn=="No clothing"){
					pp.GetComponentInChildren<DAZCharacterSelector>().RemoveAllClothing();
					}
					
					else if(nn=="No hair"){
					pp.GetComponentInChildren<DAZCharacterSelector>().RemoveAllHair();
					}		
					else{Selectcontrol(pp,nn);}
},pmenu2[i-1]+" ",-354,subh+2,w+42+gotoadjust+264,(suby+37+subspace)-0.8f);

					Vector2 opg=gotobutton2.transform.localPosition;
					scaler(gotobutton2.transform,180,subh);
					gotobutton2.transform.localPosition=opg;
					
					gotobutton2.buttonColor = gosubcolor;
					gotobutton2.textColor = new Color(1f, 1, 1f);
					gotobutton2.buttonText.fontSize = 23;
					gotobutton2.buttonText.alignment = TextAnchor.MiddleRight;
					gotobutton2.buttonText.lineSpacing = 1f;

}
}catch(Exception e){SuperController.LogError("Exception caught: " + e);}
}


if(gotosub!=""){
					var ii=i;var ggsub=gotosub;
					UIDynamicButton gotobutton=newbutton(gbox[i].transform,() => {
						
					if(mode=="person"){
					StartCoroutine(submenuclick(gbox[ii].transform,sb:ggsub,submode:submode,mode:mode));}
					
					},gotosub+"  ",-244,subh,w+42+gotoadjust,suby+subspace);	
	


					Vector2 opg=gotobutton.transform.localPosition;
					scaler(gotobutton.transform,252,subh);
					gotobutton.transform.localPosition=opg;
					gotobutton.buttonColor = gosubcolor;
					gotobutton.textColor = new Color(1f, 1, 1f);
					gotobutton.buttonText.fontSize = 23;
					gotobutton.buttonText.alignment = TextAnchor.MiddleRight;
					gotobutton.buttonText.lineSpacing = 1f;

}		
					
					if(!nosub){
	
					
					
					UIDynamicButton sidebutton=newbutton(gbox[i].transform,() => {

					if(mode=="links"){StartCoroutine(gourl(sss));
						for (int p=1;p<200;p++){
						if(gbox[p]!=null){
						RemoveButton(gbox[p]);
						}}
						links=links.Replace(sss+"\n","");
						submenu(linksb.transform,links,"links",tx: chat.transform,w:318,offsetx:-288,cap:30,lower:true,sadjust:-60);
						
					
					}


					else if(mode=="atoms" || mode=="person"){
						SuperController.singleton.GetAtomByUid(sb).Remove();
						echo8("removing "+sb);
								var errb="";
								foreach(Atom p in SuperController.singleton.GetAtoms()){
									if(p.name!="CoreControl" && p.name!="[CameraRig]"){errb+=p.name+"\n";}
									}
						submenu(atombuttonb.transform,errb,"atoms",cap:26,w:322,offsetx:-87,sadjust:-61,offsety: -174,spacing: 37,tx:hud.transform,z:-40f);
						}			
						
					else if(mode=="channels"){
						//targetlist(msgtarget,sss);
						echo7("leaving");
						Clientmessage("/leave "+sss, raw:false);
						var tmpchannels=channels.Replace(sss+"\n","");
						submenu(chansb.transform,tmpchannels,"channels",cap:16,offsety: 0-84,spacing: 0-37);
						}		
						
					else if(mode=="targets"){
						
						for (int p=1;p<200;p++){
						if(gbox[p]!=null){
						RemoveButton(gbox[p]);
						}}
						msgtargets=msgtargets.Replace(sss+"\n","");
						submenu(targetb.transform,msgtargets,"targets",cap:16,offsety: 0-84,offsetx:-21.5f,spacing: 0-37);
						
						}		
					else if(mode=="models"){
						Atom sr=SuperController.singleton.GetAtomByUid(sb);
						SuperController.singleton.RemoveAtom(sr);
						for (int p=1;p<200;p++){
						if(gbox[p]!=null){
						RemoveButton(gbox[p]);
						}}
								var tmplist="";
								foreach(Atom p in SuperController.singleton.GetAtoms())
								{
								if(p.type == "Person"){tmplist+=p.name+"\n";}
								}
						submenu(modelbutton.transform,plist,"models",offsetx: -144,offsety: 0-61,spacing: 0+37);
						}	
					
					},sidemenu,-244,subh,w+42+sadjust,suby+subspace);
					Vector2 op=sidebutton.transform.localPosition;
					scaler(sidebutton.transform,60,subh);
					sidebutton.transform.localPosition=op;
					sidebutton.buttonColor = subcolor;
					sidebutton.textColor = new Color(1f, 1, 1f);
					sidebutton.buttonText.fontSize = 23;
					sidebutton.buttonText.alignment = TextAnchor.MiddleCenter;
					//sidebutton.buttonText.horizontalOverflow = HorizontalWrapMode.Wrap;
					sidebutton.buttonText.lineSpacing = 1f;
					//sidebutton.buttonText.GetComponent<InputField>().lineType = InputField.LineType.SingleLine;
					}
					
					EventTrigger.Entry rem = new EventTrigger.Entry();
					rem.eventID = EventTriggerType.PointerExit;
					rem.callback.AddListener((subeventData) => {
										if(mode=="tip"){
					scaleron=false;

					}
					gboxon=false;
					pboxon=false;
						if(!fading){
							StartCoroutine(removegbox(change));
							StartCoroutine(removepbox(change));
							}				
					});
					gbox[i].gameObject.AddComponent<EventTrigger>();
					gbox[i].gameObject.GetComponent<EventTrigger>().triggers.Add(rem);
					
					EventTrigger.Entry keep = new EventTrigger.Entry();
					keep.eventID = EventTriggerType.PointerEnter;
					keep.callback.AddListener((subeventData) => {
					if(mode=="tip"){
					scaleron=true;
					scaling=true;
					}	
					if(subsub){
					//submenub(gbox[i].transform,sbsubs,sb,cap:subcap,w:subw,h:h,offsetx:suboffsetx-100,sadjust:subsadjust,offsety: suboffsety-50,spacing: spacing,tx:subtx,z:z);
					}	
					
					gboxon=true;
					pboxon=true;

					for (int p=1;p<200;p++){
					if(gbox[p]!=null){
					
					Color ccol=gbox[i].buttonColor;
					Color cctxt=gbox[i].textColor;
					ccol.a=1f;
					cctxt.a=1f;
					gbox[i].buttonColor=ccol;
					gbox[i].textColor=cctxt;
					
					
					
					}}
					});
					gbox[i].gameObject.AddComponent<EventTrigger>();
					gbox[i].gameObject.GetComponent<EventTrigger>().triggers.Add(keep);
					}

}

private UnityEngine.UI.Toggle vrhands=SuperController.singleton.mainHUD.Find("MainUICanvas/Panel/Content/TabUserPrefs/Content/TabGroup/TabVR2/PanelVRHands/Right/DynamicToggle/").GetComponentInChildren<UIDynamicToggle>(true).toggle;

private void movehere(Atom a){
StartCoroutine(IEmovehere(a));
}

private IEnumerator IEmovehere(Atom a){
				
					a.SetFreezePhysics(true);
					yield return new WaitForSecondsRealtime(0.2f);
					Vector3 moveto=SuperController.singleton.mainHUD.position;float zto=0;float xto=-0.7f;
					if(vr){moveto=SuperController.singleton.leftHand.position;xto=0f;zto=0f;
					vrhands.isOn=false;
					}
					a.mainController.transform.position=new Vector3(moveto.x+xto,moveto.y,moveto.z+zto);
					yield return new WaitForSecondsRealtime(0.5f);
					a.SetFreezePhysics(false);
						
	
	
}
	
private void teleport(Atom a){
Navigationrig = SuperController.singleton.navigationRig.transform;
int rb=0;if(a.type=="Person"){rb=406;}
SuperController.singleton.ResetNavigationRigPositionRotation();
Navigationrig.position = new Vector3(a.rigidbodies[rb].transform.position.x,0,a.rigidbodies[rb].transform.position.z+1.5f);
SuperController.singleton.playerHeightAdjust=a.rigidbodies[rb].transform.position.y-1.6f;	
}	



private IEnumerator pastepos(Atom a, string sb=""){

					if(sb==""){
					a.SetFreezePhysics(true);
					yield return new WaitForSecondsRealtime(0.2f);
					a.mainController.transform.position=copypos;
					yield return new WaitForSecondsRealtime(0.5f);
					a.SetFreezePhysics(false);					
					}	
					else if(sb=="X"){
					a.SetFreezePhysics(true);
					yield return new WaitForSecondsRealtime(0.2f);
					a.mainController.transform.position=new Vector3(copypos.x,a.mainController.transform.position.y,a.mainController.transform.position.z);
					yield return new WaitForSecondsRealtime(0.5f);
					a.SetFreezePhysics(false);						
					}						
					else if(sb=="Y"){
					a.SetFreezePhysics(true);
					yield return new WaitForSecondsRealtime(0.2f);
					a.mainController.transform.position=new Vector3(a.mainController.transform.position.x,copypos.y,a.mainController.transform.position.z);
					yield return new WaitForSecondsRealtime(0.5f);
					a.SetFreezePhysics(false);						
					}		
					else if(sb=="Z"){
					a.SetFreezePhysics(true);
					yield return new WaitForSecondsRealtime(0.2f);
					a.mainController.transform.position=new Vector3(a.mainController.transform.position.x,a.mainController.transform.position.y,copypos.z);
					yield return new WaitForSecondsRealtime(0.5f);
					a.SetFreezePhysics(false);						
					}

}



private IEnumerator submenuclick(Transform tr,string sb="",string submode="",string mode=""){

					if(mode=="person"){
			
					
					if(pmenu.Contains(sb)){
						SuperController.singleton.SelectController(SuperController.singleton.GetAtomByUid(submode).mainController, false);
						yield return null;
						SuperController.singleton.GetAtomByUid(submode).gameObject.GetComponentInChildren<UITabSelector>(true).SetActiveTab(sb);
						
					}
					yield break;
					}
					
					
										if(sb=="Clone here"){StartCoroutine(cloneatom(SuperController.singleton.GetAtomByUid(submode)));}
					
					else if(sb=="Move here"){
					SuperController.singleton.GetAtomByUid(submode).SetFreezePhysics(true);
					yield return new WaitForSecondsRealtime(0.2f);
					Vector3 moveto=SuperController.singleton.mainHUD.position;float zto=0;float xto=-0.7f;
					if(vr){moveto=SuperController.singleton.leftHand.position;xto=0f;zto=0f;
					/*
					UserPreferences u=SuperController.singleton.GetAtomByUid("CoreControl").gameObject.GetComponent<UserPreferences>();
					textfind(SuperController.singleton.mainHUD,"Use Collision");
					foreach(Toggle tog in u.transform.GetComponentsInChildren<Toggle>(true)){
					var coco=stringparent(tog.transform,tog.transform.name,"vr2");
					if(coco!=""){
					//echo18(tog.transform.GetComponent<UIDynamicToggle>().label+" > "+tog.isOn.ToString()+" >> "+coco);
					}
					}
					*/
					vrhands.isOn=false;
					}
					SuperController.singleton.GetAtomByUid(submode).mainController.transform.position=new Vector3(moveto.x+xto,moveto.y,moveto.z+zto);
					yield return new WaitForSecondsRealtime(0.5f);
					SuperController.singleton.GetAtomByUid(submode).SetFreezePhysics(false);
					}		
					else if(sb=="Teleport to"){

					
Navigationrig = SuperController.singleton.navigationRig.transform;

int rb=0;if(SuperController.singleton.GetAtomByUid(submode).type=="Person"){rb=406;}
SuperController.singleton.ResetNavigationRigPositionRotation();
Atom trgt=SuperController.singleton.GetAtomByUid(submode);
Navigationrig.position = new Vector3(trgt.rigidbodies[rb].transform.position.x,0,trgt.rigidbodies[rb].transform.position.z+1.5f);
SuperController.singleton.playerHeightAdjust=trgt.rigidbodies[rb].transform.position.y-1.6f;


					}
					else if(sb=="Zero position"){
					SuperController.singleton.GetAtomByUid(submode).mainController.transform.position=new Vector3(0,0,0);
					}
					else if(sb=="Zero rotation"){
					SuperController.singleton.GetAtomByUid(submode).mainController.transform.localEulerAngles=new Vector3(0,0,0);
					}						
					else if(sb=="Straighten"){
					SuperController.singleton.GetAtomByUid(submode).mainController.transform.localEulerAngles=new Vector3(0,SuperController.singleton.GetAtomByUid(submode).mainController.transform.localEulerAngles.y,0);
					}							
					else if(sb=="Place on ground"){
					SuperController.singleton.GetAtomByUid(submode).mainController.transform.position=new Vector3(SuperController.singleton.GetAtomByUid(submode).mainController.transform.position.x,0,SuperController.singleton.GetAtomByUid(submode).mainController.transform.position.z);
					}
					else if(sb=="Copy position"){
					copypos=SuperController.singleton.GetAtomByUid(submode).mainController.transform.position;
					}
					else if(sb=="Paste position"){
					SuperController.singleton.GetAtomByUid(submode).SetFreezePhysics(true);
					yield return new WaitForSecondsRealtime(0.2f);
					SuperController.singleton.GetAtomByUid(submode).mainController.transform.position=copypos;
					yield return new WaitForSecondsRealtime(0.5f);
					SuperController.singleton.GetAtomByUid(submode).SetFreezePhysics(false);					
					}	
					else if(sb=="Paste X"){
					SuperController.singleton.GetAtomByUid(submode).SetFreezePhysics(true);
					yield return new WaitForSecondsRealtime(0.2f);
					SuperController.singleton.GetAtomByUid(submode).mainController.transform.position=new Vector3(copypos.x,SuperController.singleton.GetAtomByUid(submode).mainController.transform.position.y,SuperController.singleton.GetAtomByUid(submode).mainController.transform.position.z);
					yield return new WaitForSecondsRealtime(0.5f);
					SuperController.singleton.GetAtomByUid(submode).SetFreezePhysics(false);						
					}						
					else if(sb=="Paste Y"){
					SuperController.singleton.GetAtomByUid(submode).SetFreezePhysics(true);
					yield return new WaitForSecondsRealtime(0.2f);
					SuperController.singleton.GetAtomByUid(submode).mainController.transform.position=new Vector3(SuperController.singleton.GetAtomByUid(submode).mainController.transform.position.x,copypos.y,SuperController.singleton.GetAtomByUid(submode).mainController.transform.position.z);
					yield return new WaitForSecondsRealtime(0.5f);
					SuperController.singleton.GetAtomByUid(submode).SetFreezePhysics(false);						
					}		
					else if(sb=="Paste Z"){
					SuperController.singleton.GetAtomByUid(submode).SetFreezePhysics(true);
					yield return new WaitForSecondsRealtime(0.2f);
					SuperController.singleton.GetAtomByUid(submode).mainController.transform.position=new Vector3(SuperController.singleton.GetAtomByUid(submode).mainController.transform.position.x,SuperController.singleton.GetAtomByUid(submode).mainController.transform.position.y,copypos.z);
					yield return new WaitForSecondsRealtime(0.5f);
					SuperController.singleton.GetAtomByUid(submode).SetFreezePhysics(false);						
					}			
	
	
}

private string showbox="";

private IEnumerator newpackage(bool current=false){
if(current){SuperController.singleton.SaveSceneCurrentAddonPackageDialog();}else{
SuperController.singleton.SaveSceneNewAddonPackageDialog();}
while(SuperController.singleton.activeUI.ToString()=="None"){
yield return new WaitForSecondsRealtime(1);
}
yield return new WaitForSecondsRealtime(0.5f);
if(SuperController.singleton.activeUI.ToString()=="PackageBuilder"){
SuperController.singleton.packageBuilderUI.Find("BackPanel/PrepPanel/LeftButtons/PrepButton/").GetComponentInChildren<Button>(true).onClick.Invoke();
yield return new WaitForSecondsRealtime(0.5f);
SuperController.singleton.packageBuilderUI.Find("BackPanel/PrepPanel/LeftButtons/FixRefsButton/").GetComponentInChildren<Button>(true).onClick.Invoke();
}
}

private IEnumerator showskinmenu(string sh="", bool change=false,float wait=0.3f,Canvas tx=null,float sx=0,float sy=0){
yield return new WaitForSecondsRealtime(wait);
if(showbox==sh){
skinmenu(change,tx:tx,sx:sx,sy:sy);
}
}

			private IEnumerator insertcode(string sb){
					showbox="";
					gboxon=false;
					pboxon=false;
						if(!fading){
							StartCoroutine(removegbox(change));
							StartCoroutine(removepbox(change));
							}
							
				sb=insert[sb].Substring(insert[sb].IndexOf("}")+1);
				editslide.text=paster.Replace("[X]X[X]",sb);
				int newcar=newcaret+sb.Length;
     			editslide.ActivateInputField();
				yield return null;
				echo14(newcar.ToString());
				editslide.caretPosition=newcar;
				
			}
private IEnumerator showmenu(string sh="",Transform t=null,string str="",string mode="",bool subsub=false,string gotosub="",string gotosub2="",float gotoadjust2=0f,float gotoadjust=0f,float tiph=43,float tipx=0,float tipw=0,float tipy=0,bool nosub=false,float subw2=202f,float subw=202f,float w=202f,float h=43f,float suboffsetx=-172,float offsetx=-172,float suboffsety=-54,float offsety=-54,float spacing=37, Transform subtx=null,Transform tx=null, int subcap=0,int cap=0,bool lower=false,string sidemenu="X",float subsadjust=0f,float sadjust=0f, float suby=0, float subh=39,string prefx="  ",float z=0,float delay=0f,float wait=0.3f){
yield return new WaitForSecondsRealtime(wait);
if(showbox==sh){
submenu(t,str,mode,subsub,gotosub,gotosub2,gotoadjust2,gotoadjust,tiph,tipx,tipw,tipy,nosub,subw2,subw,w,h,suboffsetx,offsetx,suboffsety,offsety,spacing,subtx,tx,subcap,cap,lower,sidemenu,subsadjust,sadjust,suby,subh,prefx,z,delay);
}
}

private bool cuaon=false;
private Vector3 copypos;

private IEnumerator hidecuas(float delay=0.3f){
if(cuaon){yield break;}

if(delay!=0){
yield return new WaitForSecondsRealtime(delay);
}
if(vrkeys.gameObject.active){
	
	cuaon=false;yield break;}
if(!cuaon){
	
					for (int p=1;p<200;p++){
RemoveButton(pbox[p]);
					}	
	cuawindow.gameObject.SetActive(false);
	whitefiller.gameObject.SetActive(false);
	cuafiller.gameObject.SetActive(false);
	cualabel.gameObject.SetActive(false);
	cuatext.gameObject.SetActive(false);
	safebox.gameObject.SetActive(false);
	}
}

private void submenu(Transform t,string str="",string mode="",bool subsub=false,string gotosub="",string gotosub2="",float gotoadjust2=0f,float gotoadjust=0f,float tiph=43,float tipx=0,float tipw=0,float tipy=0,bool nosub=false,float subw2=202f,float subw=202f,float w=202f,float h=43f,float suboffsetx=-172,float offsetx=-172,float suboffsety=-54,float offsety=-54,float spacing=37, Transform subtx=null,Transform tx=null, int subcap=0,int cap=0,bool lower=false,string sidemenu="X",float subsadjust=0f,float sadjust=0f, float suby=0, float subh=39,string prefx="  ",float z=0,float delay=0f,float wait=0.3f){
					
					var track="";
					int addi=0;
					if(mode.Contains(":")){track=mode.Substring(mode.IndexOf(":")+1);mode=mode.Substring(0,mode.IndexOf(":"));}
					pboxon=true;	
					Color col=new Color(0.43f, 0.43f, 0.5f);
					Color subcolor=new Color(0.83f, 0.43f, 0.5f);
					Color gosubcolor=new Color(0.40f, 0.47f, 0.7f);
					Color gosubcolor2=new Color(0.40f, 0.47f, 0.7f);
					if(mode=="person" || mode=="models" || mode=="addatoms" || mode=="atoms" || mode=="similar"  || mode=="plugins"){col=skinmenucolor;}

					for (int p=1;p<200;p++){
if(pbox[p]!=null){if(pbox[p].label.Contains(cuatag) && vrkeys.gameObject.active){cuaon=false;continue;}RemoveButton(pbox[p]);}
					}
					
					
					if(mode=="defaults"){nosub=true;}	
					if(mode=="errors"){nosub=true;}	
									
					string [] strsub=str.Split("\n"[0]);
					int i=0;
					foreach(string s in strsub){
						
					var sss="";var plug="";var plugatom="";
					if(s==""){continue;}
					i++;
					
					bool noflip=false;
					
					sss=s;
					var sb=s;
					
					subsub=false;var sbsubs="";
					if(sb.Contains(",")){
					echo10(sb);
					subsub=true;var sbtmp="";int si=0;
					string [] sbsub=sb.Split(","[0]);
					foreach(string sbb in sbsub){
					if(si==0){sbtmp=sbb;}else{sbsubs+=sbb+"\n";}
					si++;
					}
					sss=sb=sbtmp;
					echo10(sbsubs+" split "+sss);
					}	
					
					if(mode=="plugins"){
					plugatom=sb.Substring(0,sb.IndexOf("[] "));
					plug="plugin#"+sb.Substring(sb.IndexOf("[] ")+3);
					echo11(plug);
					var ptmp=plug.Substring(plug.IndexOf("_")+1);
					sss=plugatom+": "+ptmp;
					if(ptmp.Contains("VamTimeline")){
					if(ptmp.Contains("VamTimeline.Contro")){
					sss="TimeLine™ Controller";
					}else{sss=plugatom+": TimeLine™";}
					}
					}
					
					if(lower){
					sss=sss.ToLower().Replace("\r","").Replace("\n","").Replace("<br>","").Replace("https://","").Replace("http://","");}
					if(cap!=0){
					if(sss.Length>cap+1){sss=sss.Substring(0,cap)+"..";}}

					
					float tposy=t.localPosition.y;
					Transform tr=null;
					if(mode=="similar"){
					tr=t.parent.parent.transform;
					tposy=t.localPosition.y-t.parent.localPosition.y;
					}else{
					if(tx==null){tr=t.parent.transform;}else{tr=tx;}}
					float muteatom=0;

					if(mode=="addatoms"){muteatom=8;}
					else if(mode=="errors"){muteatom=8;}
					else if(mode=="scan"){muteatom=8;}
					else if(mode=="tip"){muteatom=8;}
					float zz=z;float novr=0;
					if(mode=="models"){novr=-6;}
					if(mode=="atoms" || mode=="person" || mode=="plugins"){if(!vr){if(mode!="models"){zz=0;}novr=muteatom-9;}}
					var ppad="";if(mode=="person" || mode=="models"){ppad="  ";}

					//echo24(i.ToString());
					if(mode=="tip" && i==1){prefx="";}
					if(mode=="tip" && i>1){offsety=tipy;w=tipw;offsetx=tipx;h=tiph;prefx=" ";}

					int bi=i;var trackr=track;
					float xsplit=0;float ysplit=0;
					if(mode=="insert"){
					if(bi>31){
					xsplit=300;ysplit=0-(31*spacing);	
						
					}	
					}
					
					
					if(addi==1){addi=0;i++;}
					float hx=0;
					if(sb.Contains("Install /")){
					hx=h;addi=1;
					}
					
					pbox[i]=newbutton(tr,() => {
					pbox[i].buttonText.supportRichText = true;
					if(mode=="tip" || track=="tip"){
					if(track=="tip"){rsa=_person;}
				if(sb=="apply RealSKIN™"){StartCoroutine(realskin(rsa,safe:true));}
				else{StartCoroutine(realskin(rsa,mode:"paste",bodypart:sb.Replace("full body",""),layer:""));}
}
					if(mode=="plugins"){
					if(sb.Contains("[]")){
					var atype=sb.Substring(0,sb.IndexOf("[]"));
					Transform bb=SuperController.singleton.mainHUD;
					if(atype!="Session" && atype!="Scene"){bb=SuperController.singleton.GetAtomByUid(atype).transform;}
						
						if(atype!="Session" && atype!="Scene"){
						Atom aa=SuperController.singleton.GetAtomByUid(atype);
						SuperController.singleton.SelectController(aa.mainController);
						aa.transform.GetComponentInChildren<UITabSelector>(true).SetActiveTab("Plugins");
						}else{
						SuperController sc = SuperController.singleton;
						sc.gameMode = SuperController.GameMode.Edit;
						sc.SetActiveUI("MainMenu");
						sc.ShowMainHUDAuto();
						sc.mainHUD.GetComponentInChildren<UITabSelector>(true).SetActiveTab("Tab"+atype+"Plugins");
						}
					
						foreach(Transform tt in bb.GetComponentsInChildren<Transform>(true)){
						if(tt.name=="CloseButton" && tt.parent.name=="ScriptUI(Clone)"){
						tt.parent.gameObject.SetActive(false);
						}}
					
						foreach(Button b in bb.GetComponentsInChildren<Button>(true)){
						var pluginname="";
						if(b.transform.parent.name=="ScriptControllerPanel(Clone)"){
						foreach(Text txt in b.transform.parent.parent.parent.GetComponentsInChildren<Text>(true)){
						if(txt.transform.name=="UID" && txt.text.Contains("plugin#") && txt.text.Contains("_") && txt.text==plug){pluginname=txt.text;}
						if(pluginname!=""){if(b.transform.name=="OpenUIButton" ){b.onClick.Invoke();break;}}}
						}}
						
						}}
					
					else if(mode=="exit"){
					destroy(true);
					}
					
					else if(mode=="recorder"){
					if(sb.Contains("Select")){
					SuperController.singleton.motionAnimationMaster.SelectControllersArmedForRecord();
					}
					else if(sb.Contains("current")){
					SuperController.singleton.motionAnimationMaster.loopToggle.isOn=true;
					SuperController.singleton.motionAnimationMaster.StartRecordMode();
					}
					else if(sb.Contains("Record")){
					SuperController.singleton.motionAnimationMaster.loopToggle.isOn=true;
					SuperController.singleton.motionAnimationMaster.SeekToBeginning();
					SuperController.singleton.motionAnimationMaster.StartRecordMode();
					}
					else if(sb.Contains("Clear")){
					SuperController.singleton.motionAnimationMaster.loopToggle.isOn=true;
					SuperController.singleton.motionAnimationMaster.ClearAllAnimation();
					}
					else if(sb.Contains("Triggers")){
						
						SuperController sc = SuperController.singleton;
						sc.gameMode = SuperController.GameMode.Edit;
						sc.SetActiveUI("MainMenu");
						sc.ShowMainHUDAuto();
						sc.mainHUD.GetComponentInChildren<UITabSelector>(true).SetActiveTab("TabAnimation");
	

					foreach(Component uit in sc.mainHUD.parent.GetComponentsInChildren<Component>(true)){
					if(uit.ToString().contains("Triggers") && uit.ToString().contains("Tab")){
					uit.transform.parent.GetComponent<UITabSelector>().SetActiveTab("Triggers");
						//echo9(uit.ToString());
						}}
					}
					
					else if(sb.Contains("Settings")){
						
						SuperController sc = SuperController.singleton;
						sc.gameMode = SuperController.GameMode.Edit;
						sc.SetActiveUI("MainMenu");
						sc.ShowMainHUDAuto();
						sc.mainHUD.GetComponentInChildren<UITabSelector>(true).SetActiveTab("TabAnimation");
	

					foreach(Component uit in sc.mainHUD.parent.GetComponentsInChildren<Component>(true)){
					if(uit.ToString().contains("Triggers") && uit.ToString().contains("Tab")){
					uit.transform.parent.GetComponent<UITabSelector>().SetActiveTab("Control");
						//echo9(uit.ToString());
						}}
					}
					
					}					
					
else if(mode=="insert"){
StartCoroutine(insertcode(sb));
}					
					
					else if(mode=="similar"){
					if(sb.Contains("Search")){
					StartCoroutine(iletters((lasthoover+" ").Substring(0,(lasthoover+" ").IndexOf(" "))));
					}
					
					else if(sb.Contains("Deselect")){
					lastclicked=lasthoover;
					lasttoggle.toggle.isOn=false;
					Similar(false);
					
					}
					else if(sb.Contains("Select")){				
					lastclicked=lasthoover;
					echo14(lastclicked);
					lasttoggle.toggle.isOn=true;
					Similar(true);
					}
						
						
					}						
									
					else if(mode=="addatoms"){
					
					if(sss=="Person" || sss=="AnimationPattern" || sss=="Light"  || sss=="Reflective"  || sss=="Misc"  || sss=="WindowCamera"){
						var ssss=sss.Replace("Light","InvisibleLight");
						ssss=ssss.Replace("Reflective","Glass");
						ssss=ssss.Replace("Misc","Empty");

						addatom(ssss);	

						
					}
					
					pbox[bi].buttonText.supportRichText = true;
					var cuatags="";if(trackr=="cua"){cuatags=cuatag;}
					if(sss.Contains("Select on add")){
					if(SuperController.singleton.selectAtomOnAddToggle.isOn){
					SuperController.singleton.selectAtomOnAddToggle.isOn=false;
					pbox[bi].label="  Select on add: OFF"+cuatags;
					}else{
					SuperController.singleton.selectAtomOnAddToggle.isOn=true;
					pbox[bi].label="  Select on add: ON	"+cuatags;				
					}
					saveini();
					}
					
					else if(sss.Contains("Move here on add")){
					if(addhere){
					addhere=false;
					pbox[bi].label="  Move here on add: OFF"+cuatags;
					}else{
					addhere=true;
					pbox[bi].label="  Move here on add: ON"+cuatags;				
					}
					saveini();
					}	
					
					else if(sss.Contains("Focus on add")){
					if(SuperController.singleton.focusAtomOnAddToggle.isOn){
					SuperController.singleton.focusAtomOnAddToggle.isOn=false;
					pbox[bi].label="  Focus on add: OFF"+cuatags;
					}else{
					SuperController.singleton.focusAtomOnAddToggle.isOn=true;
					pbox[bi].label="  Focus on add: ON	"+cuatags;				
					}
					saveini();
					}					
					
					}	
					var ppbox=pbox[i];
					if(mode=="links"){StartCoroutine(gourl(sss));}	
					else if(mode=="scan"){
					
					if(sb.Contains("Edit-mode as default:")){
					if(editloader=="ON"){
					editloader="OFF";
					pbox[bi].label="Edit-mode as default: OFF";
					}else{
					editloader="ON";
					pbox[bi].label="Edit-mode as default: ON";						
					}
					saveini();
					}
						

					else if(sb=="Go to documentation-site"){
					webview.OpenLinkInExtenalBrowser("https://morphinecentral.com");
					}
					
					else if(sb.Contains("Install /")){
					StartCoroutine(installsession());
					}					
					
					else if(sb=="Read documentation"){
					webview.url="https://morphinecentral.com";
									webvisible=true;url.enabled=true;web.enabled=true;
				wwwbuttonhud.textColor = new Color(0.8f, 0.9f, 1f);
				wwwbutton.textColor = new Color(0.8f, 0.9f, 1f);
					}
					
					else if(sb=="Watch tutorial-videos"){
					webview.url="https://morphinecentral.com/video";
									webvisible=true;url.enabled=true;web.enabled=true;
				wwwbuttonhud.textColor = new Color(0.8f, 0.9f, 1f);
				wwwbutton.textColor = new Color(0.8f, 0.9f, 1f);
					}					
					
					else if(sb=="Merge Load Scene"){
					SuperController.singleton.LoadMergeSceneDialog();
					}


					else if(sb=="Publish Scene to new Hub-package (VAR)"){
					StartCoroutine(newpackage());
					}
					
					else if(sb=="Publish Scene to current Hub-package (VAR)"){
					StartCoroutine(newpackage(true));
					}					
					
					else if(sb=="Load Scene Audio"){
						SuperController.singleton.SetActiveUI("MainMenu");
						SuperController.singleton.ShowMainHUDAuto();
						SuperController.singleton.mainHUD.GetComponentInChildren<UITabSelector>(true).SetActiveTab("TabAudio");
						SuperController.singleton.mainHUD.Find("MainUICanvas/Panel/Content/TabAudio/Content/Left/BrowseButton/").GetComponentInChildren<Button>(true).onClick.Invoke();
					}					
					
					else if(sb=="New Scene (empty)"){
					SuperController.singleton.ClearScene();
					}
					
					else if(sb=="Rescan packages"){
					SuperController.singleton.RescanPackages();	
					}
					
					}
					
					else if(mode=="errors"){
						
						var serr=sss;

						if(pbox[i].label=="mute"){
						errormute=true;
						pbox[i].label="unmute";
						}else{
						errormute=false;
						pbox[i].label="mute";
							
						}
						saveini();
						}		
					else if(mode=="atoms"  || mode=="person"){
						
						
						int ii=i;
								SuperController.singleton.SelectController(SuperController.singleton.GetAtomByUid(sb).mainController, false);

					}		
					else if(mode=="channels"){targetlist(msgtarget,sb,clicked:true);}		
					else if(mode=="targets"){targetlist(msgtarget,sb,clicked:true);}		
					else if(mode=="models"){setperson(sb);}		
					else if(mode=="defaults"){pboxon=false;setdefaults(sss);
					for (int p=1;p<200;p++){
					if(pbox[p]!=null){
					RemoveButton(pbox[p]);
					}}
					}		
					
					},prefx+sss+ppad,w,h+hx,(t.localPosition.x)+offsetx+xsplit,(tposy+offsety+novr)+(spacing*i)+ysplit,z:zz);
					

					
					pbox[i].name=sb.Replace(" ","").Replace("#","").Replace(",","");
					pbox[i].buttonColor = col;
					pbox[i].textColor = new Color(1f, 1, 1f);
					
					if(mode=="insert"){
					//pbox[i].buttonColor = Color.white;
					pbox[i].textColor = Color.white;
					if(i>49){
					pbox[i].buttonColor = skinmenucolor;
					pbox[i].textColor =Color.white;
					}
					else if(i>25){
					pbox[i].buttonColor = skinmenucolorlight;
					pbox[i].textColor =new Color(0.37f,0.7f,1);
					}
					}
					
					if(mode=="errors" || mode=="scan" || mode=="exit"){
					pbox[i].buttonColor = Color.white;
					pbox[i].textColor =skinmenucolor;
					}
					
					if(sb.Contains("Install /")){
					pbox[i].buttonColor = skinmenucolor;
					pbox[i].textColor =modelcolorlight;
					}
					
					if(track=="tip"){
					pbox[i].buttonColor = col;
					pbox[i].textColor =Color.white;						
					if(sb=="apply RealSKIN™"){pbox[i].buttonColor = modelcolor;}
					}
					
					else if(mode=="tip"){
					
					if(i==1){
					if(sb=="ignore"){noflip=true;continue;}
					Button butt=pbox[i].transform.GetComponentInChildren<Button>(true);
					butt.enabled=false;
					//pbox[i].buttonText.transform.GetComponent<Text>().transform.localEulerAngles=new Vector3(0,180,0);
					pbox[i].buttonColor = new Color(1,1,1,0.6f);
					pbox[i].textColor =skinmenucolor;
					pbox[i].buttonText.alignment = TextAnchor.MiddleCenter;
					}

					if(!noflip){pbox[i].transform.localEulerAngles=new Vector3(0,180,0);}
					
					}					

					else if(mode=="recorder"){
						
					pbox[i].buttonColor = skinmenucolor;
					pbox[i].textColor =Color.white;
					if(sb=="TimeLine<size=22>™</size>"){
					pbox[i].buttonColor = new Color(0.4f,0.42f,1f);
					pbox[i].textColor =Color.white;						
						
					}

					}
					
					else if(mode=="atoms"  || mode=="person" || mode=="models"){

					pbox[i].textColor =Color.gray;
					if(SuperController.singleton.GetAtomByUid(sb)!=null && SuperController.singleton.GetAtomByUid(sb).on){
					pbox[i].buttonColor = col;
					pbox[i].textColor =Color.white;
					}}
					
					else if(mode=="addatoms"){
					
					pbox[i].buttonText.supportRichText = true;var cuatags="";
					if(track=="cua"){cuatags=cuatag;}
					if(sss.Contains("Select on add")){		
					pbox[i].buttonColor = Color.white;
					pbox[i].textColor =skinmenucolor;
					if(SuperController.singleton.selectAtomOnAddToggle.isOn){
					pbox[i].label="  Select on add: ON"+cuatags;
					}else{
					pbox[i].label="  Select on add: OFF"+cuatags;				
					}
					}


					else if(sss.Contains("Move here on add")){
					pbox[i].buttonColor = Color.white;
					pbox[i].textColor =skinmenucolor;
					if(addhere){
					pbox[bi].label="  Move here on add: ON"+cuatags;
					}else{
					pbox[bi].label="  Move here on add: OFF"+cuatags;				
					}
					}	

					
					else if(sss.Contains("Focus on add")){
	if(track=="cua"){cuaon=true;
	cuawindow.gameObject.SetActive(true);
	whitefiller.gameObject.SetActive(true);
	cuafiller.gameObject.SetActive(true);
	cualabel.gameObject.SetActive(true);
	cuatext.gameObject.SetActive(true);
	safebox.gameObject.SetActive(true);
	}						
					pbox[i].buttonColor = Color.white;
					pbox[i].textColor =skinmenucolor;
					if(SuperController.singleton.focusAtomOnAddToggle.isOn){
					pbox[i].label="  Focus on add: ON"+cuatags;
				
					}else{
					pbox[i].label="  Focus on add: OFF"+cuatags;				
					}
					}					
					
					}	
					
					
					pbox[i].buttonText.fontSize = 23;
					pbox[i].buttonText.alignment = TextAnchor.MiddleLeft;
					if(sb=="TimeLine<size=22>™</size>"){pbox[i].buttonText.alignment = TextAnchor.MiddleCenter;}
					if(mode=="errors" || mode=="scan" || (mode=="tip" && i==1)){pbox[i].buttonText.alignment = TextAnchor.MiddleCenter;}
					else if(mode=="person" || mode=="models"){pbox[i].buttonText.alignment = TextAnchor.MiddleRight;ppad="  ";}
					//pbox[i].buttonText.horizontalOverflow = HorizontalWrapMode.Wrap;
					pbox[i].buttonText.lineSpacing = 1f;
					//pbox[i].buttonText.GetComponent<InputField>().lineType = InputField.LineType.SingleLine;
					
					float subspace=spacing-4;if(spacing>0){subspace=0-spacing-4;}



					
if(gotosub2!=""){

					UIDynamicButton gotobutton2=newbutton(pbox[i].transform,() => {

					if(mode=="atoms"  || mode=="person"  || mode=="models"){
					
					for (int p=1;p<200;p++){
					if(pbox[p].name==sb.Replace(" ","").Replace("#","").Replace(",","")){


					if(!SuperController.singleton.GetAtomByUid(sb).collisionEnabled){
					SuperController.singleton.GetAtomByUid(sb).collisionEnabled=true;
					foreach(UIDynamicButton bb in pbox[p].transform.GetComponentsInChildren<UIDynamicButton>(true)){
					if(bb.label=="C"){
					bb.buttonColor =gosubcolor2;
					bb.textColor =Color.white;
					}}
					}else{
					foreach(UIDynamicButton bb in pbox[p].transform.GetComponentsInChildren<UIDynamicButton>(true)){
					if(bb.label=="C"){
					bb.buttonColor = new Color(0.27f,0.28f,0.32f,1f);
					bb.textColor =Color.gray;
					}}

					SuperController.singleton.GetAtomByUid(sb).collisionEnabled=false;}
					
					}}
					
					
					}	
					
					},gotosub2,-244,subh,w+42+gotoadjust2,suby+subspace);	
	


					Vector2 opg2=gotobutton2.transform.localPosition;
					scaler(gotobutton2.transform,60,subh);
					gotobutton2.transform.localPosition=opg2;
					if(SuperController.singleton.GetAtomByUid(sb).collisionEnabled){
					gotobutton2.buttonColor =gosubcolor2;
					gotobutton2.textColor =Color.white;
					}else{
					gotobutton2.buttonColor = new Color(0.27f,0.28f,0.32f,1f);
					gotobutton2.textColor =Color.gray;
					}
					gotobutton2.buttonText.fontSize = 23;
					gotobutton2.buttonText.alignment = TextAnchor.MiddleCenter;
					gotobutton2.buttonText.lineSpacing = 1f;
	
}			



try{				
if(gotosub!=""){
					
					var btn=sb;
					int bii=i;
					Color bcol=gosubcolor;
					UIDynamicButton gotobutton=newbutton(pbox[i].transform,() => {
					
					if(mode=="plugins"){
					if(plugatom!="Session" && plugatom!="Scene"){
					JSONStorable a1 = SuperController.singleton.GetAtomByUid(plugatom).GetStorableByID(plug);
					JSONStorableBool plugintoggle = a1.GetBoolJSONParam("enabled");
					if(!plugintoggle.val){
					plugintoggle.val=true;
					pbox[bii].buttonColor =col;
					pbox[bii].textColor =Color.white;
					foreach(UIDynamicButton bb in pbox[bii].transform.GetComponentsInChildren<UIDynamicButton>(true)){
					if(bb.label=="ON"){
					bb.buttonColor = gosubcolor;
					bb.textColor =Color.white;
					}}		
					}else{
					plugintoggle.val=false;
					pbox[bii].textColor =Color.gray;
					foreach(UIDynamicButton bb in pbox[bii].transform.GetComponentsInChildren<UIDynamicButton>(true)){
					if(bb.label=="ON"){
					bb.buttonColor = new Color(0.27f,0.28f,0.32f,1f);
					bb.textColor =Color.gray;
					}}	
					}
					}else{
					if(!plugintoggles[sb].isOn){
					plugintoggles[btn].isOn=true;
					pbox[bii].buttonColor =col;
					pbox[bii].textColor =Color.white;
					foreach(UIDynamicButton bb in pbox[bii].transform.GetComponentsInChildren<UIDynamicButton>(true)){
					if(bb.label=="ON"){
					bb.buttonColor = gosubcolor;
					bb.textColor =Color.white;
					}}					
					
					}else{
					plugintoggles[btn].isOn=false;
					pbox[bii].textColor =Color.gray;
				    foreach(UIDynamicButton bb in pbox[bii].transform.GetComponentsInChildren<UIDynamicButton>(true)){
					if(bb.label=="ON"){
					bb.buttonColor = new Color(0.27f,0.28f,0.32f,1f);
					bb.textColor =Color.gray;
					}}					
					}
					}
					}
					
					else if(mode=="atoms"  || mode=="person" || mode=="models"){
					for (int p=1;p<200;p++){
					if(pbox[p].name==sb.Replace(" ","").Replace("#","").Replace(",","") ){
					if(!SuperController.singleton.GetAtomByUid(sb).on){
					SuperController.singleton.GetAtomByUid(sb).SetOn(true);
					pbox[p].buttonColor = col;
					pbox[p].textColor =Color.white;
					foreach(UIDynamicButton bb in pbox[p].transform.GetComponentsInChildren<UIDynamicButton>(true)){
					if(bb.label=="ON"){
					bb.buttonColor = gosubcolor;
					bb.textColor =Color.white;
					}}
					}else{
				    foreach(UIDynamicButton bb in pbox[p].transform.GetComponentsInChildren<UIDynamicButton>(true)){
					if(bb.label=="ON"){
					bb.buttonColor = new Color(0.27f,0.28f,0.32f,1f);
					bb.textColor =Color.gray;
					}}
					pbox[p].textColor =Color.gray;
					SuperController.singleton.GetAtomByUid(sb).SetOn(false);}
					}}}	
					
					},gotosub,-244,subh,w+42+gotoadjust,suby+subspace);	
	


					Vector2 opg=gotobutton.transform.localPosition;
					scaler(gotobutton.transform,60,subh);
					gotobutton.transform.localPosition=opg;

					if(mode=="plugins"){
					
					if(plugatom!="Session" && plugatom!="Scene"){
					JSONStorable a1 = SuperController.singleton.GetAtomByUid(plugatom).GetStorableByID(plug);
					JSONStorableBool plugintoggle = a1.GetBoolJSONParam("enabled");
					if(plugintoggle.val){
					gotobutton.buttonColor =gosubcolor;
					gotobutton.textColor =Color.white;
					}else{
					gotobutton.buttonColor = new Color(0.27f,0.28f,0.32f,1f);
					gotobutton.textColor =Color.gray;
					pbox[i].textColor =Color.gray;					
					}
					}else{
					if(plugintoggles[sb].isOn){
					gotobutton.buttonColor =gosubcolor;
					gotobutton.textColor =Color.white;
					}else{
					gotobutton.buttonColor = new Color(0.27f,0.28f,0.32f,1f);
					gotobutton.textColor =Color.gray;
					pbox[i].textColor =Color.gray;					
					}}
					}
						
					if(mode=="atoms"  || mode=="person" || mode=="models"){
					if(SuperController.singleton.GetAtomByUid(sb).on){
					gotobutton.buttonColor =gosubcolor;
					gotobutton.textColor =Color.white;
					}else{
					gotobutton.buttonColor = new Color(0.27f,0.28f,0.32f,1f);
					gotobutton.textColor =Color.gray;
					}
					}
					
					gotobutton.buttonText.fontSize = 23;
					gotobutton.buttonText.alignment = TextAnchor.MiddleCenter;
					gotobutton.buttonText.lineSpacing = 1f;
	
}				
}catch(Exception e){SuperController.LogError("Exception caught: " + e);}				

					if(!nosub){
					
					UIDynamicButton sidebutton=newbutton(pbox[i].transform,() => {
					
										if(mode=="plugins"){
											
					Transform bb=SuperController.singleton.mainHUD;
					if(plugatom!="Session" && plugatom!="Scene"){bb=SuperController.singleton.GetAtomByUid(plugatom).transform;}

					
						if(plugatom!="Session" && plugatom!="Scene"){
						Atom aa=SuperController.singleton.GetAtomByUid(plugatom);
						SuperController.singleton.SelectController(aa.mainController);
						aa.transform.GetComponentInChildren<UITabSelector>(true).SetActiveTab("Plugins");
						}else{
						SuperController sc = SuperController.singleton;
						sc.gameMode = SuperController.GameMode.Edit;
						sc.SetActiveUI("MainMenu");
						sc.ShowMainHUDAuto();
						sc.mainHUD.GetComponentInChildren<UITabSelector>(true).SetActiveTab("Tab"+plugatom+"Plugins");
						}


						foreach(Button b in bb.GetComponentsInChildren<Button>(true)){
						var pluginname="";
						if(b.transform.parent.name=="ScriptControllerPanel(Clone)"){
							
							
							
						foreach(Text txt in b.transform.parent.parent.parent.GetComponentsInChildren<Text>(true)){
						if(txt.transform.name=="UID" && txt.text.Contains("plugin#") && txt.text.Contains("_") && txt.text==plug){
							
							pluginname=txt.text;

			
				
			foreach(Button bt in b.transform.parent.parent.parent.GetComponentsInChildren<Button>(true)){
			if(bt.transform.name=="RemoveButton"){
			//echo11(txt.text+" > "+plug+" > "+bt.transform.name);
			bt.onClick.Invoke();
			SuperController.singleton.SetToLastActiveUI();
			break;
			}}	
							
							
						}}
							}
							
						}										
										
										var errb="";
										if(str.Contains(sb+",\n")){errb=str.Replace(sb+",\n","");}
										else if(str.Contains(",\n"+sb)){errb=str.Replace(",\n"+sb,"");}
										else{errb=str.Replace(sb,"");}
										removebuttons.Remove(sb);
										openbuttons.Remove(sb);
										plugintoggles.Remove(sb);
										
										
										submenu(addatombuttonb7.transform,errb,"plugins",gotoadjust:-494f,suboffsety:-109,gotosub:"ON",delay:0.9f,suboffsetx:-410,prefx:"                     ",cap:30,w:410,offsetx:-321,sadjust:-553,offsety: -174,spacing: 37,tx:hud.transform,z:-40f);

										}
										
										
						else if(mode=="links"){StartCoroutine(gourl(sss));
						for (int p=1;p<200;p++){
						if(pbox[p]!=null){
						RemoveButton(pbox[p]);
						}}
						links=links.Replace(sss+"\n","");
						submenu(linksb.transform,links,"links",tx: chat.transform,w:318,offsetx:-288,cap:30,lower:true,sadjust:-60);
						
					
					}


					else if(mode=="atoms" || mode=="person" || mode=="models"){
						SuperController.singleton.GetAtomByUid(sb).Remove();
						echo8("removing "+sb);
								var errb="";
								if(mode=="atoms"){
									foreach(Atom p in SuperController.singleton.GetAtoms()){
									if(p.name!="CoreControl" && p.name!="[CameraRig]"){errb+=p.name+"\n";}
									}
									
								}else{
								foreach(Atom p in SuperController.singleton.GetAtoms()){
									if(p.type=="Person"){errb+=p.name+"\n";}
									}
								}
								echo9("removemode "+mode);

						if(mode=="models"){submenu(modelbutton.transform,errb,"models",gotoadjust2:-376f,gotoadjust:-317f,subw:322,suboffsety:-109,suboffsetx:-210,cap:26,w:330,offsetx:-272,sadjust:-434,gotosub2:"C",gotosub:"ON",offsety: 0-52,spacing: 0+37);}
						else if(mode=="atoms"){submenu(atombuttonb.transform,errb,"atoms",gotoadjust2:-166f,gotoadjust:-225f,subw:322,suboffsety:-109,suboffsetx:-340,cap:26,w:410,offsetx:-175,sadjust:-107,gotosub2:"C",gotosub:"ON",offsety: -174,spacing: 37,tx:hud.transform,z:-40f);}
						else if(mode=="person"){submenu(addatombuttonb.transform,errb,"person",gotoadjust2:-363f,gotoadjust:-305f,subw:322,suboffsety:-109,suboffsetx:-210,cap:26,w:323,offsetx:-235,sadjust:-421,gotosub2:"C",gotosub:"ON",offsety: -174,spacing: 37,tx:hud.transform,z:-40f);}
						}			
						
					else if(mode=="channels"){
						//targetlist(msgtarget,sss);
						echo7("leaving");
						Clientmessage("/leave "+sss, raw:false);
						var tmpchannels=channels.Replace(sss+"\n","");
						submenu(chansb.transform,tmpchannels,"channels",cap:16,offsety: 0-84,spacing: 0-37);
						}		
						
					else if(mode=="targets"){
						
						for (int p=1;p<200;p++){
						if(pbox[p]!=null){
						RemoveButton(pbox[p]);
						}}
						msgtargets=msgtargets.Replace(sss+"\n","");
						submenu(targetb.transform,msgtargets,"targets",cap:16,offsety: 0-84,offsetx:-21.5f,spacing: 0-37);
						
						}		

					
					},sidemenu,-244,subh,w+42+sadjust,suby+subspace);
					Vector2 op=sidebutton.transform.localPosition;
					scaler(sidebutton.transform,60,subh);
					sidebutton.transform.localPosition=op;
					sidebutton.buttonColor = subcolor;
					sidebutton.textColor = new Color(1f, 1, 1f);
					sidebutton.buttonText.fontSize = 23;
					sidebutton.buttonText.alignment = TextAnchor.MiddleCenter;
					//sidebutton.buttonText.horizontalOverflow = HorizontalWrapMode.Wrap;
					sidebutton.buttonText.lineSpacing = 1f;
					//sidebutton.buttonText.GetComponent<InputField>().lineType = InputField.LineType.SingleLine;
					}
					
					EventTrigger.Entry rem = new EventTrigger.Entry();
					rem.eventID = EventTriggerType.PointerExit;
					rem.callback.AddListener((subeventData) => {
						
											if(mode=="tip"){
					scaleron=false;
					
					}
					
						if(track=="cua"){cuaon=false;StartCoroutine(hidecuas());}
										if(mode=="similar" && sbsubs.Replace("\n","")==""){
										helptip();}
										
					pboxon=false;
					gboxon=false;
						if(!fading){StartCoroutine(removepbox(change,delay:delay));}
						if(!fadingb){StartCoroutine(removegbox(change,delay:delay));}								
					}
													
					
					);
					
					int xxi=i;
					int xxii=strsub.Length;
					pbox[i].gameObject.AddComponent<EventTrigger>();
					pbox[i].gameObject.GetComponent<EventTrigger>().triggers.Add(rem);
					
					EventTrigger.Entry keep = new EventTrigger.Entry();
					keep.eventID = EventTriggerType.PointerEnter;
					keep.callback.AddListener((subeventData) => {
					if(mode=="tip"){
					scaleron=true;
					scaling=true;
					}
					if(track=="cua"){cuaon=true;
					cuawindow.gameObject.SetActive(true);
						whitefiller.gameObject.SetActive(true);
						cuafiller.gameObject.SetActive(true);
	cualabel.gameObject.SetActive(true);
	cuatext.gameObject.SetActive(true);
					safebox.gameObject.SetActive(true);
					}
										if(mode=="similar" && sbsubs.Replace("\n","")==""){
										helptip("similar");}
					
					if(sbsubs.Replace("\n","")!=""){
					
					int iii=0;int yy=0;
					
					
					for (int p=1;p<xxii+10;p++){
					if(pbox[p]!=null){iii++;
					if(pbox[p].name==sb.Replace(" ","").Replace("#","").Replace(",","")){
					yy=iii;
					}
					}}
					echo10(sb+(iii.ToString()));
					
					
					if(mode=="similar"){
					helptip("copyto");
					}
					if(mode=="person"){
					Color bcol=skinmenucolor;
					bcol.a=0.5f;
					if(!covbox){
					for(int xi=0;xi<xxii;xi++){
					if(pbox[xi]!=null){foreach(UIDynamicButton bb in pbox[xi].transform.GetComponentsInChildren<UIDynamicButton>(true)){
					if(bb.label==" "){
						echo14("found");
					RemoveButton(bb);
					}}}}
					}
					
					if(!covbox){
					UIDynamicButton cover=newbutton(pbox[xxi].transform,() => {
						
					}," ",-176,subh+670.5f,w+158+gotoadjust,suby+subspace+subh-2.5f);
					cover.buttonColor=bcol;
					
					EventTrigger.Entry cov = new EventTrigger.Entry();
					cov.eventID = EventTriggerType.PointerEnter;
					cov.callback.AddListener((coveventData) => {
					covbox=true;
					});
					
					EventTrigger.Entry cov2= new EventTrigger.Entry();
					cov2.eventID = EventTriggerType.PointerExit;
					cov2.callback.AddListener((coveventData) => {
					covbox=false;
					});
										
					
					cover.gameObject.AddComponent<EventTrigger>();
					cover.gameObject.GetComponent<EventTrigger>().triggers.Add(cov);
					cover.gameObject.GetComponent<EventTrigger>().triggers.Add(cov2);}
					
}	
					Transform ttx=tx;
					if(mode=="insert"){
						track=xxi.ToString();
						}					
					
					if(mode=="similar"){
						offsetx=0;sadjust=0;offsety=0;z=0;suboffsety=0;
						echo16(pbox[xxi].label);
						ttx=pbox[xxi].transform;}
					var modeb=mode;
					if(track!=""){
					modeb=mode+":"+track;
					}
					submenub(pbox[i].transform,sbsubs,modeb,sb,cap:subcap,w:subw,h:h,offsetx:suboffsetx-284,sadjust:subsadjust,offsety: ((suboffsety-(iii*spacing))+spacing*yy)-0f,tx:ttx,spacing: spacing,z:z);
					}	
					
					pboxon=true;
					
					for (int p=1;p<xxii;p++){
					if(pbox[p]!=null){
					
					Color ccol=pbox[i].buttonColor;
					Color cctxt=pbox[i].textColor;
					ccol.a=1f;
					cctxt.a=1f;
					pbox[i].buttonColor=ccol;
					pbox[i].textColor=cctxt;
					
					
					
					}}
					});
					pbox[i].gameObject.AddComponent<EventTrigger>();
					pbox[i].gameObject.GetComponent<EventTrigger>().triggers.Add(keep);
					}

}

private bool covbox;
private bool addhere=false;
private void skinmenu(bool change=false, Canvas tx=null, float sx=0,float sy=0){
				
				float z=0;
				if(!change){sy=sy+37;if(vr && showbox!="model"){z=-8;sy=sy-2;sx=sx-1;}}
				try{	
					pboxon=true;
					Canvas sc=ui;
					if(tx!=null){sc=tx;}else{
					ui.sortingOrder=30;}

					for (int p=1;p<200;p++){
					if(pbox[p]!=null){
					
					RemoveButton(pbox[p]);
					}}
					string [] persub=pers.Split(","[0]);
					int i=0;int r=0;int c=0;
					
					bool extrabuttons=false;	
					foreach(string s in persub){i++;r++;if(r>16){r=1;c++;}
					var ss=s;if(ss.Contains(" (")){ss=s.Substring(0,s.IndexOf(" ("));}
					float yy=630;if(change){yy=921;}
					
					
					pbox[i]=setbutton(sc,() => {

					if(change){
					if(!people){Result("ADD A MODEL FIRST");
					pboxon=false;
					if(!fading){StartCoroutine(removepbox(change,delay:0.1f));}
					return;}	
						
					StartCoroutine(changeskin(ss));}
					else{
					StartCoroutine(addperson(ss));}
					
					
					
					
					},s,166f,43f,-88f+sx+(260f*c),(yy+sy)-(37*r),z);
					
					pbox[i].buttonColor = modelmenucolor;
					pbox[i].textColor = modelmenutext;
					if(change){
					pbox[i].buttonColor = skinmenucolor;
					pbox[i].textColor = skinmenutext;						
					}
					pbox[i].buttonText.fontSize = 23;
					pbox[i].buttonText.alignment = TextAnchor.MiddleLeft;
					
					EventTrigger.Entry rem = new EventTrigger.Entry();
					rem.eventID = EventTriggerType.PointerExit;
					rem.callback.AddListener((subeventData) => {
					pboxon=false;
					if(!fading){StartCoroutine(removepbox(change,delay:0.1f));}				
					});
					pbox[i].gameObject.AddComponent<EventTrigger>();
					pbox[i].gameObject.GetComponent<EventTrigger>().triggers.Add(rem);

					
					EventTrigger.Entry keep = new EventTrigger.Entry();
					keep.eventID = EventTriggerType.PointerEnter;
					keep.callback.AddListener((subeventData) => {
					pboxon=true;

					if(!change){
					pbox[198].buttonColor = modelcolor;
					pbox[198].textColor = Color.white;
					pbox[199].buttonColor = modelcolor;
					pbox[199].textColor = Color.white;					
					}
					
					
					for (int p=1;p<194;p++){
					if(pbox[p]!=null){
					pbox[p].buttonColor = modelmenucolor;
					pbox[p].textColor = modelmenutext;
					if(change){
					pbox[p].buttonColor = skinmenucolor;
					pbox[p].textColor = skinmenutext;				
					}
					
	}}
					});
					

					pbox[i].gameObject.AddComponent<EventTrigger>();
					pbox[i].gameObject.GetComponent<EventTrigger>().triggers.Add(keep);
					

			
					if(!change && !extrabuttons && i==persub.Length){
					extrabuttons=true;					
					pbox[199]=setbutton(sc,() => {
					usehumanizer=!usehumanizer;
					saveini();						
					pbox[199].label="Humanizer™ physics: "+(usehumanizer.ToString()).Replace("True","ON").Replace("False","OFF");
					},"Humanizer™ physics: "+(usehumanizer.ToString()).Replace("True","ON").Replace("False","OFF"),306f,43f,-89f+sx,630+sy,z);
					pbox[199].gameObject.AddComponent<EventTrigger>();
					pbox[199].gameObject.GetComponent<EventTrigger>().triggers.Add(keep);
					pbox[199].gameObject.GetComponent<EventTrigger>().triggers.Add(rem);
				
					pbox[198]=setbutton(sc,() => {
					userealskin=!userealskin;
					saveini();
					pbox[198].label="RealSKIN™: "+(userealskin.ToString()).Replace("True","ON").Replace("False","OFF");
					},"RealSKIN™: "+(userealskin.ToString()).Replace("True","ON").Replace("False","OFF"),284f,43f,315f+sx,630+sy,z);
					pbox[198].gameObject.AddComponent<EventTrigger>();
					pbox[198].gameObject.GetComponent<EventTrigger>().triggers.Add(keep);
					pbox[198].gameObject.GetComponent<EventTrigger>().triggers.Add(rem);
					
					pbox[195]=setbutton(sc,() => {
					addhere=!addhere;
					pbox[195].label="Move here on add: "+addhere.ToString().Replace("True","ON").Replace("False","OFF");					
					},"Move here on add: "+addhere.ToString().Replace("True","ON").Replace("False","OFF"),166,43f,-88f+sx+(260*0),0+sy,z);
					pbox[195].gameObject.AddComponent<EventTrigger>();
					pbox[195].gameObject.GetComponent<EventTrigger>().triggers.Add(keep);
					pbox[195].gameObject.GetComponent<EventTrigger>().triggers.Add(rem);
					pbox[195].buttonText.fontSize = 23;
					//pbox[195].buttonText.alignment = TextAnchor.MiddleLeft;
					
					pbox[196]=setbutton(sc,() => {
					SuperController.singleton.selectAtomOnAddToggle.isOn=!SuperController.singleton.selectAtomOnAddToggle.isOn;
					pbox[196].label="Select on add: "+SuperController.singleton.selectAtomOnAddToggle.isOn.ToString().Replace("True","ON").Replace("False","OFF");
					
					},"Select on add: "+SuperController.singleton.selectAtomOnAddToggle.isOn.ToString().Replace("True","ON").Replace("False","OFF"),166,43f,-88f+sx+(260*1),0+sy,z);
					pbox[196].gameObject.AddComponent<EventTrigger>();
					pbox[196].gameObject.GetComponent<EventTrigger>().triggers.Add(keep);
					pbox[196].gameObject.GetComponent<EventTrigger>().triggers.Add(rem);
					pbox[196].buttonText.fontSize = 23;	
					
					pbox[197]=setbutton(sc,() => {
					SuperController.singleton.focusAtomOnAddToggle.isOn=!SuperController.singleton.focusAtomOnAddToggle.isOn;
					pbox[197].label="Focus on add: "+SuperController.singleton.focusAtomOnAddToggle.isOn.ToString().Replace("True","ON").Replace("False","OFF");
					
					
					},"Focus on add: "+SuperController.singleton.focusAtomOnAddToggle.isOn.ToString().Replace("True","ON").Replace("False","OFF"),166,43f,-88f+sx+(260*2),0+sy,z);
					pbox[197].gameObject.AddComponent<EventTrigger>();
					pbox[197].gameObject.GetComponent<EventTrigger>().triggers.Add(keep);
					pbox[197].gameObject.GetComponent<EventTrigger>().triggers.Add(rem);
					pbox[197].buttonText.fontSize = 23;	
					
					pbox[198].buttonColor = modelcolor;
					pbox[198].textColor = Color.white;
					pbox[199].buttonColor = modelcolor;
					pbox[199].textColor = Color.white;
					
					}					
					
					}
					
					}catch(Exception e){SuperController.LogError("Exception caught: " + e);}
						
						
					
	
}




private UIDynamicTextField chatlabel;
private UIDynamicTextField chatinput;
private UIDynamicTextField urlinput;
private UIDynamicTextField webwindow;
private UIDynamicTextField chatfiller;
private UIDynamicTextField urlfiller;
private InputField _chatinput;
private InputField _urlinput;
private UIDynamicButton texturecopy;
private UIDynamicButton texturepaste;
private UIDynamicButton debug;
private GameObject webpanel;
private VRWebBrowserUI webviewui;
private VRWebBrowser webview;
private Vector2 chatpos;
private Vector2 webpos;
private Vector2 urlpos;
private string realskinurl="https://drive.google.com/u/1/uc?id=1PDQ1FAyu7AR_W9QM60VmM-CawiZ2XoIv&export=download&confirm=t";
private string realskinfile="God.RealSKIN Basic.1.var";
private string serverinit="\\/<color=#333333>\\</color>/<color=#333333>\\</color>/\\/\\NET OFFLINE - USING BACKUP";

private IEnumerator installsession(){

				yield return new WaitForSecondsRealtime(2);

				var mexist=listplugins("morphine","session");
				if(mexist==""){
					
				var installfile="";
				foreach(Text t in UITransform.parent.parent.GetComponentsInChildren<Text>(true)){
				if(t.name=="URL"){installfile=t.text;}
				if(t.text.contains(this.name)){
				break;
				}}
				GameObject.Destroy(morphine.gameObject);
				GameObject.Destroy(lockObject.gameObject);
				yield return new WaitForSecondsRealtime(0.5f);
				StartCoroutine(NewSessionPreset(installfile,installer:true));
				bool newplugin=false;
				while(!newplugin){
				yield return new WaitForSecondsRealtime(1);
				foreach(UIDynamicButton t in SuperController.singleton.mainHUD.transform.GetComponentsInChildren<UIDynamicButton>(true)){
				if(t.label=="//\\\\/\\\\°"){
				t.transform.GetComponent<Button>().onClick.Invoke();
				newplugin=true;
				}
				}			
				}
				this.enabled=false;
				destruct.onClick.Invoke();
				yield break;
				}	
	
}
	

private NamedAudioClip cam1;
private NamedAudioClip cam2;
private bool shooting=false;
private Camera Mcamera=null;
private IEnumerator bigshot(string filename)
    {
		shooting=true;
		SuperController.singleton.pauseAutoSimulation=true;
		Transform aud=SuperController.singleton.mainHUD.Find("MainUICanvas/Panel/Content/TabAudio/Content").GetComponent<Transform>();

bool foundtxt=false;
foreach(Text bt in aud.GetComponentsInChildren<Text>(true)){
if(bt.text=="cam1"){
foundtxt=true;
}
if(bt.text=="Test" && foundtxt){
bt.transform.parent.GetComponentInChildren<Button>(true).onClick.Invoke();
foundtxt=false;
}
}

			var camflash=newbutton(SuperController.singleton.hiResScreenshotPreview.transform.Find("ScreenShotCanvas/Panel/HiResScrFOV"),() => {},"",152,320,-76,-446);

			camflash.buttonColor=Color.white;
			yield return null;				
			camflash.textColor=Color.clear;
			yield return null;
			
			
		if(photomode=="normal" || photomode=="2K"){shooting=false;}		
			camflash.buttonColor=new Color(1,1,1,0.5f);
			yield return null;
			camflash.buttonColor=Color.clear;
			yield return null;
			yield return new WaitForSecondsRealtime(0.3f);


		int rh = 1920;
        int rw = 1080;
		if(!camdir){
		rh=1080;
		rw=1920;		
		}
		
		if(photomode=="2K"){rw=int.Parse((rw*1.5f).ToString());rh=int.Parse((rh*1.5f).ToString());}
		if(photomode=="4K"){rw=rw*2;rh=rh*2;}
		if(photomode=="8K"){rw=rw*4;rh=rh*4;}
		else if(photomode=="12K"){rw=rw*6;rh=rh*6;}
		else if(photomode=="16K"){rw=rw*8;rh=rh*8;}		

	
	if(Mcamera==null){Mcamera = Instantiate<Camera>(SuperController.singleton.hiResScreenshotCamera, SuperController.singleton.hiResScreenshotCamera.transform);}
    while(Mcamera==null){yield return new WaitForSecondsRealtime(0.1f);}   
	//shooting=false;
			Mcamera.enabled=true;
			Mcamera.gameObject.SetActive(true);
			Mcamera.transform.eulerAngles=SuperController.singleton.hiResScreenshotCamera.transform.eulerAngles;
			Mcamera.transform.position=SuperController.singleton.hiResScreenshotCamera.transform.position;
			Mcamera.fieldOfView=SuperController.singleton.hiResScreenshotCamera.fieldOfView;
			
        	SkyshopLightController skyshop=SuperController.singleton.GetAtomByUid("CoreControl").gameObject.GetComponentInChildren<SkyshopLightController>(true);
			skyshop.flashIntensity=SuperController.singleton.mainHUD.Find("MainUICanvas/Panel/Content/TabSceneLighting/Left/Camera Exposure/").GetComponentInChildren<Slider>(true).value;

        //Read screenbuffer after rendering is complete
			//yield return new WaitForSecondsRealtime(0.3f);
			yield return new WaitForEndOfFrame();
		
		//SuperController.singleton.SkyshopLightController.skyManager.GlobalSky.CamExposure=1f;
		//SuperController.singleton.transform.Find("skyManager/GlobalSky/CamExposure").GetComponentInChildren<Slider>(true).value=1f;
		
        RenderTexture rt = new RenderTexture(rw, rh, 32);
        Mcamera.targetTexture = rt;
		Mcamera.allowHDR = true;
		Mcamera.allowMSAA = true;
        Texture2D ss = new Texture2D(rw, rh, TextureFormat.ARGB32, false);
           
        float a = Mcamera.aspect;
        Mcamera.aspect = (float)rw / (float)rh;
        Mcamera.Render();
        RenderTexture.active = rt;
        ss.ReadPixels(new Rect(0, 0, rw, rh), 0, 0);
		ss.Apply();
        Mcamera.targetTexture = null;
        RenderTexture.active = null;
        Mcamera.aspect = a;
		Mcamera.enabled=false;
		Mcamera.gameObject.SetActive(false);
        Destroy(rt);
        byte[] bytes = ss.EncodeToPNG();
        //System.IO.File.WriteAllBytes(filename, bytes);
		if(FileManagerSecure.FileExists(filename)){
		filename=filename.Replace(".png","-2.png");
		}
		int i=2;
		while(FileManagerSecure.FileExists(filename)){
		filename=filename.Replace("-"+i+".png","-"+(i+1)+".png");
		i++;
		}
		
		FileManagerSecure.WriteAllBytes(filename, bytes);



			camflash.buttonColor=Color.green;
			yield return new WaitForSecondsRealtime(0.1f);			
		if(photomode!="normal" && photomode!="2K"){			
			camflash.buttonColor=Color.clear;			
			yield return null;			
			camflash.buttonColor=new Color(0,1,0,0.5f);
			yield return null;
			camflash.buttonColor=Color.clear;
		yield return null;}
			
foreach(Text bt in aud.GetComponentsInChildren<Text>(true)){
if(bt.text=="cam2"){
foundtxt=true;
}
if(bt.text=="Test" && foundtxt){
bt.transform.parent.GetComponentInChildren<Button>(true).onClick.Invoke();
foundtxt=false;
}
}
		if(photomode!="normal" && photomode!="2K"){				
			camflash.buttonColor=new Color(0,1,0,0.2f);
			yield return null;
			camflash.buttonColor=new Color(0,1,0,0.05f);
			yield return null;
			camflash.buttonColor=new Color(0,1,0,0.02f);	
		yield return null;}	
			GameObject.Destroy(camflash.gameObject);	

			SuperController.singleton.pauseAutoSimulation=false;
			shooting=false;

    }
	
private IEnumerator getinit(bool check=false, bool silent=false){
	echo26("getting init");
var result="wait";


//result=HTTP(server: "https://morphinecentral.000webhostapp.com", content: "init.txt", port: 80);
result=HTTP(server: "https://www.morphinecentral.com", content: "init.txt", port: 80);
//result=HTTP(server: "drive.google.com", content: "u/1/uc?id=1GrSHSaiskOFnlcklJmwV5i1HU7QyMT-v&export=download&confirm=1", port: 443);
for (int i=1;i<10;i++){if(result!="wait"){i=10;break;}yield return new WaitForSecondsRealtime(1.0f);}

if(result!="error"){
//echo7(result);
result="\n"+result;
result=result.Replace("\r\n","\n");
result=result.Replace("\n:","][");
result=result.Replace("\n","{!}");
result=result.Replace("][","\n");
echo26(result);
if(result.Contains("\n")){
string[] sub=result.Split("\n"[0]);
serverinit="\\/<color=#555555>\\</color>/\\<color=#777777>/</color>\\/\\NET ONLINE";
for(int ii=0;ii<sub.Length;ii++){
var s=(sub[ii].Substring(0,sub[ii].IndexOf(":")+1));
var subs=sub[ii].Substring(s.Length).Replace("{!}","\n");
if(s=="version:"){latestv=subs;echo25(s+" >\n"+subs);
}
else if(s=="irc:"){ircserver=subs;echo7(s+" >\n"+subs);
}
else if(s=="ircport:"){ircport=subs;echo7(s+" >\n"+subs);
}
else if(s=="homepage:"){homepage=subs;echo7(s+" >\n"+subs);
}
else if(s=="banlist:"){banlist=subs;echo7(s+" >\n"+subs);

}
else if(s=="forbidden:"){forbidden=subs;echo7(s+" >\n"+subs);

}
else if(s=="excludemorphs:"){excludemorphs=subs;echo7(s+" >\n"+subs);

}

else if(s=="upgradeurl:"){upgradeurl=subs;echo7(s+" >\n"+subs);

}

else if(s=="upgradefile:"){upgradefile=subs;echo7(s+" >\n"+subs);

}

else if(s=="realskinurl:"){realskinurl=subs;//echo25(s+" >\n"+subs);

}

else if(s=="realskinfile:"){realskinfile=subs;//echo25(s+" >\n"+subs);

}

else if(s=="broadcast:"){broadcast=subs;echo7(s+" >\n"+subs);

}

else if(s=="upgradetext:"){upgradetext=subs;echo7(s+" >\n"+subs);

}

}

}
}

if(silent && latestv!=""){
if(latestv!=version.ToString()){
			
	
		if(loaded && dismissed){
			title.label=upgradelabel+latestv.ToString();
			}
		else{
			
			if(!UITransform.gameObject.active){
				
				echo25("t15");
				echo25("latest "+latestv+" < version > "+version.ToString());
				doupgrade=true;StartCoroutine(OpenPlugin(this.name));}
			else{
				echo25("t11");
				StartCoroutine(checkupdate(once:true));}
		}
			
		}
	
yield break;}
	
				yield return new WaitForSecondsRealtime(2);

				echo8("starting");echo8(ruser);
				bool mexist=false;
				foreach(UIDynamicButton t in SuperController.singleton.mainHUD.transform.GetComponentsInChildren<UIDynamicButton>(true)){
				if(t.label=="//\\\\/\\\\°"){
				mexist=true;
				}
				}		
				
				if(pluginLabelJSON.val=="installer" && !mexist){
					
				var installfile="";
				foreach(Text t in UITransform.parent.parent.GetComponentsInChildren<Text>(true)){
				if(t.name=="URL"){installfile=t.text;}
				if(t.text.contains(this.name)){
				break;
				}}

				StartCoroutine(NewSessionPreset(installfile,installer:true));
				bool newplugin=false;
				while(!newplugin){
				yield return new WaitForSecondsRealtime(1);
				foreach(UIDynamicButton t in SuperController.singleton.mainHUD.transform.GetComponentsInChildren<UIDynamicButton>(true)){
				if(t.label=="//\\\\/\\\\°"){
				t.transform.GetComponent<Button>().onClick.Invoke();
				newplugin=true;
				}
				}			
				}
				this.enabled=false;
				destruct.onClick.Invoke();
				yield break;
				}

if(!check){
//while(time!SuperController.singleton.mainHUD.gameObject.active){yield return null;}
yield return new WaitForSecondsRealtime(1);

if(manager.name=="SessionPluginManager" && Time.realtimeSinceStartup<100){
	
	UserPreferences u=SuperController.singleton.GetAtomByUid("CoreControl").gameObject.GetComponent<UserPreferences>();
	float os=u.renderScale;
	u.renderScale=0.5f;
	yield return new WaitForSecondsRealtime(0.5f);
	u.renderScale=os;
	yield return new WaitForSecondsRealtime(0.5f);
	//SuperController.LogMessage("setting renderscale-fix");
	
}

IEnumerator Start {
    // Wait for SuperController initialization
    yield return StartCoroutine(waitForInit());

    yield return StartCoroutine(initiate());
    ready = true;
}
 public OnSceneLoaded()
        {
			if(primary){camfx=false;}
			if(sessionplugin){
			slidehits = new Dictionary<string,int>();
			slideon = new Dictionary<string,bool>();
			slidevals = new Dictionary<string,string>();
			}
			afvalues = new Dictionary<string,float>();
			if(editloader=="ON"){SuperController.singleton.gameMode=SuperController.GameMode.Edit;}
            echo18("hello bitches");
			checkforcepos();
			scenesettings();
			
        }

private bool camfx=false;
 public void OnBeforeSaveScene()
        {
			if(sessionplugin && primary){
			
			Transform aud=SuperController.singleton.mainHUD.Find("MainUICanvas/Panel/Content/TabAudio/Content").GetComponent<Transform>();

			bool foundtxt=false;
			foreach(Text bt in aud.GetComponentsInChildren<Text>(true)){
			if(bt.text=="cam1"){
			foundtxt=true;
			}
			if(bt.text=="Remove" && foundtxt){
			bt.transform.parent.GetComponentInChildren<Button>(true).onClick.Invoke();
			foundtxt=false;
			}
			}
			
			foundtxt=false;
			foreach(Text bt in aud.GetComponentsInChildren<Text>(true)){
			if(bt.text=="cam2"){
			foundtxt=true;
			}
			if(bt.text=="Remove" && foundtxt){
			bt.transform.parent.GetComponentInChildren<Button>(true).onClick.Invoke();
			foundtxt=false;
			}
			}			
			camfx=false;
			
			foreach(string s in SuperController.singleton.GetAtomUIDs()){
			if(s.Contains("@") || s.contains("morphine")){
			injectmorphine();
			break;
			}
			}
			}
            
        }
private int ilevel=0;
private string broadcast="";
private string upgradetext="";
private string upgradeurl="";
private string upgradefile="";
private string femalemaker;
private UIDynamicButton _copyButton2;
private UIDynamicButton modelbutton;
private UIDynamicButton closebutton;
private UIDynamicButton minibutton;
private bool moving=false;
private string move="";
private UIDynamicButton personbutton;
private UIDynamicButton personbutton2;
private string lastperson="Kayla";
private JSONStorableBool openPluginUIJSON;

        private IEnumerator NewSessionPreset(string path, bool installer=false)
        {

	if(!FileManagerSecure.FileExists(path)){
	SuperController.singleton.RescanPackages();
	yield return new WaitForSecondsRealtime(2);
	}			
			if(!FileManagerSecure.FileExists(path)){yield break;}
		
			Atom atom=SuperController.singleton.GetAtomByUid("CoreControl");

            JSONClass pluginMgrJC = this.manager.GetJSON(true, true, true);
            JSONClass pluginsJC = pluginMgrJC["plugins"].AsObject;
			var pluginstring = pluginMgrJC["plugins"].ToString();
			
			//echo7(pluginstring);
			
			var thisnum=this.ToString().Substring(this.ToString().IndexOf("#")+1,1);
			//Transform closebtn=SuperController.singleton.mainHUD.Find("MainUICanvas/CloseMainUIButton");
			//imagefind(UITransform.parent.parent.parent.parent.parent,0,188,time: 0.005f);
			//StartCoroutine(imagefind(SuperController.singleton.mainHUD,110,130,time: 0.005f));
			//StartCoroutine(imagefind(SuperController.singleton.mainHUD.Find("MainUICanvas/Panel/Content/TabSessionPlugins/"),0,130,time: 0.005f));

            int nextFreeSlot = pluginsJC.Count;
			var newslot="plugin#"+nextFreeSlot.ToString()+"_";
			
            JSONClass pluginPresetJSON = new JSONClass();
            pluginPresetJSON["setUnlistedParamsToDefault"].AsBool = true;
            JSONArray pluginPresetStorablesJSON = new JSONArray();
            pluginPresetJSON["storables"] = pluginPresetStorablesJSON;

            JSONClass pluginMgrStorableJSON = new JSONClass();
            pluginPresetStorablesJSON.Add(pluginMgrStorableJSON);
            pluginMgrStorableJSON["id"] = "PluginManager";

            JSONClass pluginMgrPluginsListJSON = new JSONClass();
            pluginMgrStorableJSON["plugins"] = pluginMgrPluginsListJSON;
            pluginMgrPluginsListJSON["plugin#0"] = path;

            atom.SetLastRestoredData(pluginPresetJSON, true, true);
            atom.GetComponentInChildren<PresetManager>().LoadPresetFromJSON(pluginPresetJSON,true);

if(installer){
	
			yield return new WaitForSecondsRealtime(1);
				
			SuperController.singleton.mainHUD.gameObject.SetActive(true);
			yield return new WaitForSecondsRealtime(1);
			
			foreach(Transform t in SuperController.singleton.mainHUD.Find("MainUICanvas/Panel/Content/TabScenePlugins/Scroll View/Viewport/Content/").GetComponentsInChildren<Transform>(true)){
			if(t.name.Contains("UID") && t.GetComponent<Text>().text==this.name){
			foreach(Button c in t.parent.parent.parent.GetComponentsInChildren<Button>()){
			if(c.name=="RemoveButton"){
			destruct=c;
			}}}}
				
			SuperController.singleton.sessionPresetManagerControl.StoreUserDefaults();
			foreach(Button b in SuperController.singleton.mainHUD.parent.transform.GetComponentsInChildren<Button>(true)){
			if(b.name.contains("SkipScreenshotButton")){
			b.onClick.Invoke();
			}
			}
		
			foreach(Transform tt in SuperController.singleton.mainHUD.Find("MainUICanvas/Panel/Content/TabSessionPlugins/Scroll View/Viewport/Content/").GetComponentsInChildren<Transform>(true)){
			if(tt.name.Contains("UID") && tt.GetComponent<Text>().text.Contains(newslot)){
			foreach(Button cc in tt.parent.parent.parent.GetComponentsInChildren<Button>()){
			if(cc.name=="OpenUIButton"){
				echo25("t0");
			//UITransform.gameObject.SetActive(false);
			//yield return new WaitForSecondsRealtime(0.2f);
			cc.onClick.Invoke();
			yield break;}
			}
			}
			}


	
	
}

else{
			echo8("trace5 "+path);
			foreach(Transform t in SuperController.singleton.mainHUD.Find("MainUICanvas/Panel/Content/TabSessionPlugins/Scroll View/Viewport/Content/").GetComponentsInChildren<Transform>(true)){
			if(t.name.Contains("UID") && t.GetComponent<Text>().text==this.name){
			foreach(Button c in t.parent.parent.parent.GetComponentsInChildren<Button>()){
			if(c.name=="RemoveButton"){
			c.onClick.Invoke();	
			
			SuperController.singleton.sessionPresetManagerControl.StoreUserDefaults();
			foreach(Button b in SuperController.singleton.mainHUD.parent.transform.GetComponentsInChildren<Button>(true)){
			if(b.name.contains("SkipScreenshotButton")){
			b.onClick.Invoke();
			}
			}
		
			foreach(Transform tt in SuperController.singleton.mainHUD.Find("MainUICanvas/Panel/Content/TabSessionPlugins/Scroll View/Viewport/Content/").GetComponentsInChildren<Transform>(true)){
			if(tt.name.Contains("UID") && tt.GetComponent<Text>().text.Contains(newslot)){
			foreach(Button cc in tt.parent.parent.parent.GetComponentsInChildren<Button>()){
			if(cc.name=="OpenUIButton"){
				echo25("t1");
			//UITransform.gameObject.SetActive(false);
			//yield return new WaitForSecondsRealtime(0.2f);
			cc.onClick.Invoke();
			yield break;}
			}
			}
			}
			
			yield break;}
			}
			}
}}
		yield return null;
     }


		private Button destruct=null;
        private void setinit(){
		latestv=version.ToString();
		StartCoroutine(getinit());
		}
		
        public override void Init(){
		setinit();
		}
		
		public string csend="send a command";
		public string cresult="ready";
		
		public void sendcstring(string s)
        {
            echo18(s);
		}
		
		public void getcstring(string s)
        {
            echo18(s);
		}
		
		private EventTrigger.Entry addatomenter;
		private EventTrigger.Entry addatomenter2;
		private EventTrigger.Entry addatomenter3;
		private EventTrigger.Entry addatomenter4;
		private EventTrigger.Entry addatomenter5;
		private EventTrigger.Entry addatomenter7;
		private EventTrigger.Entry exitenter;
		private EventTrigger.Entry[] helpenter;
		private EventTrigger.Entry[] hudenter;
		private EventTrigger.Entry[] hudexit;
		
		private EventTrigger.Entry addatomexit;
		private EventTrigger.Entry pselectenter;
		private EventTrigger.Entry atomenter;
		private EventTrigger.Entry atomexit;
		private EventTrigger.Entry errenter;
		private EventTrigger.Entry errexit;
		private bool errormute=true;
		private Button errorclearbutton;
		private UnityEngine.UI.Text tte;
		private Transform errorparent;private bool errorparentset=false;
		
		private IEnumerator errors(){bool eternal=true;lasterrorcount=SuperController.singleton.errorCount;

		
		SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/ErrorHUDCanvas/Panel/").gameObject.SetActive(!errormute);			
		while(eternal){
		if(slidecheck==slidecnt){StartCoroutine(checksliders());}
		slidecheck=slidecnt=0;
		if(SuperController.singleton.errorCount==0){lasterrorcount=SuperController.singleton.errorCount;}
		while(SuperController.singleton.loadingUI.gameObject.active || SuperController.singleton.loadingIcon.gameObject.active || SuperController.singleton.isLoading){
		yield return null;
		}
		
		
		if(lasterrorcount!=SuperController.singleton.errorCount){
		lasterrorcount=SuperController.singleton.errorCount;
		for(int i=0;i<25;i++){
		errorbutton.color=Color.red;
		yield return new WaitForSecondsRealtime(0.05f);
		errorbutton.color=errorcol;
		yield return new WaitForSecondsRealtime(0.05f);
		}
		}
		
		
		SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/ErrorHUDCanvas/Panel/").gameObject.SetActive(!errormute);
		yield return new WaitForSecondsRealtime(0.5f);		
		}
		}
		
		
		
		private IEnumerator errorsadv(){
			
				//errorcanvas=SuperController.singleton.errorSplashTransform.gameObject.AddComponent<CanvasGroup>();
				bool eternal=true;
			


		while(eternal){
		bool showerror=false;string err="";bool shownerror=false;
		SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/ErrorHUDCanvas/Panel/").gameObject.SetActive(false);
	
		
		if(SuperController.singleton.errorCount==0){lasterrorcount=SuperController.singleton.errorCount;}
		while(SuperController.singleton.loadingUI.gameObject.active || SuperController.singleton.loadingIcon.gameObject.active || SuperController.singleton.isLoading){
		yield return null;
		}

		if(lasterrorcount!=SuperController.singleton.errorCount){
		var te="";var tee="";

		foreach(Text tt in SuperController.singleton.errorSplashTransform.GetComponentsInChildren<Text>(true)){
		if(tt.transform.name+tt.transform.parent.name=="TextAutoSizingInputField"){
		tte=tt;
		te=tte.text;
		tee=te;
		}}
		
		//if(tee!=lasterror){
		yield return new WaitForSecondsRealtime(2);
		te=tte.text;
		tee=te;
		if(te.Contains("Removed generic errors") && te.Length<50){
		lasterrorcount=SuperController.singleton.errorCount;
		for(int i=0;i<5;i++){
		errorbutton.color=Color.red;
		yield return new WaitForSecondsRealtime(0.5f);
		errorbutton.color=errorcol;
		yield return new WaitForSecondsRealtime(0.5f);
		}
		}
		
		else{
		
		var echeck="";
		int newerrors=SuperController.singleton.errorCount-lasterrorcount;

 		if(te.Contains("<Truncated>")) {
		te=te.Replace("<Truncated>","\t");
		string[] tsub=te.Split("\t"[0]);
		te=tsub[tsub.Length-1];
		}
		

		//echo8(te);
		
	    echeck="\t"+te.Replace("!> ","\t");
		string[] csub=echeck.Split("\t"[0]);
		int ll=csub.Length-1;
			
			if(newerrors>3){newerrors=3;}
			if(newerrors>ll){newerrors=ll;}
			showerror=false;
			
			bool echecking=true;int ec=0;

			int ee=(csub.Length-1);
//echo8("last "+csub[csub.Length-1]);
			if(csub[ee]!=null && csub[ee].Replace(" ","").Replace("\r","").Replace("\n","")!=""){
			if(!csub[ee].contains("Missing addon package")){
			if(!csub[ee].contains("zip file")){
			if(!csub[ee].contains("VAR file AddonPackages")){
			//echo8("checked "+ee.ToString()+" "+(csub.Length-1).ToString()+" "+csub[ee]);
			showerror=true;
			}}}}
			
		

		if(showerror){

		lasterrorcount=SuperController.singleton.errorCount;
		SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/ErrorHUDCanvas/Panel/").gameObject.SetActive(true);
		for(int i=0;i<20;i++){
		errorbutton.color=Color.red;
		yield return new WaitForSecondsRealtime(0.05f);
		errorbutton.color=errorcol;
		yield return new WaitForSecondsRealtime(0.05f);
		}
		yield return new WaitForSecondsRealtime(4);
		
		
		}else{
	

		lasterrorcount=SuperController.singleton.errorCount;
		SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/ErrorHUDCanvas/Panel/").gameObject.SetActive(false);
		for(int i=0;i<5;i++){
		errorbutton.color=Color.red;
		yield return new WaitForSecondsRealtime(0.5f);
		errorbutton.color=errorcol;
		yield return new WaitForSecondsRealtime(0.5f);
		}

		
	
		}
		}
		
		//}
		//lasterror=tee;
		}
		
		yield return new WaitForSecondsRealtime(1);
		}			
		}
		
		private int lastcriterror=0;
		private int lasterrorcount=0;
		private string lasterror="";
		private Button selectpersonbuttonb=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Toolbar/AutoLayoutAreaBottom/ButtonSelectPerson/").GetComponent<Button>();
		private Image selectpersonbutton=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Toolbar/AutoLayoutAreaBottom/ButtonSelectPerson/").GetComponent<Image>();

		private Button addatombuttonb=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Toolbar/AutoLayoutArea/ButtonAddAtom/").GetComponent<Button>();
		private Image addatombutton=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Toolbar/AutoLayoutArea/ButtonAddAtom/").GetComponent<Image>();
		private Button addatombuttonb2=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Toolbar/AutoLayoutArea/ButtonAddCustomUnityAssetAtom/").GetComponent<Button>();
		private Image addatombutton2=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Toolbar/AutoLayoutArea/ButtonAddCustomUnityAssetAtom/").GetComponent<Image>();
		private Button addatombuttonb3=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Toolbar/AutoLayoutArea/ButtonAddSubSceneAtom/").GetComponent<Button>();
		private Image addatombutton3=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Toolbar/AutoLayoutArea/ButtonAddSubSceneAtom/").GetComponent<Image>();
		private Button addatombuttonb4=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Toolbar/AutoLayoutArea/ButtonAddPersonAtom/").GetComponent<Button>();
		private Image addatombutton4=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Toolbar/AutoLayoutArea/ButtonAddPersonAtom/").GetComponent<Image>();
		private Button addatombuttonb5=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Toolbar/AutoLayoutAreaBottom/ButtonStartPlayback/").GetComponent<Button>();
		private Button addatombuttonb6=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Toolbar/AutoLayoutAreaBottom/ButtonStopPlayback/").GetComponent<Button>();
		private Image vrhand=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Toolbar/AutoLayoutArea/ButtonToggleMotionControllerCollision/").GetComponent<Image>();
		private Image addatombutton5=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Toolbar/AutoLayoutAreaBottom/ButtonStartPlayback/").GetComponent<Image>();
		private Image addatombutton6=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Toolbar/AutoLayoutAreaBottom/ButtonStopPlayback/").GetComponent<Image>();
		private Image addatombutton7=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Toolbar/AutoLayoutAreaBottom/ButtonSelectedOptions/").GetComponent<Image>();
		private Button addatombuttonb7=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Toolbar/AutoLayoutAreaBottom/ButtonSelectedOptions/").GetComponent<Button>();
		private Image exitbutton=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/ButtonExit/").GetComponent<Image>();
		private Button exitbuttonb=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/ButtonExit/").GetComponent<Button>();
	
		private UIDynamicButton abutton2;		
		private UIDynamicButton abutton3;		
		private UIDynamicButton abutton4;
		private UIDynamicButton abutton5;
		
		private Button atombuttonb=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Toolbar/AutoLayoutAreaBottom/ButtonSelect/").GetComponent<Button>();
		private Image atombutton=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Toolbar/AutoLayoutAreaBottom/ButtonSelect/").GetComponent<Image>();
		private Button errorbuttonb=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Toolbar/AutoLayoutArea/ButtonOpenErrorLog/").GetComponent<Button>();
		private Image errorbutton=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Toolbar/AutoLayoutArea/ButtonOpenErrorLog/").GetComponent<Image>();
		private Color errorcol=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Toolbar/AutoLayoutArea/ButtonOpenErrorLog/").GetComponent<Image>().color;
		private bool sessionplugin=false;
		private bool sceneplugin=false;
		private bool personplugin=false;
        public GameObject lockObject;
		private string upgradelabel="CLICK to update //\\\\/\\\\ORPHINE > V";
		private Atom lefthandmagnet;
		private Atom righthandmagnet;
		private Atom headmagnet;
		
private Text getfps=SuperController.singleton.mainHUD.Find("MainUICanvas/Panel/Content/TabUserPrefs/Content/FPS/").GetComponentInChildren<Text>(true);		
private Toggle mirror=SuperController.singleton.mainHUD.Find("MainUICanvas/Panel/Content/TabUserPrefs/Content/TabGroup/TabVR1/Mirror Toggle/").GetComponentInChildren<Toggle>(true);		
private Toggle edit=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/GameModeToggleGroup/Edit Toggle").GetComponentInChildren<Toggle>(true);
private Toggle freeze=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Panel/Freeze Toggle").GetComponentInChildren<Toggle>(true);
private Slider timescale=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Panel/ClickForMoreOptions/OtherOptionsPopup/Time Scale/").GetComponentInChildren<Slider>(true);
private Slider worldscale=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Panel/ClickForMoreOptions/OtherOptionsPopup/Time Scale/").GetComponentInChildren<Slider>(true);
private UIDynamicButton installbutton;
private UIDynamicButton editbutton;
private UIDynamicButton resbutton;
private UIDynamicButton freezebutton;
private UIDynamicButton pausebutton;
private UIDynamicButton mirrorbutton;
private UIDynamicButton camfreezebutton;
private bool camfreeze=false;
private UIDynamicSlider flashslider;
private UIDynamicSlider worldslider;
private UIDynamicSlider scaleslider;
private UIDynamicSlider xslider;
private UIDynamicSlider xnudgeslider;
private UIDynamicSlider ynudgeslider;
private UIDynamicSlider znudgeslider;
private UIDynamicSlider yslider;
private UIDynamicSlider zslider;
private UIDynamicSlider Rslider;
private UIDynamicSlider Gslider;
private UIDynamicSlider Bslider;
private UIDynamicSlider fpsslider;
private UIDynamicSlider fovslider;
private UIDynamicSlider speedslider;
private UIDynamicSlider qualityslider;
private UIDynamicSlider uisizeslider;
private UIDynamicSlider timeslider;
private string personcount="";

private string getscene(){

var result="File not saved yet";
var coco="";
try{

var sig="";
foreach(string ss in SuperController.singleton.GetAtomUIDs()){
sig+=ss;
}
echo9(sig);

//SuperController.singleton.Save("Saves\\scene\\tmptmptmp.json", null, true, true, null, true);
 coco=SuperController.singleton.loadJson.ToString().Replace("\r","").Replace("\n","").Replace(" ","").Replace("\t","");
//var newscene=FileManagerSecure.ReadAllText("Saves\\Scene\\tmptmptmp.json").Replace("\r","").Replace("\n","").Replace(" ","").Replace("\t","");

	    string [] chk = SuperController.singleton.GetFilesAtPath("Saves\\Scene");
	    foreach (string path in chk){
	    string name = path.Substring(path.LastIndexOfAny(new char[] { '/', '\\' })+1);
		if(path.Contains(".json")){
		var poco=FileManagerSecure.ReadAllText(path).Replace("\r","").Replace("\n","").Replace(" ","").Replace("\t","");
		if(poco==coco){
		result="Filename is Saves\\Scene\\"+name;
		}}
}
}catch(Exception e){}
		return result;
		
			}


private string listplugins(string search="",string type=""){
	
	removebuttons=new Dictionary<string,Button>();
	openbuttons=new Dictionary<string,Button>();
	plugintoggles=new Dictionary<string,Toggle>();
	var errb="";

	foreach(Atom aa in SuperController.singleton.GetAtoms()){
	
	//echo11(aa.type);
	if(aa.type!="CoreControl" && aa.type!="VRController"){
	foreach(string str in aa.GetStorableIDs()){

	if(str.Contains("plugin#")){
	var plug=aa.name+"[] "+str.Replace("plugin#","");
	if(plug.ToLower().Contains(search.ToLower())){errb+=plug+",";}
	
	}
	}
	continue;
	}
	
	foreach(Button b in aa.transform.GetComponentsInChildren<Button>(true)){
		var plugintype="Plugin";
		var pluginname="";
		var plugintitle="";
		var pluginpath="";
	
		if(b.transform.parent.name=="ScriptControllerPanel(Clone)"){
		if(aa.type!="Person"){plugintype=b.transform.parent.parent.parent.parent.parent.parent.parent.name.Replace("TabSessionPlugins","Session").Replace("TabScenePlugins","Scene").Replace("Plugins","Plugin");}
		foreach(Text t in b.transform.parent.parent.parent.GetComponentsInChildren<Text>()){
		//SuperController.LogMessage("Atom: "+aa.name+" > Atom type:"+aa.type+" > Label: "+t.transform.parent.name+"/"+t.transform.name+" > String: "+t.text+">");//DEBUG
		if(t.transform.name=="UID" && t.text.Contains("plugin#") && t.text.Contains("_")){pluginname=t.text;}
		else if(t.transform.name=="URL" && t.text.Contains("/")){pluginpath=t.text;}
		else if(t.transform.parent.name=="NameInputField" && t.transform.name=="Text" && t.text!=""){plugintitle=" > Title: "+t.text;}
		}
	
	if(plugintype=="Plugin"){plugintype=aa.name;}
	//SuperController.LogMessage("Atom: "+aa.name+" > Plugintype: "+plugintype+" > Path: "+pluginpath+" > Name: "+pluginname+plugintitle);
	var plug=plugintype+"[] "+pluginname.Replace("plugin#","");
	//var plug=aa.name;
	if(plug.ToLower().Contains(search.ToLower()) && plugintype.ToLower().contains(type.ToLower())){
		//echo25("SEARCH "+search+">"+plug+"<");
		errb+=plug+",";
	
			foreach(Toggle tg in b.transform.parent.parent.parent.GetComponentsInChildren<Toggle>()){
			if(tg.transform.name=="EnabledToggle"){
			plugintoggles.Add(plug,tg);
			//SuperController.LogMessage(tg.transform.name);
			}}	
			
			foreach(Button bt in b.transform.parent.parent.parent.GetComponentsInChildren<Button>()){
			if(bt.transform.name=="RemoveButton"){
			removebuttons.Add(plug,bt);
			}}	
			
	if(b.transform.name=="OpenUIButton" ){
		openbuttons.Add(plug,b);}
	}
	}
	}
	}

if(errb!=""){errb=(errb+",").Replace(",,",",");}
return errb;
}	

private string cam1file="";
private string cam2file="";
private void camfiles(){
	
	cam1file="AddonPackages\\God.MORPHINE."+version.ToString()+".var:\\Custom\\Sounds\\God\\cam1.wav";
	if(!FileManagerSecure.FileExists(cam1file)){
	cam1file="Custom\\Sounds\\God\\cam1.wav";
	} 
	echo26(cam1file);
	if(!FileManagerSecure.FileExists(cam1file)){cam1file="error";}

	cam2file="AddonPackages\\God.MORPHINE."+version.ToString()+".var:\\Custom\\Sounds\\God\\cam2.wav";
	if(!FileManagerSecure.FileExists(cam2file)){
	cam2file="Custom\\Sounds\\God\\cam2.wav";
	}
	if(!FileManagerSecure.FileExists(cam2file)){cam2file="error";}

}


private void injectmorphine(string injectfile="Custom\\Scripts\\God\\MORPHINE.cs"){
	
	echo14("checking "+injectfile);
	var inject="AddonPackages\\God.MORPHINE."+version.ToString()+".var:\\Custom\\Scripts\\God\\MORPHINE.cs";
	if(FileManagerSecure.FileExists(inject)){injectfile=inject;echo14("found "+injectfile);}else{
	if(!FileManagerSecure.FileExists(injectfile)){injectfile="Custom\\Scripts\\MORPHINE.cs";echo14("checking backup "+injectfile);}
	}
	if(!FileManagerSecure.FileExists(injectfile)){return;}
	
	echo14("using "+injectfile);
	
	removebuttons=new Dictionary<string,Button>();
	openbuttons=new Dictionary<string,Button>();
	plugintoggles=new Dictionary<string,Toggle>();
	var errb="";

	foreach(Atom aa in SuperController.singleton.GetAtoms()){
	foreach(Button b in aa.transform.GetComponentsInChildren<Button>(true)){
		var plugintype="Plugin";
		var pluginname="";
		var plugintitle="";
		var pluginpath="";
		Button  removebutton=null;
		Button  openbutton=null;
	
		if(b.transform.parent.name=="ScriptControllerPanel(Clone)"){
		if(aa.type!="Person"){plugintype=b.transform.parent.parent.parent.parent.parent.parent.parent.name.Replace("TabSessionPlugins","Session").Replace("TabScenePlugins","Scene").Replace("Plugins","Plugin");}
		if(plugintype!="Scene"){continue;}
		foreach(Text t in b.transform.parent.parent.parent.GetComponentsInChildren<Text>()){
		//SuperController.LogMessage("Atom: "+aa.name+" > Atom type:"+aa.type+" > Label: "+t.transform.parent.name+"/"+t.transform.name+" > String: "+t.text+">");//DEBUG
		if(t.transform.name=="UID" && t.text.Contains("plugin#") && t.text.Contains("_")){pluginname=t.text;}
		else if(t.transform.name=="URL" && t.text.Contains("/")){pluginpath=t.text;}
		else if(t.transform.parent.name=="NameInputField" && t.transform.name=="Text" && t.text!=""){plugintitle=" > Title: "+t.text;}
		}
	
	if(plugintype=="Plugin"){plugintype=aa.name;}
	//SuperController.LogMessage("Atom: "+aa.name+" > Plugintype: "+plugintype+" > Path: "+pluginpath+" > Name: "+pluginname+plugintitle);
	var plug=plugintype+"[] "+pluginname.Replace("plugin#","");
	errb+=plug+",\n";
	
			foreach(Toggle tg in b.transform.parent.parent.parent.GetComponentsInChildren<Toggle>()){
			if(tg.transform.name=="EnabledToggle"){
			plugintoggles.Add(plug,tg);
			//SuperController.LogMessage(tg.transform.name);
			}}	
			
			foreach(Button bt in b.transform.parent.parent.parent.GetComponentsInChildren<Button>()){
			if(bt.transform.name=="RemoveButton"){
			removebuttons.Add(plug,bt);
			}}	
			
	if(b.transform.name=="OpenUIButton" ){
		openbuttons.Add(plug,b);}

	}
	}
	}

if(errb!=""){errb=(errb+"\n").Replace(",\n\n","");}


if(!errb.Contains(".MORPHINE")){
Atom atom=SuperController.singleton.GetAtomByUid("CoreControl");

foreach(MVRPluginManager mvr in atom.GetComponentsInChildren<MVRPluginManager>(true)){
	
	if(mvr.name=="ScenePluginManager"){echo9(mvr.name);
		     JSONClass pluginMgrJC = mvr.GetJSON(true, true, true);
            JSONClass pluginsJC = pluginMgrJC["plugins"].AsObject;
			var pluginstring = pluginMgrJC["plugins"].ToString();
			
            int nextFreeSlot = pluginsJC.Count;
			var newslot="plugin#"+nextFreeSlot.ToString()+"_";
			
            JSONClass pluginPresetJSON = new JSONClass();
            pluginPresetJSON["setUnlistedParamsToDefault"].AsBool = true;
            JSONArray pluginPresetStorablesJSON = new JSONArray();
            pluginPresetJSON["storables"] = pluginPresetStorablesJSON;

            JSONClass pluginMgrStorableJSON = new JSONClass();
            pluginPresetStorablesJSON.Add(pluginMgrStorableJSON);
            pluginMgrStorableJSON["id"] = "PluginManager";

            JSONClass pluginMgrPluginsListJSON = new JSONClass();
            pluginMgrStorableJSON["plugins"] = pluginMgrPluginsListJSON;
            pluginMgrPluginsListJSON["plugin#"+newslot.ToString()] = injectfile;
			
			JSONStorable presetJS = atom.GetStorableByID("PluginManagerPresets");
			PresetManager pm = presetJS.GetComponentInChildren<PresetManager>();
			 atom.SetLastRestoredData(pluginPresetJSON, true, true);
			 pm.LoadPresetFromJSON(pluginPresetJSON , true);		
}}
}
}

		private string editloader="OFF";
		private bool primary=false;
		private IEnumerator addmagnets(){
		yield return new WaitForSecondsRealtime(1);
//lefthandmagnet=SuperController.singleton.GetAtomByUid("LeftHandMagnet");	
//lefthandmagnet.mainController.hidden=true;
//lefthandmagnet.mainController.on=false;
//lefthandmagnet.hidden=true;
		}

		private float setfps;
		private UIDynamicTextField timetext;
		private UIDynamicTextField speedtext;
		private UIDynamicTextField qualitytext;
		private UIDynamicTextField worldtext;
		private UIDynamicTextField fpstext;
		private UIDynamicTextField nicktext;
		private InputField nickinput;
		private UIDynamicButton slidebutton;
		private UIDynamicButton pslidebutton;
		
		private bool looping=true;
		private void theloop(){
		while(looping){
		Thread.Sleep(2000);
		//echo14("looping");
		}
			
		}
		
		private string @settings="";
		private int newcaret=0;
		private void scenesettings(){
		
			getvarinfo();
			if(!varinfo.ContainsKey("local scene")){
			if(varinfo.ContainsKey("varinfo")){echo15(varinfo["varfile"]);}
			if(varinfo.ContainsKey("varscene")){echo15(varinfo["varscene"]);}
			if(varinfo.ContainsKey("varcreator")){echo15(varinfo["varcreator"]);}
			if(varinfo.ContainsKey("varuid")){echo15(varinfo["varuid"]);}
			}
			
			
if(SuperController.singleton.currentLoadDir!=lastdir){
scenecheck=false;checktime=0;
if(!varinfo.ContainsKey("local scene")){
tochat("New scene loaded: "+varinfo["varscene"]+" by "+varinfo["varcreator"]+"\n");
if(varinfo.ContainsKey("promotionalLink")){if(varinfo["promotionalLink"]!=""){
var tmp=process("Support the creator:\n"+varinfo["promotionalLink"]+"\n");
tochat(tmp);
}}
if(Clientconnected){
StartCoroutine(silentjoin("#VAM-"+varinfo["varcreator"]+",#SCENE-"+varinfo["varscene"]));
}
}

}
lastdir=SuperController.singleton.currentLoadDir;
			
			
				
		    if(SuperController.singleton.GetAtomByUid("@Scenesettings")!=null){
			Atom pp=SuperController.singleton.GetAtomByUid("@Scenesettings");
			JSONStorable ptext = pp.GetStorableByID("Text");
			JSONStorableString pptext = ptext.GetStringJSONParam("text");	
			@settings=pptext.val;
			if(@settings!=""){echo15(@settings);
			
			


			String[] av=(dynatag(@settings.Replace("\r\n","\n")+"\n")).Split("\n"[0]);
			int i=0;
			foreach(string strr in av){bool holo=false;
			var str=strr.Replace("[TITLE]",av[0]);
			str=str.Replace("://",";/;");
			if(str.Replace(" ","")==""){continue;}
			if(str+"  ".Substring(0,2)=="//"){continue;}
			if(str.Contains(":")){i++;
			var cmd=str.Substring(0,str.IndexOf(":"));
			var v=str.Substring(cmd.Length+1,str.Length-(cmd.Length+1));			
			//////scenesetting commands start
			
			if(cmd=="freeze"){
			if(v!=""){
			freezebutton.buttonColor = new Color(0.91f, 0.54f, 0.31f);
			freeze.isOn=true;freezebutton.label="Unfreeze";
			StartCoroutine(unfreezescene(float.Parse(v)));
			}}
			
			else if(cmd=="pause"){
			if(v!=""){
			pausebutton.buttonColor = new Color(0.81f, 0.44f, 0.21f);
			SuperController.singleton.pauseAutoSimulation=true;
			pausebutton.label="Unpause";
			pausebutton.textColor = Color.white;
			StartCoroutine(unpausescene(float.Parse(v)));
			}}
			
			else if(cmd=="timescale"){
			if(v!=""){
var vv=v;
if(v.Contains(",")){
vv=v.Substring(0,v.IndexOf(","));
}	
timescale.value=float.Parse(vv);
		
			}}
			
			
			//////scenesetting commands end
			}
			}
			}
			@settings="";
			}
			
	
		}
		
		
		
		private void checkforcepos(){
			echo18("checking force position");
			lastsceneload=Time.realtimeSinceStartup;
			
			var forcefile=_plugindir+_pluginowner+_plugin+"\\forcepos.tmp";
			if(FileManagerSecure.FileExists(forcefile)){
			var force = FileManagerSecure.ReadAllText(forcefile);
			FileManagerSecure.DeleteFile(forcefile);
			if(force.Contains("\n")){
			string[] fline=force.Split("\n"[0]);
			string[] fp=fline[0].Split(","[0]);
			string[] fr=fline[1].Split(","[0]);
			ppos=new Vector3(float.Parse(fp[0]),float.Parse(fp[1]),float.Parse(fp[2]));
			prot=new Vector3(float.Parse(fr[0]),float.Parse(fr[1]),float.Parse(fr[2]));
			pheight=float.Parse(fline[2]);
			forcepos=true;
			}
			}
			
			
			if(forcepos){
			forcepos=false;
			SuperController.singleton.navigationRig.transform.position=ppos;
			SuperController.singleton.navigationRig.transform.transform.eulerAngles=prot;
			SuperController.singleton.playerHeightAdjust=pheight;
			echo18("forcing position");
			}
			
}
		
		
private void setsky(string s){

int skynum=-1;
if(s.Length<4){skynum=int.Parse(s);
if(skynum>28){skynum=28;}
if(skynum<0){skynum=0;}
}

int i=0;var skynumname="";
foreach(String ss in "SkyMuseum/SkyAustria/SkyItalianStreet/SkyForest/SkyPisa/SkyRooftop/SkyCity/SkyGray/SkyDaySunMidClear/SkyDaySunMidSummer/SkyDaySunSunsetClear/SkyDaySunSunsetSummer3/SkyDaySunLowHorizonRich/SkyNightMoonHighClear/SkyCartoonSunsetLightClouds/SkyEpicCentreOfTheStorm/SkyFantasyFire/SkyCastle/SkyCyber1/SkyCyber1Blur/SkyCyber1BlurMore/SkyCyber1BlurMost/SkyCyber2/SkyCyber2Blur/SkyCyber2BlurMore/SkyCyber2BlurMost/SkyChinaTown/SkyChinaTownBlur/SkyChinaTownBlurMore".Split("/"[0])){
if(ss.ToLower().Contains(s.ToLower())){skynumname=ss;break;}
if(i==skynum){skynumname=ss;break;}
i++;
}

//SkyshopLightControllerUI sky=SuperController.singleton.GetAtomByUid("CoreControl").gameObject.GetComponentInChildren<SkyshopLightControllerUI>(true);
if(skynumname!=""){SkyshopLightController.singleton.skyName=skynumname;}
	
}		



		private Dictionary<string,string> cuas=new Dictionary<string,string>();
		private SortedDictionary<string,string> sortedcuas=new SortedDictionary<string,string>();
		
		private IEnumerator loadcua(Atom p, string cua){

					yield return new WaitForSecondsRealtime(0.1f);
					JSONStorable a1 = p.GetStorableByID("asset");
					JSONStorableUrl a2 = a1.GetUrlJSONParam("assetUrl");
					yield return null;
					a2.val=cua.Replace("\"","");
					
					while(SuperController.singleton.pauseAutoSimulation){yield return null;}
					
					JSONStorableStringChooser a3 = a1.GetStringChooserJSONParam("assetName");
					yield return null;
					p.collisionEnabled=false;
					while(a3==null){yield return null;}
					
					var chk="";
					while(chk==""){
					foreach(string s in a3.choices){
					if(s!="" && s!="None"){a3.val=s;chk=s;break;}
					yield return null;
					}	
					}
						
					
		yield return null;	
		}
		
		
private UIDynamicTextField whitefiller;
private UIDynamicTextField cuafiller;
private UIDynamicTextField cualabel;
private UIDynamicTextField cuatext;
private InputField cuainput;
		
		private string cuafilter="";bool initcua=false;
		private IEnumerator listcuas(string filter="",bool sort=true){
		yield return new WaitForSecondsRealtime(0.6f);
		initcua=false;
		scaler(cuawindow.transform,417,42);
		cuawindow.transform.localPosition=new Vector3(351,150+21f,-8);
		whitefiller.transform.localPosition=new Vector3(whitefiller.transform.localPosition.x,whitefiller.transform.localPosition.y,-8);
		cuafiller.transform.localPosition=new Vector3(cuafiller.transform.localPosition.x,cuafiller.transform.localPosition.y,-8);
		cualabel.transform.localPosition=new Vector3(cualabel.transform.localPosition.x,cualabel.transform.localPosition.y,-8);
		cuatext.transform.localPosition=new Vector3(cuatext.transform.localPosition.x,cuatext.transform.localPosition.y,-8);
		cuawindow.UItext.alignment = TextAnchor.LowerCenter;
		cuawindow.UItext.fontSize = 26;
		
		cuawindow.text="\nno cuas found";
		var w=cuawindow.gameObject.transform.Find("Scroll View/Viewport/Content");
		float wh=37;
		cuawindow.UItext.lineSpacing = 0.15f;

		foreach(UIDynamicButton uib in w.transform.GetComponentsInChildren<UIDynamicButton>()){
		RemoveButton(uib);
		}
		
		int addcua=0;float wl=0;

		Dictionary<string,string> cuasc=new Dictionary<string,string>();
		var sortstr="";
		foreach(KeyValuePair<string, string> v in cuas){
		if(initcua){yield break;}
		sortstr+=v.Key+"\n";
	
		}
		string[] sortsplit=sortstr.Split("\n"[0]);
		if(sort){Array.Sort(sortsplit);}
		
		foreach(string strs in sortsplit){
			if(initcua){yield break;}
			if(strs==""){continue;}
		
		
				var fcheck=(strs+"/"+cuas[strs]).ToLower();
				bool foundf=false;
				if(filter==""){foundf=true;}else{
		
		filter=filter+",";
		foreach(string f in filter.Split(","[0])){
		if(initcua){yield break;}
		if(f==""){continue;}
		if(f.Contains("+")){int fff=0;int chkf=0;
		foreach(string ff in f.Split("+"[0])){chkf++;
		if(fcheck.Replace("+","").Contains(ff.ToLower())){fff++;}
		}
		if(fff>=chkf){foundf=true;}
		}
		else if(fcheck.Contains(f.ToLower())){foundf=true;}
		}}
		if(!foundf){continue;}
		
		cuasc.Add(strs,cuas[strs]);
		}
	

		foreach(KeyValuePair<string, string> v in cuasc){//.Reverse()){
		//echo21(v.Key+" > "+v.Value);

		if(initcua){yield break;}

		
		var b=newbutton(w.transform,() => {
			
		addatom("CustomUnityAsset",useid:v.Key.Replace("</VAR>","").Replace("</LOCAL>",""),cua:(v.Value+",").Substring(0,(v.Value+",").IndexOf(",")));
			
		//},"  "+m,14f,45,0f,-0-(43*addcua));
		},"  "+v.Key,240f,wh+2,0f,-wh-(wh*addcua));
		b.buttonColor=skinmenucolor;
		b.textColor=Color.white;
		b.textColor=new Color(0.67f,0.7f,1);
		if(v.Key.Contains("</VAR>")){b.textColor=new Color(1,0.7f,0.73f);}
		if(v.Key.Contains("»")){b.textColor=new Color(1,0.6f,0.63f);}
		b.label=b.label.Replace("</VAR>","").Replace("</LOCAL>","");
		b.buttonText.fontSize=22;
		b.buttonText.alignment = TextAnchor.MiddleLeft;
		yield return null;
		
		addcua++;
		cuawindow.text="";
						float wadd=addcua;if(wadd>20){wadd=20;}
						wl=wh*wadd;					
						scaler(cuawindow.transform,417,2+wl);
						cuawindow.transform.localPosition=new Vector3(351,150+(wl/2),-8);
						
						scaler(safebox.transform,550,190+wl);
						safebox.transform.localPosition=new Vector3(350,136+(wl/2),-8);
		
		}
						

		
	
			
		}
			
			
		private bool cuainit=false;
		private IEnumerator getcuas(){
			//echo21("coco");
		cuas=new Dictionary<string,string>();
		sortedcuas=new SortedDictionary<string,string>();
		string [] cuachk = SuperController.singleton.GetFilesAtPath("AddonPackages");
		var cualist="";
	    foreach (string path in cuachk){
		
	    string name = (path.Substring(path.LastIndexOfAny(new char[] { '/', '\\' })+1)).Replace("\\","/");
		//echo21(path);
		if(path.Contains(".var")){var meta=path+":/meta.json";
		if(FileManagerSecure.FileExists(meta)){
		
		string[] metas=(FileManagerSecure.ReadAllText(meta).Replace("\r","").Replace("\t","")).Split("\n"[0]);bool startsearch=false;
		foreach(string s in metas){
			if(s.Contains("\"contentList\" : [")){startsearch=true;}
			if(s.Contains("],")){startsearch=false;}
			if(!startsearch){continue;}
			
			if(s.Contains("Custom/Assets")  && s.Contains("\",") && !s.Contains(".")){
			var chkfiles="";
			
			try{
			chkfiles=s.Substring(s.IndexOf("\"")+1,s.LastIndexOf("\"")-s.IndexOf("\"")-1);
			string[] chks = SuperController.singleton.GetFilesAtPath(path+":/"+chkfiles);
			foreach(string ss in chks){
			if(ss.ToLower().Contains(".assetbundle")){
			var sss=ss.Substring(path.Length+2);
			sss="\""+sss+"\", ";
			
			var author=path.Substring(14,path.IndexOf(".")-14);
			var chkver=(path.Replace(".var","")).Substring(0,(path.Replace(".var","")).LastIndexOf("."));
			var ver=(path.Replace(".var","")).Substring((path.Replace(".var","")).LastIndexOf(".")+1);
			var ass=((sss.Replace("\", ","")).Substring((sss.Replace("\", ","")).IndexOf("\"")+1)).Replace("\\","/").Replace("//","/");
			var cleanass=ass.Replace("Custom/Assets/","").Replace("Custom/Scripts/","").Replace("Custom/Scripts/","").Replace("Custom/","");
			var assplit=author+" > ";
			if(cleanass.Contains("/")){
			assplit+=cleanass.Substring(0,cleanass.LastIndexOf("/"));
			assplit=assplit.Substring(assplit.LastIndexOf("/")+1)+" > ";}
			var asspath=(path+":/"+ass).Replace("\\","/").Replace("//","/");
			var assname = (ass.Substring(ass.LastIndexOfAny(new char[] { '/', '\\' })+1)).Replace("\\","/");
			assname=assname.Substring(0,assname.ToLower().LastIndexOf(".assetbundle"));
			var parentn=ss.Substring(ss.IndexOf(".")+1);
			parentn=parentn.Substring(0,parentn.IndexOf("."));
			//echo22(parentn+">"+assname);
		
		var key="[["+chkver+assname+assplit+"]";
		echo(">>"+assname);
		bool cuareplace=false;
			if(cualist.Contains(key)){
				//echo21(">>"+assname);
			var cuatmp=cualist.Substring(cualist.IndexOf(key)+key.Length);
			var cuaver=cuatmp.Substring(0,cuatmp.IndexOf("]"));
			if(int.Parse(cuaver)>=int.Parse(ver)){continue;}
			else{
			cuareplace=true;
			cualist=cualist.Replace(key+cuaver+"]",key+ver+"]");
			}
			}else{
			cualist+=key+ver+"]\n";cuareplace=false;
			}
			

			var Upperass=parentn+"»"+assname.Substring(0,1).ToUpper()+assname.Substring(1)+"</VAR>";
			var addcua=asspath;
			if(cuas.ContainsKey(Upperass)){
			if(!cuareplace){addcua=cuas[Upperass]+","+addcua;}
			cuas.Remove(Upperass);
			sortedcuas.Remove(Upperass);
			}
			cuas.Add(Upperass,addcua);
			sortedcuas.Add(Upperass,addcua);
			
				
				
				
				
			//echo22(ss);	
			}				
			}
			}catch(Exception e){}
			//echo22(chkfiles);
			continue;
			}
			
			else if(s.ToLower().Contains(".assetbundle\",") && !s.Contains("\"reference\" : \"")){
			
			var author=path.Substring(14,path.IndexOf(".")-14);
			var chkver=(path.Replace(".var","")).Substring(0,(path.Replace(".var","")).LastIndexOf("."));
			var ver=(path.Replace(".var","")).Substring((path.Replace(".var","")).LastIndexOf(".")+1);
			//echo21(chkver+"."+ver+".var");
			var ass=((s.Replace("\", ","")).Substring((s.Replace("\", ","")).IndexOf("\"")+1)).Replace("\\","/").Replace("//","/");
			var cleanass=ass.Replace("Custom/Assets/","").Replace("Custom/Scripts/","").Replace("Custom/Scripts/","").Replace("Custom/","");
			var assplit=author+" > ";
			if(cleanass.Contains("/")){
			assplit+=cleanass.Substring(0,cleanass.LastIndexOf("/"));
			assplit=assplit.Substring(assplit.LastIndexOf("/")+1)+" > ";}
			var asspath=(path+":/"+ass).Replace("\\","/").Replace("//","/");
			var assname = (ass.Substring(ass.LastIndexOfAny(new char[] { '/', '\\' })+1)).Replace("\\","/");
			assname=assname.Substring(0,assname.ToLower().LastIndexOf(".assetbundle"));
			//var cleanass=ass.Replace(ass.LastIndexOf("/"),"\\");
			//var cleanass=ass.Replace("Custom/Assets/","").Replace("Custom/Scripts/","").Replace("Custom/Scripts/","").Replace("Custom/","");
		
		var key="[["+chkver+assname+assplit+"]";
		echo(">>"+assname);
		bool cuareplace=false;
			if(cualist.Contains(key)){
				//echo21(">>"+assname);
			var cuatmp=cualist.Substring(cualist.IndexOf(key)+key.Length);
			var cuaver=cuatmp.Substring(0,cuatmp.IndexOf("]"));
			if(int.Parse(cuaver)>=int.Parse(ver)){continue;}
			else{
			cuareplace=true;
			cualist=cualist.Replace(key+cuaver+"]",key+ver+"]");
			}
			}else{
			cualist+=key+ver+"]\n";cuareplace=false;
			}
			

			var Upperass=assname.Substring(0,1).ToUpper()+assname.Substring(1)+"</VAR>";
			var addcua=asspath;
			if(cuas.ContainsKey(Upperass)){
			if(!cuareplace){addcua=cuas[Upperass]+","+addcua;}
			cuas.Remove(Upperass);
			sortedcuas.Remove(Upperass);
			}
			cuas.Add(Upperass,addcua);
			sortedcuas.Add(Upperass,addcua);
			}
		}
		}
		}
		//echo21("coco");
		//yield return null;
		}
		
		int dirs=0;var cuadirs="\nCustom/Assets\n";
		string[] cuadir = SuperController.singleton.GetDirectoriesAtPath("Custom/Assets");
		foreach(string dir in cuadir){
		if(dir==""){continue;}
		cuadirs+="\n"+dir+"\n";
		}
		
		//echo22(cuadirs.Replace("\n\n","\n"));
		
		for(int ss=0;ss<30;ss++){
		foreach(string dir in (cuadirs.Replace("\n\n","\n")).Split("\n"[0])){
		if(dir==""){continue;}
		string[] tmpdir = SuperController.singleton.GetDirectoriesAtPath(dir);
		foreach(string subdir in tmpdir){
		if(subdir==""){continue;}
		if(!cuadirs.Contains("\n"+subdir+"\n")){cuadirs+="\n"+subdir+"\n";}
		}
		}
		}
		
		//echo22(cuadirs.Replace("\n\n","\n"));
		
		foreach(string path in (cuadirs.Replace("\n\n","\n")).Split("\n"[0])){
		if(path==""){continue;}
		string[] cuafiles=SuperController.singleton.GetFilesAtPath(path.Replace("\\","/"));
		
		foreach(string file in cuafiles){
		if(file.ToLower().Contains(".assetbundle")){
		var f=("/"+file.Replace("\\","/")).Replace("//","/");
		
		
		
		
		
		
		
			var assname=f.Substring(f.LastIndexOf("/")+1);
			assname=assname.Substring(0,assname.Length-12);
			
			var Upperass=assname.Substring(0,1).ToUpper()+assname.Substring(1)+"</LOCAL>";
			var addcua=f.Substring(1);
			if(cuas.ContainsKey(Upperass)){
			addcua=cuas[Upperass]+","+addcua;
			cuas.Remove(Upperass);
			sortedcuas.Remove(Upperass);
			}
			cuas.Add(Upperass,addcua);
			sortedcuas.Add(Upperass,addcua);
			
			
		//echo22(assname);
		
		
		
		
		
		
		
		
		}
		}
		
		}
		
		yield return null;
		if(!cuainit){echo21("coco");cuainit=true;StartCoroutine(listcuas(cuainput.text));}
		}		


private string materials="";
private Dictionary<string,string> skin=new Dictionary<string,string>();
private IEnumerator realskin(Atom p=null,string mode="real",string skinfile="God.RealSKIN Basic.1.var",string bodypart="",string layer="",bool safe=false){
if(mode=="copy"){

materials="";
string[] skinset="Specular Bumpiness,Diffuse Bumpiness,Gloss Texture Offset,Specular Fresnel,Gloss,Specular Intensity,Specular Texture Offset".Split(","[0]);
foreach(string s in skinset){
					JSONStorable a1 = p.GetStorableByID("skin");
					JSONStorableFloat a2 = a1.GetFloatJSONParam(s);
					materials+=s+":"+a2.val+",";
}

var slots="faceDecalUrl,faceNormalUrl,faceGlossUrl,limbsDecalUrl,limbsNormalUrl,limbsGlossUrl,torsoDecalUrl,torsoNormalUrl,torsoGlossUrl,genitalsDecalUrl,genitalsNormalUrl,genitalsGlossUrl";
skin=new Dictionary<string,string>();
foreach(string s in slots.Split(","[0])){
					yield return new WaitForSecondsRealtime(0.05f);
					JSONStorable a1 = p.GetStorableByID("textures");
					JSONStorableUrl a2 = a1.GetUrlJSONParam(s);
					skin.Add("copy-"+s,a2.val);
}
}

else if(mode=="paste"){
var slots="faceDecalUrl,faceNormalUrl,faceGlossUrl,limbsDecalUrl,limbsNormalUrl,limbsGlossUrl,torsoDecalUrl,torsoNormalUrl,torsoGlossUrl,genitalsDecalUrl,genitalsNormalUrl,genitalsGlossUrl";

if(materials.Contains(",")){
string[] skinset=materials.Split(","[0]);
foreach(string s in skinset){
if(s!=""){
					string[] v=s.Split(":"[0]);
					JSONStorable a1 = p.GetStorableByID("skin");
					JSONStorableFloat a2 = a1.GetFloatJSONParam(v[0]);
					a2.val=float.Parse(v[1]);
}
}
}

foreach(string s in slots.Split(","[0])){
if(s.contains(bodypart+layer)){
	if(skin.ContainsKey("copy-"+s)){
					yield return new WaitForSecondsRealtime(0.1f);
					JSONStorable a1 = p.GetStorableByID("textures");
					JSONStorableUrl a2 = a1.GetUrlJSONParam(s);
					a2.val=skin["copy-"+s];
}
}
}
}


else if(mode=="real"){
		
		/*
		skinfile="God.RealSKIN Basic.1.var";
		yield return new WaitForSecondsRealtime(0.5f);
		var pp="AddonPackages/"+skinfile;
		var ppp="AddonPackages/"+skinfile+":/meta.json";
		if(FileManagerSecure.FileExists(pp)){
		echo25("found var");	
		}
		
		if(FileManagerSecure.FileExists(ppp)){
		echo25("found");
		yield return new WaitForSecondsRealtime(1);
		echo25("done");
		}		
*/
		//yield break;

skinfile=realskinfile;
checkvar=true;
StartCoroutine(getvar(realskinurl,skinfile,introtxt:"RealSKIN™ installing - please wait"));	
while(checkvar){
//echo25("checking for RealSKIN");
yield return new WaitForSecondsRealtime(0.1f);
}
if(!varstatus){
yield break;}

skinfile="AddonPackages/"+skinfile;

					JSONStorable t1 = p.GetStorableByID("tongue");
					JSONStorableUrl t2 = t1.GetUrlJSONParam("customTexture_DecalTex");
					t2.val=skinfile+":/Custom/Atom/Person/Textures/God/RealSKIN/Tongue.png";
					yield return new WaitForSecondsRealtime(0.3f);
					
					t2 = t1.GetUrlJSONParam("customTexture_BumpMap");
					t2.val=skinfile+":/Custom/Atom/Person/Textures/God/RealSKIN/Tongue normal.jpg";
					yield return new WaitForSecondsRealtime(0.3f);
					
					t1 = p.GetStorableByID("teeth");
					t2 = t1.GetUrlJSONParam("customTexture_MainTex");
					t2.val=skinfile+":/Custom/Atom/Person/Textures/God/RealSKIN/Teeth.jpg";
					yield return new WaitForSecondsRealtime(0.3f);
					
					t2 = t1.GetUrlJSONParam("customTexture_BumpMap");
					t2.val=skinfile+":/Custom/Atom/Person/Textures/God/RealSKIN/Teeth normal.jpg";
					yield return new WaitForSecondsRealtime(0.3f);				
					

					t1 = p.GetStorableByID("tongue");
					JSONStorableFloat t3 = t1.GetFloatJSONParam("Diffuse Bumpiness");
					t3.val=0.1f;
					
					t3 = t1.GetFloatJSONParam("Global Illumination Filter");
					t3.val=1f;	

					t3 = t1.GetFloatJSONParam("Diffuse Texture Offset");
					t3.val=0.1f;					
					
					t3 = t1.GetFloatJSONParam("Specular Bumpiness");
					t3.val=1.2f;

					t3 = t1.GetFloatJSONParam("Specular Fresnel");
					t3.val=0.2f;
					
					JSONStorableColor t4 = t1.GetColorJSONParam("Diffuse Color");
					t4.SetColor(new Color(1f,0.92f,0.90f));					

					t1 = p.GetStorableByID("teeth");
					t3 = t1.GetFloatJSONParam("Gloss");
					t3.val=8f;
					
					t3 = t1.GetFloatJSONParam("Global Illumination Filter");
					t3.val=1f;						

					t3 = t1.GetFloatJSONParam("Specular Fresnel");
					t3.val=0.5f;
					
					t3 = t1.GetFloatJSONParam("Gloss Texture Offset");
					t3.val=1f;

					t3 = t1.GetFloatJSONParam("Diffuse Texture Offset");
					t3.val=-0f;
					yield return new WaitForSecondsRealtime(0.1f);						

					t3 = t1.GetFloatJSONParam("Diffuse Bumpiness");
					t3.val=0f;
					
					t4 = t1.GetColorJSONParam("Diffuse Color");
					t4.SetColor(new Color(0.91f,0.87f,0.83f));
					
					t1 = p.GetStorableByID("sclera");
					
					t3 = t1.GetFloatJSONParam("Global Illumination Filter");
					t3.val=1f;					

					t3 = t1.GetFloatJSONParam("Gloss");
					t3.val=8f;
										
					t3 = t1.GetFloatJSONParam("Gloss Texture Offset");
					t3.val=1f;					

					t4 = t1.GetColorJSONParam("Diffuse Color");
					t4.SetColor(new Color(0.86f,0.85f,0.84f));

					t1 = p.GetStorableByID("mouth");					
					t3 = t1.GetFloatJSONParam("Global Illumination Filter");
					t3.val=1f;

					t1 = p.GetStorableByID("irises");					
					t3 = t1.GetFloatJSONParam("Global Illumination Filter");
					t3.val=0.9f;
					
					yield return new WaitForSecondsRealtime(0.1f);					

					t1 = p.GetStorableByID("lacrimals");					
					t3 = t1.GetFloatJSONParam("Global Illumination Filter");
					t3.val=1f;	
					
					yield return new WaitForSecondsRealtime(0.1f);
					
if(allmorphs.ContainsKey("["+p.name+"][Eyes Cornea Bulge]")){
allmorphs["["+p.name+"][Cornea Depth]"].morphValue=1.4f;
allmorphs["["+p.name+"][Eyes Cornea Bulge]"].morphValue=1.4f;
allmorphs["["+p.name+"][Eyeballs Depth]"].morphValue=0.2f;
}					 

var slots="faceDecalUrl,faceNormalUrl,faceGlossUrl,limbsDecalUrl,limbsNormalUrl,limbsGlossUrl,torsoDecalUrl,torsoNormalUrl,torsoGlossUrl,genitalsDecalUrl,genitalsNormalUrl,genitalsGlossUrl";
if(!skin.ContainsKey("realskin-faceDecalUrl")){
skin.Add("realskin-faceDecalUrl",skinfile+":/Custom/Atom/Person/Textures/God/RealSKIN/4K Face.png");
skin.Add("realskin-faceNormalUrl",skinfile+":/Custom/Atom/Person/Textures/God/RealSKIN/4K Face normal.jpg");
skin.Add("realskin-faceGlossUrl",skinfile+":/Custom/Atom/Person/Textures/God/RealSKIN/2K Face gloss.jpg");
skin.Add("realskin-limbsDecalUrl",skinfile+":/Custom/Atom/Person/Textures/God/RealSKIN/8K Torso - limbs - gens.png");
skin.Add("realskin-limbsNormalUrl",skinfile+":/Custom/Atom/Person/Textures/God/RealSKIN/4K Limbs normal.jpg");
skin.Add("realskin-limbsGlossUrl",skinfile+":/Custom/Atom/Person/Textures/God/RealSKIN/2K Limbs gloss.jpg");
skin.Add("realskin-torsoDecalUrl",skinfile+":/Custom/Atom/Person/Textures/God/RealSKIN/8K Torso - limbs - gens.png");
skin.Add("realskin-torsoNormalUrl",skinfile+":/Custom/Atom/Person/Textures/God/RealSKIN/8K Torso normal.jpg");
skin.Add("realskin-torsoGlossUrl",skinfile+":/Custom/Atom/Person/Textures/God/RealSKIN/2K Torso gloss.jpg");
skin.Add("realskin-genitalsDecalUrl",skinfile+":/Custom/Atom/Person/Textures/God/RealSKIN/8K Torso - limbs - gens.png");
skin.Add("realskin-genitalsNormalUrl",skinfile+":/Custom/Atom/Person/Textures/God/RealSKIN/4K Gens normal.jpg");
skin.Add("realskin-genitalsGlossUrl",skinfile+":/Custom/Atom/Person/Textures/God/RealSKIN/2K Gens gloss.jpg");
}

int askin=0;
foreach(KeyValuePair<string, string> v in skin){
if(v.Key.ToLower().Contains(mode) && v.Key.ToLower().Contains(bodypart+layer)){
foreach(string s in slots.Split(","[0])){

if(s==v.Key.Replace("realskin-","")){
					yield return new WaitForSecondsRealtime(0.1f);
					JSONStorable a1 = p.GetStorableByID("textures");
					JSONStorableUrl a2 = a1.GetUrlJSONParam(s);
					if(safe && a2.val!=""){continue;}
					askin++;
					a2.val=v.Value;
					yield return new WaitForSecondsRealtime(0.5f);

}
}
}	
}
try{
if(askin>0){
string[] skinset="Specular Bumpiness:0.6,Diffuse Bumpiness:0.1,Gloss Texture Offset:0.3,Specular Fresnel:0.6,Gloss:8,Specular Intensity:0.6,Specular Texture Offset:0.2".Split(","[0]);
foreach(string s in skinset){
					string[] v=s.Split(":"[0]);
					echo24(v[0]+" > "+v[1]);
					JSONStorable a1 = p.GetStorableByID("skin");
					JSONStorableFloat a2 = a1.GetFloatJSONParam(v[0]);
					a2.val=float.Parse(v[1]);
					//yield return new WaitForSecondsRealtime(0.5f);

}
}
}catch(Exception e){SuperController.LogError("Exception caught: " + e);}

}//realskin end

yield return null;
}


		private float lastscale=Time.realtimeSinceStartup;
		private bool scaling=false;
		private bool godmode=true;
		private bool cuapress=false;
		private bool cuaout=true;
		private string _safecreator="";
		private string slidemode="scale";
		private UIDynamicButton infobutton;
		private UIDynamicButton gmbutton;
		private UIDynamicButton camcolbutton;
		private UIDynamicButton camresbutton;
		private UIDynamicButton camdirbutton;
		private UIDynamicButton gmlockrbutton;
		private UIDynamicButton gmlockxbutton;
		private UIDynamicButton gmlockybutton;
		private UIDynamicButton gmlockzbutton;
		private UIDynamicButton gmcopybutton;
		private UIDynamicButton gmpastebutton;
		private UIDynamicButton gmpastexbutton;
		private UIDynamicButton gmpasteybutton;
		private UIDynamicButton gmpastezbutton;
		private UIDynamicButton godbutton;
		private UIDynamicButton godbutton2;
		private UIDynamicButton gmrealbutton;
		private UIDynamicButton gmcopytbutton;
		private UIDynamicButton gmpastetbutton;
		private UIDynamicButton scalebutton;
		private UIDynamicButton gmonbutton;
		private UIDynamicButton gmdelbutton;
		private UIDynamicButton gmtelbutton;
		private UIDynamicButton gmmovebutton;
		private UIDynamicButton gmclonebutton;
		private UIDynamicButton gmcolbutton;
		private UIDynamicButton gmslidebutton;
		private UIDynamicButton gmhidebutton;
		private UIDynamicTextField cuawindow;
		private UIDynamicButton aligner;
		private UIDynamicButton helpbutton;
		private Vector3 rsrot=new Vector3();
		
		
		private IEnumerator setgod(){
		yield return null;
		godslide=true;
		}
		
		
		private IEnumerator setstream(){
		if(stream=="off"){
		Clientmessage("/join #[STREAM]-"+nick, raw: false);
		}
		else{
		streambutton.label="Streamº";

		recieve="off";
		Clientmessage("/leave "+stream, raw: false);
		stream="off";
		}
		yield return null;
		}
		
        public void initiate()
        {
			echo7("initiating");
			
			if (GameObject.Find("session") != null)
            {
               echo7("A session instance already running");
                this.enabled = false;
                return;
            }

			if (GameObject.Find("scene") != null)
            {
               echo7("A scene instance already running");
                this.enabled = false;
                return;
            }
			
						if (GameObject.Find("person") != null)
            {
               echo7("A person instance already running");
                this.enabled = false;
                return;
            }
  		
           	try
            	{
				pluginlabel="//\\\\/\\\\ORPHINEº V"+version+" by God";
				
                pluginLabelJSON.val = pluginlabel;
				femalemaker=femalemake+keeplist;
				

	
		echo7(manager.name);
		if(manager.name=="SessionPluginManager"){sessionplugin=true;echo7("SESSIONPLUGIN");lockObject = new GameObject("session");}
		else if(manager.name=="ScenePluginManager"){sceneplugin=true;echo7("SCENEPLUGIN");lockObject = new GameObject("scene");}
		else {personplugin=true;echo7("PERSONPLUGIN");lockObject = new GameObject("person");
		containingAtom.SetOn(true);
		_person = containingAtom;
        _personid = _person.name;
		_characterSelector = _person.GetComponentInChildren<DAZCharacterSelector>(true);
		}
				
            echo7("Running solo instance");
			primary=true;
			
string[] tss=ttime.Split(":"[0]);
hhour=tss[0];
ssecond=tss[2];
mminute=tss[1];
int hh=int.Parse(hhour);var td="";
if(hh<5){td="night";}
else if(hh<10){td="morning";}
else if(hh<18){td="day";}
else{td="evening";}
timeofday=td;
			
				
				commandget = new JSONStorableString("command-reciever",csend,sendcstring);
				RegisterString(commandget);
				
				commandresult = new JSONStorableString("command-result",cresult,getcstring);
				RegisterString(commandresult);
				
		if(!personplugin){            
		bool people=false;
		foreach(Atom p in SuperController.singleton.GetAtoms()){if(p.on && p.type == "Person"){people=true;}}
        }

       

	_creator = SuperController.singleton.GetAtomByUid("CoreControl").gameObject.GetComponent<UserPreferences>().creatorName;
	var tcr=_creator.Replace("Anonymous","");
	string[] tmpnames=(("babe,"+tcr+",handsome,"+tcr+",baby,"+tcr+",darlin,"+tcr+",sweetie").Replace(",,",",")).Split(","[0]);
	_player=tmpnames[UnityEngine.Random.Range(0,tmpnames.Length)];
	_safecreator=_creator.Replace("Anonymous",_player);				
					
	_creatorInputField_text = _creator;
    _prefixNameInputField_text = _creator;
//CreateServer();
//Application.runInBackground = true;


SuperController.singleton.onBeforeSceneSaveHandlers += OnBeforeSaveScene;
SuperController.singleton.onSceneLoadedHandlers += OnSceneLoaded;
/*
if(SuperController.singleton.GetAtomByUid("LeftHandMagnet")==null){
StartCoroutine(SuperController.singleton.AddAtomByType("Empty","LeftHandMagnet",false,false,false));}
StartCoroutine(addmagnets());
*/
float w;float x;float adjustx;float y;
ibox = new UIDynamicButton[50];
pbox = new UIDynamicButton[200];
gbox = new UIDynamicButton[200];
letterbox = new UIDynamicButton[50];
helpenter = new EventTrigger.Entry[200];
hudenter = new EventTrigger.Entry[100];
hudexit = new EventTrigger.Entry[100];
MorphToggles = new UIDynamicToggle[5000];
hudbutton = new UIDynamicButton[100];
morphinfo = new UIDynamicButton[5000];
userbutton = new UIDynamicButton[1000];
Morphnum = new DAZMorph[5000];
Previews = new DAZMorph[5000];
slider = new UIDynamicSlider[5000];
spacer = new UIDynamicTextField[10];
 slidehits = new Dictionary<string,int>();
 slideon = new Dictionary<string,bool>();
 slidevals = new Dictionary<string,string>();
//futa=futalist.Split(","[0]);

      //Thread newThread = new Thread(() => theloop());//this function will now execute on the new thread
      //newThread.Start();


//FileManagerSecure.WriteAllText("Saves\\PluginData\\God\\morphin.txt","lula");
//FileManagerSecure.DeleteFile("Custom\\Atom\\Person\\Morphs\\female\\God\\morphin.txt");
//json("save","Custom\\Atom\\Person\\Morphs\\female\\God\\morphin.txt");
//StartCoroutine(OpenPlugin(this.name));

	wiz=setcanvas();
	wizgroup=on;
	wiz.gameObject.layer=5;

	models=setcanvas();
	modelsgroup=on;
	models.gameObject.layer=5;
	models.sortingOrder=-1;
	
	sliderui=setcanvas();
	slideruigroup=on;
	sliderui.gameObject.layer=5;
	
	//sliderui.sortingOrder=17;
	
	morphinebutton=sethud();
	morphinebuttongroup=on;
	morphinebutton.gameObject.layer=5;
	if(vr){
	morphinebutton.transform.localEulerAngles=new Vector3(29.5f,180,0);
	morphinebutton.transform.localPosition=new Vector3(0.32f,-0.191f,0.1085f);

}else{
	morphinebutton.transform.localEulerAngles=new Vector3(0,180,0);
	morphinebutton.transform.localPosition=new Vector3(0.320f,-0.2195f,0f);
}
	


	hide=setcanvas();
	hidegroup=on;
	hidegroup.blocksRaycasts = false;
	hidegroup.alpha = 0f;
	
	trans=setcanvas(cc:SuperController.singleton.transform.parent);
	transgroup=on;
	transgroup.blocksRaycasts = false;
	transgroup.alpha = 0.2f;
	
	StartCoroutine(errors());
	StartCoroutine(updater());
	StartCoroutine(assignmorphs());
	//StartCoroutine(checksliders());
	//StartCoroutine(checkproximity());
	//StartCoroutine(checkslidecontrollers());

	ui=setcanvas();
	uigroup=on;
	//ui.sortingOrder=15;
	ui.gameObject.layer=5;
	uilayer=ui.sortingOrder;
	
	copy=setcanvas();
	copygroup=on;
	//ui.sortingOrder=15;
	ui.gameObject.layer=5;
	
	adv=setcanvas(y: 0.0038f);
	advgroup=on;
	//adv.sortingOrder=10;
	adv.gameObject.layer=5;	
	scroll=setcanvas();
	scrollgroup=on;

	bg=setcanvas(0.5f,-0.08f,scale: 0.00035f);
	bggroup=on;
	bg.gameObject.layer=5;
	
	//bg.sortingOrder=30;
	bg.transform.localPosition=new Vector2(bg.transform.localPosition.x-0.2f,bg.transform.localPosition.y+0.0994f);
	bgpos=bg.transform.localPosition.y;
	infopanel=setcanvas();
	infopanel.gameObject.layer=5;
	infopanelgroup=on;
	//infopanel.sortingOrder=32;
	
		copygroup.blocksRaycasts = false;
		copygroup.interactable = false;
		infopanelgroup.blocksRaycasts = false;
		infopanelgroup.interactable = false;
	
		
	web=setcanvas();
	webgroup=on;
	web.gameObject.layer=5;
	web.sortingOrder=-12;
	webpos=web.transform.localPosition;
	
	url=setcanvas(scale: 0.0010f);
	urlgroup=on;
	url.gameObject.layer=5;
	url.sortingOrder=-11;
	//url.transform.SetParent(web.transform,false);
	urlpos=url.transform.localPosition;
	
	chat=setcanvas();
	chatgroup=on;
	chat.gameObject.layer=5;	
	chat.sortingOrder=-10;
	chatpos=chat.transform.localPosition;
	
	users=setcanvas();
	usersgroup=on;
	users.gameObject.layer=5;	
	users.sortingOrder=-9;
	
	hud=setcanvas();
	hudgroup=on;
	hud.gameObject.layer=5;
	hud.sortingOrder=31;
	
	cam=setcanvas(scale: 0.00020f);
	camgroup=on;
	cam.gameObject.layer=5;
	cam.sortingOrder=31;
	cam.transform.SetParent(SuperController.singleton.centerCameraTarget.transform,false);
	
//holo.SetParent(hide.transform,false);
	
	m_EventSystem = EventSystem.current;
//SceneAtoms/X-wife/UI/UIPlaceHolderModel/UIModel/Canvas/DynamicButton(Clone)/
SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/BackPanel").GetComponent<Image>().color=new Color(0.23f, 0.21f, 0.21f,0.75f);
//echo5("Name > "+SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/BackPanel").GetComponent<Image>().name);
SuperController.singleton.mainHUD.Find("MainUICanvas/Panel/BackPanel").GetComponent<Image>().color=new Color(0.23f, 0.21f, 0.21f,0.75f);

Transform lowHUDt=SuperController.singleton.mainHUD.Find("LowerHUDPivot/").GetComponentInChildren<Transform>(true);
Transform mainhudatt=SuperController.singleton.GetAtomByUid("CoreControl").transform;

	lowHUD=setcanvas(cc:lowHUDt);
	lowHUDgroup=on;
	lowHUD.gameObject.layer=5;
	lowHUD.sortingOrder=29;
	
	atomhud=setcanvas(cc:mainhudatt);
	atomhudgroup=on;
	
	lowHUDtext=setcanvas(cc:lowHUDt);
	lowHUDtextgroup=on;
	lowHUDtext.gameObject.layer=5;
	lowHUDtext.sortingOrder=30;
	lowHUDtextgroup.blocksRaycasts = false;
	lowHUDtextgroup.interactable = false;
	
cam.enabled=false;
atomhud.enabled=true;
trans.enabled=true;
lowHUD.enabled=true;
url.enabled=false;
web.enabled=false;
chat.enabled=false;
wiz.enabled=false;
copy.enabled=false;
users.enabled = true;
scroll.enabled = false;
infopanel.enabled=false;
sliderui.enabled = false;
ui.enabled = false;
adv.enabled = false;
bg.enabled = false;
models.enabled = false;
bgcolor.a = 0.7f;
infopanelgroup.alpha = 1f;
slideruigroup.alpha=0f;
bggroup.alpha = 0.0f;
advgroup.alpha = 0f;
modelsgroup.alpha = 0f;
preview();


modelsgroup.blocksRaycasts = false;


hcopyslide();
horigslide();
bcopyslide();
borigslide();
comboslide();

GameObject cocopop=createbox(lowHUD.transform,w:1318, h:194,x:0, y:-276,cc:skinmenucolor);
float hy=9;
float hx=15;
float hf=hx/2;
worldtext=textbackground(lowHUDtext.transform,282f,-601,0,-365+hy);
worldtext.text="WORLD";
worldtext.height=34;
worldtext.UItext.fontSize=24;
worldtext.UItext.color=Color.white;
worldtext.UItext.lineSpacing=0;
worldtext.backgroundColor=Color.clear;
worldtext.UItext.fontStyle = FontStyle.Bold;


timetext=textbackground(lowHUDtext.transform,62f,-291+hf*2,0,-365+hy);
timetext.text="TIME";
timetext.height=34;
timetext.UItext.fontSize=24;
timetext.UItext.color=Color.white;
timetext.UItext.lineSpacing=0;
timetext.backgroundColor=Color.clear;
timetext.UItext.fontStyle = FontStyle.Bold;

speedtext=textbackground(lowHUDtext.transform,282f,330+hf*6,0,-405+hy);
speedtext.text="MOVE";
speedtext.height=34;
speedtext.UItext.fontSize=24;
speedtext.UItext.color=Color.white;
speedtext.UItext.lineSpacing=0;
speedtext.backgroundColor=Color.clear;
speedtext.UItext.fontStyle = FontStyle.Bold;

qualitytext=textbackground(lowHUDtext.transform,282f,330+hf*6,0,-365+hy);
qualitytext.text="QUALITY";
qualitytext.height=34;
qualitytext.UItext.fontSize=24;
qualitytext.UItext.color=Color.white;
qualitytext.UItext.lineSpacing=0;
qualitytext.backgroundColor=Color.clear;
qualitytext.UItext.fontStyle = FontStyle.Bold;


fpstext=textbackground(lowHUDtext.transform,282f,21+hf*4,0,-365+hy);
fpstext.text="FPS 120-3";
fpstext.height=34;
fpstext.UItext.fontSize=24;
fpstext.UItext.color=Color.white;
fpstext.UItext.lineSpacing=0;
fpstext.backgroundColor=Color.clear;
fpstext.UItext.fontStyle = FontStyle.Bold;

fovtext=textbackground(lowHUDtext.transform,282f,273+hf*6,0,-365+hy);
fovtext.text="FOV 40";
fovtext.height=34;
fovtext.UItext.fontSize=24;
fovtext.UItext.color=Color.white;
fovtext.UItext.lineSpacing=0;
fovtext.backgroundColor=Color.clear;
fovtext.UItext.fontStyle = FontStyle.Bold;
fovtext.UItext.alignment = TextAnchor.MiddleRight;

uisizetext=textbackground(lowHUDtext.transform,282f,273+hf*6,0,-405+hy);
uisizetext.text="UI 1";
uisizetext.height=34;
uisizetext.UItext.fontSize=24;
uisizetext.UItext.color=Color.white;
uisizetext.UItext.lineSpacing=0;
uisizetext.backgroundColor=Color.clear;
uisizetext.UItext.fontStyle = FontStyle.Bold;
uisizetext.UItext.alignment = TextAnchor.MiddleRight;


			infobutton=newbutton(lowHUD.transform,() => {
			
			},ttime,1224,33.7f, -612.5f,-419.2f);
			infobutton.buttonText.fontSize=20;
			infobutton.buttonColor=Color.clear;
			infobutton.textColor=new Color(0.75f,0.76f,0.79f);

			var timebutton=newbutton(lowHUD.transform,() => {
			timeslider.slider.value=1;
			timescale.value=1;
			savetime=timeslider.slider.value;
			saveini();
			},"1:1",-44,33.7f, -42.5f+hx*2,-349.9f+hy);
			timebutton.buttonText.fontSize=24;
			timebutton.buttonColor=hudslidecolor;
			timebutton.textColor=Color.white;
			
					
			
			helpbutton=newbutton(lowHUD.transform,() => {
			showhelptips=!showhelptips;
			helpbutton.buttonColor=new Color(0.1f,0.13f,0.15f);
			if(showhelptips){helpbutton.buttonColor=new Color(1,1,1);}
			saveini();
			},"?",-23,73.7f, 709,-422.5f);
			helpbutton.buttonText.fontSize=44;
			helpbutton.buttonColor=new Color(0.1f,0.13f,0.15f);
			helpbutton.textColor=modelcolor;			
			
			var worldbutton=newbutton(lowHUD.transform,() => {
			//echo9(SuperController.singleton.worldScale.ToString());
			SuperController.singleton.worldScale=1;
			worldset=false;
			worldslider.slider.value=500-(SuperController.singleton.worldScale*100);
			worldtext.text="WORLD 100%";
			SuperController.singleton.playerHeightAdjust=1.4f-(SuperController.singleton.worldScale)*1.3f;
			saveworld=worldslider.slider.value;
			saveini();
			},"1:1",-44,33.7f,-354.5f+hx,-349.9f+hy);
			worldbutton.buttonText.fontSize=24;
			worldbutton.buttonColor=hudslidecolor;
			worldbutton.textColor=Color.white;
			
		
if(worldslider!=null){RemoveSlider(worldslider);}
float ws=500-(SuperController.singleton.worldScale*100);
float wss=(500-ws)/100;
worldtext.text="WORLD "+((100/wss).ToString()+".").Substring(0,((100/wss).ToString()+".").IndexOf("."))+"%";

JSONStorableFloat worldfloat = new JSONStorableFloat("worldslide", ws, worldscaler, 10, 500f);
worldslider = CreateSliderui(worldfloat);
worldslider.slider.wholeNumbers = true;
worldslider.transform.SetParent(lowHUD.transform,false);
transui2(worldslider.transform,288,-8,-525+hf,-337+hy);
scaler(worldslider.transform.Find("Slider").GetComponent<Transform>(),249+hx,34);

worldslider.transform.Find("Slider").GetComponent<Image>().color = hudslidecolor;
worldslider.sliderValueTextFromFloat.UIInputField.textComponent.fontSize=18;
worldslider.sliderValueTextFromFloat.UIInputField.readOnly=true;
GameObject.Destroy(worldslider.sliderValueTextFromFloat.gameObject);
worldslider.quickButtonsEnabled = false;
worldslider.rangeAdjustEnabled = false;
worldslider.defaultButtonEnabled = false;
worldslider.slider.wholeNumbers = true;
GameObject.Destroy(worldslider.quickButtonsGroup.gameObject);
GameObject.Destroy(worldslider.defaultButton.gameObject);
GameObject.Destroy(worldslider.rangeAdjustGroup.gameObject);
GameObject.Destroy(worldslider.labelText.gameObject);
GameObject.Destroy(worldslider.quickButtonM1.gameObject);
GameObject.Destroy(worldslider.quickButtonM2.gameObject);
GameObject.Destroy(worldslider.quickButtonM3.gameObject);
GameObject.Destroy(worldslider.quickButtonM4.gameObject);
GameObject.Destroy(worldslider.quickButtonP1.gameObject);
GameObject.Destroy(worldslider.quickButtonP2.gameObject);
GameObject.Destroy(worldslider.quickButtonP3.gameObject);
GameObject.Destroy(worldslider.quickButtonP4.gameObject);
worldslider.slider.handleRect.transform.GetComponent<Image>().color=Color.clear;
worldslider.slider.fillRect.transform.GetComponent<Image>().color=hudslidecolorlight;

atomhud.enabled=false;

			gmbutton=newbutton(atomhud.transform,() => {
			},"",560,400,-280,-360);
			gmbutton.buttonText.fontSize=26;
			gmbutton.buttonColor=Color.clear;
			gmbutton.textColor=Color.clear;
			
			
if(scaleslider!=null){RemoveSlider(scaleslider);}
JSONStorableFloat sfloat = new JSONStorableFloat("scaler", 0.010f, atomscaler, 0.010f, 10);
scaleslider = CreateSliderui(sfloat);
scaleslider.transform.SetParent(atomhud.transform,false);
scaleslider.transform.Find("Slider").GetComponent<Image>().color = new Color(0.1f,0.12f,0.13f,0.5f);
scaleslider.sliderValueTextFromFloat.UIInputField.textComponent.fontSize=18;
scaleslider.sliderValueTextFromFloat.UIInputField.readOnly=true;
GameObject.Destroy(scaleslider.sliderValueTextFromFloat.gameObject);
scaleslider.slider.fillRect.GetComponent<Image>().color=Color.white;
scaleslider.quickButtonsEnabled = false;
scaleslider.rangeAdjustEnabled = false;
scaleslider.defaultButtonEnabled = false;
scaleslider.slider.wholeNumbers = false;
GameObject.Destroy(scaleslider.quickButtonsGroup.gameObject);
//GameObject.Destroy(scaleslider.defaultButton.gameObject);
GameObject.Destroy(scaleslider.rangeAdjustGroup.gameObject);
GameObject.Destroy(scaleslider.labelText.gameObject);
GameObject.Destroy(scaleslider.quickButtonM1.gameObject);
GameObject.Destroy(scaleslider.quickButtonM2.gameObject);
GameObject.Destroy(scaleslider.quickButtonM3.gameObject);
GameObject.Destroy(scaleslider.quickButtonM4.gameObject);
GameObject.Destroy(scaleslider.quickButtonP1.gameObject);
GameObject.Destroy(scaleslider.quickButtonP2.gameObject);
GameObject.Destroy(scaleslider.quickButtonP3.gameObject);
GameObject.Destroy(scaleslider.quickButtonP4.gameObject);
scaleslider.slider.handleRect.transform.GetComponent<Image>().color=Color.clear;


if(xnudgeslider!=null){RemoveSlider(xnudgeslider);}
JSONStorableFloat xxfloat = new JSONStorableFloat("xnudge", 0, xnudger, -1, 1);
xnudgeslider = CreateSliderui(xxfloat);
xnudgeslider.transform.SetParent(atomhud.transform,false);
xnudgeslider.transform.Find("Slider").GetComponent<Image>().color = new Color(0.1f,0.12f,0.13f,0.5f);
xnudgeslider.sliderValueTextFromFloat.UIInputField.textComponent.fontSize=18;
xnudgeslider.sliderValueTextFromFloat.UIInputField.readOnly=true;
GameObject.Destroy(xnudgeslider.sliderValueTextFromFloat.gameObject);
xnudgeslider.slider.fillRect.GetComponent<Image>().color=Color.clear;
xnudgeslider.quickButtonsEnabled = false;
xnudgeslider.rangeAdjustEnabled = false;
xnudgeslider.defaultButtonEnabled = false;
xnudgeslider.slider.wholeNumbers = false;
GameObject.Destroy(xnudgeslider.quickButtonsGroup.gameObject);
//GameObject.Destroy(xnudgeslider.defaultButton.gameObject);
GameObject.Destroy(xnudgeslider.rangeAdjustGroup.gameObject);
GameObject.Destroy(xnudgeslider.labelText.gameObject);
GameObject.Destroy(xnudgeslider.quickButtonM1.gameObject);
GameObject.Destroy(xnudgeslider.quickButtonM2.gameObject);
GameObject.Destroy(xnudgeslider.quickButtonM3.gameObject);
GameObject.Destroy(xnudgeslider.quickButtonM4.gameObject);
GameObject.Destroy(xnudgeslider.quickButtonP1.gameObject);
GameObject.Destroy(xnudgeslider.quickButtonP2.gameObject);
GameObject.Destroy(xnudgeslider.quickButtonP3.gameObject);
GameObject.Destroy(xnudgeslider.quickButtonP4.gameObject);
xnudgeslider.slider.handleRect.transform.GetComponent<Image>().color=Color.white;

if(ynudgeslider!=null){RemoveSlider(ynudgeslider);}
JSONStorableFloat yyfloat = new JSONStorableFloat("ynudge", 0, ynudger, -1, 1);
ynudgeslider = CreateSliderui(yyfloat);
ynudgeslider.transform.SetParent(atomhud.transform,false);
ynudgeslider.transform.Find("Slider").GetComponent<Image>().color = new Color(0.1f,0.12f,0.13f,0.5f);
ynudgeslider.sliderValueTextFromFloat.UIInputField.textComponent.fontSize=18;
ynudgeslider.sliderValueTextFromFloat.UIInputField.readOnly=true;
GameObject.Destroy(ynudgeslider.sliderValueTextFromFloat.gameObject);
ynudgeslider.slider.fillRect.GetComponent<Image>().color=Color.clear;
ynudgeslider.quickButtonsEnabled = false;
ynudgeslider.rangeAdjustEnabled = false;
ynudgeslider.defaultButtonEnabled = false;
ynudgeslider.slider.wholeNumbers = false;
GameObject.Destroy(ynudgeslider.quickButtonsGroup.gameObject);
//GameObject.Destroy(ynudgeslider.defaultButton.gameObject);
GameObject.Destroy(ynudgeslider.rangeAdjustGroup.gameObject);
GameObject.Destroy(ynudgeslider.labelText.gameObject);
GameObject.Destroy(ynudgeslider.quickButtonM1.gameObject);
GameObject.Destroy(ynudgeslider.quickButtonM2.gameObject);
GameObject.Destroy(ynudgeslider.quickButtonM3.gameObject);
GameObject.Destroy(ynudgeslider.quickButtonM4.gameObject);
GameObject.Destroy(ynudgeslider.quickButtonP1.gameObject);
GameObject.Destroy(ynudgeslider.quickButtonP2.gameObject);
GameObject.Destroy(ynudgeslider.quickButtonP3.gameObject);
GameObject.Destroy(ynudgeslider.quickButtonP4.gameObject);
ynudgeslider.slider.handleRect.transform.GetComponent<Image>().color=Color.white;

if(znudgeslider!=null){RemoveSlider(znudgeslider);}
JSONStorableFloat zzfloat = new JSONStorableFloat("znudge", 0, znudger, -1, 1);
znudgeslider = CreateSliderui(zzfloat);
znudgeslider.transform.SetParent(atomhud.transform,false);
znudgeslider.transform.Find("Slider").GetComponent<Image>().color = new Color(0.1f,0.12f,0.13f,0.5f);
znudgeslider.sliderValueTextFromFloat.UIInputField.textComponent.fontSize=18;
znudgeslider.sliderValueTextFromFloat.UIInputField.readOnly=true;
GameObject.Destroy(znudgeslider.sliderValueTextFromFloat.gameObject);
znudgeslider.slider.fillRect.GetComponent<Image>().color=Color.clear;
znudgeslider.quickButtonsEnabled = false;
znudgeslider.rangeAdjustEnabled = false;
znudgeslider.defaultButtonEnabled = false;
znudgeslider.slider.wholeNumbers = false;
GameObject.Destroy(znudgeslider.quickButtonsGroup.gameObject);
//GameObject.Destroy(znudgeslider.defaultButton.gameObject);
GameObject.Destroy(znudgeslider.rangeAdjustGroup.gameObject);
GameObject.Destroy(znudgeslider.labelText.gameObject);
GameObject.Destroy(znudgeslider.quickButtonM1.gameObject);
GameObject.Destroy(znudgeslider.quickButtonM2.gameObject);
GameObject.Destroy(znudgeslider.quickButtonM3.gameObject);
GameObject.Destroy(znudgeslider.quickButtonM4.gameObject);
GameObject.Destroy(znudgeslider.quickButtonP1.gameObject);
GameObject.Destroy(znudgeslider.quickButtonP2.gameObject);
GameObject.Destroy(znudgeslider.quickButtonP3.gameObject);
GameObject.Destroy(znudgeslider.quickButtonP4.gameObject);
znudgeslider.slider.handleRect.transform.GetComponent<Image>().color=Color.white;

if(yslider!=null){RemoveSlider(yslider);}
JSONStorableFloat xnfloat = new JSONStorableFloat("yscaley", 0, yscaler, 0, 360);
yslider = CreateSliderui(xnfloat);
yslider.transform.SetParent(atomhud.transform,false);
yslider.transform.Find("Slider").GetComponent<Image>().color = new Color(0.1f,0.12f,0.13f,0.5f);
yslider.sliderValueTextFromFloat.UIInputField.textComponent.fontSize=18;
yslider.sliderValueTextFromFloat.UIInputField.readOnly=true;
GameObject.Destroy(yslider.sliderValueTextFromFloat.gameObject);
yslider.slider.fillRect.GetComponent<Image>().color=Color.white;
yslider.quickButtonsEnabled = false;
yslider.rangeAdjustEnabled = false;
yslider.defaultButtonEnabled = false;
yslider.slider.wholeNumbers = false;
GameObject.Destroy(yslider.quickButtonsGroup.gameObject);
//GameObject.Destroy(yslider.defaultButton.gameObject);
GameObject.Destroy(yslider.rangeAdjustGroup.gameObject);
GameObject.Destroy(yslider.labelText.gameObject);
GameObject.Destroy(yslider.quickButtonM1.gameObject);
GameObject.Destroy(yslider.quickButtonM2.gameObject);
GameObject.Destroy(yslider.quickButtonM3.gameObject);
GameObject.Destroy(yslider.quickButtonM4.gameObject);
GameObject.Destroy(yslider.quickButtonP1.gameObject);
GameObject.Destroy(yslider.quickButtonP2.gameObject);
GameObject.Destroy(yslider.quickButtonP3.gameObject);
GameObject.Destroy(yslider.quickButtonP4.gameObject);
yslider.slider.handleRect.transform.GetComponent<Image>().color=Color.clear;

if(xslider!=null){RemoveSlider(xslider);}
JSONStorableFloat xfloat = new JSONStorableFloat("xscalex", 0, xscaler, 0, 360);
xslider = CreateSliderui(xfloat);
xslider.transform.SetParent(atomhud.transform,false);
xslider.transform.Find("Slider").GetComponent<Image>().color = new Color(0.1f,0.12f,0.13f,0.5f);
xslider.sliderValueTextFromFloat.UIInputField.textComponent.fontSize=18;
xslider.sliderValueTextFromFloat.UIInputField.readOnly=true;
GameObject.Destroy(xslider.sliderValueTextFromFloat.gameObject);
xslider.slider.fillRect.GetComponent<Image>().color=Color.white;
xslider.quickButtonsEnabled = false;
xslider.rangeAdjustEnabled = false;
xslider.defaultButtonEnabled = false;
xslider.slider.wholeNumbers = false;
GameObject.Destroy(xslider.quickButtonsGroup.gameObject);
//GameObject.Destroy(xslider.defaultButton.gameObject);
GameObject.Destroy(xslider.rangeAdjustGroup.gameObject);
GameObject.Destroy(xslider.labelText.gameObject);
GameObject.Destroy(xslider.quickButtonM1.gameObject);
GameObject.Destroy(xslider.quickButtonM2.gameObject);
GameObject.Destroy(xslider.quickButtonM3.gameObject);
GameObject.Destroy(xslider.quickButtonM4.gameObject);
GameObject.Destroy(xslider.quickButtonP1.gameObject);
GameObject.Destroy(xslider.quickButtonP2.gameObject);
GameObject.Destroy(xslider.quickButtonP3.gameObject);
GameObject.Destroy(xslider.quickButtonP4.gameObject);
xslider.slider.handleRect.transform.GetComponent<Image>().color=Color.clear;

if(zslider!=null){RemoveSlider(zslider);}
JSONStorableFloat zfloat = new JSONStorableFloat("zscalez", 0, zscaler, 0, 360);
zslider = CreateSliderui(zfloat);
zslider.transform.SetParent(atomhud.transform,false);
zslider.transform.Find("Slider").GetComponent<Image>().color = new Color(0.1f,0.12f,0.13f,0.5f);
zslider.sliderValueTextFromFloat.UIInputField.textComponent.fontSize=18;
zslider.sliderValueTextFromFloat.UIInputField.readOnly=true;
GameObject.Destroy(zslider.sliderValueTextFromFloat.gameObject);
zslider.slider.fillRect.GetComponent<Image>().color=Color.white;
zslider.quickButtonsEnabled = false;
zslider.rangeAdjustEnabled = false;
zslider.defaultButtonEnabled = false;
zslider.slider.wholeNumbers = false;
GameObject.Destroy(zslider.quickButtonsGroup.gameObject);
//GameObject.Destroy(zslider.defaultButton.gameObject);
GameObject.Destroy(zslider.rangeAdjustGroup.gameObject);
GameObject.Destroy(zslider.labelText.gameObject);
GameObject.Destroy(zslider.quickButtonM1.gameObject);
GameObject.Destroy(zslider.quickButtonM2.gameObject);
GameObject.Destroy(zslider.quickButtonM3.gameObject);
GameObject.Destroy(zslider.quickButtonM4.gameObject);
GameObject.Destroy(zslider.quickButtonP1.gameObject);
GameObject.Destroy(zslider.quickButtonP2.gameObject);
GameObject.Destroy(zslider.quickButtonP3.gameObject);
GameObject.Destroy(zslider.quickButtonP4.gameObject);
zslider.slider.handleRect.transform.GetComponent<Image>().color=Color.clear;

			gmlockrbutton=newbutton(atomhud.transform,() => {

			if(rsa.mainController.xRotLock && rsa.mainController.yRotLock && rsa.mainController.zRotLock){
			gmlockrbutton.textColor=Color.gray;	
			rsa.mainController.xRotLock=false;
			rsa.mainController.yRotLock=false;
			rsa.mainController.zRotLock=false;			
			}else{
			gmlockrbutton.textColor=modelcolorlight;	
			rsa.mainController.xRotLock=true;
			rsa.mainController.yRotLock=true;
			rsa.mainController.zRotLock=true;		
			}
			
				},"R",-32,40,0,0);
			gmlockrbutton.buttonText.fontSize=24;
			gmlockrbutton.buttonColor=hudslidecolor;
			gmlockrbutton.textColor=Color.white;	
			
			gmlockxbutton=newbutton(atomhud.transform,() => {
			
			if(rsa.mainController.xLock){
			gmlockxbutton.textColor=Color.gray;	
			rsa.mainController.xLock=false;
			}else{
			gmlockxbutton.textColor=modelcolorlight;	
			rsa.mainController.xLock=true;
			}			
			
			},"X",-32,40,0,0);
			gmlockxbutton.buttonText.fontSize=24;
			gmlockxbutton.buttonColor=hudslidecolor;
			gmlockxbutton.textColor=Color.white;	

			gmlockybutton=newbutton(atomhud.transform,() => {
			if(rsa.mainController.yLock){
			gmlockybutton.textColor=Color.gray;	
			rsa.mainController.yLock=false;
			}else{
			gmlockybutton.textColor=modelcolorlight;	
			rsa.mainController.yLock=true;
			}	
			},"Y",-32,40,0,0);
			gmlockybutton.buttonText.fontSize=24;
			gmlockybutton.buttonColor=hudslidecolor;
			gmlockybutton.textColor=Color.white;	

			gmlockzbutton=newbutton(atomhud.transform,() => {
			if(rsa.mainController.zLock){
			gmlockzbutton.textColor=Color.gray;	
			rsa.mainController.zLock=false;
			}else{
			gmlockzbutton.textColor=modelcolorlight;	
			rsa.mainController.zLock=true;
			}	
			},"Z",-32,40,0,0);
			gmlockzbutton.buttonText.fontSize=24;
			gmlockzbutton.buttonColor=hudslidecolor;
			gmlockzbutton.textColor=Color.white;

			gmcopybutton=newbutton(atomhud.transform,() => {
			copypos=rsa.mainController.transform.position;
			},"COPY POS",46,40,0,0);
			gmcopybutton.buttonText.fontSize=24;
			gmcopybutton.buttonColor=hudslidecolor;
			gmcopybutton.textColor=Color.white;

			gmpastebutton=newbutton(atomhud.transform,() => {
			StartCoroutine(pastepos(rsa));
			},"PASTE > POS",96,40,0,0);
			gmpastebutton.buttonText.fontSize=24;
			gmpastebutton.buttonColor=hudslidecolor;
			gmpastebutton.textColor=Color.white;

			gmpastexbutton=newbutton(atomhud.transform,() => {
			StartCoroutine(pastepos(rsa,"X"));	
			},">X",-32,40,0,0);
			gmpastexbutton.buttonText.fontSize=24;
			gmpastexbutton.buttonColor=hudslidecolor;
			gmpastexbutton.textColor=Color.white;	

			gmpasteybutton=newbutton(atomhud.transform,() => {
			StartCoroutine(pastepos(rsa,"Y"));		
			},">Y",-32,40,0,0);
			gmpasteybutton.buttonText.fontSize=24;
			gmpasteybutton.buttonColor=hudslidecolor;
			gmpasteybutton.textColor=Color.white;

			gmpastezbutton=newbutton(atomhud.transform,() => {
			StartCoroutine(pastepos(rsa,"Z"));		
			},">Z",-32,40,0,0);
			gmpastezbutton.buttonText.fontSize=24;
			gmpastezbutton.buttonColor=hudslidecolor;
			gmpastezbutton.textColor=Color.white;				

				
			godbutton=newbutton(atomhud.transform,() => {
			lastscale=Time.realtimeSinceStartup;
			scaling=true;
			gmbuttons(!godmode);
			saveini();
			},"|||",-32,54,17,-10);
			godbutton.buttonText.alignment = TextAnchor.MiddleCenter;
			godbutton.buttonText.fontSize=40;
			godbutton.buttonColor=modelcolorlight;
			godbutton.textColor=Color.white;

			godbutton2=newbutton(atomhud.transform,() => {
			lastscale=Time.realtimeSinceStartup;
			pboxon=false;
			StartCoroutine(removepbox(false));
			scaling=true;
			gmbuttons(false);
			saveini();
			},"",-32,54,17,-10);
			godbutton2.buttonText.alignment = TextAnchor.MiddleCenter;
			godbutton2.buttonText.fontSize=40;
			godbutton2.buttonColor=modelcolorlight;
			godbutton2.textColor=Color.white;					

				texturepaste=setbutton(ui,() => {
					if(!people){Result("ADD A MODEL FIRST");return;}
					StartCoroutine(realskin(_person,mode:"paste",bodypart:"",layer:""));
					_person.GetStorableByID("skin").RestoreAllFromStore3();
					Result("Texture applied");
				},"Paste texture",117f,59f,268f,214f);
                texturepaste.buttonColor = pastetexturecolor;
                texturepaste.textColor = new Color(0.8f, 0.9f, 1f);
                texturepaste.buttonText.fontStyle = FontStyle.Bold;
                texturepaste.buttonText.fontSize = 28;
			
			gmcopytbutton=newbutton(atomhud.transform,() => {
			StartCoroutine(realskin(rsa,mode:"copy"));
			rsa.GetStorableByID("skin").SaveToStore3();
			},"COPY TEXTURE",96,44,0,0);
			gmcopytbutton.buttonText.alignment = TextAnchor.MiddleCenter;
			gmcopytbutton.buttonText.fontSize=24;
			gmcopytbutton.buttonColor=modelcolorlight;
			gmcopytbutton.textColor=Color.white;

			gmpastetbutton=newbutton(atomhud.transform,() => {
			rsa.GetStorableByID("skin").RestoreAllFromStore3();
			StartCoroutine(realskin(rsa,mode:"paste",bodypart:"",layer:""));
			},"PASTE TEXTURE",105,44,0,0);
			gmpastetbutton.buttonText.alignment = TextAnchor.MiddleCenter;
			gmpastetbutton.buttonText.fontSize=24;
			gmpastetbutton.buttonColor=modelcolorlight;
			gmpastetbutton.textColor=Color.white;

			
			scalebutton=newbutton(atomhud.transform,() => {
			atomscale(100);
			},"1:1",-32,54,0,0);
			scalebutton.buttonText.fontSize=26;
			scalebutton.buttonColor=hudslidecolor;
			scalebutton.textColor=Color.white;

			gmonbutton=newbutton(atomhud.transform,() => {
			rsa.SetOn(!rsa.on);
			gmonbutton.textColor=new Color(0.21f,0.22f,0.24f);
			if(rsa.on){gmonbutton.textColor=Color.white;}	
			},"ON",-32,54,0,0);
			gmonbutton.buttonText.fontSize=26;
			gmonbutton.buttonColor=hudslidecolor;
			gmonbutton.textColor=Color.white;
			
			gmhidebutton=newbutton(atomhud.transform,() => {
			rsa.hidden=!rsa.hidden;
			gmhidebutton.textColor=new Color(0.21f,0.22f,0.24f);
			if(rsa.hidden){gmhidebutton.textColor=Color.white;}	
			},"H",-32,54,0,0);
			gmhidebutton.buttonText.fontSize=26;
			gmhidebutton.buttonColor=hudslidecolor;
			gmhidebutton.textColor=Color.white;				
			

			gmcolbutton=newbutton(atomhud.transform,() => {
			rsa.collisionEnabled=!rsa.collisionEnabled;
			gmcolbutton.textColor=new Color(0.21f,0.22f,0.24f);
			if(rsa.collisionEnabled){gmcolbutton.textColor=Color.white;}	
			},"C",-32,54,0,0);
			gmcolbutton.buttonText.fontSize=26;
			gmcolbutton.buttonColor=hudslidecolor;
			gmcolbutton.textColor=Color.white;	
			
			gmclonebutton=newbutton(atomhud.transform,() => {
			rsold="";lastscale=Time.realtimeSinceStartup-2;scaling=false;
			//echo24(rsa.mainController.transform.position.ToString());
			StartCoroutine(cloneatom(rsa,pos:rsa.mainController.transform));
			},"+",-32,54,0,0);
			gmclonebutton.buttonText.fontSize=38;
			gmclonebutton.buttonColor=hudslidecolor;
			gmclonebutton.textColor=new Color(0.51f,1f,0.70f);
			
			gmdelbutton=newbutton(atomhud.transform,() => {
			rsold="";lastscale=Time.realtimeSinceStartup-2;scaling=false;
			SuperController.singleton.RemoveAtom(rsa);
			},"X",-32,54,0,0);
			gmdelbutton.buttonText.fontSize=26;
			gmdelbutton.buttonColor=hudslidecolor;
			gmdelbutton.textColor=new Color(0.81f,0.5f,0.14f);

			gmtelbutton=newbutton(atomhud.transform,() => {
			rsold="";lastscale=Time.realtimeSinceStartup-2;scaling=false;
			teleport(rsa);
			},"<",-32,54,0,0);
			gmtelbutton.buttonText.fontSize=26;
			gmtelbutton.buttonColor=hudslidecolor;
			gmtelbutton.textColor=new Color(0.2f,0.7f,1f);					
			
			gmmovebutton=newbutton(atomhud.transform,() => {
			rsold="";lastscale=Time.realtimeSinceStartup-2;scaling=false;
			movehere(rsa);
			},"<",-32,54,0,0);
			gmmovebutton.buttonText.fontSize=26;
			gmmovebutton.buttonColor=hudslidecolor;
			gmmovebutton.textColor=new Color(0.2f,0.7f,1f);				
			
			gmrealbutton=newbutton(atomhud.transform,() => {
			StartCoroutine(realskin(rsa,skinfile:realskinfile,safe:true));
			},"RealSKIN™",46,44,0,0);
			gmrealbutton.buttonText.alignment = TextAnchor.MiddleCenter;
			gmrealbutton.buttonText.fontSize=24;
			gmrealbutton.buttonColor=modelcolorlight;
			gmrealbutton.textColor=Color.white;
			
scaleslider.gameObject.SetActive(false);
xslider.gameObject.SetActive(false);
yslider.gameObject.SetActive(false);
zslider.gameObject.SetActive(false);
gmlockrbutton.gameObject.SetActive(false);
gmlockxbutton.gameObject.SetActive(false);
gmlockybutton.gameObject.SetActive(false);
gmlockzbutton.gameObject.SetActive(false);godbutton2.gameObject.SetActive(false);
gmcopybutton.gameObject.SetActive(false);
gmpastebutton.gameObject.SetActive(false);
gmpastexbutton.gameObject.SetActive(false);
gmpasteybutton.gameObject.SetActive(false);
gmpastezbutton.gameObject.SetActive(false);
gmrealbutton.gameObject.SetActive(false);
gmcopytbutton.gameObject.SetActive(false);
gmpastetbutton.gameObject.SetActive(false);
xnudgeslider.gameObject.SetActive(false);
ynudgeslider.gameObject.SetActive(false);
znudgeslider.gameObject.SetActive(false);


float ybshift=-308f;float yshift=238f;float slidex=-104;float sspace=-39;float sy=-8;float slidew=292f;float zdepth=0;float ydepth=-10;float xshift=68;float ybshift2=-341f;

transui2(scaleslider.transform,slidew,-8);			
transui2(xslider.transform,slidew,-8);			
transui2(yslider.transform,slidew,-8);			
transui2(zslider.transform,slidew,-8);		
transui2(xnudgeslider.transform,slidew,-8);		
transui2(ynudgeslider.transform,slidew,-8);		
transui2(znudgeslider.transform,slidew,-8);		

scaleslider.transform.localPosition=new Vector3(slidex+yshift,sy+sspace+ydepth,zdepth);
xslider.transform.localPosition=new Vector3(slidex+yshift,sy+(sspace*2)+ydepth,zdepth);
yslider.transform.localPosition=new Vector3(slidex+yshift,sy+(sspace*3)+ydepth,zdepth);
zslider.transform.localPosition=new Vector3(slidex+yshift,sy+(sspace*4)+ydepth,zdepth);
xnudgeslider.transform.localPosition=new Vector3(0-(4+slidex+yshift),sy+(sspace)+ydepth,zdepth);
ynudgeslider.transform.localPosition=new Vector3(0-(4+slidex+yshift),sy+(sspace*2)+ydepth,zdepth);
znudgeslider.transform.localPosition=new Vector3(0-(4+slidex+yshift),sy+(sspace*3)+ydepth,zdepth);
scalebutton.transform.localPosition=new Vector3((ybshift)+(xshift*8),54+ydepth,zdepth);			
gmonbutton.transform.localPosition=new Vector3((ybshift)+(xshift*7),54+ydepth,zdepth);	
gmcolbutton.transform.localPosition=new Vector3((ybshift)+(xshift*6),54+ydepth,zdepth);
gmhidebutton.transform.localPosition=new Vector3((ybshift)+(xshift*5),54+ydepth,zdepth);
gmtelbutton.transform.localPosition=new Vector3((ybshift)+(xshift*4),54+ydepth,zdepth);
gmmovebutton.transform.localPosition=new Vector3((ybshift)+(xshift*3),54+ydepth,zdepth);
gmclonebutton.transform.localPosition=new Vector3((ybshift)+(xshift*2),54+ydepth,zdepth);	
gmdelbutton.transform.localPosition=new Vector3((ybshift)+(xshift*1),54+ydepth,zdepth);	
gmlockrbutton.transform.localPosition=new Vector3((ybshift)+(xshift*4),-110+ydepth,zdepth);	
gmlockxbutton.transform.localPosition=new Vector3((ybshift)+(xshift*3),-110+ydepth,zdepth);	
gmlockybutton.transform.localPosition=new Vector3((ybshift)+(xshift*2),-110+ydepth,zdepth);	
gmlockzbutton.transform.localPosition=new Vector3((ybshift)+(xshift),-110+ydepth,zdepth);	
gmcopybutton.transform.localPosition=new Vector3((ybshift2)+(xshift*8)-5,-149+ydepth,zdepth);	
gmpastebutton.transform.localPosition=new Vector3((ybshift2)+(xshift*5)+29,-149+ydepth,zdepth);	
gmpastexbutton.transform.localPosition=new Vector3((ybshift)+(xshift*3),-149+ydepth,zdepth);	
gmpasteybutton.transform.localPosition=new Vector3((ybshift)+(xshift*2),-149+ydepth,zdepth);	
gmpastezbutton.transform.localPosition=new Vector3((ybshift)+(xshift*1),-149+ydepth,zdepth);	
gmrealbutton.transform.localPosition=new Vector3((ybshift)+(xshift*8)-38,-191+ydepth,zdepth);	
gmcopytbutton.transform.localPosition=new Vector3((ybshift)+(xshift*6)-72,-191+ydepth,zdepth);	
gmpastetbutton.transform.localPosition=new Vector3((ybshift)+(xshift*3)-68,-191+ydepth,zdepth);	

		
scaleslider.transform.localEulerAngles=new Vector3(0,180,0);
xslider.transform.localEulerAngles=new Vector3(0,180,0);
yslider.transform.localEulerAngles=new Vector3(0,180,0);
zslider.transform.localEulerAngles=new Vector3(0,180,0);
xnudgeslider.transform.localEulerAngles=new Vector3(0,180,0);
ynudgeslider.transform.localEulerAngles=new Vector3(0,180,0);
znudgeslider.transform.localEulerAngles=new Vector3(0,180,0);
gmbutton.transform.localEulerAngles=new Vector3(0,180,0);
scalebutton.transform.localEulerAngles=new Vector3(0,180,0);
gmcolbutton.transform.localEulerAngles=new Vector3(0,180,0);
gmonbutton.transform.localEulerAngles=new Vector3(0,180,0);
gmhidebutton.transform.localEulerAngles=new Vector3(0,180,0);
gmtelbutton.transform.localEulerAngles=new Vector3(0,180,0);
gmmovebutton.transform.localEulerAngles=new Vector3(0,180,0);
gmclonebutton.transform.localEulerAngles=new Vector3(0,180,0);
gmdelbutton.transform.localEulerAngles=new Vector3(0,180,0);
gmlockrbutton.transform.localEulerAngles=new Vector3(0,180,0);
gmlockxbutton.transform.localEulerAngles=new Vector3(0,180,0);
gmlockybutton.transform.localEulerAngles=new Vector3(0,180,0);
gmlockzbutton.transform.localEulerAngles=new Vector3(0,180,0);
gmcopybutton.transform.localEulerAngles=new Vector3(0,180,0);
gmpastebutton.transform.localEulerAngles=new Vector3(0,180,0);
gmpastexbutton.transform.localEulerAngles=new Vector3(0,180,0);
gmpasteybutton.transform.localEulerAngles=new Vector3(0,180,0);
gmpastezbutton.transform.localEulerAngles=new Vector3(0,180,0);
godbutton.transform.localEulerAngles=new Vector3(0,180,0);
godbutton2.transform.localEulerAngles=new Vector3(0,180,0);
gmrealbutton.transform.localEulerAngles=new Vector3(0,180,0);
gmcopytbutton.transform.localEulerAngles=new Vector3(0,180,0);
gmpastetbutton.transform.localEulerAngles=new Vector3(0,180,0);

gmtelbutton.gameObject.GetComponentInChildren<Text>().transform.localEulerAngles=new Vector3(0,0,-90);
gmmovebutton.gameObject.GetComponentInChildren<Text>().transform.localEulerAngles=new Vector3(0,0,90);
godbutton.gameObject.GetComponentInChildren<Text>().transform.localEulerAngles=new Vector3(0,0,90);
godbutton2.gameObject.GetComponentInChildren<Text>().transform.localEulerAngles=new Vector3(0,0,90);
godbutton.gameObject.GetComponentInChildren<Text>().transform.localPosition=new Vector3(-3,0,0);
godbutton2.gameObject.GetComponentInChildren<Text>().transform.localPosition=new Vector3(-3,0,0);


if(Rslider!=null){RemoveSlider(Rslider);}

JSONStorableFloat Rfloat = new JSONStorableFloat("R", 0f, rgbscaler, -0.1f, 1);
Rslider = CreateSliderui(Rfloat);
Rslider.slider.wholeNumbers = false;
Rslider.transform.SetParent(lowHUD.transform,false);
transui2(Rslider.transform,288,-8,-525+26.5f+hf,-377+hy);
scaler(Rslider.transform.Find("Slider").GetComponent<Transform>(),301.5f+hx,34);

Rslider.transform.Find("Slider").GetComponent<Image>().color = new Color(0.2f,0,0,0.9f);
Rslider.sliderValueTextFromFloat.UIInputField.textComponent.fontSize=18;
Rslider.sliderValueTextFromFloat.UIInputField.readOnly=true;
GameObject.Destroy(Rslider.sliderValueTextFromFloat.gameObject);
Rslider.slider.fillRect.GetComponent<Image>().color=Color.red;
Rslider.quickButtonsEnabled = false;
Rslider.rangeAdjustEnabled = false;
Rslider.defaultButtonEnabled = false;
GameObject.Destroy(Rslider.quickButtonsGroup.gameObject);
GameObject.Destroy(Rslider.defaultButton.gameObject);
GameObject.Destroy(Rslider.rangeAdjustGroup.gameObject);
GameObject.Destroy(Rslider.labelText.gameObject);
GameObject.Destroy(Rslider.quickButtonM1.gameObject);
GameObject.Destroy(Rslider.quickButtonM2.gameObject);
GameObject.Destroy(Rslider.quickButtonM3.gameObject);
GameObject.Destroy(Rslider.quickButtonM4.gameObject);
GameObject.Destroy(Rslider.quickButtonP1.gameObject);
GameObject.Destroy(Rslider.quickButtonP2.gameObject);
GameObject.Destroy(Rslider.quickButtonP3.gameObject);
GameObject.Destroy(Rslider.quickButtonP4.gameObject);
Rslider.slider.handleRect.transform.GetComponent<Image>().color=Color.clear;


if(Gslider!=null){RemoveSlider(Gslider);}

JSONStorableFloat Gfloat = new JSONStorableFloat("G", -0f, rgbscaler, -0.1f, 1);
Gslider = CreateSliderui(Gfloat);
Gslider.slider.wholeNumbers = false;
Gslider.transform.SetParent(lowHUD.transform,false);
transui2(Gslider.transform,288,-8,-215+27+hf*3,-377+hy);
scaler(Gslider.transform.Find("Slider").GetComponent<Transform>(),304+hx,34);

Gslider.transform.Find("Slider").GetComponent<Image>().color =  new Color(0,0.2f,0,0.9f);
Gslider.sliderValueTextFromFloat.UIInputField.textComponent.fontSize=18;
Gslider.sliderValueTextFromFloat.UIInputField.readOnly=true;
GameObject.Destroy(Gslider.sliderValueTextFromFloat.gameObject);
//Gslider.slider.fillRect.transform.SetParent(hide.transform, false);
Gslider.slider.fillRect.GetComponent<Image>().color=Color.green;
Gslider.quickButtonsEnabled = false;
Gslider.rangeAdjustEnabled = false;
Gslider.defaultButtonEnabled = false;
GameObject.Destroy(Gslider.quickButtonsGroup.gameObject);
GameObject.Destroy(Gslider.defaultButton.gameObject);
GameObject.Destroy(Gslider.rangeAdjustGroup.gameObject);
GameObject.Destroy(Gslider.labelText.gameObject);
GameObject.Destroy(Gslider.quickButtonM1.gameObject);
GameObject.Destroy(Gslider.quickButtonM2.gameObject);
GameObject.Destroy(Gslider.quickButtonM3.gameObject);
GameObject.Destroy(Gslider.quickButtonM4.gameObject);
GameObject.Destroy(Gslider.quickButtonP1.gameObject);
GameObject.Destroy(Gslider.quickButtonP2.gameObject);
GameObject.Destroy(Gslider.quickButtonP3.gameObject);
GameObject.Destroy(Gslider.quickButtonP4.gameObject);
Gslider.slider.handleRect.transform.GetComponent<Image>().color=Color.clear;

if(Bslider!=null){RemoveSlider(Bslider);}

JSONStorableFloat Bfloat = new JSONStorableFloat("B", -0f, rgbscaler, -0.1f, 1);
Bslider = CreateSliderui(Bfloat);
Bslider.slider.wholeNumbers = false;
Bslider.transform.SetParent(lowHUD.transform,false);
transui2(Bslider.transform,288,-8,124+hf*5,-377+hy);
scaler(Bslider.transform.Find("Slider").GetComponent<Transform>(),304+hx,34);

Bslider.transform.Find("Slider").GetComponent<Image>().color =  new Color(0,0,0.2f,0.9f);
Bslider.sliderValueTextFromFloat.UIInputField.textComponent.fontSize=18;
Bslider.sliderValueTextFromFloat.UIInputField.readOnly=true;
GameObject.Destroy(Bslider.sliderValueTextFromFloat.gameObject);
//Bslider.slider.fillRect.transform.SetParent(hide.transform, false);
Bslider.slider.fillRect.GetComponent<Image>().color=Color.blue;
Bslider.quickButtonsEnabled = false;
Bslider.rangeAdjustEnabled = false;
Bslider.defaultButtonEnabled = false;
GameObject.Destroy(Bslider.quickButtonsGroup.gameObject);
GameObject.Destroy(Bslider.defaultButton.gameObject);
GameObject.Destroy(Bslider.rangeAdjustGroup.gameObject);
GameObject.Destroy(Bslider.labelText.gameObject);
GameObject.Destroy(Bslider.quickButtonM1.gameObject);
GameObject.Destroy(Bslider.quickButtonM2.gameObject);
GameObject.Destroy(Bslider.quickButtonM3.gameObject);
GameObject.Destroy(Bslider.quickButtonM4.gameObject);
GameObject.Destroy(Bslider.quickButtonP1.gameObject);
GameObject.Destroy(Bslider.quickButtonP2.gameObject);
GameObject.Destroy(Bslider.quickButtonP3.gameObject);
GameObject.Destroy(Bslider.quickButtonP4.gameObject);
Bslider.slider.handleRect.transform.GetComponent<Image>().color=Color.clear;

if(timeslider!=null){RemoveSlider(timeslider);}
float ts=timescale.value;
				timetext.text="TIME "+((ts*100).ToString()+".").Substring(0,((ts*100).ToString()+".").IndexOf("."))+"%";



JSONStorableFloat timefloat = new JSONStorableFloat("timeslide", ts, timescaler, 0, 1.001f);
timeslider = CreateSliderui(timefloat);
timeslider.transform.SetParent(lowHUD.transform,false);
transui2(timeslider.transform,288,-8,-215+hf*3,-337+hy);
scaler(timeslider.transform.Find("Slider").GetComponent<Transform>(),249+hx,34);

timeslider.transform.Find("Slider").GetComponent<Image>().color = hudslidecolor;
timeslider.sliderValueTextFromFloat.UIInputField.textComponent.fontSize=18;
timeslider.sliderValueTextFromFloat.UIInputField.readOnly=true;
GameObject.Destroy(timeslider.sliderValueTextFromFloat.gameObject);
timeslider.quickButtonsEnabled = false;
timeslider.rangeAdjustEnabled = false;
timeslider.defaultButtonEnabled = false;
timeslider.slider.wholeNumbers = false;
GameObject.Destroy(timeslider.quickButtonsGroup.gameObject);
GameObject.Destroy(timeslider.defaultButton.gameObject);
GameObject.Destroy(timeslider.rangeAdjustGroup.gameObject);
GameObject.Destroy(timeslider.labelText.gameObject);
GameObject.Destroy(timeslider.quickButtonM1.gameObject);
GameObject.Destroy(timeslider.quickButtonM2.gameObject);
GameObject.Destroy(timeslider.quickButtonM3.gameObject);
GameObject.Destroy(timeslider.quickButtonM4.gameObject);
GameObject.Destroy(timeslider.quickButtonP1.gameObject);
GameObject.Destroy(timeslider.quickButtonP2.gameObject);
GameObject.Destroy(timeslider.quickButtonP3.gameObject);
GameObject.Destroy(timeslider.quickButtonP4.gameObject);
timeslider.slider.handleRect.transform.GetComponent<Image>().color=Color.clear;
timeslider.slider.fillRect.transform.GetComponent<Image>().color=hudslidecolorlight;

if(fpsslider!=null){RemoveSlider(fpsslider);}
var phy =SuperController.singleton.GetAtomByUid("CoreControl").gameObject.GetComponent<UserPreferences>().physicsRate;
echo9(phy.ToString());
float fs=1;

var fpscap="Auto-3,Auto-2,Auto-1,45-3,45-2,45-1,60-3,60-2,60-1,72-3,72-2,72-1,90-3,90-2,90-1,120-3,120-2,120-1,144-3,144-2,144-1,240-3,240-2,240-1,288-3,288-2,288-1";
string[] fc=fpscap.Split(","[0]);
UserPreferences u=SuperController.singleton.GetAtomByUid("CoreControl").gameObject.GetComponent<UserPreferences>();
var match=u.physicsRate.ToString().Replace("_","")+"-"+u.physicsUpdateCap.ToString();
echo9(match);
float f=0;

foreach(string s in fc){if(match==s){fpstext.text="FPS "+s;break;}f++;}
setfps=f;
JSONStorableFloat fpsfloat = new JSONStorableFloat("fpsslide", 26-setfps, fpsscaler, 0, 26);
fpsslider = CreateSliderui(fpsfloat);
fpsslider.slider.wholeNumbers = true;
fpsslider.transform.SetParent(lowHUD.transform,false);
transui2(fpsslider.transform,288,-8, 124+hf*5,-337+hy);
scaler(fpsslider.transform.Find("Slider").GetComponent<Transform>(),304+hx,34);

fpsslider.transform.Find("Slider").GetComponent<Image>().color = hudslidecolor;
fpsslider.sliderValueTextFromFloat.UIInputField.textComponent.fontSize=18;
fpsslider.sliderValueTextFromFloat.UIInputField.readOnly=true;
GameObject.Destroy(fpsslider.sliderValueTextFromFloat.gameObject);
//fpsslider.slider.fillRect.transform.SetParent(hide.transform, false);
fpsslider.quickButtonsEnabled = false;
fpsslider.rangeAdjustEnabled = false;
fpsslider.defaultButtonEnabled = false;
GameObject.Destroy(fpsslider.quickButtonsGroup.gameObject);
GameObject.Destroy(fpsslider.defaultButton.gameObject);
GameObject.Destroy(fpsslider.rangeAdjustGroup.gameObject);
GameObject.Destroy(fpsslider.labelText.gameObject);
GameObject.Destroy(fpsslider.quickButtonM1.gameObject);
GameObject.Destroy(fpsslider.quickButtonM2.gameObject);
GameObject.Destroy(fpsslider.quickButtonM3.gameObject);
GameObject.Destroy(fpsslider.quickButtonM4.gameObject);
GameObject.Destroy(fpsslider.quickButtonP1.gameObject);
GameObject.Destroy(fpsslider.quickButtonP2.gameObject);
GameObject.Destroy(fpsslider.quickButtonP3.gameObject);
GameObject.Destroy(fpsslider.quickButtonP4.gameObject);
fpsslider.slider.handleRect.transform.GetComponent<Image>().color=Color.clear;
fpsslider.slider.fillRect.transform.GetComponent<Image>().color=hudslidecolorlight;

if(uisizeslider!=null){RemoveSlider(uisizeslider);}

JSONStorableFloat uifloat = new JSONStorableFloat("uislide", 100, uiscaler, 70f, 130f);
uisizeslider = CreateSliderui(uifloat);
uisizeslider.slider.wholeNumbers = true;
uisizeslider.transform.SetParent(lowHUD.transform,false);
transui2(uisizeslider.transform,288,-8, 437+hf*7,-377+hy);
scaler(uisizeslider.transform.Find("Slider").GetComponent<Transform>(),304+hx,34);

uisizeslider.transform.Find("Slider").GetComponent<Image>().color = hudslidecolor;
uisizeslider.sliderValueTextFromFloat.UIInputField.textComponent.fontSize=18;
uisizeslider.sliderValueTextFromFloat.UIInputField.readOnly=true;
GameObject.Destroy(uisizeslider.sliderValueTextFromFloat.gameObject);
//uisizeslider.slider.fillRect.transform.SetParent(hide.transform, false);
uisizeslider.quickButtonsEnabled = false;
uisizeslider.rangeAdjustEnabled = false;
uisizeslider.defaultButtonEnabled = false;
GameObject.Destroy(uisizeslider.quickButtonsGroup.gameObject);
GameObject.Destroy(uisizeslider.defaultButton.gameObject);
GameObject.Destroy(uisizeslider.rangeAdjustGroup.gameObject);
GameObject.Destroy(uisizeslider.labelText.gameObject);
GameObject.Destroy(uisizeslider.quickButtonM1.gameObject);
GameObject.Destroy(uisizeslider.quickButtonM2.gameObject);
GameObject.Destroy(uisizeslider.quickButtonM3.gameObject);
GameObject.Destroy(uisizeslider.quickButtonM4.gameObject);
GameObject.Destroy(uisizeslider.quickButtonP1.gameObject);
GameObject.Destroy(uisizeslider.quickButtonP2.gameObject);
GameObject.Destroy(uisizeslider.quickButtonP3.gameObject);
GameObject.Destroy(uisizeslider.quickButtonP4.gameObject);
uisizeslider.slider.handleRect.transform.GetComponent<Image>().color=Color.clear;
uisizeslider.slider.fillRect.transform.GetComponent<Image>().color=hudslidecolorlight;


if(fovslider!=null){RemoveSlider(fovslider);}

JSONStorableFloat fovfloat = new JSONStorableFloat("fovslide", fovlock, fovscaler, 0, 11);
fovslider = CreateSliderui(fovfloat);
fovslider.slider.wholeNumbers = true;
fovslider.transform.SetParent(lowHUD.transform,false);
transui2(fovslider.transform,288,-8, 437+hf*7,-337+hy);
scaler(fovslider.transform.Find("Slider").GetComponent<Transform>(),304+hx,34);

fovslider.transform.Find("Slider").GetComponent<Image>().color = hudslidecolor;
fovslider.sliderValueTextFromFloat.UIInputField.textComponent.fontSize=18;
fovslider.sliderValueTextFromFloat.UIInputField.readOnly=true;
GameObject.Destroy(fovslider.sliderValueTextFromFloat.gameObject);
//fovslider.slider.fillRect.transform.SetParent(hide.transform, false);
fovslider.quickButtonsEnabled = false;
fovslider.rangeAdjustEnabled = false;
fovslider.defaultButtonEnabled = false;
GameObject.Destroy(fovslider.quickButtonsGroup.gameObject);
GameObject.Destroy(fovslider.defaultButton.gameObject);
GameObject.Destroy(fovslider.rangeAdjustGroup.gameObject);
GameObject.Destroy(fovslider.labelText.gameObject);
GameObject.Destroy(fovslider.quickButtonM1.gameObject);
GameObject.Destroy(fovslider.quickButtonM2.gameObject);
GameObject.Destroy(fovslider.quickButtonM3.gameObject);
GameObject.Destroy(fovslider.quickButtonM4.gameObject);
GameObject.Destroy(fovslider.quickButtonP1.gameObject);
GameObject.Destroy(fovslider.quickButtonP2.gameObject);
GameObject.Destroy(fovslider.quickButtonP3.gameObject);
GameObject.Destroy(fovslider.quickButtonP4.gameObject);
fovslider.slider.handleRect.transform.GetComponent<Image>().color=Color.clear;
fovslider.slider.fillRect.transform.GetComponent<Image>().color=hudslidecolorlight;


if(speedslider!=null){RemoveSlider(speedslider);}
float speed=((SuperController.singleton.freeMoveMultiplier/2)*101/(((SuperController.singleton.freeMoveMultiplier/2)+1)));
speedtext.text="MOVE "+((SuperController.singleton.freeMoveMultiplier.ToString()+"     ").Substring(0,5));
JSONStorableFloat speedfloat = new JSONStorableFloat("speedslide", speed, speedscaler, 0, 100);
speedslider = CreateSliderui(speedfloat);
speedslider.slider.wholeNumbers = false;
speedslider.transform.SetParent(lowHUD.transform,false);
transui2(speedslider.transform,288,-8, 437+hf*7,-377+hy);
scaler(speedslider.transform.Find("Slider").GetComponent<Transform>(),304+hx,34);
speedslider.transform.Find("Slider").GetComponent<Image>().color = hudslidecolor;
speedslider.sliderValueTextFromFloat.UIInputField.textComponent.fontSize=18;
speedslider.sliderValueTextFromFloat.UIInputField.readOnly=true;
GameObject.Destroy(speedslider.sliderValueTextFromFloat.gameObject);
//speedslider.slider.fillRect.transform.SetParent(hide.transform, false);
speedslider.quickButtonsEnabled = false;
speedslider.rangeAdjustEnabled = false;
speedslider.defaultButtonEnabled = false;
GameObject.Destroy(speedslider.quickButtonsGroup.gameObject);
GameObject.Destroy(speedslider.defaultButton.gameObject);
GameObject.Destroy(speedslider.rangeAdjustGroup.gameObject);
GameObject.Destroy(speedslider.labelText.gameObject);
GameObject.Destroy(speedslider.quickButtonM1.gameObject);
GameObject.Destroy(speedslider.quickButtonM2.gameObject);
GameObject.Destroy(speedslider.quickButtonM3.gameObject);
GameObject.Destroy(speedslider.quickButtonM4.gameObject);
GameObject.Destroy(speedslider.quickButtonP1.gameObject);
GameObject.Destroy(speedslider.quickButtonP2.gameObject);
GameObject.Destroy(speedslider.quickButtonP3.gameObject);
GameObject.Destroy(speedslider.quickButtonP4.gameObject);
speedslider.slider.handleRect.transform.GetComponent<Image>().color=Color.clear;
speedslider.slider.fillRect.transform.GetComponent<Image>().color=hudslidecolorlight;

if(qualityslider!=null){RemoveSlider(qualityslider);}

int qladd=0;
var ql=u.shaderLOD.ToString();
if(ql=="Medium"){qladd=5;}
else if(ql=="High"){qladd=10;}
qualitytext.text="QL "+ql.ToUpper()+"-"+u.smoothPasses.ToString();
JSONStorableFloat qualityfloat = new JSONStorableFloat("qualityslide", u.smoothPasses+qladd, qualityscaler, 0, 14);
qualityslider = CreateSliderui(qualityfloat);
qualityslider.slider.wholeNumbers = true;
qualityslider.transform.SetParent(lowHUD.transform,false);
transui2(qualityslider.transform,288,-8, 437+hf*7,-337+hy);
scaler(qualityslider.transform.Find("Slider").GetComponent<Transform>(),304+hx,34);
qualityslider.transform.Find("Slider").GetComponent<Image>().color = hudslidecolor;
qualityslider.sliderValueTextFromFloat.UIInputField.textComponent.fontSize=18;
qualityslider.sliderValueTextFromFloat.UIInputField.readOnly=true;
GameObject.Destroy(qualityslider.sliderValueTextFromFloat.gameObject);
//qualityslider.slider.fillRect.transform.SetParent(hide.transform, false);
qualityslider.quickButtonsEnabled = false;
qualityslider.rangeAdjustEnabled = false;
qualityslider.defaultButtonEnabled = false;
GameObject.Destroy(qualityslider.quickButtonsGroup.gameObject);
GameObject.Destroy(qualityslider.defaultButton.gameObject);
GameObject.Destroy(qualityslider.rangeAdjustGroup.gameObject);
GameObject.Destroy(qualityslider.labelText.gameObject);
GameObject.Destroy(qualityslider.quickButtonM1.gameObject);
GameObject.Destroy(qualityslider.quickButtonM2.gameObject);
GameObject.Destroy(qualityslider.quickButtonM3.gameObject);
GameObject.Destroy(qualityslider.quickButtonM4.gameObject);
GameObject.Destroy(qualityslider.quickButtonP1.gameObject);
GameObject.Destroy(qualityslider.quickButtonP2.gameObject);
GameObject.Destroy(qualityslider.quickButtonP3.gameObject);
GameObject.Destroy(qualityslider.quickButtonP4.gameObject);
qualityslider.slider.handleRect.transform.GetComponent<Image>().color=Color.clear;
qualityslider.slider.fillRect.transform.GetComponent<Image>().color=hudslidecolorlight;



			EventTrigger.Entry scaledown = new EventTrigger.Entry();
    		scaledown.eventID = EventTriggerType.PointerDown;
			scaledown.callback.AddListener((eventDatasub) => {
			rsrot=rsa.mainController.transform.eulerAngles;
			rsnudge=rsa.mainController.transform.position;
			StartCoroutine(freezeatom(rsa));
			//echo24(rsnudge.ToString());
			xnudgeslider.slider.value=0;
			ynudgeslider.slider.value=0;
			znudgeslider.slider.value=0;
			godslide=true;
			StartCoroutine(setgod());			
			});
			
			EventTrigger.Entry scaledown2 = new EventTrigger.Entry();
    		scaledown2.eventID = EventTriggerType.PointerDown;
			scaledown2.callback.AddListener((eventDatasub) => {
			if(rsa.type=="Person"){SuperController.singleton.pauseAutoSimulation=true;}
			rsrot=rsa.mainController.transform.eulerAngles;
			rsnudge=rsa.mainController.transform.position;
			xnudgeslider.slider.value=0;
			ynudgeslider.slider.value=0;
			znudgeslider.slider.value=0;
			godslide=true;
			StartCoroutine(setgod());			
			});			
			
			EventTrigger.Entry scaleup = new EventTrigger.Entry();
    		scaleup.eventID = EventTriggerType.PointerUp;
			scaleup.callback.AddListener((eventDatasub) => {
			godslide=false;	
			godslidex=false;
			if(rsa.type=="Person"){SuperController.singleton.pauseAutoSimulation=false;}
			xnudgeslider.slider.value=0;
			xslider.slider.value=rsa.mainController.transform.eulerAngles.x;
			yslider.slider.value=rsa.mainController.transform.eulerAngles.y;
			zslider.slider.value=rsa.mainController.transform.eulerAngles.z;
			StartCoroutine(unfreezeatom(rsa));
			xnudgeslider.slider.value=0;
			ynudgeslider.slider.value=0;
			znudgeslider.slider.value=0;

				if(!scaleron){
				pboxon=false;
				StartCoroutine(removepbox(true,delay:0.1f));
				//echo20("not scaling");
				StartCoroutine(unscaler());}			
			});


			EventTrigger.Entry gmcolbuttonenter = new EventTrigger.Entry();gmcolbuttonenter.eventID = EventTriggerType.PointerEnter;
			gmcolbuttonenter.callback.AddListener((eventDatasub) => {
			submenu(gmdelbutton.transform,"collision","tip",prefx:"",spacing:30,nosub:true,h:30,w:10,offsety: -54,offsetx:16.6f);	
			});
			
			EventTrigger.Entry gmclonebuttonenter = new EventTrigger.Entry();gmclonebuttonenter.eventID = EventTriggerType.PointerEnter;
			gmclonebuttonenter.callback.AddListener((eventDatasub) => {
			submenu(gmdelbutton.transform,"clone","tip",prefx:"",spacing:30,nosub:true,h:30,w:-10,offsety: -54,offsetx:16.6f);	
			});
		
			EventTrigger.Entry gmtelbuttonenter = new EventTrigger.Entry();gmtelbuttonenter.eventID = EventTriggerType.PointerEnter;
			gmtelbuttonenter.callback.AddListener((eventDatasub) => {
			submenu(gmdelbutton.transform,"teleport to","tip",prefx:"",spacing:30,nosub:true,h:30,w:30,offsety: -54,offsetx:16.6f);	
			});
					
			EventTrigger.Entry gmmovebuttonenter = new EventTrigger.Entry();gmmovebuttonenter.eventID = EventTriggerType.PointerEnter;
			gmmovebuttonenter.callback.AddListener((eventDatasub) => {
			submenu(gmdelbutton.transform,"move here","tip",prefx:"",spacing:30,nosub:true,h:30,w:30,offsety: -54,offsetx:16.6f);	
			});			
			
			EventTrigger.Entry gmonbuttonenter = new EventTrigger.Entry();gmonbuttonenter.eventID = EventTriggerType.PointerEnter;
			gmonbuttonenter.callback.AddListener((eventDatasub) => {
			submenu(gmdelbutton.transform,"turn on/off","tip",prefx:"",spacing:30,nosub:true,h:30,w:35,offsety: -54,offsetx:16.6f);	
			});

			EventTrigger.Entry gmdelbuttonenter = new EventTrigger.Entry();gmdelbuttonenter.eventID = EventTriggerType.PointerEnter;
			gmdelbuttonenter.callback.AddListener((eventDatasub) => {
			submenu(gmdelbutton.transform,"remove","tip",prefx:"",spacing:30,nosub:true,h:30,w:10,offsety: -54,offsetx:16.6f);	
			});

			EventTrigger.Entry gmhidebuttonenter = new EventTrigger.Entry();gmhidebuttonenter.eventID = EventTriggerType.PointerEnter;
			gmhidebuttonenter.callback.AddListener((eventDatasub) => {
			submenu(gmdelbutton.transform,"set hidden","tip",prefx:"",spacing:30,nosub:true,h:30,w:30,offsety: -54,offsetx:16.6f);	
			});
			
			EventTrigger.Entry scalebuttonenter = new EventTrigger.Entry();scalebuttonenter.eventID = EventTriggerType.PointerEnter;
			scalebuttonenter.callback.AddListener((eventDatasub) => {
			submenu(gmdelbutton.transform,"reset scale","tip",prefx:"",spacing:29,nosub:true,h:30,w:35,offsety: -53,offsetx:16.6f);
			});	
			
			EventTrigger.Entry scalesliderenter = new EventTrigger.Entry();scalesliderenter.eventID = EventTriggerType.PointerEnter;
			scalesliderenter.callback.AddListener((eventDatasub) => {
			submenu(gmdelbutton.transform,"adjust scale","tip",prefx:"",spacing:29,nosub:true,h:30,w:49,offsety: -53,offsetx:16.6f);
			});

			EventTrigger.Entry xsliderenter = new EventTrigger.Entry();xsliderenter.eventID = EventTriggerType.PointerEnter;
			xsliderenter.callback.AddListener((eventDatasub) => {
			submenu(gmdelbutton.transform,"rotate X","tip",prefx:"",spacing:29,nosub:true,h:30,w:49,offsety: -53,offsetx:16.6f);
			});	

			EventTrigger.Entry ysliderenter = new EventTrigger.Entry();ysliderenter.eventID = EventTriggerType.PointerEnter;
			ysliderenter.callback.AddListener((eventDatasub) => {
			submenu(gmdelbutton.transform,"rotate Y","tip",prefx:"",spacing:29,nosub:true,h:30,w:49,offsety: -53,offsetx:16.6f);	
			});

			EventTrigger.Entry zsliderenter = new EventTrigger.Entry();zsliderenter.eventID = EventTriggerType.PointerEnter;
			zsliderenter.callback.AddListener((eventDatasub) => {
			submenu(gmdelbutton.transform,"rotate Z","tip",prefx:"",spacing:29,nosub:true,h:30,w:49,offsety: -53,offsetx:16.6f);
			});

			EventTrigger.Entry xnudgeenter = new EventTrigger.Entry();xnudgeenter.eventID = EventTriggerType.PointerEnter;
			xnudgeenter.callback.AddListener((eventDatasub) => {
			submenu(gmdelbutton.transform,"nudge X","tip",prefx:"",spacing:29,nosub:true,h:30,w:49,offsety: -53,offsetx:16.6f);
			});			

			EventTrigger.Entry ynudgeenter = new EventTrigger.Entry();ynudgeenter.eventID = EventTriggerType.PointerEnter;
			ynudgeenter.callback.AddListener((eventDatasub) => {
			submenu(gmdelbutton.transform,"nudge Y","tip",prefx:"",spacing:29,nosub:true,h:30,w:49,offsety: -53,offsetx:16.6f);
			});

			EventTrigger.Entry znudgeenter = new EventTrigger.Entry();znudgeenter.eventID = EventTriggerType.PointerEnter;
			znudgeenter.callback.AddListener((eventDatasub) => {
			submenu(gmdelbutton.transform,"nudge Z","tip",prefx:"",spacing:29,nosub:true,h:30,w:49,offsety: -53,offsetx:16.6f);
			});

			EventTrigger.Entry gmlockrbuttonenter = new EventTrigger.Entry();gmlockrbuttonenter.eventID = EventTriggerType.PointerEnter;
			gmlockrbuttonenter.callback.AddListener((eventDatasub) => {
			submenu(gmdelbutton.transform,"lock rotation","tip",prefx:"",spacing:30,nosub:true,h:30,w:60,offsety: -54,offsetx:16.6f);	
			});

			EventTrigger.Entry gmlockxbuttonenter = new EventTrigger.Entry();gmlockxbuttonenter.eventID = EventTriggerType.PointerEnter;
			gmlockxbuttonenter.callback.AddListener((eventDatasub) => {
			submenu(gmdelbutton.transform,"lock X","tip",prefx:"",spacing:30,nosub:true,h:30,w:30,offsety: -54,offsetx:16.6f);	
			});	

			EventTrigger.Entry gmlockybuttonenter = new EventTrigger.Entry();gmlockybuttonenter.eventID = EventTriggerType.PointerEnter;
			gmlockybuttonenter.callback.AddListener((eventDatasub) => {
			submenu(gmdelbutton.transform,"lock Y","tip",prefx:"",spacing:30,nosub:true,h:30,w:30,offsety: -54,offsetx:16.6f);	
			});

			EventTrigger.Entry gmlockzbuttonenter = new EventTrigger.Entry();gmlockzbuttonenter.eventID = EventTriggerType.PointerEnter;
			gmlockzbuttonenter.callback.AddListener((eventDatasub) => {
			submenu(gmdelbutton.transform,"lock Z","tip",prefx:"",spacing:30,nosub:true,h:30,w:30,offsety: -54,offsetx:16.6f);	
			});

			EventTrigger.Entry gmpastebuttonenter = new EventTrigger.Entry();gmpastebuttonenter.eventID = EventTriggerType.PointerEnter;
			gmpastebuttonenter.callback.AddListener((eventDatasub) => {
			submenu(gmdelbutton.transform,"paste position","tip",prefx:"",spacing:30,nosub:true,h:30,w:70,offsety: -54,offsetx:16.6f);	
			});			

			EventTrigger.Entry gmcopybuttonenter = new EventTrigger.Entry();gmcopybuttonenter.eventID = EventTriggerType.PointerEnter;
			gmcopybuttonenter.callback.AddListener((eventDatasub) => {
			submenu(gmdelbutton.transform,"copy position","tip",prefx:"",spacing:30,nosub:true,h:30,w:60,offsety: -54,offsetx:16.6f);	
			});
			
			EventTrigger.Entry gmpastexbuttonenter = new EventTrigger.Entry();gmpastexbuttonenter.eventID = EventTriggerType.PointerEnter;
			gmpastexbuttonenter.callback.AddListener((eventDatasub) => {
			submenu(gmdelbutton.transform,"paste X position","tip",prefx:"",spacing:30,nosub:true,h:30,w:90,offsety: -54,offsetx:16.6f);	
			});			

			EventTrigger.Entry gmpasteybuttonenter = new EventTrigger.Entry();gmpasteybuttonenter.eventID = EventTriggerType.PointerEnter;
			gmpasteybuttonenter.callback.AddListener((eventDatasub) => {
			submenu(gmdelbutton.transform,"paste Y position","tip",prefx:"",spacing:30,nosub:true,h:30,w:90,offsety: -54,offsetx:16.6f);	
			});

			EventTrigger.Entry gmpastezbuttonenter = new EventTrigger.Entry();gmpastezbuttonenter.eventID = EventTriggerType.PointerEnter;
			gmpastezbuttonenter.callback.AddListener((eventDatasub) => {
			submenu(gmdelbutton.transform,"paste Z position","tip",prefx:"",spacing:30,nosub:true,h:30,w:90,offsety: -54,offsetx:16.6f);	
			});
			
			EventTrigger.Entry godbuttonenter = new EventTrigger.Entry();godbuttonenter.eventID = EventTriggerType.PointerEnter;
			godbuttonenter.callback.AddListener((eventDatasub) => {
			submenu(godbutton.transform, godmode.ToString().Replace("True","deactivate").Replace("False","activate")+" godmode","tip",prefx:"",spacing:30,nosub:true,h:30,w:130,offsety: -105.2f,offsetx:-223f);	
			});

			EventTrigger.Entry gmcopytbuttonenter = new EventTrigger.Entry();gmcopytbuttonenter.eventID = EventTriggerType.PointerEnter;
			gmcopytbuttonenter.callback.AddListener((eventDatasub) => {
			submenu(gmdelbutton.transform,"copy texture","tip",prefx:"",spacing:30,nosub:true,h:30,w:55,offsety: -54,offsetx:16.6f);	
			});		
			
			EventTrigger.Entry gmpastetbuttonenter = new EventTrigger.Entry();gmpastetbuttonenter.eventID = EventTriggerType.PointerEnter;
			gmpastetbuttonenter.callback.AddListener((eventDatasub) => {
			submenu(gmpastetbutton.transform,"paste texture\nfull body,all,diffuse,decal,normal,gloss,specular\nface,all,diffuse,decal,normal,gloss,specular\ntorso,all,diffuse,decal,normal,gloss,speculars\nlimbs,all,diffuse,decal,normal,gloss,specular\ngenitals,all,diffuse,decal,normal,gloss,specular","tip:sub",prefx:" ",spacing:0-34,nosub:true,h:30,w:55,offsety: 255f,offsetx:-51.2f,tiph:39,tipw:105,tipx:-52.5f,tipy:-40,suboffsetx:-68,suboffsety:-36);	
			});

			EventTrigger.Entry texturepasteenter = new EventTrigger.Entry();texturepasteenter.eventID = EventTriggerType.PointerEnter;
			texturepasteenter.callback.AddListener((eventDatasub) => {
			showbox="pastie";
					StartCoroutine(showmenu(showbox,t:texturepaste.transform,str:"apply RealSKIN™\nfull body,all,diffuse,decal,normal,gloss,specular\nface,all,diffuse,decal,normal,gloss,specular\ntorso,all,diffuse,decal,normal,gloss,speculars\nlimbs,all,diffuse,decal,normal,gloss,specular\ngenitals,all,diffuse,decal,normal,gloss,specular",mode:"atoms:tip",prefx:" ",nosub:true,h:43,subw:77,w:117,offsety: -59f,offsetx:-59,suboffsetx:51,suboffsety:-109,tx:hud.transform));	
			});
	
			EventTrigger.Entry texturepasteexit = new EventTrigger.Entry();texturepasteexit.eventID = EventTriggerType.PointerExit;
			texturepasteexit.callback.AddListener((eventDatasub) => {
					showbox="";
					helptip();
					pboxon=false;
					if(!fading){StartCoroutine(removepbox(false));}		
			});	
			
			EventTrigger.Entry gmrealenter = new EventTrigger.Entry();gmrealenter.eventID = EventTriggerType.PointerEnter;
			gmrealenter.callback.AddListener((eventDatasub) => {
			submenu(gmdelbutton.transform,"apply RealSKIN™","tip",prefx:"",spacing:30,nosub:true,h:30,w:110,offsety: -54,offsetx:16.6f);
			});				

			EventTrigger.Entry scaleenter2 = new EventTrigger.Entry();
    		scaleenter2.eventID = EventTriggerType.PointerEnter;
			scaleenter2.callback.AddListener((eventDatasub) => {
				lastscale=Time.realtimeSinceStartup;
				godbutton.gameObject.SetActive(true);
				godenter=true;
				//echo25("scaling");scaleron=true;
				scaling=true;
				if(!godmode){StartCoroutine(godentr());}
				});
			
			EventTrigger.Entry scaleenter = new EventTrigger.Entry();
    		scaleenter.eventID = EventTriggerType.PointerEnter;
			scaleenter.callback.AddListener((eventDatasub) => {
				
				scaleslider.gameObject.SetActive(true);
				
				float val=rsa.mainController.transform.eulerAngles.x;
				xslider.slider.fillRect.GetComponent<Image>().color=Color.white;
				if(val==90 || val==180 || val==45  || val==135  || val==225  || val==315  || val==270){xslider.slider.fillRect.GetComponent<Image>().color=Color.green;}

				val=rsa.mainController.transform.eulerAngles.y;
				yslider.slider.fillRect.GetComponent<Image>().color=Color.white;
				if(val==90 || val==180 || val==45  || val==135  || val==225  || val==315  || val==270){yslider.slider.fillRect.GetComponent<Image>().color=Color.green;}
				
				val=rsa.mainController.transform.eulerAngles.z;
				zslider.slider.fillRect.GetComponent<Image>().color=Color.white;
				if(val==90 || val==180 || val==45  || val==135  || val==225  || val==315  || val==270){zslider.slider.fillRect.GetComponent<Image>().color=Color.green;}
		
				gmlockrbutton.buttonText.color=Color.gray;
				gmlockxbutton.buttonText.color=Color.gray;
				gmlockybutton.buttonText.color=Color.gray;
				gmlockzbutton.buttonText.color=Color.gray;
				if(rsa.mainController.xRotLock && rsa.mainController.yRotLock && rsa.mainController.zRotLock){
				gmlockrbutton.buttonText.color=modelcolorlight;
				}
				if(rsa.mainController.xLock){gmlockxbutton.buttonText.color=modelcolorlight;}
				if(rsa.mainController.yLock){gmlockybutton.buttonText.color=modelcolorlight;}
				if(rsa.mainController.zLock){gmlockzbutton.buttonText.color=modelcolorlight;}
				
				xslider.gameObject.SetActive(true);
				yslider.gameObject.SetActive(true);
				zslider.gameObject.SetActive(true);
				godbutton.gameObject.SetActive(false);
				gmcopybutton.gameObject.SetActive(true);
				gmpastebutton.gameObject.SetActive(true);
				gmpastexbutton.gameObject.SetActive(true);
				gmpasteybutton.gameObject.SetActive(true);
				gmpastezbutton.gameObject.SetActive(true);				
				gmlockrbutton.gameObject.SetActive(true);
				gmlockxbutton.gameObject.SetActive(true);
				gmlockybutton.gameObject.SetActive(true);
				gmlockzbutton.gameObject.SetActive(true);godbutton2.gameObject.SetActive(true);
				xnudgeslider.gameObject.SetActive(true);
				ynudgeslider.gameObject.SetActive(true);
				znudgeslider.gameObject.SetActive(true);
				if(rsa.type=="Person"){
				gmrealbutton.gameObject.SetActive(true);
				gmcopytbutton.gameObject.SetActive(true);
				gmpastetbutton.gameObject.SetActive(true);				
				}
				
				echo20("scaling");scaleron=true;
				scaling=true;});
			
			EventTrigger.Entry scaleexit = new EventTrigger.Entry();
    		scaleexit.eventID = EventTriggerType.PointerExit;
			scaleexit.callback.AddListener((eventDatasub) => {
				scaleron=false;
				if(!godslide){
				pboxon=false;
				StartCoroutine(removepbox(true,delay:0.1f));
				echo20("not scaling");
				StartCoroutine(unscaler());}
			});
						
    		scaleslider.slider.transform.gameObject.AddComponent<EventTrigger>();
    		xslider.slider.transform.gameObject.AddComponent<EventTrigger>();
    		yslider.slider.transform.gameObject.AddComponent<EventTrigger>();
    		zslider.slider.transform.gameObject.AddComponent<EventTrigger>();
    		xnudgeslider.slider.transform.gameObject.AddComponent<EventTrigger>();
    		ynudgeslider.slider.transform.gameObject.AddComponent<EventTrigger>();
    		znudgeslider.slider.transform.gameObject.AddComponent<EventTrigger>();
    		gmbutton.transform.gameObject.AddComponent<EventTrigger>();
    		scalebutton.transform.gameObject.AddComponent<EventTrigger>();
    		gmcolbutton.transform.gameObject.AddComponent<EventTrigger>();
    		gmdelbutton.transform.gameObject.AddComponent<EventTrigger>();
    		gmhidebutton.transform.gameObject.AddComponent<EventTrigger>();
    		gmonbutton.transform.gameObject.AddComponent<EventTrigger>();
    		gmclonebutton.transform.gameObject.AddComponent<EventTrigger>();
    		gmtelbutton.transform.gameObject.AddComponent<EventTrigger>();
    		gmmovebutton.transform.gameObject.AddComponent<EventTrigger>();
    		gmlockrbutton.transform.gameObject.AddComponent<EventTrigger>();
    		gmlockxbutton.transform.gameObject.AddComponent<EventTrigger>();
    		gmlockybutton.transform.gameObject.AddComponent<EventTrigger>();
    		gmlockzbutton.transform.gameObject.AddComponent<EventTrigger>();
    		gmcopybutton.transform.gameObject.AddComponent<EventTrigger>();
    		gmpastebutton.transform.gameObject.AddComponent<EventTrigger>();
    		gmpastexbutton.transform.gameObject.AddComponent<EventTrigger>();
    		gmpasteybutton.transform.gameObject.AddComponent<EventTrigger>();
    		gmpastezbutton.transform.gameObject.AddComponent<EventTrigger>();
    		godbutton.transform.gameObject.AddComponent<EventTrigger>();
    		godbutton2.transform.gameObject.AddComponent<EventTrigger>();
    		gmcopytbutton.transform.gameObject.AddComponent<EventTrigger>();
    		gmpastetbutton.transform.gameObject.AddComponent<EventTrigger>();
    		gmrealbutton.transform.gameObject.AddComponent<EventTrigger>();
    		texturepaste.transform.gameObject.AddComponent<EventTrigger>();
			
			scaleslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter);	
			scaleslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);	
			xslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter);	
			xslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);	
			yslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter);	
			yslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);	
			zslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter);	
			zslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);
			xnudgeslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter);	
			xnudgeslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);
			ynudgeslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter);	
			ynudgeslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);
			znudgeslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter);	
			znudgeslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);
			
			scaleslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaledown2);	
			scaleslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleup);	
			xslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaledown);	
			xslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleup);	
			yslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaledown);	
			yslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleup);	
			zslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaledown);	
			zslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleup);
			xnudgeslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaledown);	
			xnudgeslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleup);
			ynudgeslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaledown);	
			ynudgeslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleup);				
			znudgeslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaledown);	
			znudgeslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleup);	
			
			scaleslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scalesliderenter);	
			xslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(xsliderenter);		
			yslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(ysliderenter);
			zslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(zsliderenter);
			
			xnudgeslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(xnudgeenter);
			ynudgeslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(ynudgeenter);
			znudgeslider.slider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(znudgeenter);
			
			texturepaste.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(texturepasteenter);
			texturepaste.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(texturepasteexit);
			
			scalebutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter);	
			scalebutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);				
			scalebutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scalebuttonenter);

			godbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter2);	
			godbutton2.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter);	
			godbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);				
			godbutton2.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);				
			godbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(godbuttonenter);			
			godbutton2.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(godbuttonenter);			

			gmbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter);	
			gmbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);				
			//gmbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(gmbuttonenter);

			gmcolbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter);	
			gmcolbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);				
			gmcolbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(gmcolbuttonenter);				
								
			gmdelbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter);	
			gmdelbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);				
			gmdelbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(gmdelbuttonenter);

			gmhidebutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter);	
			gmhidebutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);				
			gmhidebutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(gmhidebuttonenter);				
			
			gmonbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter);	
			gmonbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);				
			gmonbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(gmonbuttonenter);				
			
			gmclonebutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter);	
			gmclonebutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);	
			gmclonebutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(gmclonebuttonenter);	
			
			gmmovebutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter);	
			gmmovebutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);	
			gmmovebutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(gmmovebuttonenter);				
			
			gmtelbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter);	
			gmtelbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);	
			gmtelbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(gmtelbuttonenter);

			gmlockrbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter);	
			gmlockrbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);	
			gmlockrbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(gmlockrbuttonenter);	

			gmlockxbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter);	
			gmlockxbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);	
			gmlockxbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(gmlockxbuttonenter);	

			gmlockybutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter);	
			gmlockybutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);	
			gmlockybutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(gmlockybuttonenter);	

			gmlockzbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter);	
			gmlockzbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);				
			gmlockzbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(gmlockzbuttonenter);	

			gmcopybutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter);	
			gmcopybutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);				
			gmcopybutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(gmcopybuttonenter);				

			gmpastebutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter);	
			gmpastebutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);				
			gmpastebutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(gmpastebuttonenter);	

			gmpastexbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter);	
			gmpastexbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);				
			gmpastexbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(gmpastexbuttonenter);	

			gmpasteybutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter);	
			gmpasteybutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);				
			gmpasteybutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(gmpasteybuttonenter);		

			gmpastezbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter);	
			gmpastezbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);				
			gmpastezbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(gmpastezbuttonenter);	
			
			gmcopytbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter);	
			gmcopytbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);				
			gmcopytbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(gmcopytbuttonenter);		

			gmpastetbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter);	
			gmpastetbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);				
			gmpastetbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(gmpastetbuttonenter);
					
			gmrealbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleenter);	
			gmrealbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(scaleexit);				
			gmrealbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(gmrealenter);
			
EventTrigger.Entry uiexit = new EventTrigger.Entry();
uiexit.eventID = EventTriggerType.PointerUp;
uiexit.callback.AddListener((eventData) => {
	uipressed=false;
	if(cocopops!=null){GameObject.Destroy(cocopops.gameObject);}
		uisize=uisizeslider.slider.value/100;
StartCoroutine(IEfovscaler(fovslider.slider.value,true));
		saveui=uisize*100;
		saveini();});
uisizeslider.slider.gameObject.AddComponent<EventTrigger>();
uisizeslider.slider.gameObject.GetComponent<EventTrigger>().triggers.Add(uiexit);

EventTrigger.Entry uipress = new EventTrigger.Entry();
uipress.eventID = EventTriggerType.PointerDown;
uipress.callback.AddListener((eventData) => {uipressed=true;});
uisizeslider.slider.gameObject.AddComponent<EventTrigger>();
uisizeslider.slider.gameObject.GetComponent<EventTrigger>().triggers.Add(uipress);

EventTrigger.Entry fovexit = new EventTrigger.Entry();
fovexit.eventID = EventTriggerType.PointerUp;
fovexit.callback.AddListener((eventData) => {
	
		savefov=fovslider.slider.value;
StartCoroutine(IEfovscaler(fovslider.slider.value,true));
		saveini();});
fovslider.slider.gameObject.AddComponent<EventTrigger>();
fovslider.slider.gameObject.GetComponent<EventTrigger>().triggers.Add(fovexit);

EventTrigger.Entry hudsliderstime = new EventTrigger.Entry();
hudsliderstime.eventID = EventTriggerType.PointerUp;
hudsliderstime.callback.AddListener((eventData) => {
	savetime=timeslider.slider.value;
	saveini();
		echo9("saving time");
	});

EventTrigger.Entry hudslidersworld = new EventTrigger.Entry();
hudslidersworld.eventID = EventTriggerType.PointerUp;
hudslidersworld.callback.AddListener((eventData) => {
	//saveworld=SuperController.singleton.worldScale;
	saveworld=worldslider.slider.value;
		saveini();
		echo9("saving world");
	});
	
EventTrigger.Entry hudslidersfps = new EventTrigger.Entry();
hudslidersfps.eventID = EventTriggerType.PointerUp;
hudslidersfps.callback.AddListener((eventData) => {
		savefps=fpsslider.slider.value;
		saveini();
		echo9("saving fps");
	});
	
EventTrigger.Entry hudslidersrgb = new EventTrigger.Entry();
hudslidersrgb.eventID = EventTriggerType.PointerUp;
hudslidersrgb.callback.AddListener((eventData) => {
		if(Rslider.slider.value<0){Rslider.slider.value=0;}
		if(Gslider.slider.value<0){Gslider.slider.value=0;}
		if(Bslider.slider.value<0){Bslider.slider.value=0;}
		savergb=Rslider.slider.value.ToString()+":"+Gslider.slider.value.ToString()+":"+Bslider.slider.value.ToString();
		saveini();
		echo9("saving RGB");
	});	


timeslider.slider.gameObject.AddComponent<EventTrigger>();
worldslider.slider.gameObject.AddComponent<EventTrigger>();
fpsslider.slider.gameObject.AddComponent<EventTrigger>();
Rslider.slider.gameObject.AddComponent<EventTrigger>();
Gslider.slider.gameObject.AddComponent<EventTrigger>();
Bslider.slider.gameObject.AddComponent<EventTrigger>();
speedslider.slider.gameObject.AddComponent<EventTrigger>();
timeslider.slider.gameObject.GetComponent<EventTrigger>().triggers.Add(hudsliderstime);
worldslider.slider.gameObject.GetComponent<EventTrigger>().triggers.Add(hudslidersworld);
fpsslider.slider.gameObject.GetComponent<EventTrigger>().triggers.Add(hudslidersfps);
Rslider.slider.gameObject.GetComponent<EventTrigger>().triggers.Add(hudslidersrgb);
Gslider.slider.gameObject.GetComponent<EventTrigger>().triggers.Add(hudslidersrgb);
Bslider.slider.gameObject.GetComponent<EventTrigger>().triggers.Add(hudslidersrgb);
speedslider.slider.gameObject.GetComponent<EventTrigger>().triggers.Add(hudslidersrgb);


				chatbuttonhud=newbutton(lowHUD.transform,() => {
				if(chat.enabled){chat.enabled=false;
				chatbutton.textColor = new Color(0.4f, 0.5f, 0.6f);
				chatbuttonhud.textColor = new Color(0.4f, 0.5f, 0.6f);
				}else{
				chat.enabled=true;
				chatbutton.textColor = new Color(0.8f, 0.9f, 1f);
				chatbuttonhud.textColor = new Color(0.8f, 0.9f, 1f);
				}
				chatvisible=chat.enabled;
				setmenu=true;
				saveini();
				},"CHAT",0f,60f,509,-290);
				chatbuttonhud.buttonColor = chatcolor;
                chatbuttonhud.textColor = new Color(0.8f, 0.9f, 1f);
                chatbuttonhud.buttonText.fontStyle = FontStyle.Bold;
                chatbuttonhud.buttonText.fontSize = 30;


				
				slidebutton=newbutton(hud.transform,() => {
				editslide.text=paster.Replace("[X]X[X]",copier2);
				editslide.ActivateInputField();
				},"PASTE / CODE",530f,40f,-580f,0);
                slidebutton.buttonColor = chatcolor;
                slidebutton.textColor = new Color(0.8f, 0.9f, 1f);
                slidebutton.buttonText.fontStyle = FontStyle.Bold;
                slidebutton.buttonText.fontSize = 30;


			    pslidebutton=newbutton(hud.transform,() => {
				copier2=copier;
				echo9(copier2);
				},"COPY",530f,40f,50,0);
                pslidebutton.buttonColor = chatcolor;
                pslidebutton.textColor = new Color(0.8f, 0.9f, 1f);
                pslidebutton.buttonText.fontStyle = FontStyle.Bold;
                pslidebutton.buttonText.fontSize = 30;
				
				slidebutton.transform.gameObject.SetActive(false);
				pslidebutton.transform.gameObject.SetActive(false);
				
					EventTrigger.Entry slidecopy = new EventTrigger.Entry();
					slidecopy.eventID = EventTriggerType.PointerEnter;
					slidecopy.callback.AddListener((eventData) => {
					if(editslide!=null && editslide.isFocused){
					if(editslide.selectionFocusPosition>editslide.selectionAnchorPosition){
					copier=editslide.text.Substring(editslide.selectionAnchorPosition,editslide.selectionFocusPosition-editslide.selectionAnchorPosition);
					}else{copier=editslide.text.Substring(editslide.selectionFocusPosition,editslide.selectionAnchorPosition-editslide.selectionFocusPosition);}}		
					});
					pslidebutton.gameObject.AddComponent<EventTrigger>();
					pslidebutton.gameObject.GetComponent<EventTrigger>().triggers.Add(slidecopy);	

				
					EventTrigger.Entry slidepaste = new EventTrigger.Entry();
					slidepaste.eventID = EventTriggerType.PointerEnter;
					slidepaste.callback.AddListener((eventData) => {
					if(editslide!=null && editslide.isFocused){
					newcaret=editslide.caretPosition;
					paster=editslide.text.Substring(0,editslide.caretPosition)+"[X]X[X]"+editslide.text.Substring(editslide.caretPosition,editslide.text.Length-(editslide.caretPosition));
					insert=new SortedDictionary<string,string>();
					insert.Add("Start","160{MAIN Command - Syntax:\nstart:starttime(optional),slidetime minvalue,maxvalue bounce(optional)\n\nWill slide a slider from minvalue to maxvalue repeatedly in cycles defined by the slidetime. If you only want it to run once on sceneload, apply the starttime in the syntax above separating it from slidetime with a comma. The start/slide command is the best way to set all scene settings at load, like fps, background color, timescale etc without having to use complex scene animation / animation patterns. You can also use the bounce syntax to have the slider go fourth and back instead of just cycling, and combined with the random-tag(example [?0-1]) you can create complex random sliding\n\nExample of having the slider go from 0-1 3 seconds after sceneload gradually in 5 seconds:\nstart:3,5 0,1\n\nExample of repeated sliding fourth and back with random maxvalue:\nstart:5 0,[?0.2-0.9] bounce}//remove comment-tag below\n//start:5,5 0,1");
					insert.Add("Slide","160{MAIN Command - Syntax:\nslide:starttime(optional),slidetime minvalue,maxvalue bounce(optional)\n\nWill slide a slider from minvalue to maxvalue repeatedly in cycles defined by the slidetime. If you only want it to run once on sceneload, apply the starttime in the syntax above separating it from slidetime with a comma. The start/slide command is the best way to set all scene settings at load, like fps, background color, timescale etc without having to use complex scene animation / animation patterns. You can also use the bounce syntax to have the slider go fourth and back instead of just cycling, and combined with the random-tag(example [?0-1]) you can create complex random sliding\n\nExample of having the slider go from 0-1 3 seconds after sceneload gradually in 5 seconds:\nslide:3,5 0,1\n\nExample of repeated sliding fourth and back with random maxvalue:\nslide:5 0,[?0.2-0.9] bounce}//remove comment-tag below\n//slide:5 0,[?0.5-1] bounce");
					insert.Add("Load","250{MAIN Command - Syntax:\nload</>/=value:merge/subscene(optional):atom(if subscene):scenefile.json local(optional) loadposition(optional)\n\nLoads a scene or subscene when the slider reaches the given value. It automatically detects if the scene is a Hub-distributed var-file or a local scene, meaning you can link to the scenes you load by their filename only if placed in Saves/scene, it will assume it`s path, and if you distribute it as a var it will still link it correctly - eg plug & play\n\nIf you by chance need full manual control, you add the keyword \"local\", this will turn off detection of var/local and paths and let you define the path yourself. The load-function will keep the current player-position, overriding any forced loadposition embedded in the loaded scene. If you want normal load-function where the loaded scene controls the player position, you add the keyword \"loadposition\"\n\nExample loading subscene when the slider reaches half-way:\nload>0.5:subscene:houseatom:myhouse.json\nExample with local override:\nload>0.6:merge:AddonPackages/myhouse.1.var:/Saves/scene/housescene.json local}//remove comment-tag below\n//load>0.5:merge:myscene.json");
					insert.Add("Skybox","150{MAIN Command - Syntax:\nskybox:number/string,number/string)(optional),etc or skybox:value1-value2:intensity,intensity(optional) off(optional)\n\nChanges the skybox either static with a number or string, within a choice of skyboxes by string/number separated by comma, or a range with a given startvalue-endvalue. the value/number-range is 0-28\n\nExample - static with number or string:\nskybox:forest or skybox:3\nExample dynamically changing between three skyboxes:\nskybox:fantasy,forest,china\nExample changing skybox with a range and setting the intensity from 0-10 based on the slider-position:\nskybox:4-15:0,10\n\nthe \"off\" will set skybox to disabled regardless of other variables, setting intensty to 0 dies the same, setting intensity to anything above 0 will turn the skybox on}//remove comment-tag below\n//skybox:24,china,fantasy,italian,forest,20,21,22,23:0,4");
					insert.Add("Light","MAIN Command - Syntax:\nlight:front#value1,value2(optional) side#value1,value2(optional) camera#value1,value2(optional)\n\nChanges the two inbuilt non-VAM //\\/\\ORPHINE lights, either static, or optionally a given range depending on the slider. camera# sets the inbuilt VAM-global camera intensity\n\nExample setting just the front light static:\nlight:front0.7\nExample setting all the lights dynamically dependant on the slider-value:\nlight:front0,1 side0,0.4 camera0,5}//remove comment-tag below\n//light:front0,1 side0,1 camera0.5,1");
					insert.Add("Fps","MAIN Command - Syntax:\nfps:fpsrate/cap(optional)-cap(optional) or fps:fpsrate,fpsrate\n\nChanges the FPS-rate and/or cap, either static or a given range\n\nExample setting it static, change rate to 120hz and cap to 3:\nfps:120-3\nExample only change FPS-rate static to 90hz:\nfps:90\nExample only change cap static to 2:\nfps:2\nExample dynamically change FPS-rate and cap depending on slider:\nfps:45,288}//remove comment-tag below\n//fps:45,288");
					insert.Add("Text","MAIN Command - Syntax:\ntext:Atom name:think(optional):text here\n\nWill change / trigger text on the target Atom name, which can be a UItext,SimpleSign, another UISlider, a UIButton or a model/person triggering it`s Speech-bubble/Thought-bubble, can be used with all dynamic tags in morphine. The \"think:\" command is optional and will trigger Thought-bubble instead of speech\n\nExample:\ntext:Person:think:what is [CREATOR] doing this [TIMEOFDAY]..?\nExample:\ntext:introtext:This story happened on a [DAY]..}//remove comment-tag below\n//text:Atom name:text here");
					insert.Add("Url","-90{MAIN Command - Syntax:\nurl</>/value=:urlstring/open/close\n\nWill load the given urlstring in the //\\/\\ORPHINE-web browser or open/close it when the slider hits below/above/exactly the given value\n\nExample opening a site:\nurl<0.8:https://yoursite.com\nExample closing browser:\nurl>0.5:close}//remove comment-tag below\n//url>0.5:yoursite.com");
					insert.Add("Chat","-60{MAIN Command - Syntax:\nchat</>/=value:text/open/close\n\nWill send the given text in the //\\/\\ORPHINE-chat window locally or open/close the chat-window when the slider hits below/above/exactly the given value\n\nExample inputting text:\nchat:I have the high ground [CREATOR]\nExample opening chat:\nchat:open}//remove comment-tag below\n//chat:Ben:Why, hello there");
					insert.Add("Teleport","30{MAIN Command - Syntax:\nteleport:Atom name:Atom name(optional) align(optional) look(optional)\n\nWill use teleport you to an atom, or teleport one atom to another if you define two atom names separated by a \":\". You can also,make the teleport align the horizontal viewing direction of you/the atom teleported by using the \"align\" parameter. \"look\" will align you/the teleported atom fully for all X/Y/Z-directions\n\nExample teleporting you to an atom named \"chair\":\nteleport:chair align\n\nExample teleporting table to chair:\nteleport:table:chair}//remove comment-tag below\n//teleport:Atom name here align");
					insert.Add("Animate","-100{MAIN Command - Syntax:\nanimate:Atom name\n\nWill use Atom name to animate the slider value, you can then start recording Scene-animation and slide the slider by hand how you like and it will be recorded\n\nExample:\nanimate:chair}//remove comment-tag below\n//animate:Atom name here");
					insert.Add("On","-90{MAIN Command - Syntax:\non:Atom name\n\nWill enable an atom. Usefull to create scenes where you enable/disable atoms to create variances in scenery without having to use subscene-loading, great for detail/enviroment/furniture details\n\nExample:\non:chair}//remove comment-tag below\n//on:atom name here");
					insert.Add("Off","-90{MAIN Command - Syntax:\noff:Atom name\n\nWill disable an atom. Usefull to create scenes where you enable/disable atoms to create variances in scenery without having to use subscene-loading, great for detail/enviromemt/furniture details\n\nExample:\noff:chair}//remove comment-tag below\n//off:atom name here");
					insert.Add("Proximity","-130{MAIN Command - Syntax:\nproximity:Atom name:range\n\nWill increase the slider determined by the distance between you (or another optional atom) and the Atom name, range is in cm\n\nExample you>atom:\nproximity:chair:200\n\nExample atom>atom:\nproximity:chair A,bed pillow:100}//remove comment-tag below\n//proximity:atom name here:100");
					insert.Add("Move","-50{MAIN Command - Syntax:\nmove:x/y/z:Atom name startvalue,stopvalue\n\nWill move an atom seamlessly between given start and stopvalue according to the slider value. Tips: Add the \"holo\" subcommand for an interesting out-of-this-world-effect\n\nExample:\nmove:y:elevator 0,2\nExample with holo:\nmove:x:ghost -0.1,0.1 holo}//remove comment-tag below\nmove:x:Atom name here 0,2\n");
					insert.Add("Rotate","MAIN Command - Syntax:\nmove:x/y/z:Atom name startvalue,stopvalue\n\nWill rotate an atom seamlessly between given start and stopvalue according to the slider value. Tips: Add the \"holo\" subcommand for an interesting out-of-this-world-effect\n\nExample:\nrotate:x:knob 0,360\nExample with holo:\nrotate:z:cube -180,180 holo}//remove comment-tag below\n//rotate:x:Atom name here 0,360\n");
					insert.Add("Timescale","-100{MAIN Command - Syntax:\ntimescale:minvalue,maxvalue\n\nWill seamlessly adjust the timescale eg slow motion to normal speed with the given min/max-values, 0 being 25% of normal timescale, 1 equals 100% normal realtime\n\nExample:\ntimescale 0,0.8}//remove comment-tag below\n//timescale:0,1\n");
					insert.Add("Worldscale","-30{MAIN Command - Syntax:\nworldscale:minsize,maxsize lock(optional)\n\nSeamlessly scales you to the world/enviroment around you smaller(minsize) or bigger(maxsize) according to the slider-value between 0 to 2000 in percent, representing your percent-size, in other words - 100 means your normal size. Adding the keyword lock will lock-and-adjust your height when scaling (recommended)\n\nExample:\nworldscale:100,2000}//remove comment-tag below\n//worldscale:100,1 lock");
					insert.Add("Title","-100{MAIN Command - Syntax:\ntitle:prefix(optional) startvalue,stopvalue suffix(optional)\n\nWill set a title on the slider with a prefix, the start/stopvalue correlating with the slider-position , and a suffix. Ex \"Breasts are now 85% big and round\"\n\nExample:\ntitle:You are 0,100 % awsome}//remove comment-tag below\n//title:Value is 0,100 % full");
					insert.Add("Header","MAIN Command - Syntax:\nheader:headertext,optional headertext,optional headertext,optional...\n\nHeader divides the slider into zones divided by a comma(,). If you have ex four headers, then 0-25% value on slider will show first header, 26-50% will show second header etc\n\nExample:\nheader:low,medium,normal,high,higher,overload}//remove comment-tag below\n//header:title1,title2,title3");
					insert.Add("Time","MAIN Command - Syntax:\ntime:bounce(optional) invert(optional) utc(optional)\n\nAdjusts the slider-value from 0 to 100% according to what time it is either as a 24 hour cycle between 0:00>0:00 or bounce from 0-100% between 0:00>12:00(PM / mid-day), then decrease from 100-0% between 12.00(PM mid-day)>0:00(AM/midnight) local time. You can invert the slider with the \"invert\" keyword, and add the keyword UTC to use universal time instead. Tips: Let the slider control some lights and you`ll have a scene that follows the day/night when using bounce\n\nExample:\ntime:bounce utc invert}//remove the comment-tag below\n//time:bounce");
					insert.Add("Morph","MAIN Command - Syntax:\nmorph:Atom name:morphUID startvalue,endvalue\n\nSeamlessly changes a morph from the given startvalue to the given endvalue according to the slider, use to add many morphs in bulk, by selecting morps in the //\\/\\ORPHINE main UI-panel, then select \"copy start/endvalues\" on the hovermenu over any morph`s selection-checkmark, then pasting it here by clicking the main \"PASTE\"-button directly - or make your own morph-command with this\n\nExample:\nmorph:Person:Breast Diameter 0,600}//remove comment-tag below\n//morph:Person:Breasts Size -300,1500");
					insert.Add("Freeze","-100{MAIN Command - Syntax:\nfreeze:seconds\n\nWill freeze animation and sound for the given amount of seconds. Use with the value/hit command to have i act as a trigger. Tips: Great to use with animationslider or with a Audiosource to give a music-video style/FX to your animation\n\nExample:\nfreeze:0.5 hit>0.7}//remove comment-tag below\n//freeze:1");
					insert.Add("Color","MAIN Command - Syntax:\ncolor:r#(optional),r#(optional) g#(optional),g#(optional) b#(optional),b#(optional)\n\nWill set the actual color on the black void background in VAM . You can set one, two or all three of the RGB colors with a range separated by comma (\",\") for each color or just static without the comma-separated range\n\nExample keeping red static while changing green and blue depending on the slider:\ncolor:r0.5 g0,1 b0.9,0.3}//remove comment-tag below\n//color:r1,0 g0,0.5 b0.5,1");

					insert.Add("Pause","MAIN Command - Syntax:\npause:seconds\n\nWill completaly pause time, animation and sound suddenly for a given amount of seconds - this is the actual real \"freeze\" in VAM, superior to the ordinary \"freeze\" in every way. Use with the value/hit command to have i act as a trigger. Tips: Great to use with animationslider or with a Audiosource to give a music-video style/FX to your animation\n\nExample:\npause:0.5 hit>0.7}//remove comment-tag below\n//pause:0.5");

					insert.Add("[CLOSEST]","-100{<color=#55bbff>Dynamic-TAG</color> - Syntax:\n<color=#55bbff>[CLOSEST]</color>\n\nWill display the closest object to you regardless of atom-type where written. Tips: Use with title/header/text/morph/move/rotate-command\n\nExample:\ntext:<color=#55bbff>[CLOSEST]</color>:Oh hi there [CREATOR]}[CLOSEST]");
					insert.Add("[CLOSEST+VALUE]","-100{<color=#55bbff>Dynamic-TAG</color> - Syntax:\n<color=#55bbff>[CLOSEST+VALUE]</color>\n\nWill display the distance to the closest object to you regardless of atom-type where written\n\nExample:\nmove:x:chair 0,<color=#55bbff>[CLOSEST+VALUE]</color>}[CLOSEST+VALUE]");
					insert.Add("[CLOSEST-VALUE]","-100{<color=#55bbff>Dynamic-TAG</color> - Syntax:\n<color=#55bbff>[CLOSEST-VALUE]</color>\n\nWill display 1 minus the distance to the closest object to you regardless of atom-type where written\n\nExample:\nmove:x:chair 0,<color=#55bbff>[CLOSEST-VALUE]</color>}[CLOSEST-VALUE]");

					insert.Add("[CLOSESTUI]","-100{<color=#55bbff>Dynamic-TAG</color> - Syntax:\n<color=#55bbff>[CLOSESTUI]</color>\n\nWill display the closest UI-object like UISlider,Superslider,UIButton, UITrigger etc to you where written. Tips: Use with title/header/text/morph/move/rotate-command\n\nExample:\ntext:<color=#55bbff>[CLOSESTUI]</color>:Oh hi there [CREATOR]}[CLOSESTUI]");
					insert.Add("[CLOSESTUI+VALUE]","-100{<color=#55bbff>Dynamic-TAG</color> - Syntax:\n<color=#55bbff>[CLOSESTUI+VALUE]</color>\n\nWill display the distance to the closest UI-object like UISlider,Superslider,UIButton, UITrigger etc to you where written\n\nExample:\nmove:x:chair 0,<color=#55bbff>[CLOSESTUI+VALUE]</color>}[CLOSESTUI+VALUE]");
					insert.Add("[CLOSESTUI-VALUE]","-100{<color=#55bbff>Dynamic-TAG</color> - Syntax:\n<color=#55bbff>[CLOSESTUI-VALUE]</color>\n\nWill display 1 minus the distance to the closest UI-object like UISlider,Superslider,UIButton, UITrigger etc to you where written\n\nExample:\nmove:x:chair 0,<color=#55bbff>[CLOSESTUI-VALUE]</color>}[CLOSESTUI-VALUE]");
					
					insert.Add("[CLOSESTPERSON]","-100{<color=#55bbff>Dynamic-TAG</color> - Syntax:\n<color=#55bbff>[CLOSESTPERSON]</color>\n\nWill display the closest person to you where written. Tips: Use with title/header/text/morph/move/rotate-command\n\nExample:\ntext:<color=#55bbff>[CLOSESTPERSON]</color>:Oh hi there [CREATOR]}[CLOSESTPERSON]");
					insert.Add("[CLOSESTPERSON+VALUE]","-100{<color=#55bbff>Dynamic-TAG</color> - Syntax:\n<color=#55bbff>[CLOSESTPERSON+VALUE]</color>\n\nWill display the distance to the closest person to you where written\n\nExample:\nmove:x:chair 0,<color=#55bbff>[CLOSESTPERSON+VALUE]</color>}[CLOSESTPERSON+VALUE]");
					insert.Add("[CLOSESTPERSON-VALUE]","-100{<color=#55bbff>Dynamic-TAG</color> - Syntax:\n<color=#55bbff>[CLOSESTPERSON-VALUE]</color>\n\nWill display 1 minus the distance to the closest person to you where written\n\nExample:\nmove:x:chair 0,<color=#55bbff>[CLOSESTPERSON-VALUE]</color>}[CLOSESTPERSON-VALUE]");					

					insert.Add("[CLOSESTATOM]","-100{<color=#55bbff>Dynamic-TAG</color> - Syntax:\n<color=#55bbff>[CLOSESTATOM]</color>\n\nWill display the closest non-person, non-UI atom to you where written. Tips: Use with title/header/text/morph/move/rotate-command\n\nExample:\ntext:<color=#55bbff>[CLOSESTATOM]</color>:Oh hi there [CREATOR]}[CLOSESTATOM]");
					insert.Add("[CLOSESTATOM+VALUE]","-100{<color=#55bbff>Dynamic-TAG</color> - Syntax:\n<color=#55bbff>[CLOSESTATOM+VALUE]</color>\n\nWill display the distance to the closest non-person, non-UI atom to you where written\n\nExample:\nmove:x:chair 0,<color=#55bbff>[CLOSESTATOM+VALUE]</color>}[CLOSESTATOM+VALUE]");
					insert.Add("[CLOSESTATOM-VALUE]","-100{<color=#55bbff>Dynamic-TAG</color> - Syntax:\n<color=#55bbff>[CLOSESTATOM-VALUE]</color>\n\nWill display 1 minus the distance to the closest non-person, non-UI atom to you where written\n\nExample:\nmove:x:chair 0,<color=#55bbff>[CLOSESTATOM-VALUE]</color>}[CLOSESTATOM-VALUE]");
					
					insert.Add("[TITLE]","-100{<color=#55bbff>Dynamic-TAG</color> - Syntax:\n<color=#55bbff>[TITLE]</color>\n\nWill display the current title/first line of the slider where written. Tips: Use with title/header/text-command\n\nExample:\ntext:Person:My eyes are so <color=#55bbff>[TITLE]</color>}[TITLE]");
					insert.Add("[TIME]","-100{<color=#55bbff>Dynamic-TAG</color> - Syntax:\n<color=#55bbff>[TIME]</color>\n\nWill display the current local time where written. Tips: Use with text/title/header-command\n\nExample:\nheader:The time is <color=#55bbff>[TIME]</color>}[TIME]");
					insert.Add("[CREATOR]","-50{<color=#55bbff>Dynamic-TAG</color> - Syntax:\n<color=#55bbff>[CREATOR]</color>\n\nWill always display the current creator-name in VAM where written if a crestor name exists, if the user has -not- made a creator name it will generate a random expression like \"babe\",\"sweetie\" etc instead. Tips: Use with title/header-command\n\nExample:\ntitle:<color=#55bbff>[CREATOR]</color> is 0,100 % strong}[CREATOR]");
					insert.Add("[PLAYER]","-100{<color=#55bbff>Dynamic-TAG</color> - Syntax:\n<color=#55bbff>[CREATOR]</color>\n\nWill display a random expression like \"darlin\",\"honey\" etc written. If the user has made a creator name there is a 50% chance it will display the creator name. Tips: Use with text/title/header-command\n\nExample:\ntitle:<color=#55bbff>[PLAYER]</color> is 0,100 % awsome}[PLAYER]");
					insert.Add("[?RANDOM]","<color=#55bbff>Dynamic-TAG</color> - Syntax:\n<color=#55bbff>[?value1-value2] or [?text here 1;text 2 here;etc]\n\n[?RANDOM]</color> is a dynamic tag that will output a random number or string every keyframe or hit between given value1 and value2 for numbers or a random string when separated by \";\". Use with any command\n\nExample:\nrotate:y:chair 0,<color=#55bbff>[?0-360]</color>\n\nExample:\ntext:Person:<color=#55bbff>[?hello;hi there;good to see you;howdy]</color>}[?0-100]");
					insert.Add("[NICKNAME]","-100{<color=#55bbff>Dynamic-TAG</color> - Syntax:\n<color=#55bbff>[NICKNAME]</color>\n\nWill display the current online VAMNET-nickname where written if user is online. Tips: Use with title/header-command\n\nExample:\ntitle:<color=#55bbff>[NICKNAME]</color> is 0,100 % ready}[NICKNAME]");
					insert.Add("[DAY]","-100{<color=#55bbff>Dynamic-TAG</color> - Syntax:\n<color=#55bbff>[DAY]</color>\n\nWill display the current local day-name where written. Tips: Use with title/header-command\n\nExample:\ntitle:<color=#55bbff>[DAY]</color> is 0,24 hours of 24 complete}[DAY]");
					insert.Add("[HOUR]","-100{<color=#55bbff>Dynamic-TAG</color> - Syntax:\n<color=#55bbff>[HOUR]</color>\n\nWill display the current local hour where written. Tips: Use with title/header-command\n\nExample:\nheader:its about <color=#55bbff>[HOUR]</color> o`clock}[HOUR]");
					insert.Add("[MINUTE]","-100{<color=#55bbff>Dynamic-TAG</color> - Syntax:\n<color=#55bbff>[MINUTE]</color>\n\nWill display the current minute of the hour where written. Tips: Use with title/header-command\n\nExample:\ntitle:<color=#55bbff>[MINUTE]</color> minutes into the current hour}[MINUTE]");
					insert.Add("[SECOND]","-100{<color=#55bbff>Dynamic-TAG</color> - Syntax:\n<color=#55bbff>[SECOND]</color>\n\nWill display the current second of a minute where written. Tips: Use with title/header-command\n\nExample:\nheader:<color=#55bbff>[SECOND]</color> seconds}[SECOND]");
					insert.Add("[TIMEOFDAY]","-100{<color=#55bbff>Dynamic-TAG</color> - Syntax:\n<color=#55bbff>[TIMEOFDAY]</color>\n\nWill display the name of the local time of day (morning, day, evening, night) where written. Tips: Use with title/header-command\n\nExample:\nheader:Have a great <color=#55bbff>[TIMEOFDAY]</color>}[TIMEOFDAY]");
					insert.Add("[TARGET]","-100{<color=#55bbff>Dynamic-TAG</color> - Syntax:\n<color=#55bbff>[TARGET]</color>\n\nWill display the current selected target-atom in VAM where written. Tips: Use with title/header-command\n\nExample:\ntitle:[TARGET] bodysize is 0,100 %}[TARGET]");
					insert.Add(" holo","<color=#55bbff>Sub-command</color> - MAIN Command - Syntax:\nholo\n\nSub-command that will flip/invert the output of the slider-value every second keyframe rapidly, creating a holografic/blurry/ghost-like effect on the target atom depending on what command is used infront of it\n\nExample to give a ghost/holo-effect while rotating an atom:\nrotate:x:chair 0,360 holo} holo");
					insert.Add(" title=","<color=#55bbff>Sub-command</color> - Syntax:\ntitle=string,>/</=hitvalue(optional)\n\nsub-command that will trigger the command in front of it once each time the slider title is the given string for use when header/title-command is setting a title. You can also optionally set a hitvalue for how many hits is needed/allowed to trigger\n\nExample - Trigger worldscale once every time title is \"big\":\nworldscale: 100,2000 title=big\n\nExample only triggering after 3 hits:\nworldscale: 100,2000 title=big,>2} title=enter string here");
					insert.Add(" hit=","<color=#55bbff>Sub-command</color> - Syntax:\nhit=value,>/</=hitvalue(optional)\n\nSub-command that will trigger the command in front of it once each time the slider value is the exact given value. You can also optionally set a hitvalue for how many hits is needed/allowed to trigger\n\nExample - Trigger move once every time slider is exactly 42%:\nmove:y:chair 0,2 hit=0.42\n\nExample only triggering after 4 hits:\nmove:y:chair 0,2 hit=0.42,>3} hit=0.5");
					insert.Add(" hit<","<color=#55bbff>Sub-command</color> - Syntax:\nhit<value,>/</=hitvalue(optional)\n\nSub-command that will trigger the command in front of it once each time the slider value is lower than the given value. You can also optionally set a hitvalue for how many hits is needed/allowed to trigger\n\nExample - Trigger rotate once every time slider is lower than 50%:\nrotate:x:chair 0,360 hit<0.5\n\nExample only triggering on the first 5 hits:\nrotate:x:chair 0,360 hit<0.5,<6} hit<0.5");
					insert.Add(" hit>","<color=#55bbff>Sub0command</color> - Syntax:\nhit>value,>/</=hitvalue(optional)\n\nSub-command that will trigger the command in front of it once each time the slider value is greater than the given value. You can also optionally set a hitvalue for how many hits is needed/allowed to trigger\n\nExample - Trigger timescale once every time slider is higher than 70%:\ntimescale:0,2 hit>0.7\n\nExample only triggering after 3 hits:\ntimescale:0,2 hit>0.7,>2} hit>0.5");
					insert.Add(" value>","<color=#55bbff>Sub-command</color> - Syntax:\nvalue>value,>/</=hitvalue(optional)\n\nSub-command that will run the command in front of it continuously while the slider value is greater than the given value. You can also optionally set a hitvalue for how many hits is needed/allowed to run\n\nExample - Trigger timescale continuously when slider is higher than 70%:\ntimescale:0,2 value>0.7\n\nExample only running after 3 hits:\ntimescale:0,2 value>0.7,>2} value>0.5");
					insert.Add(" value<","<color=#55bbff>Sub-command</color> - Syntax:\nvalue><hitvalue(optional)\n\nSub-command that will run the command in front of it continuously while the slider value is lower than the given value. You can also optionally set a hitvalue for how many hits is needed/allowed to run\n\nExample - Trigger rotate continuously when slider is lower than 50%:\nrotate:x:chair 0,180 value<0.5\n\nExample only running after 3 hits:\nrotate:x:chair 0,180 value<0.5,>2} value<0.5");
					insert.Add(" value=","<color=#55bbff>Sub-command</color> - Syntax:\nvalue=value,>/</=hitvalue(optional)\n\nSub-command that will run the command in front of it continuously while the slider value is the exact given value. You can also optionally set a hitvalue for how many hits on that value is needed/allowed to trigger\n\nExample - Run while the slider is exactly 42%:\nmove:y:chair 0,2 value=0.42\n\nExample only run after 4 hits:\nmove:y:chair 0,2 value=0.42,>3} value=0.5");
					insert.Add("//","-100{<color=#55bbff>Prefix</color> - Syntax:\n//Your comment here / disabled code here\n\n// is a prefix meaning that line wont be treated as code, use this to make comments or to disable a line of code without removing the line\n\nExample:\n\n//This superscript was made by "+_player+"}//");
					insert.Add("!","-150{<color=#55bbff>Prefix</color> - Syntax:\n!disabled script here\n\nUsing \"!\" as the very first or very last symbol in any superscript/superlider-textfield will disable that slider from running all code. Use to disable a superslider without having to remove the code}!");
					insert.Add("@","-170{<color=#55bbff>Prefix</color> - <color=#ffffff>Syntax:\n@always running script here\n\nUsing \"@\" as the very first or very last symbol in any superscript/superlider-textfield will run all commands/code even when the slider isnt moving</color>}@");
					insert.Add("/vr","-150{<color=#55bbff>Prefix</color> - Syntax:\n/vr any command or code\n\nUsing \"/vr\" as the first tag in a line will make that line of code run only when in immersive VR. Tips: Use when you want a scene to act differently for VR-users vs desktop-users}/vr");
					insert.Add("/desktop","-150{<color=#55bbff>Prefix</color> - Syntax:\n/desktop any command or code\n\nUsing \"/desktop\" as the first tag in a line will make that line of code run only when VAM is in 2D desktop-mode. Tips: Use when you want a scene to act differently for VR-users vs desktop-users}/vr");
		
var errb="";
foreach(KeyValuePair<string, string> v in insert.Reverse()){
errb+=v.Key+","+v.Key+"\n";
	}
					showbox="insert";
					StartCoroutine(showmenu(showbox,t:slidebutton.transform,str:errb,mode:"insert",subh:156,delay:0.5f,cap:84,w:230,offsetx:-269,nosub:true,offsety: 0-69,spacing: 37,tx:hud.transform,z:0f));

					}
					});
					slidebutton.gameObject.AddComponent<EventTrigger>();
					slidebutton.gameObject.GetComponent<EventTrigger>().triggers.Add(slidepaste);						

				    EventTrigger.Entry exitpaste = new EventTrigger.Entry();
					exitpaste.eventID = EventTriggerType.PointerExit;
					exitpaste.callback.AddListener((eventData) => {
					if(editslide!=null && editslide.isFocused){
					showbox="";
					gboxon=false;
					pboxon=false;
						
							StartCoroutine(removegbox(change));
							StartCoroutine(removepbox(change,delay:0.3f));
							
					}
					});
					slidebutton.gameObject.AddComponent<EventTrigger>();
					slidebutton.gameObject.GetComponent<EventTrigger>().triggers.Add(exitpaste);	
					
					
			 wwwbuttonhud=newbutton(lowHUD.transform,() => {
				if(web.enabled){
				webvisible=false;url.enabled=false;web.enabled=false;
				wwwbuttonhud.textColor = new Color(0.4f, 0.5f, 0.6f);
				wwwbutton.textColor = new Color(0.4f, 0.5f, 0.6f);
				}else{
				webvisible=true;url.enabled=true;web.enabled=true;
				wwwbuttonhud.textColor = new Color(0.8f, 0.9f, 1f);
				wwwbutton.textColor = new Color(0.8f, 0.9f, 1f);
				}
				setmenu=true;
				saveini();
				},"WEB",0f,60f,610,-290);
                wwwbuttonhud.buttonColor = chatcolor;
                wwwbuttonhud.textColor = new Color(0.8f, 0.9f, 1f);
                wwwbuttonhud.buttonText.fontStyle = FontStyle.Bold;
                wwwbuttonhud.buttonText.fontSize = 30;


			


			mirrorbutton=newbutton(lowHUD.transform,() => {
			if(mirror.isOn){
			mirrorbutton.buttonColor = new Color(0.31f, 0.34f, 0.41f);
			mirror.isOn=false;mirrorbutton.label="Mirror to Desktop: OFF";
			}else{
			mirror.isOn=true;mirrorbutton.label="Mirror to Desktop: ON";
			mirrorbutton.buttonColor = new Color(0.71f, 0.34f, 0.11f);
			}
			},"",220,60,190,-290);
			mirrorbutton.textColor = Color.white;
			if(!mirror.isOn){
			mirrorbutton.buttonColor = new Color(0.31f, 0.34f, 0.41f);
			mirrorbutton.label="Mirror to Desktop: OFF";
			}else{
			mirrorbutton.label="Mirror to Desktop: ON";
			mirrorbutton.buttonColor = new Color(0.71f, 0.34f, 0.11f);
			}


			pausebutton=newbutton(lowHUD.transform,() => {
			if(SuperController.singleton.pauseAutoSimulation){
				SuperController.singleton.pauseAutoSimulation=false;pausebutton.label="Pause";
				pausebutton.buttonColor = new Color(0.41f, 0.44f, 0.51f);
				}else{
				pausebutton.buttonColor = new Color(0.81f, 0.44f, 0.21f);
				SuperController.singleton.pauseAutoSimulation=true;pausebutton.label="Unpause";}
				},"",40,60,51,-290);
				pausebutton.textColor = Color.white;	
			if(!SuperController.singleton.pauseAutoSimulation){
				pausebutton.label="Pause";
				pausebutton.buttonColor = new Color(0.41f, 0.44f, 0.51f);
				}else{
				pausebutton.buttonColor = new Color(0.81f, 0.44f, 0.21f);
				pausebutton.label="Unpause";}

			resbutton=newbutton(lowHUD.transform,() => {
			SuperController.singleton.mainHUD.Find("MainUICanvas/Panel/Content/TabNavigation/Content/ResetPlayerPosition/").GetComponentInChildren<Button>(true).onClick.Invoke();
			},"Reset location",110,60,-298,-290);
			resbutton.buttonColor = new Color(0.61f, 0.64f, 0.71f);
			resbutton.textColor = Color.white;			

			freezebutton=newbutton(lowHUD.transform,() => {
			if(freeze.isOn){freeze.isOn=false;freezebutton.label="Freeze";
			freezebutton.buttonColor = new Color(0.51f, 0.54f, 0.61f);
			}else{
			freezebutton.buttonColor = new Color(0.91f, 0.54f, 0.31f);
			freeze.isOn=true;freezebutton.label="Unfreeze";}
			},"",40,60,-88,-290);
			freezebutton.textColor = Color.white;
			if(!freeze.isOn){freezebutton.label="Freeze";
			freezebutton.buttonColor = new Color(0.51f, 0.54f, 0.61f);
			}else{
			freezebutton.buttonColor = new Color(0.91f, 0.54f, 0.31f);
			freezebutton.label="Unfreeze";}
			
				installbutton=newbutton(lowHUD.transform,() => {
				StartCoroutine(installsession());
				},"<b>Install //\\\\/\\\\ORPHINE°</b>\n<size=22>as session-plugin\n(recommended)</size>",239,156,360,-217.8f);
				installbutton.gameObject.SetActive(false);
				installbutton.buttonColor = skinmenucolortrans;
				installbutton.buttonText.color = modelcolorlight;
				
				if(sceneplugin && edit!=null && !edit.isOn){
				var mexist=listplugins("morphine","session");
				if(mexist==""){installbutton.gameObject.SetActive(true);}
				}
			
				editbutton=newbutton(lowHUD.transform,() => {
				var mode="";
				if(edit.isOn){mode="Play";
				editbutton.buttonColor = new Color(0.21f, 0.84f, 0.31f);
				editbutton.label="Goto Edit mode (E)";
				}else{mode="Edit";
				installbutton.gameObject.SetActive(false);
				editbutton.buttonColor = new Color(0.91f, 0.54f, 0.31f);
				editbutton.label="Goto Play mode (P)";
				}
				SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/GameModeToggleGroup/"+mode+" Toggle/").GetComponentInChildren<Toggle>(true).isOn=true;
				setmenu=true;
				},"",211,60,-609,-290);
				editbutton.textColor = Color.white;
				if(!edit.isOn){
				editbutton.buttonColor = new Color(0.21f, 0.84f, 0.31f);
				editbutton.label="Goto Edit mode (E)";
				}else{
				editbutton.buttonColor = new Color(0.91f, 0.54f, 0.31f);
				editbutton.label="Goto Play mode (P)";
				}
				
					EventTrigger.Entry editload = new EventTrigger.Entry();
					editload.eventID = EventTriggerType.PointerEnter;
					editload.callback.AddListener((eventData) => {
					float xmin=0;float ymin=0;float zz=90;if(!vr){zz=0;ymin=-24;}

					showbox="editload";StartCoroutine(showmenu(showbox,editbutton.transform,"Edit-mode as default: "+editloader,"scan",cap:56,w:211,offsetx:-105+xmin,offsety: -33+ymin,nosub:true, spacing: 37,z:-zz,tx:hud.transform,prefx:""));
					});

					
					EventTrigger.Entry editexit = new EventTrigger.Entry();
					editexit.eventID = EventTriggerType.PointerExit;
					editexit.callback.AddListener((eventData) => {
										showbox="";
					gboxon=false;
					pboxon=false;
						if(!fading){
							StartCoroutine(removegbox(change));
							StartCoroutine(removepbox(change));
							}							
					
						});
						
					editbutton.gameObject.AddComponent<EventTrigger>();
					editbutton.gameObject.GetComponent<EventTrigger>().triggers.Add(editload);
					editbutton.gameObject.GetComponent<EventTrigger>().triggers.Add(editexit);
				
var backwindow=Text(chat,"",980,226,-640,-36,0);
backwindow.backgroundColor = chatcolor;
backwindow.UItext.alignment = TextAnchor.LowerLeft;
backwindow.UItext.color = Color.clear;

chatwindow=Text(chat,"",944,206,-612,-20,0);
chatwindow.backgroundColor = Color.clear;
chatwindow.UItext.alignment = TextAnchor.LowerLeft;
chatwindow.UItext.color = Color.white;
//chatwindow.UItext.fontStyle = FontStyle.Bold;
chatwindow.UItext.fontSize = 32;
chatwindow.UItext.supportRichText = true;

userwindow=Text(chat,"",202,226,440,-36,0);
userwindow.backgroundColor = chatcolor;
userwindow.UItext.alignment = TextAnchor.LowerLeft;
userwindow.UItext.color = Color.white;
//userwindow.UItext.fontStyle = FontStyle.Bold;
userwindow.UItext.fontSize = 32;
userwindow.UItext.supportRichText = true;

safebox=createbox(hud.transform,cc:Color.clear);
safebox.gameObject.SetActive(false);

cuawindow=Text(hud,"",182,526,340,136,0);
cuawindow.backgroundColor = skinmenucolor;
cuawindow.UItext.alignment = TextAnchor.LowerLeft;
cuawindow.UItext.color = Color.white;
cuawindow.UItext.fontSize = 22;
cuawindow.UItext.supportRichText = true;
cuawindow.gameObject.SetActive(false);


webwindow=Text(web,"",1282,1020,-640,380);
webwindow.backgroundColor = chatcolor;
webwindow.UItext.alignment = TextAnchor.LowerLeft;
webwindow.UItext.color = Color.white;
//webwindow.UItext.fontStyle = FontStyle.Bold;
webwindow.UItext.fontSize = 32;
webwindow.UItext.supportRichText = true;

webpanel=new GameObject();	
webviewui=webpanel.AddComponent<VRWebBrowserUI>();
webview=webviewui.gameObject.AddComponent<VRWebBrowser>();
webpanel.transform.SetParent(url.transform,false);
echo7(ircserver);
webview.url=homepage.Replace("\r\n","");
scaler(webpanel.transform,680,500);
webview.fullMouseClickOnDown=false;
//webview.MouseHasFocus=true;
w=980; x=-640; adjustx=96; y=191f;


//hudfiller=textbackground(hud,1220f,-610,0,-62);
//hudfiller=textbackground(hud.transform,1282f,-641,0,-62);
hudfiller=textbackground(hud.transform,1220f,-611,0,-62);
hudfiller.height=34;
hudfiller.UItext.fontSize=24;
hudfiller.UItext.lineSpacing=0;
hudfiller.backgroundColor=new Color(0.15f,0.13f,0.12f,1);

hudtext=textbackground(hud.transform,282f,-641,0,-65);
hudtext.height=34;
hudtext.UItext.fontSize=24;
hudtext.UItext.lineSpacing=0;
hudtext.backgroundColor=Color.clear;
hudtext.UItext.fontStyle = FontStyle.Bold;

var titlefiller=textbackground(chat.transform,1282f,x,adjustx,y+60);

urlfiller=textbackground(web.transform,w,x,adjustx,y+120);

titlefiller.backgroundColor=chatcolor;
urlfiller.backgroundColor=chatcolor;

var chatfiller=textbackground(chat.transform,w,x,adjustx,y);
chatlabel=textlabel(chat,serverinit,1082,x,0,y+63,size:30);
chatlabel.UItext.alignment = TextAnchor.LowerRight;

chatfiller.backgroundColor=chatcolor;
chatlabel.textColor=new Color(0.6f, 0.59f, 0.61f,1f);
chatinput=textfield(chat,w-110,x+31,0,y);
_chatinput=inputfield(chatinput);
_chatinput.lineType = InputField.LineType.MultiLineNewline;
chatinput.textColor=Color.white;



var nickfiller=textbackground(chat.transform,226,x+266,adjustx,y+60);
nickfiller.height=47;
var nicklabel=textlabel(chat,"NICK:",120,x+266,adjustx,y+60.5f);
nicktext=textfield(chat,250,x+249,adjustx,y+51.7f);
nickinput=inputfield(nicktext);
nicktext.UItext.fontSize=26;
nicklabel.UItext.fontSize=26;
nicktext.UItext.fontStyle=FontStyle.Bold;
nicktext.UItext.color=Color.white;
nickfiller.backgroundColor= new Color(0.8f, 0.6f, 0.7f,0.06f);

float yadj=-210; float xadj=0;


				Color aligncolor=Color.clear;
				//Color aligncolor=Color.green;
				aligner=setbutton(hud,() => {SuperController.singleton.ResetNavigationRigPositionRotation();align();},"Align",28f,37f,261f+xadj,158+yadj);
                aligner.buttonColor = aligncolor;
                aligner.textColor = new Color(0.8f, 0.9f, 1f);
                aligner.buttonText.fontStyle = FontStyle.Bold;
                aligner.buttonText.fontSize = 28;		
				
				inward=setbutton(hud,() => {},"+",-42f,37f,378f+5+xadj,158+yadj);
                inward.buttonColor = aligncolor;
                inward.textColor = new Color(0.8f, 0.9f, 1f);
                inward.buttonText.fontStyle = FontStyle.Bold;
                inward.buttonText.fontSize = 28;
				
				outward=setbutton(hud,() => {},"-",-42f,37f,431f+5+xadj,158+yadj);
                outward.buttonColor = aligncolor;
                outward.textColor = new Color(0.8f, 0.9f, 1f);
                outward.buttonText.fontStyle = FontStyle.Bold;
                outward.buttonText.fontSize = 28;
				
				upward=setbutton(hud,() => {},">",-63f,58f,493f+7+xadj,147.5f+yadj,zangle:90);
                upward.buttonColor = aligncolor;
                upward.textColor = new Color(0.8f, 0.9f, 1f);
                upward.buttonText.fontStyle = FontStyle.Bold;
                upward.buttonText.fontSize = 28;		

				downward=setbutton(hud,() => {},"<",-63f,58f,546f+7+xadj,147.5f+yadj,zangle:90);
                downward.buttonColor = aligncolor;
                downward.textColor = new Color(0.8f, 0.9f, 1f);
                downward.buttonText.fontStyle = FontStyle.Bold;
                downward.buttonText.fontSize = 28;			

				leftward=setbutton(hud,() => {},"<",-42f,37f,591f+5+xadj,158+yadj);
                leftward.buttonColor = aligncolor;
                leftward.textColor = new Color(0.8f, 0.9f, 1f);
                leftward.buttonText.fontStyle = FontStyle.Bold;
                leftward.buttonText.fontSize = 28;		

				rightward=setbutton(hud,() => {},">",-42f,37f,646f+5+xadj,158+yadj);
                rightward.buttonColor = aligncolor;
                rightward.textColor = new Color(0.8f, 0.9f, 1f);
                rightward.buttonText.fontStyle = FontStyle.Bold;
                rightward.buttonText.fontSize = 28;						


float cadjustx=600;float cuay=-12;float cuax=-73.5f;float cual=317;
cuafiller=textbackground(hud.transform,cual,cuax+266,adjustx,cuay+60);
whitefiller=textbackground(hud.transform,cual+1.4f,cuax+265.5f,adjustx,cuay-19);
cuafiller.height=47;
whitefiller.height=119;
cualabel=textlabel(hud,"filter:",cual-104,cuax+266,adjustx,cuay+60.5f);
cuatext=textfield(hud,cual+24,cuax+249,adjustx,cuay+51.7f);
cuainput=inputfield(cuatext);
cuatext.UItext.fontSize=26;
cualabel.UItext.fontSize=26;
cuatext.UItext.fontStyle=FontStyle.Bold;
cuatext.UItext.color=Color.white;
cuafiller.backgroundColor= skinmenucolorlight;
whitefiller.backgroundColor= new Color(1,1,1,2);
	whitefiller.gameObject.SetActive(false);
	cuafiller.gameObject.SetActive(false);
	cualabel.gameObject.SetActive(false);
	cuatext.gameObject.SetActive(false);
	
urlinput=textfield(web,w-110,x+31,0,urlfiller.transform.localPosition.y-80);
_urlinput=inputfield(urlinput);
urlinput.textColor=Color.white;
//urlinput.backgroundColor=Color.green;

	chansb=setbutton(chat,() => {},"»CHANNEL",59f,58.5f,582,y+0.5f);
                chansb.buttonColor = new Color(0.7f, 0.68f, 0.72f,0.5f);
                chansb.textColor = new Color(0.8f, 0.9f, 1f);
                chansb.buttonText.fontStyle = FontStyle.Bold;
                chansb.buttonText.fontSize = 27;
	
					EventTrigger.Entry chsub = new EventTrigger.Entry();
					chsub.eventID = EventTriggerType.PointerEnter;
					chsub.callback.AddListener((eventData) => {helptip("chansb");submenu(chansb.transform,channels,"channels",cap:16,offsety: 0-84,spacing: 0-37);});
					chansb.gameObject.AddComponent<EventTrigger>();
					chansb.gameObject.GetComponent<EventTrigger>().triggers.Add(chsub);
					
					EventTrigger.Entry cuaenter = new EventTrigger.Entry();
					cuaenter.eventID = EventTriggerType.PointerEnter;
					cuaenter.callback.AddListener((eventData) => {
					Image cuascroll=cuawindow.gameObject.transform.Find("Scroll View/Scrollbar Vertical/Sliding Area/Handle").GetComponent<Image>();
					cuascroll.color=modelcolor;cuaout=false;pboxon=true;cuaon=true;});
					cuawindow.gameObject.AddComponent<EventTrigger>();
					cuawindow.gameObject.GetComponent<EventTrigger>().triggers.Add(cuaenter);
					safebox.gameObject.AddComponent<EventTrigger>();					
					safebox.gameObject.GetComponent<EventTrigger>().triggers.Add(cuaenter);						
					cuainput.gameObject.AddComponent<EventTrigger>();					
					cuainput.gameObject.GetComponent<EventTrigger>().triggers.Add(cuaenter);								

					EventTrigger.Entry cuaexit = new EventTrigger.Entry();
					cuaexit.eventID = EventTriggerType.PointerExit;
					cuaexit.callback.AddListener((eventData) => {cuaout=true;if(!cuapress){pboxon=false;StartCoroutine(removepbox(false));cuaon=false;StartCoroutine(hidecuas());}});
					cuawindow.gameObject.AddComponent<EventTrigger>();
					cuawindow.gameObject.GetComponent<EventTrigger>().triggers.Add(cuaexit);
					safebox.gameObject.AddComponent<EventTrigger>();					
					safebox.gameObject.GetComponent<EventTrigger>().triggers.Add(cuaexit);	
					cuainput.gameObject.AddComponent<EventTrigger>();					
					cuainput.gameObject.GetComponent<EventTrigger>().triggers.Add(cuaexit);		
					
					EventTrigger.Entry chbuttonrem = new EventTrigger.Entry();
					chbuttonrem.eventID = EventTriggerType.PointerExit;
					chbuttonrem.callback.AddListener((eventData) => {
					pboxon=false;
					helptip();
					if(!fading){StartCoroutine(removepbox(false));}				
					});
					chansb.gameObject.AddComponent<EventTrigger>();
					chansb.gameObject.GetComponent<EventTrigger>().triggers.Add(chbuttonrem);	

	targetb=setbutton(chat,() => {
		targetlist(msgtarget,lastmsg,clicked:true);

	},"»TARGET",42f,58.5f,440,y+0.5f);
                targetb.buttonColor = new Color(0.8f, 0.6f, 0f,0.4f);
                targetb.textColor = new Color(0.8f, 0.9f, 1f);
                targetb.buttonText.fontStyle = FontStyle.Bold;
                targetb.buttonText.fontSize = 26;
				
				
				
					EventTrigger.Entry tgsub = new EventTrigger.Entry();
					tgsub.eventID = EventTriggerType.PointerEnter;
					tgsub.callback.AddListener((eventData) => {helptip("targetb");submenu(targetb.transform,msgtargets,"targets",cap:16,offsety: 0-84,offsetx:-21.5f,spacing: 0-37);});
					targetb.gameObject.AddComponent<EventTrigger>();
					targetb.gameObject.GetComponent<EventTrigger>().triggers.Add(tgsub);


					EventTrigger.Entry tgbuttonrem = new EventTrigger.Entry();
					tgbuttonrem.eventID = EventTriggerType.PointerExit;
					tgbuttonrem.callback.AddListener((eventData) => {
					pboxon=false;
					helptip();
					if(!fading){StartCoroutine(removepbox(false));}				
					});
					targetb.gameObject.AddComponent<EventTrigger>();
					targetb.gameObject.GetComponent<EventTrigger>().triggers.Add(tgbuttonrem);	

	cconfigb=setbutton(chat,() => {
	if(cpanel==null){
cpanel=textfield(chat,w-219f,x-41.5f,0,y-208,h:243.5f);



_cpanel=inputfield(cpanel);
_cpanel.lineType = InputField.LineType.MultiLineNewline;

_cpanel.textComponent.resizeTextForBestFit = true;
_cpanel.textComponent.horizontalOverflow = HorizontalWrapMode.Overflow;
_cpanel.textComponent.verticalOverflow = VerticalWrapMode.Truncate;
_cpanel.textComponent.fontSize = 30;
_cpanel.textComponent.resizeTextMaxSize = 30;

cpanel.textColor=Color.white;
cpanel.backgroundColor=new Color(0.23f, 0.21f, 0.21f,0.95f);
_cpanel.text=loginconfig;
	}else{
		loginconfig=_cpanel.text;
		saveini();
	RemoveTextField(cpanel);	
	}



	},"≡",-30f,47f,-634,y+66f);
                cconfigb.buttonColor = new Color(0.8f, 0.6f, 0.7f,0.06f);
                cconfigb.textColor = new Color(0.8f, 0.9f, 1f);
                cconfigb.buttonText.fontStyle = FontStyle.Bold;
                cconfigb.buttonText.fontSize = 36;
				//TouchScreenKeyboard keyboard = TouchScreenKeyboard.Open("", TouchScreenKeyboardType.Default);	

	connectb=setbutton(chat,() => {
	if(Clientconnected){
	Closeclient();
	msgtargets=msgtarget=channels=chanlist="";
	chatlabel.text="OFFLINE";
	connectb.label="CONNECT";
	}
	else{
	Connecttohost(ircserver, int.Parse(ircport));
	connectb.label="DISCONNECT";
	}

	},"DISCONNECT",86f,47f,-562,y+66f);
                connectb.buttonColor = new Color(0.8f, 0.6f, 0.7f,0.06f);
                connectb.textColor = new Color(0.8f, 0.9f, 1f);
                connectb.buttonText.fontStyle = FontStyle.Bold;
                connectb.buttonText.fontSize = 26;
				//TouchScreenKeyboard keyboard = TouchScreenKeyboard.Open("", TouchScreenKeyboardType.Default);					

	autoconnectb=setbutton(chat,() => {
	if(autoconnect){
	autoconnect=false;
	autoconnectb.label="AUTOCONNECT: OFF ";
	}
	else{
	autoconnect=true;
	autoconnectb.label="AUTOCONNECT: <color=#ffffff>ON</color> ";
	}
	saveini();
	},"AUTOCONNECT ",197f,47f,438.5f,y+66f);
                autoconnectb.buttonColor = new Color(0.8f, 0.6f, 0.7f,0.06f);
                autoconnectb.textColor = new Color(0.67f, 0.65f, 0.7f);
                autoconnectb.buttonText.fontStyle = FontStyle.Bold;
				autoconnectb.buttonText.alignment = TextAnchor.MiddleRight;
                autoconnectb.buttonText.fontSize = 26;

	sendb=setbutton(chat,() => {Clientmessage(_chatinput.text,raw: false);_chatinput.ActivateInputField();
	
	//echo5(m_EventSystem.GetSelectedGameObject().ToString());
	},"«SEND",14f,58.5f,324,y+0.5f);
                sendb.buttonColor = new Color(0.8f, 0.6f, 0.7f,0.06f);
                sendb.textColor = new Color(0.8f, 0.9f, 1f);
                sendb.buttonText.fontStyle = FontStyle.Bold;
                sendb.buttonText.fontSize = 26;
				//TouchScreenKeyboard keyboard = TouchScreenKeyboard.Open("", TouchScreenKeyboardType.Default);				


	urlb=setbutton(web,() => {webview.url=_urlinput.text;_urlinput.ActivateInputField();
		},"«GO",14f,58.5f,urlfiller.transform.localPosition.x+476,urlfiller.transform.localPosition.y-78);
                urlb.buttonColor = new Color(0.8f, 0.6f, 0.7f,0.06f);
                urlb.textColor = new Color(0.8f, 0.9f, 1f);
                urlb.buttonText.fontStyle = FontStyle.Bold;
                urlb.buttonText.fontSize = 26;


	urlbackb=setbutton(web,() => {webview.GoBack();_urlinput.ActivateInputField();
		},"«",-30f,58.5f,urlfiller.transform.localPosition.x+591,urlfiller.transform.localPosition.y-78);
                urlbackb.buttonColor = new Color(0.22f, 0.17f, 0.18f,0.6f);
                urlbackb.textColor = new Color(0.8f, 0.9f, 1f);
                urlbackb.buttonText.fontStyle = FontStyle.Bold;
                urlbackb.buttonText.fontSize = 26;
				

	urlforwardb=setbutton(web,() => {webview.GoForward();_urlinput.ActivateInputField();
		},"»",-30f,58.5f,urlfiller.transform.localPosition.x+662,urlfiller.transform.localPosition.y-78);
                urlforwardb.buttonColor = new Color(0.22f, 0.17f, 0.18f,0.6f);
                urlforwardb.textColor = new Color(0.8f, 0.9f, 1f);
                urlforwardb.buttonText.fontStyle = FontStyle.Bold;
                urlforwardb.buttonText.fontSize = 26;

	linksb=setbutton(web,() => {if(lastlink==""){lastlink=homepage;}StartCoroutine(gourl(lastlink));_chatinput.ActivateInputField();
		},"LINKS",59f,58.5f,urlfiller.transform.localPosition.x+733,urlfiller.transform.localPosition.y-78);
                linksb.buttonColor = new Color(0.22f, 0.17f, 0.18f,0.9f);
                linksb.textColor = new Color(0.8f, 0.9f, 1f);
                linksb.buttonText.fontStyle = FontStyle.Bold;
                linksb.buttonText.fontSize = 26;					

					EventTrigger.Entry lsub = new EventTrigger.Entry();
					lsub.eventID = EventTriggerType.PointerEnter;
					lsub.callback.AddListener((eventData) => {helptip("linksb");submenu(linksb.transform,links,"links",tx: chat.transform,w:318,offsetx:-288,cap:30,lower:true,sadjust:-60);});
					linksb.gameObject.AddComponent<EventTrigger>();
					linksb.gameObject.GetComponent<EventTrigger>().triggers.Add(lsub);

					EventTrigger.Entry lbuttonrem = new EventTrigger.Entry();
					lbuttonrem.eventID = EventTriggerType.PointerExit;
					lbuttonrem.callback.AddListener((eventData) => {
					pboxon=false;helptip();
					if(!fading){StartCoroutine(removepbox(false));}				
					});
					linksb.gameObject.AddComponent<EventTrigger>();
					linksb.gameObject.GetComponent<EventTrigger>().triggers.Add(lbuttonrem);

					


//var noteinput=Input(note,note.text,false,false);note.backgroundColor = Color.clear;note.UItext.fontSize=18;//RemoveTextField(note);







	title=setbutton(ui,() => {
		echo25("t12");
	StartCoroutine(checkupdate());
	},pluginlabel+"  ",1200f,82f,-600f,1542f);

                title.buttonColor = new Color(0.13f, 0.13f, 0.15f);
                title.textColor = titletextcolor;
                title.buttonText.fontStyle = FontStyle.Bold;
                title.buttonText.fontSize = 32;




				
				personbutton=setbutton(ui,() => {fromui=true;StartCoroutine(addperson(lastperson));},"Add //\\\\/\\\\odel°",117f,59f,268f,-17);
				
                personbutton.buttonColor = addmodelcolor;
                personbutton.textColor = new Color(0.8f, 0.9f, 1f);
                personbutton.buttonText.fontStyle = FontStyle.Bold;
                personbutton.buttonText.fontSize = 28;
                personbutton.buttonText.lineSpacing=0;
				
				
				int hadj=140;
				
var wizwindow=Text(wiz,"\nNo models in scene",404,420,-208,800);

wizwindow.backgroundColor = chatcolor;
wizwindow.UItext.alignment = TextAnchor.LowerCenter;
wizwindow.UItext.color = Color.white;
//wizwindow.UItext.fontStyle = FontStyle.Bold;
wizwindow.UItext.fontSize = 38;
wizwindow.UItext.lineSpacing=0.5f;
wizwindow.UItext.supportRichText = true;

				personbutton2=setbutton(wiz,() => {StartCoroutine(addperson(lastperson));},"Add //\\\\/\\\\odel°",246f,59f,-130f,1217-hadj);
                personbutton2.buttonColor = addmodelcolor;
                personbutton2.textColor = new Color(0.8f, 0.9f, 1f);
                personbutton2.buttonText.fontStyle = FontStyle.Bold;
                personbutton2.buttonText.fontSize = 28;
                personbutton2.buttonText.lineSpacing=0;
				
				headl2=setbutton(wiz,() => {if(!people){fromui=true;StartCoroutine(addperson(lastperson,quick:true));}else{Preset();}},"Load //\\\\/\\\\odel",246f,59f,-130f,1147-hadj);
                headl2.buttonColor = addmodelcolor;
                headl2.textColor =Color.white;
                headl2.buttonText.fontStyle = FontStyle.Bold;
                headl2.buttonText.fontSize = 28;
				
				var tutorialb=setbutton(wiz,() => {
					
				webview.url="https://morphinecentral.com/video";
				webvisible=true;url.enabled=true;web.enabled=true;
				wwwbuttonhud.textColor = new Color(0.8f, 0.9f, 1f);
				wwwbutton.textColor = new Color(0.8f, 0.9f, 1f);
					
					},"Watch tutorial-videos",246f,59f,-130f,1009-hadj);
                tutorialb.buttonColor = refreshcolor;
                tutorialb.textColor = Color.black;
                tutorialb.buttonText.fontStyle = FontStyle.Bold;
                tutorialb.buttonText.fontSize = 28;
                tutorialb.buttonText.lineSpacing=0;
				
				var docubutton=setbutton(wiz,() => {
										
				webview.url="https://morphinecentral.com";
				webvisible=true;url.enabled=true;web.enabled=true;
				wwwbuttonhud.textColor = new Color(0.8f, 0.9f, 1f);
				wwwbutton.textColor = new Color(0.8f, 0.9f, 1f);
					
					
				},"Read documentation",246f,59f,-130f,1078-hadj);
                docubutton.buttonColor = refreshcolor;
                docubutton.textColor = Color.black;
                docubutton.buttonText.fontStyle = FontStyle.Bold;
                docubutton.buttonText.fontSize = 28;
                docubutton.buttonText.lineSpacing=0;				
			
				closebutton=setbutton(ui,() => {
					echo25("t2");
			UITransform.gameObject.SetActive(false);
				},"X",-30f,60f,628,1554);
                closebutton.buttonColor = chatcolor;
                closebutton.textColor = new Color(0.8f, 0.9f, 1f);
                closebutton.buttonText.fontStyle = FontStyle.Bold;
                closebutton.buttonText.fontSize = 30;
				
				chatbutton=setbutton(ui,() => {
				if(chat.enabled){chat.enabled=false;
				chatbutton.textColor = new Color(0.4f, 0.5f, 0.6f);
				chatbuttonhud.textColor = new Color(0.4f, 0.5f, 0.6f);
				}else{
				chat.enabled=true;
				chatbutton.textColor = new Color(0.8f, 0.9f, 1f);
				chatbuttonhud.textColor = new Color(0.8f, 0.9f, 1f);
				}
				chatvisible=chat.enabled;
				setmenu=true;
				saveini();
				},"CHAT",0f,60f,351,1554);
				chatbutton.buttonColor = chatcolor;
                chatbutton.textColor = new Color(0.8f, 0.9f, 1f);
                chatbutton.buttonText.fontStyle = FontStyle.Bold;
                chatbutton.buttonText.fontSize = 30;
				
			 wwwbutton=setbutton(ui,() => {
				if(web.enabled){
				webvisible=false;url.enabled=false;web.enabled=false;
				wwwbuttonhud.textColor = new Color(0.4f, 0.5f, 0.6f);
				wwwbutton.textColor = new Color(0.4f, 0.5f, 0.6f);
				}else{
				webvisible=true;url.enabled=true;web.enabled=true;
				wwwbuttonhud.textColor = new Color(0.8f, 0.9f, 1f);
				wwwbutton.textColor = new Color(0.8f, 0.9f, 1f);
				}
				setmenu=true;
				saveini();
				},"WEB",0f,60f,453,1554);
                wwwbutton.buttonColor = chatcolor;
                wwwbutton.textColor = new Color(0.8f, 0.9f, 1f);
                wwwbutton.buttonText.fontStyle = FontStyle.Bold;
                wwwbutton.buttonText.fontSize = 30;
				
				minibutton=setbutton(ui,() => {
			Transform closebtn=SuperController.singleton.mainHUD.Find("MainUICanvas/CloseMainUIButton");
			UIStyleButton cb=closebtn.GetComponent<UIStyleButton>();
			cb.transform.GetComponent<Button>().onClick.Invoke();
				},"_",-30f,60f,556,1554);
                minibutton.buttonColor = chatcolor;
                minibutton.textColor = new Color(0.8f, 0.9f, 1f);
                minibutton.buttonText.fontStyle = FontStyle.Bold;
                minibutton.buttonText.fontSize = 36;				

				modelbutton=setbutton(ui,() => {

					
				},"No models",116f,59f,482f,-17);
                modelbutton.buttonColor = modelcolor;
                modelbutton.textColor = new Color(0.8f, 0.9f, 1f);
                modelbutton.buttonText.fontStyle = FontStyle.Bold;
                modelbutton.buttonText.fontSize = 28;
				
					EventTrigger.Entry msub = new EventTrigger.Entry();
					msub.eventID = EventTriggerType.PointerEnter;
					msub.callback.AddListener((eventData) => {
					helptip("modelbutton");
					showbox="models";StartCoroutine(showmenu(showbox,modelbutton.transform,plist,"models",gotoadjust2:-376f,gotoadjust:-317f,subw:322,suboffsety:-109,suboffsetx:-210,cap:26,w:330,offsetx:-272,sadjust:-434,gotosub2:"C",gotosub:"ON",offsety: 0-52,spacing: 0+37));

					//submenu(modelbutton.transform,plist,"models",offsetx: -272,w:330,subh:44,suby:4,h:46,offsety: 0-66,spacing: 0+44,sadjust:-64);
					
					});
					modelbutton.gameObject.AddComponent<EventTrigger>();
					modelbutton.gameObject.GetComponent<EventTrigger>().triggers.Add(msub);


					EventTrigger.Entry mbuttonrem = new EventTrigger.Entry();
					mbuttonrem.eventID = EventTriggerType.PointerExit;
					mbuttonrem.callback.AddListener((eventData) => {
					showbox="";
					helptip();
					pboxon=false;
					if(!fading){StartCoroutine(removepbox(false));}				
					});
					modelbutton.gameObject.AddComponent<EventTrigger>();
					modelbutton.gameObject.GetComponent<EventTrigger>().triggers.Add(mbuttonrem);					
				
				skinbutton=setbutton(ui,() => {StartCoroutine(changeskin(lastperson));},"Skin //\\\\/\\\\odel",117f,59f,268f,272f);
                skinbutton.buttonColor = skinmodelcolor;
                skinbutton.textColor = new Color(0.8f, 0.9f, 1f);
                skinbutton.buttonText.fontStyle = FontStyle.Bold;
                skinbutton.buttonText.fontSize = 28;
				
				streambutton=setbutton(ui,() => {StartCoroutine(setstream());},"Streamº",116f,59f,482,272f);
                streambutton.buttonColor = streamcolor;
                streambutton.textColor = new Color(0.8f, 0.9f, 1f);
                streambutton.buttonText.fontStyle = FontStyle.Bold;
                streambutton.buttonText.fontSize = 28;
                streambutton.buttonText.horizontalOverflow = HorizontalWrapMode.Overflow;


Canvas dcanv=hide;
if(debugger){dcanv=hud;}
			
				debug=setbutton(dcanv,() => {
					
					
					/*
					//FileManagerSecure.DeleteFile("Saves\\PluginData\\test.var");
					
							if (coco==null && moco==null){
			
		var loco=new GameObject();	
		moco=loco.AddComponent<VRWebBrowser>();
		
							}
		moco.url="https://hub.virtamate.com/resources/gamer-girl.11765/version/14932/download?file=74062";

*/

/*
 UnityEngine.RenderSettings.ambientSkyColor=Color.green;
 UnityEngine.RenderSettings.ambientLight=Color.green;

if(Mcamera!=null){Mcamera.clearFlags=CameraClearFlags.Color;
Mcamera.backgroundColor=setcol;}
SuperController.singleton.hiResScreenshotCamera.clearFlags=CameraClearFlags.Color;
SuperController.singleton.hiResScreenshotCamera.backgroundColor=new Color(0,1,0,0);
SuperController.singleton.MonitorCenterCamera.clearFlags=CameraClearFlags.Color;
SuperController.singleton.MonitorCenterCamera.backgroundColor=new Color(0,1,0,0);
Camera wincam=SuperController.singleton.GetAtomByUid("WindowCamera").GetComponentInChildren<Camera>();
Camera maincam=SuperController.singleton.lookCamera;
maincam.fieldOfView=20;
maincam.clearFlags =CameraClearFlags.Color;
wincam.clearFlags =CameraClearFlags.Color;
//maincam.backgroundColor=new Color(0,1,0,0);
wincam.backgroundColor=new Color(0,1,0,0);

*/

//echo9(getscene());

try{

StartCoroutine(imagefind(SuperController.singleton.mainHUD,80,133,time: 0.005f));

/*
foreach(Canvas c in SuperController.singleton.GetAtomByUid("WindowCamera").GetComponentsInChildren<Canvas>(true)){
echo14(c.name);
	CanvasGroup b=c.gameObject.AddComponent<CanvasGroup>();
	b.alpha=0.4f;
}
*/
/*
foreach(Transform tt in rightUIContent.parent.GetComponentsInChildren<Transform>(true)){
	getparent(tt,tt.name);
echo11(tt.name+" > "+tt.parent.localPosition.ToString()+"/"+tt.localPosition.ToString());	
}
*/
//StartCoroutine(imagefind(SuperController.singleton.mainHUD,3,63,time: 0.0001f));
//StartCoroutine(sethudbuttons(new Color(0.67f,0.7f,0.72f),new Color(0.33f,0.32f,0.38f)));
//injectmorphine();
//SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Toolbar/").GetComponent<Image>().color=new Color(0,0,0,0);
//StartCoroutine(sethudbuttons(new Color(0.67f,0.7f,0.72f),new Color(0.33f,0.32f,0.38f)));
	

/*
foreach(Transform cc in SuperController.singleton.transform.parent.GetComponentsInChildren<Transform>(true)){
//if(cc.ToString().contains("skyboxcon")){
getparent(cc.transform,cc.transform.name,"sky");
echo9(cc.ToString());
webpanel.transform.SetParent(cc.transform,true);
//}
}

foreach(Transform ccc in SuperController.singleton.transform.parent.GetComponentsInChildren<Transform>(true)){
if(ccc.ToString().contains("kybox (unit")){
getparent(ccc.transform,ccc.transform.name);
echo9(ccc.ToString());
//ccc.transform.SetParent(trans.transform,false);
}	
}
//textfind(SuperController.singleton.transform.parent,"sky");

*/
/*
StartCoroutine(imagefind(SuperController.singleton.mainHUD,60,63,time: 0.005f));

	foreach(Atom aa in SuperController.singleton.GetAtoms()){
	foreach(Button b in aa.transform.GetComponentsInChildren<Button>(true)){
		var plugintype="Person-plugin";
		var pluginname="";
		var plugintitle="";
		var pluginpath="";
		Button  removebutton=null;
		Button  openbutton=null;
	
		if(b.transform.parent.name=="ScriptControllerPanel(Clone)"){
		if(aa.type!="Person"){plugintype=b.transform.parent.parent.parent.parent.parent.parent.parent.name.Replace("TabSessionPlugins","Session-plugin").Replace("TabScenePlugins","Scene-plugin").Replace("Plugins","Plugin");}
		foreach(Text t in b.transform.parent.parent.parent.GetComponentsInChildren<Text>()){
		//SuperController.LogMessage("Atom: "+aa.name+" > Atom type:"+aa.type+" > Label: "+t.transform.parent.name+"/"+t.transform.name+" > String: "+t.text+">");//DEBUG
		if(t.transform.name=="UID" && t.text.Contains("plugin#") && t.text.Contains("_")){pluginname=t.text;}
		else if(t.transform.name=="URL" && t.text.Contains("/")){pluginpath=t.text;}
		else if(t.transform.parent.name=="NameInputField" && t.transform.name=="Text" && t.text!=""){plugintitle=" > Title: "+t.text;}
		}
	SuperController.LogMessage("Atom: "+aa.name+" > Plugintype: "+plugintype+" > Path: "+pluginpath+" > Name: "+pluginname+plugintitle);
	if(b.transform.name=="OpenUIButton" ){openbutton=b;}
	if(b.transform.name=="RemoveButton" ){removebutton=b;}
	}
	}
	}

*/
/*
	foreach(Atom aa in SuperController.singleton.GetAtoms()){
	

	foreach(MVRScript scr in aa.transform.GetComponentsInChildren<MVRScript>(true)){
	
	string ss = ""; Transform gg = scr.transform.parent;int ii=0;
	while (gg != null && gg.name!=aa.name)
	{ii++;
	ss = gg.name + "/" + ss;
	gg = gg.parent;
	}
	var find="\""+ss+"\"";
	SuperController.LogMessage("Name: "+scr.name+" Atom: "+aa.name+" Example:\nSuperController.singleton.transform.Find("+find+").GetComponentInChildren<Button>(true).onClick.Invoke();");
	
    }
    }
*/

/*
foreach(string s in SuperController.singleton.GetAtomUIDs()){
if(s.Contains("lider")){
var at=SuperController.singleton.GetAtomByUid(s);
if(at.type=="UISlider"){
UnityEngine.UI.Slider af=null;

JSONStorable trigger = at.GetStorableByID("Trigger");
JSONStorableFloat sliderval = trigger.GetFloatJSONParam("value");
echo9("coco: "+sliderval.val.ToString());

JSONStorable text = at.GetStorableByID("Text");
JSONStorableString textval = text.GetStringJSONParam("text");
echo9("coco: "+textval.val.ToString());

foreach(Slider sl in at.transform.GetComponentsInChildren<Slider>(true)){

if(sl.transform.name.Contains("nterp")){
	echo9(sl.value.ToString());
af=sl;
}
}
//Slider af=at.transform.Find("UIPlaceHolder/UIAtomUISlider(Clone)/Canvas/Panel/Content/Slider Trigger/RightSide/InterpSlider/").GetComponent<Slider>();
if(af!=null){
if(!afvalues.ContainsKey(at.name) ||  afvalues[at.name]!=af.value){

echo(at.name);
}
if(afvalues.ContainsKey(at.name)){afvalues.Remove(at.name);}
afvalues.Add(at.name,af.value);
}
}
}
}
*/
	//SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/GameModeToggleGroup/Play Toggle/").GetComponentInChildren<UIDynamicToggle>(true).toggle

//echo9(SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Panel/ClickForMoreOptions/OtherOptionsPopup/Time Scale/").GetComponentInChildren<Slider>(true).value.ToString());
//textfind(SuperController.singleton.mainHUD,"Mirror To Desktop");


					
//Selectcontrol(_person,"rToeControl");

//GameObject cocobox=createbox(models.transform);
//cocobox.transform.GetComponent<Image>().color=Color.green;
/*	

		Button bb=SuperController.singleton.transform.Find("HUDForLogs/ErrorLogCanvas/Panel/ClearButton/").GetComponentInChildren<Button>(true);
		getparent(bb.transform,bb.name);
		
		
							
	foreach(Text tt in SuperController.singleton.errorSplashTransform.GetComponentsInChildren<Text>(true)){
		if(tt.transform.name+tt.transform.parent.name=="TextAutoSizingInputField"){
		getparent(tt.transform,tt.name);
		}}
*/	

//textfind(SuperController.singleton.GetAtomByUid("Person").transform,"Select Existing");

	//_person.transform.Find("Person/UI/UIPlaceHolderModel/UIModel/Canvas/Panel/Content/Appearance Presets/PresetPanel/BrowseExistingPresetButton/").GetComponentInChildren<Button>(true).onClick.Invoke();	

/*
SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Toolbar/AutoLayoutArea/ButtonOpenErrorLog/").GetComponent<Image>().color=Color.red;
foreach(Text tt in SuperController.singleton.errorSplashTransform.GetComponentsInChildren<Text>(true)){
echo8(tt.text);	
}
echo8(SuperController.singleton.errorCount.ToString());
*/
/*
SuperController.singleton.mainHUD.Find("Browsers/Online Scene Browser Canvas/AutoExtractToggle/").GetComponent<Toggle>().isOn=false;
foreach(Toggle t in SuperController.singleton.onlineBrowser.transform.parent.GetComponentsInChildren<Toggle>(true)){
	if(t.name=="AutoExtractToggle"){t.isOn=false;}
}
*/

//textfind(SuperController.singleton.mainHUD,"//\\\\");
//var analswitch = _person.transform.Find("UI/UIPlaceHolderModel/UIModel/Canvas/Panel/Content/Auto Behaviours/LeftSide/AutoFemaleGenitalAndAnusMorphs").GetComponentInChildren<UIDynamicToggle>(true).toggle;
//analswitch.isOn=false;
/*
//echo7(webview.browser.Url);
foreach(Component s in webview.transform.parent.GetComponentsInChildren<Component>(true)){
echo7(s.ToString());
if(s.ToString().Contains(".Browser")){
getparent(s.transform,s.name);
s.name="browser";
s.transform.name="browsertr";
s.transform.parent.name="browserparent";
getparent(s.transform,s.name);
//echo7(s.transform.parent.browser.Url);
}
}

*/
//JSONClass saveJSON = SuperController.singleton.GetSaveJSON(_person, true, true);
//FileManagerSecure.WriteAllText(_plugindir+_pluginowner+_plugin+"\\defaultsave.json",saveJSON.ToString());

//StartCoroutine(NewSessionPreset("Custom\\Scripts\\God\\MORPHINE.cs"));
//StartCoroutine(NewSessionPreset("AddonPackages\\God.MORPHINE.16.var:\\Custom\\Scripts\\God\\MORPHINE.cs"));
//StartCoroutine(NewSessionPreset(upgradefile));

/*								JSONStorable js = _person.GetStorableByID("Preset");
								JSONStorableUrl presetPathJSON = js.GetUrlJSONParam("presetBrowsePath");
								JSONStorableString presetPathJSON = js.GetStringJSONParam("presetName");
								presetPathJSON.val = _plugindir+_pluginowner+_plugin+"";
								presetPathJSON.val = _plugindir+_pluginowner+_plugin+"";

								js.CallAction("StorePreset");
								*/
/*
			var saveName=_plugindir+_pluginowner+_plugin+"\\default.json";
			//var saveName="Saves/Person/Pose/humanize.json";
			string aJSON = FileManagerSecure.ReadAllText(saveName);
			JSONNode jSONNode = JSON.Parse(aJSON);
			JSONArray asArray = jSONNode["atoms"].AsArray;
			JSONClass asObject = asArray[0].AsObject;

			_person.PreRestore(true, false);
			_person.RestoreTransform(asObject);
			_person.Restore(asObject, true, true, false, asArray);
			_person.LateRestore(asObject, true, true, false);
			_person.PostRestore(true, true);
			_person.ResetPhysics(false);


*/
/*
var saveName=_plugindir+_pluginowner+_plugin+"/";
saveName=saveName.Replace("\\","/");
SuperController.singleton.fileBrowserUI.defaultPath = _plugindir+_pluginowner+_plugin;
_person.SavePresetDialog(true,true);
SuperController.singleton.fileBrowserUI.defaultPath = _plugindir+_pluginowner+_plugin;
*/	
/*
								JSONStorable js = _person.GetStorableByID("Presets");
								JSONStorableUrl presetPathJSON = js.GetUrlJSONParam("presetBrowsePath");
								JSONStorableUrl presetPathJSON = js.GetUrlJSONParam("presetBrowsePath");
								presetPathJSON.val = "Custom/Atom/Person/Pose/Preset_humanizer.vap";

								js.CallAction("SavePreset");
								
	*/							


//StartCoroutine(textfind(SuperController.singleton.packageManagerUI.Find("BackPanel/PackageInfoPanel"),"Tanklover"));
//getvarinfo();
//foreach(KeyValuePair<string, string> v in varinfo){echo7(v.Key+" > "+v.Value);}

//DETECT SCENELOAD	
//SuperController.singleton.isLoading;	


//echo7(SuperController.singleton.loadConfirmPathText.text);





//StartCoroutine(textfind(SuperController.singleton.packageManagerUI.Find("BackPanel/PackageInfoPanel"),"must credit creator"));




//StartCoroutine(textfind(SuperController.singleton.mainHUD,"time scale"));

//SuperController.singleton.ResetNavigationRigPositionRotation();
//ui.enabled=!ui.enabled;
//Transform uiui=SuperController.singleton.mainHUD.transform.Find("MainUICanvas").GetComponent<Transform>();
//uiui.parent.transform.localPosition=new Vector2(uiui.parent.transform.localPosition.x,uiui.parent.transform.localPosition.y+0.05f);

//echo7(SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Panel/ClickForMoreOptions").gameObject.active.ToString());
//echo7(SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas").GetComponent<Canvas>().enabled.ToString());

//var sce=new UnityEngine.SceneManagement();

//var scer=UnityEngine.SceneManagement.Scene.name;
//echo7(scer);
//UPGRADE SESSION PLUGIN!
//StartCoroutine(NewSessionPreset("AddonPackages\\Redeyes.GiveMeFPS.21.var:\\Custom\\Scripts\\GiveMeFPS.cs"));



/*
//StartCoroutine(imagefind(UITransform.parent.parent.parent.parent.parent,45,70,time: 0.005f));
Transform closebtn=SuperController.singleton.mainHUD.Find("MainUICanvas/CloseMainUIButton");
foreach(UIStyleButton c in closebtn.GetComponentsInChildren<UIStyleButton>(true)){

echo7(c.ToString());
}
UIStyleButton cb=closebtn.GetComponent<UIStyleButton>();
cb.transform.GetComponent<Button>().onClick.Invoke();
if(!closeset){
closeset=true;
closepos=closebtn.localPosition;
}
closebtn.localPosition=new Vector2(closepos.x-10,closepos.y);
//STORE USERDEFAULT SESSION PRESET
//SuperController.singleton.sessionPresetManagerControl.StoreUserDefaults(false);
*/
}
catch(Exception e){SuperController.LogError("Exception caught: " + e);}

 //SuperController.singleton.SelectModeScreenshot();
 
			//ScreenCapture.CaptureScreenshot(name);
			//Screenshot("Saves\\PluginData\\God\\shot.jpg");
					
					},"≡ Debug",116f,60f,1782,1317);
                debug.buttonColor = new Color(0.21f, 0.2f, 0.22f);
                debug.textColor = new Color(0.8f, 0.9f, 1f);
                debug.buttonText.fontStyle = FontStyle.Bold;
                debug.buttonText.fontSize = 28;
			
				texturecopy=setbutton(ui,() => {
						if(!people){Result("ADD A MODEL FIRST");return;}
					StartCoroutine(realskin(_person,mode:"copy"));
					_person.GetStorableByID("skin").SaveToStore3();
					Result("Texture copied");
					},"Copy texture",116f,59f,482,214f);
                texturecopy.buttonColor = copytexturecolor;
                texturecopy.textColor = new Color(0.8f, 0.9f, 1f);
                texturecopy.buttonText.fontStyle = FontStyle.Bold;
                texturecopy.buttonText.fontSize = 28;
				
			
				
					EventTrigger.Entry buttonrem = new EventTrigger.Entry();
					buttonrem.eventID = EventTriggerType.PointerExit;
					buttonrem.callback.AddListener((eventData) => {
					showbox="";
					helptip();
					pboxon=false;
					if(!fading){StartCoroutine(removepbox(change));}				
					});
					personbutton.gameObject.AddComponent<EventTrigger>();
					personbutton.gameObject.GetComponent<EventTrigger>().triggers.Add(buttonrem);
					
					skinbutton.gameObject.AddComponent<EventTrigger>();
					skinbutton.gameObject.GetComponent<EventTrigger>().triggers.Add(buttonrem);
									
					EventTrigger.Entry buttonexit = new EventTrigger.Entry();
					buttonexit.eventID = EventTriggerType.PointerEnter;
					buttonexit.callback.AddListener((eventData) => {fromui=true;helptip("personbutton");change=false;showbox="model";StartCoroutine(showskinmenu(showbox,change:false));});
														
					EventTrigger.Entry skinsub = new EventTrigger.Entry();
					skinsub.eventID = EventTriggerType.PointerEnter;
					skinsub.callback.AddListener((eventData) => {helptip("skinbutton");change=true;showbox="skin";StartCoroutine(showskinmenu(showbox,change:true));});
					
					personbutton.gameObject.AddComponent<EventTrigger>();
					personbutton.gameObject.GetComponent<EventTrigger>().triggers.Add(buttonexit);
					
					skinbutton.gameObject.AddComponent<EventTrigger>();
					skinbutton.gameObject.GetComponent<EventTrigger>().triggers.Add(skinsub);



				

	yadj=-210; xadj=0;

	headc=setbutton(ui,() => {StartCoroutine(Head(false));},"Copy //\\\\/\\\\odel",116f,59f,482,40);
                headc.buttonColor = copymodelcolor;
                headc.textColor = new Color(0.8f, 0.9f, 1f);
                headc.buttonText.fontStyle = FontStyle.Bold;
                headc.buttonText.fontSize = 28;

	headp=setbutton(ui,() => {StartCoroutine(Headpaste(false));},"Paste //\\\\/\\\\odel",117f,59f,268f,40);
                headp.buttonColor = pastemodelcolor;
                headp.textColor = new Color(0.8f, 0.9f, 1f);
                headp.buttonText.fontStyle = FontStyle.Bold;
                headp.buttonText.fontSize = 28;
				
	heads=setbutton(ui,() => {Preset(save: true);},"Save //\\\\/\\\\odel",116f,59f,482,98);
                heads.buttonColor = savemodelcolor;
                heads.textColor = new Color(0.8f, 0.9f, 1f);
                heads.buttonText.fontStyle = FontStyle.Bold;
                heads.buttonText.fontSize = 28;

	morphload=setbutton(ui,() => {if(!people){StartCoroutine(addperson(lastperson,quick:true,morph:true));}else{Preset(mode: "Morph");}},"Load //\\\\/\\\\orph",117f,59f,268f,156);
                morphload.buttonColor = loadmorphcolor;
                morphload.textColor = new Color(0.8f, 0.9f, 1f);
                morphload.buttonText.fontStyle = FontStyle.Bold;
                morphload.buttonText.fontSize = 28;
				
	morphsave=setbutton(ui,() => {Preset(save: true, mode: "Morph");},"Save //\\\\/\\\\orph",116f,59f,482,156);
                morphsave.buttonColor = savemorphcolor;
                morphsave.textColor = new Color(0.8f, 0.9f, 1f);
                morphsave.buttonText.fontStyle = FontStyle.Bold;
                morphsave.buttonText.fontSize = 28;

	headl=setbutton(ui,() => {if(!people){StartCoroutine(addperson(lastperson,quick:true));}else{Preset();}},"Load //\\\\/\\\\odel",117f,59f,268f,98);
                headl.buttonColor = loadmodelcolor;
                headl.textColor = new Color(0.8f, 0.9f, 1f);
                headl.buttonText.fontStyle = FontStyle.Bold;
                headl.buttonText.fontSize = 28;								
				

				
			EventTrigger.Entry move1 = new EventTrigger.Entry();
    		move1.eventID = EventTriggerType.PointerDown;
			move1.callback.AddListener((eventData) => {move="in";moving=true;echo3("inward start");StartCoroutine(mover());});
    		inward.gameObject.AddComponent<EventTrigger>();
			inward.gameObject.GetComponent<EventTrigger>().triggers.Add(move1);
			
			EventTrigger.Entry move1b = new EventTrigger.Entry();
    		move1b.eventID = EventTriggerType.PointerEnter;
			move1b.callback.AddListener((eventData) => {helptip("inward");movec=10f;move="in";});
    		inward.gameObject.AddComponent<EventTrigger>();
			inward.gameObject.GetComponent<EventTrigger>().triggers.Add(move1b);			
			
			EventTrigger.Entry move2 = new EventTrigger.Entry();
    		move2.eventID = EventTriggerType.PointerUp;
			move2.callback.AddListener((eventData) => {move="in";moving=false;echo3("inward stop");});
    		inward.gameObject.AddComponent<EventTrigger>();
			inward.gameObject.GetComponent<EventTrigger>().triggers.Add(move2);
			
	
			EventTrigger.Entry move3 = new EventTrigger.Entry();
    		move3.eventID = EventTriggerType.PointerDown;
			move3.callback.AddListener((eventData) => {move="out";moving=true;echo3("outward start");StartCoroutine(mover());});
    		outward.gameObject.AddComponent<EventTrigger>();
			outward.gameObject.GetComponent<EventTrigger>().triggers.Add(move3);

			
			EventTrigger.Entry move3b = new EventTrigger.Entry();
    		move3b.eventID = EventTriggerType.PointerEnter;
			move3b.callback.AddListener((eventData) => {helptip("outward");movec=10f;move="out";});
    		outward.gameObject.AddComponent<EventTrigger>();
			outward.gameObject.GetComponent<EventTrigger>().triggers.Add(move3b);			
			
			EventTrigger.Entry move4 = new EventTrigger.Entry();
    		move4.eventID = EventTriggerType.PointerUp;
			move4.callback.AddListener((eventData) => {move="out";moving=false;echo3("outward stop");});
    		outward.gameObject.AddComponent<EventTrigger>();
			outward.gameObject.GetComponent<EventTrigger>().triggers.Add(move4);
								
			EventTrigger.Entry move5 = new EventTrigger.Entry();
    		move5.eventID = EventTriggerType.PointerDown;
			move5.callback.AddListener((eventData) => {move="up";moving=true;echo3("upward start");StartCoroutine(mover());});
    		upward.gameObject.AddComponent<EventTrigger>();
			upward.gameObject.GetComponent<EventTrigger>().triggers.Add(move5);
			
			EventTrigger.Entry move5b = new EventTrigger.Entry();
    		move5b.eventID = EventTriggerType.PointerEnter;
			move5b.callback.AddListener((eventData) => {helptip("upward");movec=10f;move="up";});
    		upward.gameObject.AddComponent<EventTrigger>();
			upward.gameObject.GetComponent<EventTrigger>().triggers.Add(move5b);			
			
			EventTrigger.Entry move6 = new EventTrigger.Entry();
    		move6.eventID = EventTriggerType.PointerUp;
			move6.callback.AddListener((eventData) => {move="up";moving=false;echo3("upward stop");});
    		upward.gameObject.AddComponent<EventTrigger>();
			upward.gameObject.GetComponent<EventTrigger>().triggers.Add(move6);
			
			EventTrigger.Entry move7 = new EventTrigger.Entry();
    		move7.eventID = EventTriggerType.PointerDown;
			move7.callback.AddListener((eventData) => {move="down";moving=true;echo3("downward start");StartCoroutine(mover());});
    		downward.gameObject.AddComponent<EventTrigger>();
			downward.gameObject.GetComponent<EventTrigger>().triggers.Add(move7);
			
			EventTrigger.Entry move7b = new EventTrigger.Entry();
    		move7b.eventID = EventTriggerType.PointerEnter;
			move7b.callback.AddListener((eventData) => {helptip("downward");movec=10f;move="down";});
    		downward.gameObject.AddComponent<EventTrigger>();
			downward.gameObject.GetComponent<EventTrigger>().triggers.Add(move7b);			
			
			EventTrigger.Entry move8 = new EventTrigger.Entry();
    		move8.eventID = EventTriggerType.PointerUp;
			move8.callback.AddListener((eventData) => {move="down";moving=false;echo3("downward stop");});
    		downward.gameObject.AddComponent<EventTrigger>();
			downward.gameObject.GetComponent<EventTrigger>().triggers.Add(move8);
			
			EventTrigger.Entry move9 = new EventTrigger.Entry();
    		move9.eventID = EventTriggerType.PointerDown;
			move9.callback.AddListener((eventData) => {move="left";moving=true;echo3("leftward start");StartCoroutine(mover());});
    		leftward.gameObject.AddComponent<EventTrigger>();
			leftward.gameObject.GetComponent<EventTrigger>().triggers.Add(move9);
			
			EventTrigger.Entry move9b = new EventTrigger.Entry();
    		move9b.eventID = EventTriggerType.PointerEnter;
			move9b.callback.AddListener((eventData) => {helptip("leftward");movec=10f;move="left";});
    		leftward.gameObject.AddComponent<EventTrigger>();
			leftward.gameObject.GetComponent<EventTrigger>().triggers.Add(move9b);
			
			EventTrigger.Entry move10 = new EventTrigger.Entry();
    		move10.eventID = EventTriggerType.PointerUp;
			move10.callback.AddListener((eventData) => {move="left";moving=false;echo3("leftward stop");});
    		leftward.gameObject.AddComponent<EventTrigger>();
			leftward.gameObject.GetComponent<EventTrigger>().triggers.Add(move10);
			
			EventTrigger.Entry move11 = new EventTrigger.Entry();
    		move11.eventID = EventTriggerType.PointerDown;
			move11.callback.AddListener((eventData) => {move="right";moving=true;echo3("rightward start");StartCoroutine(mover());});
    		rightward.gameObject.AddComponent<EventTrigger>();
			rightward.gameObject.GetComponent<EventTrigger>().triggers.Add(move11);
			
			EventTrigger.Entry move11b = new EventTrigger.Entry();
    		move11b.eventID = EventTriggerType.PointerEnter;
			move11b.callback.AddListener((eventData) => {helptip("rightward");movec=10f;move="right";});
    		rightward.gameObject.AddComponent<EventTrigger>();
			rightward.gameObject.GetComponent<EventTrigger>().triggers.Add(move11b);
			
			EventTrigger.Entry move12 = new EventTrigger.Entry();
    		move12.eventID = EventTriggerType.PointerUp;
			move12.callback.AddListener((eventData) => {move="right";moving=false;echo3("rightward stop");});
    		rightward.gameObject.AddComponent<EventTrigger>();
			rightward.gameObject.GetComponent<EventTrigger>().triggers.Add(move12);
			
			EventTrigger.Entry moveexit = new EventTrigger.Entry();
    		moveexit.eventID = EventTriggerType.PointerExit;
			moveexit.callback.AddListener((eventData) => {helptip();});

    		aligner.gameObject.AddComponent<EventTrigger>();
			rightward.gameObject.GetComponent<EventTrigger>().triggers.Add(moveexit);
			leftward.gameObject.GetComponent<EventTrigger>().triggers.Add(moveexit);
			upward.gameObject.GetComponent<EventTrigger>().triggers.Add(moveexit);
			downward.gameObject.GetComponent<EventTrigger>().triggers.Add(moveexit);
			inward.gameObject.GetComponent<EventTrigger>().triggers.Add(moveexit);
			outward.gameObject.GetComponent<EventTrigger>().triggers.Add(moveexit);
			aligner.gameObject.GetComponent<EventTrigger>().triggers.Add(moveexit);


		var _order = 1;		
                _orderButton =setbutton(ui,() => {


			if (_orderButton.label != "Current sorting: Alphabetical")
			{
			_orderButton.label = "Current sorting: Alphabetical";
			_orderButton.buttonColor = Color.black;_orderButton.textColor = Color.white;
			_order = 1;Refresh(false);
			Result("REFRESHED AND SET SORTING TO ALPHABETICAL");
			}
			else
			{
			_orderButton.label = "Current sorting: Morph-value";
			_orderButton.buttonColor = Color.black;_orderButton.textColor = Color.green;
                	_order = 0;Refresh(false);
			Result("REFRESHED AND SET SORTING TO MORPH VALUES");
			}
		
		},"Current sorting: Alphabetical",329f,40f,-599f,121);

		_orderButton.buttonColor = Color.black;
		_orderButton.textColor = Color.white;
                _orderButton.buttonText.fontSize = 28;


                _copyButton =setbutton(ui,() => {

			if (_copyButton.label == "Morphs: All inactive"){setilevel(1);lastlevel=1;}
			else if(_copyButton.label == "Morphs: Inbuilt inactive"){setilevel(2);lastlevel=2;}
			else if(_copyButton.label == "Morphs: Custom inactive"){setilevel(3);lastlevel=3;}
			else if(_copyButton.label == "Morphs: Licenced inactive"){setilevel(0);lastlevel=0;}
			else if (_copyButton.label == "Show only active"){setilevel(lastlevel);}
			

		},"Morphs: All inactive",289f,40f,-166f,121);
		_copyButton.buttonColor = allinactivecolor;_copyButton.textColor = allinactivetext;
                _copyButton.buttonText.fontSize = 28;
				ilevel=0;

			EventTrigger.Entry imode = new EventTrigger.Entry();
    		imode.eventID = EventTriggerType.PointerUp;
			imode.callback.AddListener((eventData) => {lastitime=Time.time;StartCoroutine(setimode(lastitime));});
    		_copyButton.gameObject.AddComponent<EventTrigger>();
			_copyButton.gameObject.GetComponent<EventTrigger>().triggers.Add(imode);

                _refreshButton = setbutton(ui,() => {Refresh(true);},"Refresh",329f,66f,268f,122f);
                _refreshButton.buttonColor = refreshcolor;
                _refreshButton.buttonText.fontSize = 28;
				
				
				
				                _copyButton2 =setbutton(ui,() => {

			if(ilevel!=4){lastlevel=ilevel;setilevel(4);}

		},"X",-46f,40f,-166f,121);
		_copyButton2.buttonColor = new Color(0.8f, 0.3f, 0f);_copyButton2.textColor = Color.white;
                _copyButton2.buttonText.fontSize = 28;

    		_copyButton2.gameObject.AddComponent<EventTrigger>();
			_copyButton2.gameObject.GetComponent<EventTrigger>().triggers.Add(imode);


























	morphine=setbutton(morphinebutton,() =>
	{
	if(UITransform.gameObject.active){
		echo25("t3");
		UITransform.gameObject.SetActive(false);copy.enabled=false;infopanel.enabled=false;upgradeabort=true;}else{
			echo25("t16");
			StartCoroutine(OpenPlugin(this.name));}
	},"//\\\\/\\\\°",-27f,70.5f,917f,306f,0);

                morphine.buttonColor = new Color(0.8f, 0.6f, 0f);
                morphine.textColor = new Color(0.8f, 0.9f, 1f);
                morphine.buttonText.fontStyle = FontStyle.Bold;
                morphine.buttonText.fontSize = 26;

		//echo (_creator);

                _mainBank = new List<SM>();
                _genitalBank = new List<SM>();
		var gens = " genitals";
		var gensline = "-genitals";
		//_people = new List<string>();

		#if (VAM_GT_1_20_77_0)
		//morphdir();
		plugindir();
		#endif



if(lightslider1!=null){RemoveSlider(lightslider1);}
JSONStorableFloat minfloat1 = new JSONStorableFloat("lightslide1", 0f, lights, 0, 200f);
lightslider1 = CreateSliderui(minfloat1);
lightslider1.slider.wholeNumbers = true;
lightslider1.transform.SetParent(hud.transform,false);

transui2(lightslider1.transform,288,-8,-505,-37);
scaler(lightslider1.transform.Find("Slider").GetComponent<Transform>(),289,34);

Color slidecolor=Color.clear;
lightslider1.transform.Find("Slider").GetComponent<Image>().color = slidecolor;
lightslider1.sliderValueTextFromFloat.UIInputField.textComponent.fontSize=18;
lightslider1.sliderValueTextFromFloat.UIInputField.readOnly=true;
GameObject.Destroy(lightslider1.sliderValueTextFromFloat.gameObject);
lightslider1.slider.fillRect.transform.SetParent(hide.transform, false);
lightslider1.quickButtonsEnabled = false;
lightslider1.rangeAdjustEnabled = false;
lightslider1.defaultButtonEnabled = false;
lightslider1.slider.wholeNumbers = true;
GameObject.Destroy(lightslider1.quickButtonsGroup.gameObject);
GameObject.Destroy(lightslider1.defaultButton.gameObject);
GameObject.Destroy(lightslider1.rangeAdjustGroup.gameObject);
GameObject.Destroy(lightslider1.labelText.gameObject);
GameObject.Destroy(lightslider1.quickButtonM1.gameObject);
GameObject.Destroy(lightslider1.quickButtonM2.gameObject);
GameObject.Destroy(lightslider1.quickButtonM3.gameObject);
GameObject.Destroy(lightslider1.quickButtonM4.gameObject);
GameObject.Destroy(lightslider1.quickButtonP1.gameObject);
GameObject.Destroy(lightslider1.quickButtonP2.gameObject);
GameObject.Destroy(lightslider1.quickButtonP3.gameObject);
GameObject.Destroy(lightslider1.quickButtonP4.gameObject);

if(lightslider2!=null){RemoveSlider(lightslider2);}
JSONStorableFloat minfloat2 = new JSONStorableFloat("lightslide2", 0f, lights, 0f, 100f);
lightslider2 = CreateSliderui(minfloat2);
lightslider2.slider.wholeNumbers = true;
lightslider2.transform.SetParent(hud.transform,false);
transui2(lightslider2.transform,288,-8,-217,-37);
lightslider2.transform.Find("Slider").GetComponent<Image>().color = slidecolor;
scaler(lightslider2.transform.Find("Slider").GetComponent<Transform>(),290,34);
lightslider2.sliderValueTextFromFloat.UIInputField.textComponent.fontSize=18;
lightslider2.sliderValueTextFromFloat.UIInputField.readOnly=true;
GameObject.Destroy(lightslider2.sliderValueTextFromFloat.gameObject);
lightslider2.slider.fillRect.transform.SetParent(hide.transform, false);
lightslider2.quickButtonsEnabled = false;
lightslider2.rangeAdjustEnabled = false;
lightslider2.defaultButtonEnabled = false;
lightslider2.slider.wholeNumbers = true;
GameObject.Destroy(lightslider2.quickButtonsGroup.gameObject);
GameObject.Destroy(lightslider2.defaultButton.gameObject);
GameObject.Destroy(lightslider2.rangeAdjustGroup.gameObject);
GameObject.Destroy(lightslider2.labelText.gameObject);
GameObject.Destroy(lightslider2.quickButtonM1.gameObject);
GameObject.Destroy(lightslider2.quickButtonM2.gameObject);
GameObject.Destroy(lightslider2.quickButtonM3.gameObject);
GameObject.Destroy(lightslider2.quickButtonM4.gameObject);
GameObject.Destroy(lightslider2.quickButtonP1.gameObject);
GameObject.Destroy(lightslider2.quickButtonP2.gameObject);
GameObject.Destroy(lightslider2.quickButtonP3.gameObject);
GameObject.Destroy(lightslider2.quickButtonP4.gameObject);

if(rotator!=null){RemoveSlider(rotator);}
JSONStorableFloat minfloat3 = new JSONStorableFloat("rotator", 0f, rotation, 0f, 360f);
rotator = CreateSliderui(minfloat3);
rotator.slider.wholeNumbers = true;
rotator.transform.SetParent(hud.transform,false);
transui2(rotator.transform,288,-8,70,-37);
rotator.transform.Find("Slider").GetComponent<Image>().color = slidecolor;
scaler(rotator.transform.Find("Slider").GetComponent<Transform>(),288,34);
rotator.sliderValueTextFromFloat.UIInputField.textComponent.fontSize=18;
rotator.sliderValueTextFromFloat.UIInputField.readOnly=true;
GameObject.Destroy(rotator.sliderValueTextFromFloat.gameObject);
rotator.slider.fillRect.transform.SetParent(hide.transform, false);
rotator.quickButtonsEnabled = false;
rotator.rangeAdjustEnabled = false;
rotator.defaultButtonEnabled = false;
rotator.slider.wholeNumbers = false;
GameObject.Destroy(rotator.quickButtonsGroup.gameObject);
GameObject.Destroy(rotator.defaultButton.gameObject);
GameObject.Destroy(rotator.rangeAdjustGroup.gameObject);
GameObject.Destroy(rotator.labelText.gameObject);
GameObject.Destroy(rotator.quickButtonM1.gameObject);
GameObject.Destroy(rotator.quickButtonM2.gameObject);
GameObject.Destroy(rotator.quickButtonM3.gameObject);
GameObject.Destroy(rotator.quickButtonM4.gameObject);
GameObject.Destroy(rotator.quickButtonP1.gameObject);
GameObject.Destroy(rotator.quickButtonP2.gameObject);
GameObject.Destroy(rotator.quickButtonP3.gameObject);
GameObject.Destroy(rotator.quickButtonP4.gameObject);

Frontlight = null;
Backlight = null;

FrontlightObject = new GameObject("Morphine front light");
Frontlight = FrontlightObject.AddComponent<Light>();
Frontlight.color = new Color(0.59f,0.51f,0.54f);
Frontlight.type = LightType.Point;
Frontlight.range = 8f;
Frontlight.intensity = 0f;
Frontlight.renderMode = LightRenderMode.ForcePixel;
Frontlight.shadowResolution = UnityEngine.Rendering.LightShadowResolution.Medium;
Frontlight.shadows = LightShadows.Hard;
//Frontlight.shadowRadius=1f;
Frontlight.shadowStrength = 0.4f;
Frontlight.shadowNormalBias = 0.015f;

BacklightObject = new GameObject("Morphine back light");
Backlight = BacklightObject.AddComponent<Light>();
Backlight.color = new Color(1.09f,1.07f,0.99f);
Backlight.type = LightType.Point;
Backlight.range = 15;
Backlight.intensity = 0f;
Backlight.renderMode = LightRenderMode.ForcePixel;
Backlight.shadowResolution = UnityEngine.Rendering.LightShadowResolution.Medium;
Backlight.shadows = LightShadows.Hard;
//Backlight.LightmapCompression = LightmapCompression.NormalQuality;
Backlight.shadowStrength = 0.6f;
Backlight.shadowNormalBias = 0.023f;

Backlight.hideFlags = HideFlags.None;
Frontlight.hideFlags = HideFlags.None;
BacklightObject.hideFlags = HideFlags.None;
FrontlightObject.hideFlags = HideFlags.None;

FrontlightObject.transform.SetParent(SuperController.singleton.centerCameraTarget.transform, false);
FrontlightObject.transform.localPosition = new Vector3(-0.7f, -0.2f, -0.6f);

BacklightObject.transform.SetParent(SuperController.singleton.centerCameraTarget.transform, false);
BacklightObject.transform.localPosition = new Vector3(0.5f, 0.5f, 1.7f);

if(Frontlight != null){Frontlight.GetComponent<Light>().enabled = false;}
if(Backlight != null){Backlight.GetComponent<Light>().enabled = false;}



EventTrigger.Entry slidesub1 = new EventTrigger.Entry();
slidesub1.eventID = EventTriggerType.PointerEnter;
slidesub1.callback.AddListener((eventData) => {helptip("lightslider1");lightslider1.slider.GetComponent<Image>().color = new Color(1,1,1,0.1f);slidersoff=false;StartCoroutine(showslider(lightslider1.transform,"front light"));});
lightslider1.gameObject.AddComponent<EventTrigger>();
lightslider1.gameObject.GetComponent<EventTrigger>().triggers.Add(slidesub1);

EventTrigger.Entry slideexit1 = new EventTrigger.Entry();
slideexit1.eventID = EventTriggerType.PointerExit;
slideexit1.callback.AddListener((eventData) => {helptip();lightslider1.transform.Find("Slider").GetComponent<Image>().color = slidecolor;slidersoff=true;StartCoroutine(hideslider(lightslider1.transform,"front light"));});
lightslider1.gameObject.AddComponent<EventTrigger>();
lightslider1.gameObject.GetComponent<EventTrigger>().triggers.Add(slideexit1);

EventTrigger.Entry slidesub2 = new EventTrigger.Entry();
slidesub2.eventID = EventTriggerType.PointerEnter;
slidesub2.callback.AddListener((eventData) => {helptip("lightslider2");lightslider2.slider.GetComponent<Image>().color = new Color(1,1,1,0.1f);slidersoff=false;StartCoroutine(showslider(lightslider2.transform,"side light"));});
lightslider2.gameObject.AddComponent<EventTrigger>();
lightslider2.gameObject.GetComponent<EventTrigger>().triggers.Add(slidesub2);

EventTrigger.Entry slideexit2 = new EventTrigger.Entry();
slideexit2.eventID = EventTriggerType.PointerExit;
slideexit2.callback.AddListener((eventData) => {helptip();lightslider2.slider.GetComponent<Image>().color = slidecolor;slidersoff=true;StartCoroutine(hideslider(lightslider2.transform,"side light"));});
lightslider2.gameObject.AddComponent<EventTrigger>();
lightslider2.gameObject.GetComponent<EventTrigger>().triggers.Add(slideexit2);

EventTrigger.Entry slidesub3 = new EventTrigger.Entry();
slidesub3.eventID = EventTriggerType.PointerEnter;
slidesub3.callback.AddListener((eventData) => {helptip("rotator");rotator.slider.GetComponent<Image>().color = new Color(1,1,1,0.1f);slidersoff=false;StartCoroutine(showslider(rotator.transform,"rotate model"));});
rotator.gameObject.AddComponent<EventTrigger>();
rotator.gameObject.GetComponent<EventTrigger>().triggers.Add(slidesub3);

EventTrigger.Entry slideexit3 = new EventTrigger.Entry();
slideexit3.eventID = EventTriggerType.PointerExit;
slideexit3.callback.AddListener((eventData) => {helptip();rotator.slider.GetComponent<Image>().color = slidecolor;slidersoff=true;StartCoroutine(hideslider(rotator.transform,"rotate model"));});
rotator.gameObject.AddComponent<EventTrigger>();
rotator.gameObject.GetComponent<EventTrigger>().triggers.Add(slideexit3);

EventTrigger.Entry exitmorphine = new EventTrigger.Entry();
exitmorphine.eventID = EventTriggerType.PointerExit;
exitmorphine.callback.AddListener((eventData) => {helptip();SuperController.singleton.helpHUDText.text="";});
morphine.gameObject.AddComponent<EventTrigger>();
morphine.gameObject.GetComponent<EventTrigger>().triggers.Add(exitmorphine);

EventTrigger.Entry entermorphine = new EventTrigger.Entry();
entermorphine.eventID = EventTriggerType.PointerEnter;
entermorphine.callback.AddListener((eventData) => {helptip("morphine");SuperController.singleton.helpHUDText.text="Open / Close //\\\\/\\\\ORPHINE main UI";});
morphine.gameObject.AddComponent<EventTrigger>();
morphine.gameObject.GetComponent<EventTrigger>().triggers.Add(entermorphine);

EventTrigger.Entry slideexit4 = new EventTrigger.Entry();
slideexit4.eventID = EventTriggerType.PointerUp;
slideexit4.callback.AddListener((eventData) => {StartCoroutine(unfreeze());rotator.slider.GetComponent<Image>().color = slidecolor;slidersoff=true;StartCoroutine(hideslider(rotator.transform,"rotate model"));});
rotator.slider.gameObject.AddComponent<EventTrigger>();
rotator.slider.gameObject.GetComponent<EventTrigger>().triggers.Add(slideexit4);

EventTrigger.Entry slideexit5 = new EventTrigger.Entry();
slideexit5.eventID = EventTriggerType.PointerDown;
slideexit5.callback.AddListener((eventData) => {_person.SetFreezePhysics(true);});
rotator.slider.gameObject.GetComponent<EventTrigger>().triggers.Add(slideexit5);

w=762;x=-598;adjustx=72;y=146.5f;
var filterfiller=textbackground(ui.transform,w,x,adjustx,y+9);
var filterNameLabel=textlabel(ui,"Filter:",w,x,adjustx,y+9);
filterTextField=textfield(ui,w-290,x,adjustx,y+9);
_filterNameInputField=inputfield(filterTextField);

w=762;x=-598;adjustx=96;y=-17f;
var namefiller=textbackground(ui.transform,w,x,adjustx,y);
morphNameLabel=textlabel(ui,"Name:",w,x,adjustx,y);
morphNameTextField=textfield(ui,w-290,x,adjustx-16,y);
_morphNameInputField=inputfield(morphNameTextField);

w=154;x=-598;adjustx=96;y=40f;
var creatorfiller=textbackground(ui.transform,w,x,adjustx,y);
creatorLabel=textlabel(ui,"Creator:",w,x,adjustx,y);
creatorTextField=textfield(ui,w,x,adjustx,y-7);
_creatorInputField=inputfield(creatorTextField);
creatorTextField.UItext.fontSize=28;
creatorTextField.UItext.fontStyle=FontStyle.Bold;

w=161;x=-344;adjustx=78;y=40f;
var prefixfiller=textbackground(ui.transform,w,x,adjustx,y);
prefixNameLabel=textlabel(ui,"Prefix:",w,x,adjustx,y);
prefixTextField=textfield(ui,w,x,adjustx,y-7);
_prefixNameInputField=inputfield(prefixTextField);
prefixTextField.UItext.fontSize=28;
prefixTextField.UItext.fontStyle=FontStyle.Bold;

w=247;x=-83;adjustx=126;y=40f;
var pwfiller=textbackground(ui.transform,w,x,adjustx,y);
pwLabel=textlabel(ui,"Password:",w,x,adjustx,y);
pwTextField=textfield(ui,w,x,adjustx,y-2);
_pwInputField=inputfield(pwTextField);
//_pwInputField.inputType=InputField.InputType.Password;
_pwInputField.contentType=InputField.ContentType.Password;
_pwInputField.asteriskChar = "#!£%&*"[0];

pwTextField.UItext.lineSpacing=0;
pwTextField.UItext.fontSize=32;
_pwInputField.lineType = InputField.LineType.SingleLine;
pwTextField.height=37;

w=154;x=-598;adjustx=96;y=97f;
var groupfiller=textbackground(ui.transform,w,x,adjustx,y+1);
groupNameLabel=textlabel(ui,"Group:",w,x,adjustx,y+1);
groupNameTextField=textfield(ui,w+10,x,adjustx-10,y-6);
_groupNameInputField=inputfield(groupNameTextField);
groupNameTextField.UItext.fontSize=28;
groupNameTextField.UItext.fontStyle=FontStyle.Bold;

w=161;x=-344;adjustx=78;y=97f;
var regionfiller=textbackground(ui.transform,w,x,adjustx,y+1);
regionNameLabel=textlabel(ui,"Region:",w,x,adjustx,y+1);
regionNameTextField=textfield(ui,w-12,x+15,adjustx,y-6);
_regionNameInputField=inputfield(regionNameTextField);
regionNameTextField.UItext.fontSize=28;
regionNameTextField.UItext.fontStyle=FontStyle.Bold;


w=120;x=-83;adjustx=86;y=97f;
var minfiller=textbackground(ui.transform,w,x,adjustx,y+1);
minNameLabel=textlabel(ui,"Range:",w,x,adjustx,y+1);
minTextField=textfield(ui,w,x,adjustx,y+1);
_minInputField=inputfield(minTextField,"numeric");

w=30;x=134;adjustx=0;y=97f;
var maxfiller=textbackground(ui.transform,w,x,adjustx,y+1);
maxNameLabel=textlabel(ui,"",w,x,adjustx,y+1);
maxTextField=textfield(ui,w,x,adjustx,y+1);
_maxInputField=inputfield(maxTextField,"numeric");

uigroup.alpha=0;
Color introfont=new Color(0.4f, 0.2f, 0f);introfont.a = 1f;

intro=Text(infopanel,"",1218,1646,-609,-20,0);
intro.backgroundColor = new Color(0.4f, 0.2f, 0f);
intro.UItext.alignment = TextAnchor.MiddleCenter;
intro.UItext.color = introfont;
intro.UItext.fontStyle = FontStyle.Bold;
intro.UItext.fontSize = 45;
float d=0f;
if(vr){d=300;}
introtext=Text(infopanel,"\n\n\n\n\n\n\n\n//\\\\/\\\\ORPHINE°",1214,1656,-608,-26,d);
introtext.backgroundColor = Color.clear;
introtext.UItext.alignment = TextAnchor.MiddleCenter;
introtext.UItext.color = introfont;
introtext.UItext.fontStyle = FontStyle.Bold;
introtext.UItext.fontSize = 84;

		buttonsRight("show");
		
w=1197;x=-598.5f;adjustx=0;y=162f;
resultfiller=textbackground(ui.transform,w,x,adjustx,y);
_input=textfield(ui,w,x,adjustx,y,-8);
_input.UItext.alignment = TextAnchor.UpperCenter;
_input.UItext.lineSpacing = 0;

_input.backgroundColor = Color.clear;
Color resultcolor=Color.black;resultcolor.a=0.98f;
resultfiller.backgroundColor = resultcolor;
_input.UItext.color = Color.white;
inputpos=_input.transform.localPosition.y;


	split=setbutton(ui,() => {Split();},"Split",37f,48f,-18f,-12);
                split.buttonColor = splitcolor;
                split.textColor = new Color(0.8f, 0.9f, 1f);
                split.buttonText.fontStyle = FontStyle.Bold;
                split.buttonText.fontSize = 28;
				
	merge=setbutton(ui,() => {Merge();},"//\\\\/\\\\erge°",37f,48f,122,-12);
                merge.buttonColor = mergecolor;
                merge.textColor = new Color(0.8f, 0.9f, 1f);
                merge.buttonText.fontStyle = FontStyle.Bold;
                merge.buttonText.fontSize = 28;		

	searchf=setbutton(ui,() => {
	updatecustomfilter();
	StartCoroutine(iletters(_filterNameInputField.text.Replace("@","/").Replace(",","/")));},"SEARCH",37f,48f,122,162);
                searchf.buttonColor = searchcolor;
                searchf.textColor = new Color(0.8f, 0.9f, 1f);
                searchf.buttonText.fontStyle = FontStyle.Bold;
                searchf.buttonText.fontSize = 22;

	selectf=setbutton(ui,() => {
		
		updatecustomfilter();
		Filter(true,false,true);

	},"SELECT",37f,48f,-18,162);
                selectf.buttonColor = selectcolor;
                selectf.textColor = new Color(0.8f, 0.9f, 1f);
                selectf.buttonText.fontStyle = FontStyle.Bold;
                selectf.buttonText.fontSize = 22;		

	deselectf=setbutton(ui,() => {
updatecustomfilter();
		
		Filter(true,false,true,deselect:true,action:"DE");},"DESELECT",37f,48f,-158,162);
                deselectf.buttonColor = selectcolor;
                deselectf.textColor = new Color(0.8f, 0.9f, 1f);
                deselectf.buttonText.fontStyle = FontStyle.Bold;
                deselectf.buttonText.fontSize = 22;							

		// Choose person
		makechooser();
		
		/*
		var pose=FileManagerSecure.ReadAllText(_plugindir+_pluginowner+_plugin+"\\Preset_humanize.vap");
		pose=pose.Replace("\r","").Replace("\n","").Replace(" ","").Replace("\"","\\\"");
		*/
		vr=realVR();
		advanced();
		plugindir();		
		loadini();
		//json("load",_plugindir+_pluginowner+_plugin+"\\"+_ini);
		camfiles();
		StartCoroutine(fadein());
		if(showhelptips){helpbutton.buttonColor=new Color(1,1,1);}
		checkforcepos();
		scenesettings();
		setdefaults();
		scaler(vrkeys,1100,320);
		echo22(vrkeys.localPosition.y.ToString());
		
		if(vr){
		vrkeys.localPosition=new Vector2(0,-0.2094f);}
		else{
		vrkeys.localPosition=new Vector2(0,-0.25f);
		}
		//vrkeys.position
		//vrkeys.gameObject.SetActive(true);
		//Thread newThread = new Thread(() => getcuas());//this function will now execute on the new thread
		//newThread.Start();
		StartCoroutine(getcuas());
		if(vr){		
		vrkeys.localPosition=new Vector2(0,-0.2094f);}
		else{
		vrkeys.localPosition=new Vector2(0,-0.25f);
		}

		int k=0;
		foreach(Image key in vrkeys.GetComponentsInChildren<Image>(true)){
				if(key.transform.name.Contains("K")){	key.color=new Color(0.67f,0.70f,0.84f,0.5f);}
				else if(key.transform.name.Contains("Back")){key.color=chatcolor;}
				else if(key.transform.name.Contains("Panel")){key.color=new Color(0.37f,0.40f,0.46f,0.6f);}
				else {key.color=new Color(1f,0.64f,0.33f);k++;
				scaler(key.transform,50+k*10,50);
				}
					
		}
		
		
		foreach(Text key in vrkeys.GetComponentsInChildren<Text>(true)){
								key.fontSize=26;
								key.color=new Color(0.9f,0.91f,0.93f);
							
					
		}		
	//	StartCoroutine(imagefind(vrkeys,0,233,time: 0.005f));
		
		
		//objectfind(SuperController.singleton.transform,"keyboard",getroot:true);
		//StartCoroutine(getvar("https://www.patreon.com/file?h=60589481&i=9826667","VAMBO.Astrid-F.1.var"));
		//StartCoroutine(getvar("https://drive.google.com/u/1/uc?id=1lmKHvzl3taqSwiemgX2j_yUQkUvgwdh4&export=download","God.RealSKIN Basic.1.var"));
		
		SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Toolbar/").GetComponent<Image>().color=uiframecolor;
		StartCoroutine(sethudbuttons(new Color(0.67f,0.7f,0.72f),new Color(0.33f,0.32f,0.38f)));
		
		if(!chatvisible || !sessionplugin){chat.enabled=false; chatbuttonhud.textColor = chatbutton.textColor = new Color(0.4f, 0.5f, 0.6f);}else{chat.enabled=true; chatbutton.textColor = chatbuttonhud.textColor = new Color(0.8f, 0.9f, 1f);}
		if(!webvisible || !sessionplugin){web.enabled=false; url.enabled=false;wwwbuttonhud.textColor=wwwbutton.textColor = new Color(0.4f, 0.5f, 0.6f);}else{web.enabled=true; url.enabled=true; wwwbuttonhud.textColor =wwwbutton.textColor = new Color(0.8f, 0.9f, 1f);}

		StartCoroutine(firstconnect());
		if(!FileManagerSecure.FileExists("Custom/Atom/Person/Pose/Preset_humanizer.vap")){
		FileManagerSecure.WriteAllText("Custom/Atom/Person/Pose/Preset_humanizer.vap",humanizer);
		}
		//StartCoroutine(textfind(SuperController.singleton.mainHUD.parent.transform,"confirm"));
		//Button confirm=SuperController.singleton.mainHUD.Find("ConfirmOverwriteCanvas/Background/ConfirmOverwriteButton/").GetComponentInChildren<Button>(true);
		//pushbutton(confirm);
		

             

					errorbutton.gameObject.GetComponent<EventTrigger>().triggers.RemoveRange (0, errorbutton.gameObject.GetComponent<EventTrigger>().triggers.Count);
					errenter = new EventTrigger.Entry();
					errenter.eventID = EventTriggerType.PointerEnter;
					errenter.callback.AddListener((eventData) => {
												for (int p=1;p<200;p++){
	if(gbox[p]!=null){RemoveButton(gbox[p]);}
	if(pbox[p]!=null){RemoveButton(pbox[p]);}
		}
					pboxon=true;
					echo8("MUTE IS "+errormute.ToString());
					SuperController.singleton.helpHUDText.text="Open / mute / unmute Error-messages";
					var errb="mute";if(errormute){errb="unmute";}
					float xmin=0;float ymin=0;float zz=8;if(!vr){zz=-0;ymin=-8;}
					StartCoroutine(showmenu(showbox,errorbuttonb.transform,errb,"errors",cap:16,w:10,offsetx:-19,offsety: -98,spacing: 37,z:-zz,tx:hud.transform,prefx:""));
					});
					errorbutton.gameObject.AddComponent<EventTrigger>();
					errorbutton.gameObject.GetComponent<EventTrigger>().triggers.Add(errenter);

					errexit = new EventTrigger.Entry();
					errexit.eventID = EventTriggerType.PointerExit;
					errexit.callback.AddListener((eventData) => {showbox="";
					SuperController.singleton.helpHUDText.text="";
					pboxon=false;fading=false;
					if(!fading){StartCoroutine(removepbox(false));}				
					});
					errorbutton.gameObject.AddComponent<EventTrigger>();
					errorbutton.gameObject.GetComponent<EventTrigger>().triggers.Add(errexit);	
					
					selectpersonbutton.gameObject.GetComponent<EventTrigger>().triggers.RemoveRange (0, selectpersonbutton.gameObject.GetComponent<EventTrigger>().triggers.Count);
					atombutton.gameObject.GetComponent<EventTrigger>().triggers.RemoveRange (0, atombutton.gameObject.GetComponent<EventTrigger>().triggers.Count);
					atomenter = new EventTrigger.Entry();
					atomenter.eventID = EventTriggerType.PointerEnter;
					atomenter.callback.AddListener((EventData) => {
			
			
						for (int p=1;p<200;p++){
	if(gbox[p]!=null){RemoveButton(gbox[p]);}
	if(pbox[p]!=null){RemoveButton(pbox[p]);}
		}
					pboxon=true;
								var errb="";
								foreach(Atom p in SuperController.singleton.GetAtoms()){
									if(p.name!="CoreControl" && p.name!="[CameraRig]"){
										
										errb+=p.name+",Clone here,Move here,Teleport to,Zero position,Zero rotation,Straighten,Place on ground,Copy position,Paste position,Paste X,Paste Y,Paste Z\n";
										
										}
									}
					
					SuperController.singleton.helpHUDText.text="Advanced Atom enable / collision / settings";
					hud.sortingOrder=32;
					StartCoroutine(showmenu(showbox,t:atombuttonb.transform,str:errb,mode:"atoms",gotoadjust2:-166f,gotoadjust:-225f,subw:322,delay:0.8f,suboffsety:-109,suboffsetx:-340,cap:24,w:410,offsetx:-175,sadjust:-107,gotosub2:"C",gotosub:"ON",offsety: -174,spacing: 37,tx:hud.transform,z:-40f));});
					
					pselectenter = new EventTrigger.Entry();
					pselectenter.eventID = EventTriggerType.PointerEnter;
					pselectenter.callback.AddListener((EventData) => {
			
			

					pboxon=true;
											for (int p=1;p<200;p++){
	if(gbox[p]!=null){RemoveButton(gbox[p]);}
	if(pbox[p]!=null){RemoveButton(pbox[p]);}
		}
								var errb="";
								foreach(Atom p in SuperController.singleton.GetAtoms()){
									if(p.type=="Person"){errb+=p.name+pmenu;}
									}

					hud.sortingOrder=32;
					SuperController.singleton.helpHUDText.text="Advanced person selection";
					StartCoroutine(showmenu(showbox,addatombuttonb.transform,errb,"person",gotoadjust2:-363f,gotoadjust:-305f,subw:322,suboffsety:-109,delay:0.9f,suboffsetx:-210,cap:26,w:323,offsetx:-235,sadjust:-421,gotosub2:"C",gotosub:"ON",offsety: -174,spacing: 37,tx:hud.transform,z:-40f));});
					
					selectpersonbutton.gameObject.AddComponent<EventTrigger>();
					atombutton.gameObject.AddComponent<EventTrigger>();
					selectpersonbutton.gameObject.GetComponent<EventTrigger>().triggers.Add(pselectenter);
					atombutton.gameObject.GetComponent<EventTrigger>().triggers.Add(atomenter);

					atomexit = new EventTrigger.Entry();
					atomexit.eventID = EventTriggerType.PointerExit;
					atomexit.callback.AddListener((eventData) => {
					showbox="";
					if(abutton2!=null){RemoveButton(abutton2);}	
					if(abutton3!=null){RemoveButton(abutton3);}	
					if(abutton4!=null){RemoveButton(abutton4);}	
					SuperController.singleton.helpHUDText.text="";
					pboxon=false;fading=false;
					if(!fading){StartCoroutine(removepbox(false));}				
					});
					atombutton.gameObject.AddComponent<EventTrigger>();
					atombutton.gameObject.GetComponent<EventTrigger>().triggers.Add(atomexit);
					selectpersonbutton.gameObject.GetComponent<EventTrigger>().triggers.Add(atomexit);
					
					addatombutton.gameObject.GetComponent<EventTrigger>().triggers.RemoveRange (0, addatombutton.gameObject.GetComponent<EventTrigger>().triggers.Count);
					addatomenter = new EventTrigger.Entry();
					addatomenter.eventID = EventTriggerType.PointerEnter;
					
					addatomenter.callback.AddListener((eventData) => {
					pboxon=true;
						for (int p=1;p<200;p++){
						if(gbox[p]!=null){RemoveButton(gbox[p]);}
						if(pbox[p]!=null){RemoveButton(pbox[p]);}
						}
					var errb="Move here on add,\nSelect on add,\nFocus on add,\n<color=#ff9900>Supertriggers</color>,@Startscript,@Superslider,@Animationslider,@Proximityslider,@Timeslider,@Morphslider,@Slidescript,@Timescaler,@Worldscaler,\n<color=#ff9900>Magnets</color>,@Left hand magnet,@Right hand magnet,@Left wrist magnet,@Right wrist magnet,@Head magnet,@Hud magnet,@Menu magnet,@Look magnet\nWindowCamera,\nTriggers,VariableTrigger,UIToggle,UISlider,UIButton,LookAtTrigger,CollisionTrigger,Button\nToys,ToyBP,ToyAH,Paddle,Dildo\nSound,RhythmAudioSource,AudioSource,AptSpeaker\nShapes,Sphere,ISTube,ISSphere,ISCylinder,ISCube,ISCone,ISCapsule,Cube,Capsule\nReflective,ReflectiveWoodPanel,ReflectiveSlate,Glass-Stained,Glass\nProps,TechnoRingLight,TechnoNeonTriangle,TechnoNeonSquare,TechnoNeonHeart,TechnoNeonCircle,TechnoLightBar,SkullQueenSword,SimSheet,OldStylePillow3,OldStylePillow2,OldStylePillow1,IslTreePlanter,IslTree,IslTopiary,IslPotSmall,IslPotB,IslPotA,IslPlantWFlowers,DSBR_ThrowPillow,DSBR_DecorativePillow,DSBR_BedPillow,CyberpunkTablet,CyberpunkSofaCushion02,CyberpunkSofaCushion01,CyberpunkRemote,CyberpunkMousepad,CyberpunkMouse,CyberpunkLaptop,CyberpunkKeyboard,CyberpunkControlScreen,CyberpunkComputer,CyberpunkBedPillow03,CyberpunkBedPillow02,CyberpunkBedPillow01,AptRug,AptPlanter,AptPlant,AptPicture02,AptPicture01,AptJacuzziRailing,AptJacuzziProp,AptBook02,AptBook01\nPerson\nMisc,WebPanelEmissive,WebPanel,WebBrowser,VaMSign,VaMLogo,UIText,SubScene,SimpleSign,PlayerNavigationPanel,ImagePanelTransparentEmissive,ImagePanelTransparent,ImagePanelEmissive,ImagePanel,Empty,CustomUnityAsset,ClothGrabSphere\nLight,Torch,TechnoRingLight+Light,TechnoNeonTriangle+Light,TechnoNeonSquare+Light,TechnoNeonHeart+Light,TechnoNeonCircle+Light,TechnoLightBar+Light,TechnoLight,InvisibleLight,CyberpunkWallLight02,CyberpunkWallLight01,CyberpuLight,AptOutdoorLight,AptLamp\nFurniture,TechnoThrone,TechnoDancePole,OldStyleVanityStool,OldStyleChair,OldStyleBed,ModernRoomBed,LoungeChair,IslStool,IslPatioChair,IslBench,DSBR_Ottoman,DSBR_Chair,DSBR_Bench,DSBR_Bed,DSBR_2TierTable,DreamHomeWebTV\nForce,SyncForce,RhythmForce,GrabPoint,CycleForce\nFloorsAndWalls,WoodPanel,Wall,TechnoSquareCage,TechnoRoundPlatform,TechnoRoundCage,TechnoPillar,TechnoGirder,SpaceBox,Slate,IslWallSection,IslWallPost,IslRailingGlass,IslFenceSection,IslFencePost,InvisiblePanel,DSBR_Shelf,DSBR_BuiltInShelves\nEnviroments,TechnoRoom,OldStyleRoom,IslTerrain,IslOverlook,DreamStreetBedroom,CyberpunkApartment,Crypt,CityScapeNight,CityScape,AptJacuzzi\nAnimationPattern,,";
					SuperController.singleton.helpHUDText.text="Add Atom-shortcuts / click to open Atom-add UI";
					hud.sortingOrder=32;
					float xmin=0;float ymin=0;float zz=8;if(!vr){zz=0;ymin=+2;}
					StartCoroutine(showmenu(showbox,addatombuttonb.transform,errb,"addatoms",subcap:23,cap:46,w:178,subw:222,suboffsety:-109,suboffsetx:-124,offsetx:-89,nosub:true,sadjust:-61,offsety: -98,spacing: 37,tx:hud.transform,z:-zz));});


					addatombutton2.gameObject.GetComponent<EventTrigger>().triggers.RemoveRange (0, addatombutton2.gameObject.GetComponent<EventTrigger>().triggers.Count);
					addatomenter2 = new EventTrigger.Entry();
					addatomenter2.eventID = EventTriggerType.PointerEnter;
					addatomenter2.callback.AddListener((eventData) => {
					pboxon=true;
						for (int p=1;p<200;p++){
						if(gbox[p]!=null){RemoveButton(gbox[p]);}
						if(pbox[p]!=null){RemoveButton(pbox[p]);}
						}
					var errb="Move here on add,\nSelect on add,\nFocus on add,";
					SuperController.singleton.helpHUDText.text="Oneclick-Add Custom Unity Asset";
					hud.sortingOrder=32;
					StartCoroutine(showmenu(showbox,addatombuttonb2.transform,errb,"addatoms:cua",subcap:23,cap:26,w:318,subw:242,suboffsety:-109,suboffsetx:-108,offsetx:-174,nosub:true,sadjust:-61,offsety: -98,spacing: 37,tx:hud.transform,z:-8f));});
					
					addatombutton3.gameObject.GetComponent<EventTrigger>().triggers.RemoveRange (0, addatombutton3.gameObject.GetComponent<EventTrigger>().triggers.Count);
					addatomenter3 = new EventTrigger.Entry();
					addatomenter3.eventID = EventTriggerType.PointerEnter;
					addatomenter3.callback.AddListener((eventData) => {
					pboxon=true;
						for (int p=1;p<200;p++){
						if(gbox[p]!=null){RemoveButton(gbox[p]);}
						if(pbox[p]!=null){RemoveButton(pbox[p]);}
						}
					var errb="Move here on add,\nSelect on add,\nFocus on add,";
					SuperController.singleton.helpHUDText.text="Oneclick-Add Sub Scene";
					hud.sortingOrder=32;
					StartCoroutine(showmenu(showbox,addatombuttonb3.transform,errb,"addatoms",subcap:23,cap:26,w:178,subw:222,suboffsety:-109,suboffsetx:-108,offsetx:-16,nosub:true,sadjust:-61,offsety: -98,spacing: 37,tx:hud.transform,z:-8f));});

					addatombutton4.gameObject.GetComponent<EventTrigger>().triggers.RemoveRange (0, addatombutton4.gameObject.GetComponent<EventTrigger>().triggers.Count);
					//GameObject.Destroy(addatombuttonb4.gameObject);
					addatomenter4 = new EventTrigger.Entry();
					addatomenter4.eventID = EventTriggerType.PointerEnter;
					addatomenter4.callback.AddListener((eventData) => {

					//var errb="Move here on add,\nSelect on add,\nFocus on add,";
					SuperController.singleton.helpHUDText.text="Oneclick-Add Person";
					
					//StartCoroutine(showmenu(showbox,addatombuttonb4.transform,errb,"addatoms",subcap:23,cap:26,w:178,subw:222,suboffsety:-109,suboffsetx:-108,offsetx:-36,nosub:true,sadjust:-61,offsety: -98,spacing: 37,tx:hud.transform,z:-8f));
					});					

					exitbuttonb.gameObject.GetComponent<EventTrigger>().triggers.RemoveRange (0, exitbuttonb.gameObject.GetComponent<EventTrigger>().triggers.Count);
					exitenter = new EventTrigger.Entry();
					exitenter.eventID = EventTriggerType.PointerEnter;
					exitenter.callback.AddListener((eventData) => {
					pboxon=true;
					
						for (int p=1;p<200;p++){
						if(gbox[p]!=null){RemoveButton(gbox[p]);}
						if(pbox[p]!=null){RemoveButton(pbox[p]);}
						}
					SuperController.singleton.helpHUDText.text="Exit or Restart Virt-a-Mate";
					hud.sortingOrder=32;
					float xmin=0;float ymin=0;float zz=148;if(!vr){zz=-0;ymin=-38;}
					showbox="exit";
					StartCoroutine(showmenu(showbox,exitbuttonb.transform,"Restart","exit",subcap:26,w:5,subw:272,suboffsety:-109,suboffsetx:-204,offsetx:-119,nosub:true,sadjust:61,offsety: -69+ymin,spacing: 37,tx:hud.transform,z:-zz,wait:0.01f));});
							


					addatombutton5.gameObject.GetComponent<EventTrigger>().triggers.RemoveRange (0, addatombutton5.gameObject.GetComponent<EventTrigger>().triggers.Count);
					addatombutton6.gameObject.GetComponent<EventTrigger>().triggers.RemoveRange (0, addatombutton6.gameObject.GetComponent<EventTrigger>().triggers.Count);
					addatomenter5 = new EventTrigger.Entry();
					addatomenter5.eventID = EventTriggerType.PointerEnter;
					addatomenter5.callback.AddListener((eventData) => {
					//echo9(eventData.ToString());
					pboxon=true;
						for (int p=1;p<200;p++){
						if(gbox[p]!=null){RemoveButton(gbox[p]);}
						if(pbox[p]!=null){RemoveButton(pbox[p]);}
						}
					var timeline=listplugins("timeline");
					if(timeline!=""){timeline="TimeLine<size=22>™</size>,"+timeline+"\n";}
					//echo25(timeline);
					var errb=timeline+"<color=#ff6050>Record</color> from start,\n<color=#ff6050>Record</color> from current position,\n<color=#60ff50>Select</color> controllers to record,\nClear animation,\nTriggers,\nSettings";
					SuperController.singleton.helpHUDText.text="Record and play animation";
					hud.sortingOrder=32;
					float xmin=0;float ymin=0;float zz=40;if(!vr){zz=-0;ymin=-8;}
					StartCoroutine(showmenu(showbox,addatombuttonb5.transform,errb,"recorder",subcap:26,w:240,subw:272,suboffsety:-109,suboffsetx:-204,offsetx:-76,nosub:true,sadjust:61,offsety: -174+ymin,spacing: 37,tx:hud.transform,z:-zz));});	
					

					addatombutton7.gameObject.GetComponent<EventTrigger>().triggers.RemoveRange (0, addatombutton7.gameObject.GetComponent<EventTrigger>().triggers.Count);
					addatomenter7 = new EventTrigger.Entry();
					addatomenter7.eventID = EventTriggerType.PointerEnter;
					addatomenter7.callback.AddListener((eventData) => {
					pboxon=true;
						for (int p=1;p<200;p++){
						if(gbox[p]!=null){RemoveButton(gbox[p]);}
						if(pbox[p]!=null){RemoveButton(pbox[p]);}
						}

					removebuttons=new Dictionary<string,Button>();
					openbuttons=new Dictionary<string,Button>();
					plugintoggles=new Dictionary<string,Toggle>();
					var errb="";


	foreach(Atom aa in SuperController.singleton.GetAtoms()){
	
	//echo11(aa.type);
	if(aa.type!="CoreControl" && aa.type!="VRController"){
	foreach(string str in aa.GetStorableIDs()){

	if(str.Contains("plugin#")){
	var plug=aa.name+"[] "+str.Replace("plugin#","");
	errb+=plug+",\n";
	
	}
	}
	continue;
	}
	
	foreach(Button b in aa.transform.GetComponentsInChildren<Button>(true)){
		var plugintype="Plugin";
		var pluginname="";
		var plugintitle="";
		var pluginpath="";
		Button  removebutton=null;
		Button  openbutton=null;
	
		if(b.transform.parent.name=="ScriptControllerPanel(Clone)"){
		
		//echo11(b.transform.parent.name);
		if(aa.type!="Person"){plugintype=b.transform.parent.parent.parent.parent.parent.parent.parent.name.Replace("TabSessionPlugins","Session").Replace("TabScenePlugins","Scene").Replace("Plugins","Plugin");}
		foreach(Text t in b.transform.parent.parent.parent.GetComponentsInChildren<Text>(true)){
		//SuperController.LogMessage("Atom: "+aa.name+" > Atom type:"+aa.type+" > Label: "+t.transform.parent.name+"/"+t.transform.name+" > String: "+t.text+">");//DEBUG
		if(t.transform.name=="UID" && t.text.Contains("plugin#") && t.text.Contains("_")){pluginname=t.text;}
		else if(t.transform.name=="URL" && t.text.Contains("/")){pluginpath=t.text;}
		else if(t.transform.parent.name=="NameInputField" && t.transform.name=="Text" && t.text!=""){plugintitle=" > Title: "+t.text;}
		}
	
	if(plugintype=="Plugin"){plugintype=aa.name;}
	//SuperController.LogMessage("Atom: "+aa.name+" > Plugintype: "+plugintype+" > Path: "+pluginpath+" > Name: "+pluginname+plugintitle);
	var plug=plugintype+"[] "+pluginname.Replace("plugin#","");
	errb+=plug+",\n";
	
			foreach(Toggle tg in b.transform.parent.parent.parent.GetComponentsInChildren<Toggle>(true)){
			if(tg.transform.name=="EnabledToggle"){
			plugintoggles.Add(plug,tg);
			//SuperController.LogMessage(tg.transform.name);
			}}	
			
			foreach(Button bt in b.transform.parent.parent.parent.GetComponentsInChildren<Button>(true)){
			if(bt.transform.name=="RemoveButton"){
			removebuttons.Add(plug,bt);
			}}	
			
	if(b.transform.name=="OpenUIButton" ){
		openbuttons.Add(plug,b);}

	}
	}
	}



					if(errb!=""){errb=(errb+"\n").Replace(",\n\n","");}

					//var errb="<color=#ff6050>Record</color> from start,\n<color=#ff6050>Record</color> from current position,\n<color=#60ff50>Select</color> controllers to record,\nClear animation,\nTriggers,\nSettings";
					SuperController.singleton.helpHUDText.text="All plugins quick-menu / Show selected UI";
					hud.sortingOrder=32;
					//submenu(addatombuttonb7.transform,errb,"plugins",cap:24,w:240,subw:372,suboffsety:-309,suboffsetx:-108,offsetx:-146,gotosub:"ON",nosub:false,sadjust:-61,offsety: -174,spacing: 37,tx:hud.transform,z:-40f);});	
						float xmin=0;float ymin=0;float zz=40;if(!vr){zz=-0;ymin=1;}
					showbox="plugins";StartCoroutine(showmenu(showbox,addatombuttonb7.transform,errb,"plugins",gotoadjust:-494f,suboffsety:-109,gotosub:"ON",delay:0.1f,suboffsetx:-410,prefx:"                     ",cap:30,w:410,offsetx:-321,sadjust:-553,offsety: -174+ymin,spacing: 37,tx:hud.transform,z:-zz));});
		
					
					addatombutton.gameObject.AddComponent<EventTrigger>();
					addatombutton2.gameObject.AddComponent<EventTrigger>();
					addatombutton3.gameObject.AddComponent<EventTrigger>();
					addatombutton4.gameObject.AddComponent<EventTrigger>();
					addatombutton5.gameObject.AddComponent<EventTrigger>();
					addatombutton6.gameObject.AddComponent<EventTrigger>();
					addatombutton7.gameObject.AddComponent<EventTrigger>();
					exitbutton.gameObject.AddComponent<EventTrigger>();
					exitbutton.gameObject.GetComponent<EventTrigger>().triggers.Add(exitenter);
					addatombutton.gameObject.GetComponent<EventTrigger>().triggers.Add(addatomenter);
					addatombutton2.gameObject.GetComponent<EventTrigger>().triggers.Add(addatomenter2);
					addatombutton3.gameObject.GetComponent<EventTrigger>().triggers.Add(addatomenter3);
					addatombutton4.gameObject.GetComponent<EventTrigger>().triggers.Add(addatomenter4);
					addatombutton5.gameObject.GetComponent<EventTrigger>().triggers.Add(addatomenter5);
					addatombutton6.gameObject.GetComponent<EventTrigger>().triggers.Add(addatomenter5);
					addatombutton7.gameObject.GetComponent<EventTrigger>().triggers.Add(addatomenter7);
					
					addatombuttonb4.onClick.AddListener(() =>{
						//echo9("heloooo");
					});
					
					addatomexit = new EventTrigger.Entry();
					addatomexit.eventID = EventTriggerType.PointerExit;
					addatomexit.callback.AddListener((eventData) => {showbox="";
					if(abutton2!=null){RemoveButton(abutton2);}	
					if(abutton3!=null){RemoveButton(abutton3);}	
					if(abutton4!=null){RemoveButton(abutton4);}	
					SuperController.singleton.helpHUDText.text="";
					addskinperson=false;
					pboxon=false;fading=false;
					if(!fading){StartCoroutine(removepbox(false));}				
					});
;
					exitbutton.gameObject.GetComponent<EventTrigger>().triggers.Add(addatomexit);
					addatombutton.gameObject.GetComponent<EventTrigger>().triggers.Add(addatomexit);
					addatombutton2.gameObject.GetComponent<EventTrigger>().triggers.Add(addatomexit);
					addatombutton3.gameObject.GetComponent<EventTrigger>().triggers.Add(addatomexit);
					addatombutton4.gameObject.GetComponent<EventTrigger>().triggers.Add(addatomexit);
					addatombutton5.gameObject.GetComponent<EventTrigger>().triggers.Add(addatomexit);
					addatombutton6.gameObject.GetComponent<EventTrigger>().triggers.Add(addatomexit);
					addatombutton7.gameObject.GetComponent<EventTrigger>().triggers.Add(addatomexit);
		
		
		Result("MORPHINE V"+version+" by God - Click for help / documentation.");
		StartCoroutine(showhelp());
		
            }
            catch (Exception e)
            {
                SuperController.LogError("Exception caught: " + e);
            }
        }

private string savergb="";
private float savetime=-999;
private float savefps=-999;
private float saveworld=-999;
private float savefov=-999;

private void addatom(string type="Empty",string useid=null, bool hide=false,bool collide=true, bool on=true,float scale=1,string cua="",string cuaname=""){
StartCoroutine(IEaddatom(type:type,useid:useid, hide:hide,collide:collide,on:on,cua:cua,cuaname:cuaname));
}

private bool selecton=false;
private bool fromui=false;
private IEnumerator IEaddatom(string type="Empty", string useid=null,bool hide=false,bool collide=true,bool on=true,float scale=1,string cua="",string cuaname=""){

bool psim=SuperController.singleton.pauseAutoSimulation;
SuperController.singleton.pauseAutoSimulation=true;
								var pre="";
								foreach(Atom p in SuperController.singleton.GetAtoms()){
								pre+="["+p.name+"]";
								}
									
yield return new WaitForSecondsRealtime(0.5f);

if(fromui){
selecton=SuperController.singleton.selectAtomOnAddToggle.isOn;
SuperController.singleton.selectAtomOnAddToggle.isOn=false;
}

if(SuperController.singleton.selectAtomOnAddToggle.isOn){
	echo25("t4");
	UITransform.gameObject.SetActive(false);}

StartCoroutine(SuperController.singleton.AddAtomByType(type,useid,false,SuperController.singleton.selectAtomOnAddToggle.isOn,SuperController.singleton.focusAtomOnAddToggle.isOn));

yield return null;
bool notfound=true;


while(notfound){

			foreach(Atom p in SuperController.singleton.GetAtoms()){
				var addmove="";
				if(!pre.Contains("["+p.name+"]")){
					
					if(fromui){
					selecton=SuperController.singleton.selectAtomOnAddToggle.isOn=selecton;
					}
					fromui=false;
					
					notfound=false;
					p.hidden=hide;
					p.mainController.hidden=hide;
					p.SetOn(on);
					
					if(scale!=1f){
					JSONStorable a1 = p.GetStorableByID("scale");
					JSONStorableFloat a2 = a1.GetFloatJSONParam("scale");
					a2.val=scale;}
					
					if(p.name.Contains("@")){
						
					if(p.type=="Empty"){
					JSONStorable a1 = p.GetStorableByID("scale");
					JSONStorableFloat a2 = a1.GetFloatJSONParam("scale");
					a2.val=0.1f;}
					
					else if(p.type=="UISlider"){
					JSONStorable a1 = p.GetStorableByID("scale");
					JSONStorableFloat a2 = a1.GetFloatJSONParam("scale");
					a2.val=0.3f;	
					 a1 = p.GetStorableByID("Canvas");
					 a2 = a1.GetFloatJSONParam("ySize");
					a2.val=150f;
					 a1 = p.GetStorableByID("Canvas");
					 a2 = a1.GetFloatJSONParam("xSize");
					a2.val=1100f;					
					 a1 = p.GetStorableByID("Text");
					 a2 = a1.GetFloatJSONParam("fontSize");
					a2.val=58f;
					 a1 = p.GetStorableByID("SliderColor");
					 a2 = a1.GetFloatJSONParam("alpha");
					a2.val=0.3f;					 
					 JSONStorableColor a3 = a1.GetColorJSONParam("color");
					a3.SetColor(skinmenucolor);
					 a1 = p.GetStorableByID("TextColor");
					 a2 = a1.GetFloatJSONParam("alpha");
					a2.val=0.9f;					 
					a3 = a1.GetColorJSONParam("color");
					a3.SetColor(addmodelcolor);
					a1 = p.GetStorableByID("Text");
					JSONStorableString a4 = a1.GetStringJSONParam("text");	
					int i=1;var inum="";bool match=false;
					
					if(p.name.Contains("@Supersli")){
					a4.val=
					"Superslider\n\n//Click on this textfield, then hover your pointer over the \"PASTE/CODE\"-button that will appear below to add commands\n\n";						
					}					

//@Startscript,@Superslider,@Animationslider,@Timeslider,@Proximityslider,@Morphslider,@Slidescript,@Timescaler,@Worldscaler

					if(p.name.Contains("@Startscript")){
					a4.val=
					"Startscript\n\n//This makes use of the \"start\"-command to move the slider from 0-100% for 5 seconds once every scene-load/plugin load\n\n"+
					"//uncomment below and add any commands below the \"start\"-command to initiate them.\n\n"+
					"start:0,5 0,1\n\n"+
					"//prefilled current scene-settings:\n\n"+
					"color:r"+Rslider.slider.value+" g"+Gslider.slider.value+" b"+Bslider.slider.value+"\n"+
					"timescale:0,"+timeslider.slider.value+"\n"+
					"fps:"+fpstext.text.Substring(4)+"\n";
					}

					if(p.name.Contains("@Slidescript")){
					a4.val=
					"Slidescript\n\n//This makes use of the \"slide\"-command to move the slider from 0-100-0% every 5 seconds continously\n\n"+
					"//add any commands below the \"slide\"-command to initiate them.\n\n"+
					"start:5 0,1 bounce\n\n"+
					"//prefilled current scene-settings:\n\n"+
					"color:r0,"+Rslider.slider.value+" g0,"+Gslider.slider.value+" b0,"+Bslider.slider.value+"\n"+
					"timescale:0,"+timeslider.slider.value;
					p.hidden=false;
					p.mainController.hidden=false;
					p.SetOn(true);
					}
					
					if(p.name.Contains("@Timeslider")){
					a4.val=
					"Timeslider\n\n//This makes use of the \"time\"-command to move the slider from 0-100-0% (12AM-12PM-12AM) following the time of day, great for creating real-life dynamic scenes\n\n"+
					"//add any commands below the \"time\"-command to initiate them.\n\n"+
					"time:bounce\n\n"+
					"//prefilled current scene-settings:\n\n"+
					"color:r0.1,0.4 g0,0.47 b0,0.65\n"+
					"light:front0.7,2 side0.2,1 camera0.7,1";
					p.hidden=false;
					p.mainController.hidden=false;
					p.SetOn(true);					
					}

					if(p.name.Contains("@Timescaler")){
					a4.val=
					"Timescaler\n\n//This makes use of the \"timescale\"-command to adjust the runtime timescale from 0-100%\n\n"+
					"timescale:0,1";
					p.hidden=false;
					p.mainController.hidden=false;
					p.SetOn(true);					
					}

					if(p.name.Contains("@Worldscaler")){
					a4.val=
					"Worldscaler\n\n//This makes use of the \"worldscale\"-command to adjust your size from 100-1%\n\n"+
					"worldscale:100,1 lock";
					p.hidden=false;
					p.mainController.hidden=false;
					p.SetOn(true);					
					}						

					if(p.name.Contains("@Morphslider")){
					var _pper="Person";if(_person!=null){_pper=_person.name;}
					a4.val=
					"Morphslider\n\n//This example makes use of the \"morph\"-command to set morph-values on a model\n\n"+
"morph:"+_pper+":Areolae Depth 0,1169\n"+
"morph:"+_pper+":Areolae Diameter 0,1153\n"+
"morph:"+_pper+":Areolae Perk 0,692\n"+
"morph:"+_pper+":Body Tone 0,383\n"+
"morph:"+_pper+":Breast Large 0,437\n"+
"morph:"+_pper+":Breast Pointed 0,1249\n"+
"morph:"+_pper+":Breast Sag2 0,802\n"+
"morph:"+_pper+":Breasts Size 0,517\n"+
"morph:"+_pper+":Breast Diameter 0,600";
					p.hidden=false;
					p.mainController.hidden=false;
					p.SetOn(true);					
					}
					
				
					
					if(p.name.Contains("@Animation")){
					//addmove="Animator";
					while(!match){
					if(SuperController.singleton.GetAtomByUid("Animator"+inum)==null){
					//addmove="Animator"+inum;
					StartCoroutine(SuperController.singleton.AddAtomByType("Empty","Animator"+inum,false,false,false));
					break;}
					i++;inum="#"+i.ToString();
					}
					while(SuperController.singleton.GetAtomByUid("Animator"+inum)==null){yield return new WaitForSecondsRealtime(0.5f);}
					a4.val="Recordable slider\nanimate:Animator"+inum;
					SuperController.singleton.GetAtomByUid("Animator"+inum).collisionEnabled=false;
					SuperController.singleton.GetAtomByUid("Animator"+inum).hidden=true;
					SuperController.singleton.GetAtomByUid("Animator"+inum).SetOn(true);
					JSONStorable s1 = SuperController.singleton.GetAtomByUid("Animator"+inum).GetStorableByID("scale");
					JSONStorableFloat s2 = s1.GetFloatJSONParam("scale");
					s2.val=0.1f;					
					}
					
					else if(p.name.Contains("@Proximity")){
					addmove="Proximity";
					while(!match){
					if(SuperController.singleton.GetAtomByUid("Proximity"+inum)==null){
					addmove="Proximity"+inum;
					StartCoroutine(SuperController.singleton.AddAtomByType("Empty","Proximity"+inum,false,false,false));
					break;}
					i++;inum="#"+i.ToString();
					}
					while(SuperController.singleton.GetAtomByUid("Proximity"+inum)==null){yield return new WaitForSecondsRealtime(0.5f);}
					a4.val="Proximity slider\nproximity:Proximity"+inum+":100";
					SuperController.singleton.GetAtomByUid("Proximity"+inum).mainController.transform.position=new Vector3(p.mainController.transform.position.x,p.mainController.transform.position.y-0.05f,p.mainController.transform.position.z);
					SuperController.singleton.GetAtomByUid("Proximity"+inum).collisionEnabled=false;
					SuperController.singleton.GetAtomByUid("Proximity"+inum).hidden=false;
					SuperController.singleton.GetAtomByUid("Proximity"+inum).SetOn(true);
					JSONStorable s1 = SuperController.singleton.GetAtomByUid("Proximity"+inum).GetStorableByID("scale");
					JSONStorableFloat s2 = s1.GetFloatJSONParam("scale");
					s2.val=0.1f;
					}

					try{
					InputField eslide=p.transform.Find("UIPlaceHolder/UIAtomUISlider(Clone)/Canvas/Panel/Content/Slider/InputField/").GetComponentInChildren<InputField>(true);
					if(eslide!=null){
					if(eslide.textComponent.fontSize!=26){
					eslide.textComponent.fontSize=26;
					eslide.textComponent.color=Color.white;
					eslide.transform.GetComponent<Image>().color=skinmenucolor;
					eslide.transform.parent.GetComponent<Image>().color=skinmenucolor;
					}}}catch(Exception e){}
					}	
					}	
					
					p.collisionEnabled=false;
					if(addhere){
					p.SetFreezePhysics(true);
					yield return new WaitForSecondsRealtime(0.2f);
					
					Vector3 moveto=SuperController.singleton.mainHUD.position;float zto=0;float xto=-0.7f;
					if(vr){moveto=SuperController.singleton.leftHand.position;xto=0f;zto=0f;
					vrhands.isOn=false;
					}
					p.mainController.transform.position=new Vector3(moveto.x+xto,moveto.y,moveto.z+zto);
					if(addmove!=""){SuperController.singleton.GetAtomByUid(addmove).mainController.transform.position=new Vector3(moveto.x+xto,moveto.y-0.2f,moveto.z+zto);}
					
					//p.mainController.transform.position=new Vector3(SuperController.singleton.mainHUD.position.x+-0.7f,SuperController.singleton.mainHUD.position.y,SuperController.singleton.mainHUD.position.z);
					yield return new WaitForSecondsRealtime(0.5f);
					p.SetFreezePhysics(false);
					p.collisionEnabled=collide;
					}
				if(cua!=""){StartCoroutine(loadcua(p,cua));}
				break;
				}						
			}

yield return null;

}

SuperController.singleton.pauseAutoSimulation=false;
yield return null;								

}
	
private void Selectcontrol(Atom a,string name){
name=name.Replace("Left ","l").Replace("Right ","r").Replace("Breast","Chest").Replace("arm","Arm").Replace("hand","Hand").Replace("elbow","Elbow").Replace("toe","Toe").Replace("foot","Foot").Replace("knee","Knee").Replace("thigh","Thigh")+"Control";
name=name.Substring(0,1).ToLower()+name.Substring(1,name.Length-1);
foreach(FreeControllerV3 fc in a.freeControllers){
if(fc.name==name){
SuperController.singleton.SelectController(fc);}}
}

private string pmenu=",Control & Physics 1:Skin Presets,Control & Physics 2:Skin Select,General Presets:Skin Materials 1,Appearance Presets:Skin Materials 2,Pose Presets:Skin Textures,Move:Iris Materials,Animation Presets:Sclera Materials,Animation:Lacrimals Materials,F Glute Presets:F Eyelash Materials,F Glute Physics:M Eyelash Materials,F Breast Presets:Teeth Materials,F Breast Physics 1:Tongue Materials,F Breast Physics 2:Mouth Materials,M Pectoral Physics:Morphs Presets,Jaw Physics & Triggers:Female Morphs,Auto Behaviours:Male Morphs,Plugins Presets:Hair Presets,Plugins:Hair,Head Audio:Clothing Presets,Hand Control:Clothing\n";
private bool dontset=false;private float lastitime=0f;
private IEnumerator setimode(float timer){

while(Time.time-lastitime<2){if(lastitime>timer){yield break;}yield return null;}
Refresh();
}

private IEnumerator atomfreeze(Atom a){
a.SetFreezePhysics(true);
yield return null;
}

private IEnumerator atomunfreeze(Atom a){
yield return new WaitForSecondsRealtime(0.5f);
a.SetFreezePhysics(false);
}





private IEnumerator unpausescene(float delay=0.5f){
yield return new WaitForSecondsRealtime(delay);
if(delay!=0){
SuperController.singleton.pauseAutoSimulation=false;
pausebutton.buttonColor = new Color(0.81f, 0.44f, 0.21f);
pausebutton.label="Unpause";
pausebutton.textColor = Color.white;	
}
}

private IEnumerator unfreezescene(float delay=0.5f){
yield return new WaitForSecondsRealtime(delay);
if(delay!=0){
freeze.isOn=false;freezebutton.label="Freeze";
freezebutton.buttonColor = new Color(0.51f, 0.54f, 0.61f);
}
}


private IEnumerator unfreeze(){
_person.mainController.transform.eulerAngles= new Vector3(_person.mainController.transform.eulerAngles.x,rotator.slider.value,_person.mainController.transform.eulerAngles.z);
yield return new WaitForSecondsRealtime(0.5f);
_person.SetFreezePhysics(false);
}
private string pluginlabel="";
private void updatecustomfilter(){

	var addf=_filterNameInputField.text.Replace("@","/").Replace(",","/");
	if(customfilter==""){
	customfilter=":"+addf;
	initletters=true;
	StartCoroutine(iletters());
	saveini();	
	}else{
	string[] chk=customfilter.Split(":"[0]);
	if(chk[chk.Length-1]!=addf){
	echo7("ADDING to customfilter");
	customfilter=((customfilter.Replace(":"+addf,""))+":"+addf).Replace("::",":");
	if(customfilter.Substring(0,1)=="/"){
	customfilter=":"+customfilter.Substring(1,customfilter.Length-1);
	}
	if(customfilter.Substring(0,1)!=":"){customfilter=":"+customfilter;}
	string[] csplit=customfilter.Split(":"[0]);
	if(csplit.Length>25){
	customfilter="";
	for(int i=csplit.Length-25;i<csplit.Length;i++){
	customfilter+=":"+csplit[i];
	}
	}
	initletters=true;
	StartCoroutine(iletters());
	saveini();
	}}

}

private IEnumerator firstconnect(){
StartCoroutine(Readhost(Clientsocket));
yield return new WaitForSecondsRealtime(1);
if(autoconnect){autoconnectb.label="AUTOCONNECT: <color=#ffffff>ON</color> ";Connecttohost(ircserver, int.Parse(ircport));}else{connectb.label="CONNECT";autoconnectb.label="AUTOCONNECT: OFF ";} // connect with this
}
private bool fadingin=true;
private IEnumerator fadein(){
lightval1b=lightval1;
lightval2b=lightval2;
echo25(lightval1.ToString());
echo25(lightval2.ToString());
for(float i=0;i<1;i+=0.01f){
	
if(lightval1b>1){
lightslider1.slider.value=lightval1b*i;
}
if(lightval2b>1){
lightslider2.slider.value=lightval2b*i;
}
yield return null;
}
fadingin=false;
}

private float lightval1=90f;
private float lightval1b=90f;
private float lightval2=50f;
private float lightval2b=50f;
private void pushbutton(Button b, float delay=1f){
StartCoroutine(IEpushbutton(b,delay));
}
private IEnumerator IEpushbutton(Button b,float delay=1f){
yield return new WaitForSecondsRealtime(delay);
echo7("pushing button "+b.name);
b.onClick.Invoke();
}

private string customfilter="";
private bool closeset=false;
private int uilayer;
private bool slidersoff=true;
private Vector2 closepos;
private UIDynamicTextField chatwindow;
private UIDynamicTextField upgradeinfo;
private UIDynamicTextField userwindow;
private UIDynamicTextField hudfiller;
private UIDynamicTextField hudtext;
private UIDynamicTextField cpanel;
private InputField _cpanel;
private float movec=0f;
private Transform Navigationrig;
private Transform Player;
private Transform Playerheight;
public UIDynamicButton cconfigb;
public UIDynamicButton connectb;
public UIDynamicButton autoconnectb;
public UIDynamicButton wwwbuttonhud;
public UIDynamicButton wwwbutton;
public UIDynamicButton chatbuttonhud;
public UIDynamicButton chatbutton;
public UIDynamicButton searchf;
public UIDynamicButton deselectf;
public UIDynamicButton selectf;
public UIDynamicButton inward;
public UIDynamicButton outward;
public UIDynamicButton upward;
public UIDynamicButton downward;
public UIDynamicButton leftward;
public UIDynamicButton rightward;
public UIDynamicButton morphsave;
public UIDynamicButton morphload;
public UIDynamicButton streambutton;
public UIDynamicButton headl2;

private Dictionary<string,string> varinfo = new Dictionary<string,string>();private string lastpromote="";

private void getvarinfo(int speed=3){
var lastpromotion="";var lastcreator="";


varinfo=new Dictionary<string,string>();
var tmp=FileManagerSecure.GetFullPath(SuperController.singleton.currentLoadDir).Replace("/","\\").ToString();
//tochat("You loaded local scene "+tmp+"\n");
if(!SuperController.singleton.currentLoadDir.Replace("/","\\").Contains(":\\")){varinfo.Add("local scene",tmp);return;}




if(speed==0){
varinfo.Add("varscenebytes",SuperController.singleton.loadJson.ToString().Length.ToString());
varinfo.Add("varscenejson",SuperController.singleton.loadJson.ToString());
}
var varpath=SuperController.singleton.currentLoadDir;
var varfile=tmp.Substring(0,tmp.Length-varpath.Length)+"AddonPackages\\"+varpath.Substring(0,varpath.IndexOf(":/"))+".var";
//echo7(FileManagerSecure.ReadAllText(varfile+":\\meta.json").ToString());
var varuid=Regex.Replace(varpath, ":.*", string.Empty);
varinfo.Add("varpath",varpath);
varinfo.Add("varfile",varfile);
varinfo.Add("varuid",varuid);

if(speed>2){

//echo8("VAR: "+varfile+":\\meta.json");
var ttmp=varfile+":\\meta.json";
//ttmp=ttmp.Replace("\\","/");


try{
tmp=FileManagerSecure.ReadAllText(ttmp).ToString();
}catch(Exception e){
getvarinfo(2);
return;
}


JSONNode jtmp = JSON.Parse(tmp);

foreach (String s in "licenseType,creatorName,packageName,description,credits,instructions,promotionalLink".Split(","[0])){
varinfo.Add(s,jtmp[s]);
}
echo7(varinfo["licenseType"]);
echo7(varinfo["creatorName"]);
echo7(varinfo["packageName"]);
echo7(varinfo["description"]);
echo7(varinfo["credits"]);
echo7(varinfo["instructions"]);
echo7(varinfo["promotionalLink"]);


echo7(jtmp["contentList"].ToString());
echo7(jtmp["dependencies"].ToString());

var varcreator="";
var varscene=varuid.Substring(0,varuid.LastIndexOf("."));
if(varscene.Contains(".")){
varcreator=varscene.Substring(0,varscene.IndexOf("."));
varscene=varscene.Substring(varscene.IndexOf(".")+1);
}
varinfo.Add("varscene",varscene);
varinfo.Add("varcreator",varcreator);
varinfo.Add("varversion",varuid.Substring(varuid.LastIndexOf(".")+1));

}
else{
Transform vartr=SuperController.singleton.packageManagerUI;
vartr.localPosition=new Vector2(0,8000);
SuperController.singleton.OpenPackageInManager(varpath);
varinfo.Add("varcreator",vartr.Find("BackPanel/PackageInfoPanel/CreatorNameField/Text").GetComponent<Text>().text);
varinfo.Add("varscene",vartr.Find("BackPanel/PackageInfoPanel/PackageNameField/Text").GetComponent<Text>().text);
varinfo.Add("varversion",vartr.Find("BackPanel/PackageInfoPanel/VersionNumberField/Text").GetComponent<Text>().text);
varinfo.Add("varlicense",vartr.Find("BackPanel/PackageInfoPanel/TabbedContent/Tab1/LicensePanel/EADayPopup/PopupPanel/Scroll View/Viewport/Content/PopupValueButtonTemplate(Clone)/Text").GetComponent<Text>().text);
varinfo.Add("varlicenseinfo",vartr.Find("BackPanel/PackageInfoPanel/TabbedContent/Tab1/LicensePanel/LicenseDescriptionText").GetComponent<Text>().text);
varinfo.Add("vardescription",vartr.Find("BackPanel/PackageInfoPanel/TabbedContent/Tab1/DescriptionScrollView/Viewport/Content/DescriptionField/Text").GetComponent<Text>().text);
varinfo.Add("varcredits",vartr.Find("BackPanel/PackageInfoPanel/TabbedContent/Tab1/CreditsScrollView/Viewport/Content/CreditsField/Text").GetComponent<Text>().text);
varinfo.Add("varinstructions",vartr.Find("BackPanel/PackageInfoPanel/TabbedContent/Tab1/InstructionsScrollView/Viewport/Content/InstructionsField/Text").GetComponent<Text>().text);

var ptmp=vartr.Find("BackPanel/PackageInfoPanel/TabbedContent/Tab1/PromotionalLinkButton/Text").GetComponent<Text>().text;
varinfo.Add("promotionalLink",ptmp);
var varcontents="";
foreach(Text t in vartr.Find("BackPanel/PackageInfoPanel/TabbedContent/Tab1/PackageContents/ContentsScrollView/Viewport/Content/").GetComponentsInChildren<Text>(true)){
varcontents+=t.text+"\n";
}
varinfo.Add("varcontents",varcontents);
vartr.gameObject.SetActive(false);
SuperController.singleton.SetToLastActiveUI();
vartr.localPosition=new Vector2(0,800);
}
}

private IEnumerator showslider(Transform t, string s){
int xp=120;if(s.Contains("model")){xp=100;}
hudtext.transform.localPosition=new Vector2(t.localPosition.x+xp,hudtext.transform.localPosition.y);
hudtext.textColor=Color.white;
for(int i=0;i<s.Length;i++){
if(slidersoff){i=s.Length;break;yield break;}
hudtext.text=s.Substring(0,i+1);
yield return new WaitForSecondsRealtime(0.03f);
}
yield return null;
}

private IEnumerator hideslider(Transform t, string s){
//StopCoroutine(showslider(t,s));
int ii=s.Length-hudtext.text.Length;
for(int i=ii;i<s.Length;i++){
if(!slidersoff){i=s.Length;break;yield break;}
hudtext.text=s.Substring(0,s.Length-i);
yield return new WaitForSecondsRealtime(0.03f);
}
hudtext.text="";
yield return null;
}


    public void OnPointerUp(PointerEventData data)
    {
        echo7("pointer up");
    }

private IEnumerator mover(){
Navigationrig = SuperController.singleton.navigationRig.transform;
Player = SuperController.singleton.centerCameraTarget.transform;
Playerheight = SuperController.singleton.centerCameraTarget.transform.parent.parent;
movec=0;
while(moving){
	if(movec<250){movec+=1.4f;}
	if(move=="right"){Navigationrig.position = new Vector3(Navigationrig.position.x+0.0003f*movec,0,Navigationrig.position.z);}
	else if(move=="left"){Navigationrig.position = new Vector3(Navigationrig.position.x-0.0003f*movec,0,Navigationrig.position.z);}
	else if(move=="in"){Navigationrig.position = new Vector3(Navigationrig.position.x,0,Navigationrig.position.z-0.0003f*movec);}
	else if(move=="out"){Navigationrig.position = new Vector3(Navigationrig.position.x,0,Navigationrig.position.z+0.0003f*movec);}
	else if(move=="up"){
		SuperController.singleton.playerHeightAdjust=SuperController.singleton.playerHeightAdjust-0.0003f*movec;
		//Playerheight.position = new Vector3(Playerheight.position.x,Playerheight.position.y-0.0003f*movec,Playerheight.position.z);
		
		}
	else if(move=="down"){
		//Playerheight.position = new Vector3(Playerheight.position.x,Playerheight.position.y+0.0003f*movec,Playerheight.position.z);
		SuperController.singleton.playerHeightAdjust=SuperController.singleton.playerHeightAdjust+0.0003f*movec;
		}
 
//Playerheight.position = new Vector3(Navigationrig.position.x,Playerheight.position.y,Navigationrig.position.z);
yield return new WaitForSecondsRealtime(0.0003f);
}
yield return null;
}


private void align(){


Player = SuperController.singleton.centerCameraTarget.transform;
Playerheight = SuperController.singleton.centerCameraTarget.transform.parent.parent;
//echo3("Player "+Player.position.y.ToString()+" Playerheight "+Playerheight.position.y.ToString()+" Navigationrig "+Navigationrig.position.y.ToString()+" Person "+_person.transform.position.y.ToString());
//echo3("Navigationrig x "+Navigationrig.position.x.ToString()+" Player x "+Player.position.x.ToString()+" Playerheight x "+Playerheight.position.x.ToString());
//SuperController.singleton.monitorCameraFOV=20; //set desktop fov
//SuperController.singleton.centerCameraTarget.maincontroller.transform.position=new Vector3(_person.transform.position.x,_person.transform.position.y,_person.transform.position.z-0.3f);
//Player.parent.parent.transform.position=Player.position=navigationRig.position;
Navigationrig = SuperController.singleton.navigationRig.transform;
Navigationrig.position = new Vector3(_person.rigidbodies[406].transform.position.x,0,_person.rigidbodies[406].transform.position.z+1.5f);
SuperController.singleton.playerHeightAdjust=_person.rigidbodies[406].transform.position.y-1.6f;
//Playerheight.position = new Vector3(Navigationrig.position.x,_person.rigidbodies[406].transform.position.y-1.6f,Navigationrig.position.z);
//Player.position = new Vector3(0,0.1f,0);
//Player.localPosition = Player.position;
//Playerheight.localPosition = new Vector3(0,0,0);
//Player.position=new Vector3(Playerheight.position.x,navigationRig.position.y+Playerheight.position.y,Playerheight.position.z);
//Player.position=navigationRig.position;
//Playerheight.localPosition=new Vector3(0,0,0);
//SuperController.singleton.MonitorRig.transform.position = Player.position;

}



	private UIDynamicSlider lightslider1;
	private UIDynamicSlider lightslider2;
	private UIDynamicTextField fovtext;
	private UIDynamicTextField uisizetext;
	private UIDynamicSlider rotator;
	private bool worldset=false;
	//SuperController.singleton.monitorUIScaleSlider.value=0.87f+(((SuperController.singleton.MonitorCenterCamera.fieldOfView)*0.45f)/100);

private GameObject cocopops=null;
private bool uipressed=false;
private float uisize=1;
private float saveui=-999;
private void uiscaler(JSONStorableFloat jf){
	uisize=jf.val/100;
	if(uipressed){
	if(cocopops!=null){GameObject.Destroy(cocopops.gameObject);}
	float uw=808*(uisize*0.7f);
	float uh=1230*(uisize*0.7f);
	//float ad=SuperController.singleton.mainHUD.position.x*1000;
	//cocopops=createbox(SuperController.singleton.MonitorUI,w:uw, h:uh,x:((0-770)-(182*(1-uisize))+(uw/2)), y:(-484)+uh/2,cc:chatcolor);
	}
	//echo14(cocopops.transform.position.ToString());
	uisizetext.text=("UI "+uisize.ToString());
//StartCoroutine(IEfovscaler(fovslider.slider.value));
}

private float fovlock=3;
private void fovscaler(JSONStorableFloat jf){

	if(SuperController.singleton.topWorldUI.gameObject.active){
				fovslider.slider.value=fovlock;
				return;
				}
		
	float val=jf.val;
	fovlock=val;
StartCoroutine(IEfovscaler(val));
}

private void speedscaler(JSONStorableFloat jf){
	float val=jf.val;
StartCoroutine(speedscale(val));
}


private void qualityscaler(JSONStorableFloat jf){
	float val=jf.val;
StartCoroutine(qualityscale(val));
}

private float thespeed=2;
private IEnumerator speedscale(float val, bool refresh=false){
thespeed=((val)/((101)-(val)))*2;
//echo24(thespeed.ToString());
SuperController.singleton.freeMoveMultiplier=thespeed;
speedtext.text="MOVE "+((thespeed.ToString()+"    ").Substring(0,5));
yield return null;	
}

private IEnumerator qualityscale(float val, bool refresh=false){
UserPreferences u=SuperController.singleton.GetAtomByUid("CoreControl").gameObject.GetComponent<UserPreferences>();
var shade="";int smoothp=4;
if(val<5){shade="Low";
smoothp=int.Parse(val.ToString());
}
else if(val<10){shade="Medium";
smoothp=int.Parse(val.ToString())-5;
}
else{shade="High";
smoothp=int.Parse(val.ToString())-10;
}
echo24(smoothp.ToString()+" > "+shade);
u.SetShaderLODFromString(shade);
u.smoothPasses=smoothp;
qualitytext.text="QL "+shade.ToUpper()+"-"+smoothp.ToString();
yield return null;	
}

private IEnumerator IEfovscaler(float val, bool refresh=false){
float jfc=val;
var fovcap="10-0.9614,18-0.967,20-0.969,30-0.98173,40-1,50-1.0247,60-1.057,70-1.099,80-1.1523,90-1.2204,100-1.3092,120-1.586";
string[] fc=fovcap.Split(","[0]);
var ft=fc[int.Parse(jfc.ToString())];
float f=0;
String[] fcpart=ft.Split("-"[0]);
fovtext.text="FOV "+fcpart[0];
float fov=float.Parse(fcpart[0]);
if((fov<110 && fov>18) || refresh){
SuperController.singleton.monitorCameraFOV=fov;
SuperController.singleton.monitorUIScaleSlider.value=float.Parse(fcpart[1])*uisize;
}
if(refresh){yield return null;
SuperController.singleton.monitorCameraFOV=fov;
SuperController.singleton.monitorUIScaleSlider.value=float.Parse(fcpart[1])*uisize;
yield return null;}
echo12(SuperController.singleton.monitorUIScaleSlider.value.ToString());
echo12(SuperController.singleton.monitorCameraFOV.ToString());
}



private void fpsscaler(JSONStorableFloat jf){
float jfc=26-jf.val;
var fpscap="Auto-3,Auto-2,Auto-1,45-3,45-2,45-1,60-3,60-2,60-1,72-3,72-2,72-1,90-3,90-2,90-1,120-3,120-2,120-1,144-3,144-2,144-1,240-3,240-2,240-1,288-3,288-2,288-1";
string[] fc=fpscap.Split(","[0]);
float f=0;
fpstext.text="FPS "+fc[int.Parse(jfc.ToString())];
String[] fcpart=fc[int.Parse(jfc.ToString())].Split("-"[0]);
UserPreferences u=SuperController.singleton.GetAtomByUid("CoreControl").gameObject.GetComponent<UserPreferences>();
if(jfc<3){u.physicsRate=UserPreferences.PhysicsRate.Auto;}
else if(jfc<6){u.physicsRate=UserPreferences.PhysicsRate._45;}
else if(jfc<9){u.physicsRate=UserPreferences.PhysicsRate._60;}
else if(jfc<12){u.physicsRate=UserPreferences.PhysicsRate._72;}
else if(jfc<15){u.physicsRate=UserPreferences.PhysicsRate._90;}
else if(jfc<18){u.physicsRate=UserPreferences.PhysicsRate._120;}
else if(jfc<21){u.physicsRate=UserPreferences.PhysicsRate._144;}
else if(jfc<24){u.physicsRate=UserPreferences.PhysicsRate._240;}
else if(jfc<27){u.physicsRate=UserPreferences.PhysicsRate._288;}
u.physicsUpdateCap=int.Parse(fcpart[1]);
}

private void setcams(string rgbstr){
	echo25(">"+rgbstr+"<");
JSONStorableFloat fake = new JSONStorableFloat("fake "+rgbstr, 0, rgbscaler, 0, 0);
rgbscaler(fake);
}

private bool godslide=false;
private float currentR=0;
private float currentG=0;
private float currentB=0;
private void atomscaler(JSONStorableFloat jf=null){
atomscale(jf.val);
}

private void xscaler(JSONStorableFloat jf=null){
if(godslide){xscale(jf.val);}
}

private void yscaler(JSONStorableFloat jf=null){
	//echo24(rselect.text+" > "+godslide);
if(godslide){yscale(jf.val);}
}

private void xnudger(JSONStorableFloat jf=null){
if(godslide){xnudge(jf.val);}
}

private void ynudger(JSONStorableFloat jf=null){
if(godslide){ynudge(jf.val);}
}

private void znudger(JSONStorableFloat jf=null){
if(godslide){znudge(jf.val);}
}

private void zscaler(JSONStorableFloat jf=null){
if(godslide){zscale(jf.val);}
}

private void atomscale(float val){
if(rsa!=null){
	lastscale=Time.realtimeSinceStartup;
	
					var storable="scale";if(rsa.type=="Person"){storable="rescaleObject";
					
					}
					JSONStorable a1 = rsa.GetStorableByID(storable);
					JSONStorableFloat a2 = a1.GetFloatJSONParam("scale");
					if(val==100){scaleslider.slider.value=5.5f;}else{a2.val=val/(11-val);}

}
}

private bool godslidex=false;
private bool godslidey=false;
private bool godslidez=false;
private void xscale(float val){
if(rsa!=null){
	godslidex=true;
	lastscale=Time.realtimeSinceStartup;
	float v=val;
	xslider.slider.fillRect.GetComponent<Image>().color=Color.white;
	if(Math.Abs(val)>87 && Math.Abs(val)<93){v=90;xslider.slider.fillRect.GetComponent<Image>().color=Color.green;}
	if(Math.Abs(val)>42 && Math.Abs(val)<48){v=45;xslider.slider.fillRect.GetComponent<Image>().color=Color.green;}
	if(Math.Abs(val)>132 && Math.Abs(val)<138){v=135;xslider.slider.fillRect.GetComponent<Image>().color=Color.green;}
	if(Math.Abs(val)>222 && Math.Abs(val)<228){v=225;xslider.slider.fillRect.GetComponent<Image>().color=Color.green;}
	if(Math.Abs(val)>312 && Math.Abs(val)<318){v=315;xslider.slider.fillRect.GetComponent<Image>().color=Color.green;}
	else if(Math.Abs(val)>177 && Math.Abs(val)<183){v=180;xslider.slider.fillRect.GetComponent<Image>().color=Color.green;}
	else if(Math.Abs(val)>267 && Math.Abs(val)<273){v=270;xslider.slider.fillRect.GetComponent<Image>().color=Color.green;}
	rsa.mainController.transform.eulerAngles=new Vector3(v,rsrot.y,rsrot.z);
	//if(val>90 && val<270){yslider.slider.value=Math.Abs(rsrot.y-180);zslider.slider.value=Math.Abs(rsrot.z-180);}
	//else{
		yslider.slider.value=rsa.mainController.transform.eulerAngles.y;zslider.slider.value=rsa.mainController.transform.eulerAngles.z;//}
}
}

private bool vxdown=false;
private bool vydown=false;
private bool vzdown=false;

private IEnumerator vxslide(float val){
vxdown=true;
while(vxdown && godslide){
rsa.mainController.transform.position=new Vector3(rsa.mainController.transform.position.x+(val*0.0025f),rsnudge.y,rsnudge.z);
yield return null;
}
}

private IEnumerator vyslide(float val){
vydown=true;
while(vydown && godslide){
rsa.mainController.transform.position=new Vector3(rsnudge.x,rsa.mainController.transform.position.y+(val*0.0025f),rsnudge.z);
yield return null;
}
}

private IEnumerator vzslide(float val){
vzdown=true;
while(vzdown && godslide){
rsa.mainController.transform.position=new Vector3(rsnudge.x,rsnudge.y,rsa.mainController.transform.position.z+(val*0.0025f));
yield return null;
}
}

private void xnudge(float val){
if(rsa!=null && godslide){
	lastscale=Time.realtimeSinceStartup;	
	if(Math.Abs(val)==1 && !vxdown){StartCoroutine(vxslide(val));}else if(vxdown && Math.Abs(val)<1){vxdown=false;}
	rsa.mainController.transform.position=new Vector3(rsnudge.x+(val/(50-(Math.Abs(val*20)))),rsnudge.y,rsnudge.z);
}
}

private void ynudge(float val){
if(rsa!=null && godslide){
	lastscale=Time.realtimeSinceStartup;
	if(Math.Abs(val)==1 && !vydown){StartCoroutine(vyslide(val));}else if(vydown && Math.Abs(val)<1){vydown=false;}
	rsa.mainController.transform.position=new Vector3(rsnudge.x,rsnudge.y+(val/(50-(Math.Abs(val*20)))),rsnudge.z);
}
}

private void znudge(float val){
if(rsa!=null && godslide){
	lastscale=Time.realtimeSinceStartup;
	if(Math.Abs(val)==1 && !vzdown){StartCoroutine(vzslide(val));}else if(vzdown && Math.Abs(val)<1){vzdown=false;}
	rsa.mainController.transform.position=new Vector3(rsnudge.x,rsnudge.y,rsnudge.z+(val/(50-(Math.Abs(val*20)))));
}
}

private void yscale(float val){
	
if(rsa!=null && !godslidex){
	lastscale=Time.realtimeSinceStartup;
	yslider.slider.fillRect.GetComponent<Image>().color=Color.white;float v=val;
	if(Math.Abs(val)>87 && Math.Abs(val)<93){v=90;yslider.slider.fillRect.GetComponent<Image>().color=Color.green;}
	if(Math.Abs(val)>42 && Math.Abs(val)<48){v=45;yslider.slider.fillRect.GetComponent<Image>().color=Color.green;}
	if(Math.Abs(val)>132 && Math.Abs(val)<138){v=135;yslider.slider.fillRect.GetComponent<Image>().color=Color.green;}
	if(Math.Abs(val)>222 && Math.Abs(val)<228){v=225;yslider.slider.fillRect.GetComponent<Image>().color=Color.green;}
	if(Math.Abs(val)>312 && Math.Abs(val)<318){v=315;yslider.slider.fillRect.GetComponent<Image>().color=Color.green;}	
	else if(Math.Abs(val)>177 && Math.Abs(val)<183){v=180;yslider.slider.fillRect.GetComponent<Image>().color=Color.green;}
	else if(Math.Abs(val)>267 && Math.Abs(val)<273){v=270;yslider.slider.fillRect.GetComponent<Image>().color=Color.green;}
	rsa.mainController.transform.eulerAngles=new Vector3(rsrot.x,v,rsrot.z);
	
}
}

private void zscale(float val){
if(rsa!=null && !godslidex){
	lastscale=Time.realtimeSinceStartup;
	zslider.slider.fillRect.GetComponent<Image>().color=Color.white;float v=val;
	if(Math.Abs(val)>87 && Math.Abs(val)<93){v=90;zslider.slider.fillRect.GetComponent<Image>().color=Color.green;}
	if(Math.Abs(val)>42 && Math.Abs(val)<48){v=45;zslider.slider.fillRect.GetComponent<Image>().color=Color.green;}
	if(Math.Abs(val)>132 && Math.Abs(val)<138){v=135;zslider.slider.fillRect.GetComponent<Image>().color=Color.green;}
	if(Math.Abs(val)>222 && Math.Abs(val)<228){v=225;zslider.slider.fillRect.GetComponent<Image>().color=Color.green;}
	if(Math.Abs(val)>312 && Math.Abs(val)<318){v=315;zslider.slider.fillRect.GetComponent<Image>().color=Color.green;}	
	else if(Math.Abs(val)>177 && Math.Abs(val)<183){v=180;zslider.slider.fillRect.GetComponent<Image>().color=Color.green;}
	else if(Math.Abs(val)>267 && Math.Abs(val)<273){v=270;zslider.slider.fillRect.GetComponent<Image>().color=Color.green;}	
	rsa.mainController.transform.eulerAngles=new Vector3(rsrot.x,rsrot.y,v);
}
}

private Color camclr;
private void rgbscaler(JSONStorableFloat jf=null){

float R=Rslider.slider.value;float G=Gslider.slider.value;float B=Bslider.slider.value;
if(jf.name.Contains("fake ")){
string[] csplit=(jf.name.Replace("fake ","")).Split(":"[0]);
R=float.Parse(csplit[0]);
G=float.Parse(csplit[1]);
B=float.Parse(csplit[2]);
Rslider.slider.value=R;
Gslider.slider.value=G;
Bslider.slider.value=B;

}

Color setcol=new Color(R,G,B,1);
camclr=setcol;
currentR=R;
currentG=G;
currentB=B;
	
 //UnityEngine.RenderSettings.ambientSkyColor=Color.green;
 //UnityEngine.RenderSettings.ambientLight=Color.green;

Color camcolval=new Color();
if(camcol=="normal"){camcolval=setcol;}
else if(camcol=="greenscreen"){camcolval=Color.green;}
else if(camcol=="transparent"){camcolval=Color.clear;}
SuperController.singleton.hiResScreenshotCamera.clearFlags=CameraClearFlags.Color;
SuperController.singleton.hiResScreenshotCamera.backgroundColor=camcolval;
if(Mcamera!=null){Mcamera.clearFlags=CameraClearFlags.Color;
Mcamera.backgroundColor=camcolval;}
SuperController.singleton.MonitorCenterCamera.clearFlags=CameraClearFlags.Color;
SuperController.singleton.MonitorCenterCamera.backgroundColor=setcol;
Camera maincam=SuperController.singleton.lookCamera;
//maincam.fieldOfView=20;
maincam.clearFlags =CameraClearFlags.Color;
maincam.backgroundColor=setcol;
if(SuperController.singleton.GetAtomByUid("WindowCamera")!=null){
Camera wincam=SuperController.singleton.GetAtomByUid("WindowCamera").GetComponentInChildren<Camera>(true);
if(wincam!=null){wincam.clearFlags =CameraClearFlags.Color;
wincam.backgroundColor=setcol;
}
}

JSONStorableString scenesaver=new JSONStorableString("config","data here");
RegisterString(scenesaver);

}
	
		private void timescaler(JSONStorableFloat jf){
		timescale.value=jf.val;
		timetext.text="TIME "+((jf.val*100).ToString()+".").Substring(0,((jf.val*100).ToString()+".").IndexOf("."))+"%";
		}
	
	private IEnumerator setholo(){
	while(Time.time-lastzoom < 5){
	yield return new WaitForSecondsRealtime(1);
	}
	echo9("setting holo");
	SuperController.singleton.showNavigationHologrid=holoshow;
	SuperController.singleton.hologridTransparency=holotrans;
	noholo=false;
	yield return null;
	}
	
	
private IEnumerator renderscaler(){
	if(sessionplugin){
	UserPreferences u=SuperController.singleton.GetAtomByUid("CoreControl").gameObject.GetComponent<UserPreferences>();
	float os=u.renderScale;
	u.renderScale=0.5f;
	yield return new WaitForSecondsRealtime(0.5f);
	u.renderScale=os;
	yield return null;}
}


private void setworldscale(float val,bool slide=true, bool clean=false){

lastzoom=Time.time;
if(!noholo){
holoshow=SuperController.singleton.showNavigationHologrid;
holotrans=SuperController.singleton.hologridTransparency;
StartCoroutine(setholo());
}
noholo=true;
SuperController.singleton.showNavigationHologrid=false;
SuperController.singleton.hologridTransparency=0f;
if(clean){
SuperController.singleton.worldScale=val;
echo14(val.ToString());
}else{
float ws=(505-val)/100;
SuperController.singleton.worldScale=ws;
echo14(ws.ToString());
worldtext.text="WORLD "+((100/ws).ToString()+".").Substring(0,((100/ws).ToString()+".").IndexOf("."))+"%";
}
if(slide){SuperController.singleton.playerHeightAdjust=1.5f-(SuperController.singleton.worldScale)*1.66f;}

}

private void worldscaler(JSONStorableFloat jf){
if(worldset){setworldscale(jf.val);}
worldset=true;
}
	
	private float lastzoom=0;
	private bool noholo=false;
	private void lights(JSONStorableFloat jf){
	var target=Frontlight;
	if(jf.name=="lightslide2"){target=Backlight;}
	if(jf.val<=1f){target.GetComponent<Light>().enabled = false;}
	else{target.GetComponent<Light>().enabled = true;
	target.intensity = jf.val/50;
	}
		
		
	}
	
	private bool freezedown=false;
	private IEnumerator freezeatom(Atom a){
		if(a.type=="Person"){
		freezedown=true;
		a.freezePhysicsJSON.val=true;}
		else{
		
		if(!freezedown){bool phys=a.mainController.physicsEnabled;
		freezedown=true;
		a.mainController.physicsEnabled=false;
		while(freezedown){yield return null;}
		a.mainController.physicsEnabled=phys;}
		}
		yield return null;
	}
	
	private IEnumerator unfreezeatom(Atom a){
		freezedown=false;
		yield return new WaitForSecondsRealtime(1);
		if(a!=null && !freezedown){a.freezePhysicsJSON.val=false;}
	}
		
	
	private void rotation(JSONStorableFloat jf){
	if(_person==null){return;}
	
	//while(!_person.freezePhysicsJSON.val){yield return null;}
	if(_person.freezePhysicsJSON.val){_person.mainController.transform.eulerAngles= new Vector3(_person.mainController.transform.eulerAngles.x,jf.val,_person.mainController.transform.eulerAngles.z);}
	}
	
	
	
	private string gender;private bool isfuta=false;private float inputpos;
	
	private void selectcust(bool select = true,float maxvalue=9999999){
			var backup = _morphNameInputField.text;var clip = "";
			selecting=true;int sc=0;int sctotal=0;
			//echo3("max: "+maxvalue.ToString());
                        foreach (SM sm in _mainBank.Concat(_genitalBank))
			{				float chk=float.Parse(sm.Morph.morphValue.ToString().Replace("-",""))*1000;
							if(chk<=maxvalue){
							if(sm.Selected!=select){
								
							if(sm.Morph.uid.Contains("Custom/") || sm.Morph.uid.Contains(":/")){
                            sm.Storable.val = sm.Selected = select;sc++;
							}
							
							}
						}
							
							if(sm.Selected){clip = clip+sm.Morph.displayName+"\n";sctotal++;}
			}

		_morphNameInputField.text = backup;selecting=false;
		if(select){clip = "";}var total="";
		if(sc!=sctotal){total=" - TOTAL MORPHS SELECTED: "+sctotal;}
		if(select){Result("SELECTED "+sc+" MORPHS"+total);}else{Result("DESELECTED "+sc+" MORPHS"+total);}
		}

		
	private void selectall(bool select = true,float maxvalue=9999999){
			var backup = _morphNameInputField.text;var clip = "";
			selecting=true;int sc=0;int sctotal=0;
			//echo3("max: "+maxvalue.ToString());
                        foreach (SM sm in _mainBank.Concat(_genitalBank))
			{				float chk=float.Parse(sm.Morph.morphValue.ToString().Replace("-",""))*1000;
							//echo3(chk.ToString()+" : "+maxvalue.ToString());
							if(chk<=maxvalue){
							if(sm.Selected!=select){
                            sm.Storable.val = sm.Selected = select;sc++;}
							
							}else{if(select){sm.Storable.val = sm.Selected = !select;}}
							
							if(sm.Selected){clip = clip+sm.Morph.displayName+"\n";sctotal++;}
			}
		//_selectAllButton.label = "Select:   ALL   NONE   FILTER";
		_morphNameInputField.text = backup;selecting=false;
		if(select){
		//GUIUtility.systemCopyBuffer = clip;
		clip = "";}var total="";
		if(sc!=sctotal){total=" - TOTAL MORPHS SELECTED: "+sctotal;}
		if(select){Result("SELECTED "+sc+" MORPHS"+total);}else{Result("DESELECTED "+sc+" MORPHS"+total);}
		}
		
	private string _personname; private string displayName;private bool duobank=false;private bool femalebank=true;
	private void setperson(string s="any") {

			people=false;
			foreach(Atom p in SuperController.singleton.GetAtoms()){if(p.on && p.type == "Person"){people=true;wiz.enabled=false;
			iletters();
			}}
			if(!people){modelbutton.label="No models";wiz.enabled=ui.enabled;if(wiz.enabled){StartCoroutine(iletters(clear:true));}else{StartCoroutine(iletters());}
			return;}
			


			foreach(Atom p in SuperController.singleton.GetAtoms()){

			if((p.type == "Person" && p.name == s) || (p.type == "Person" && s == "any")){s = "";
			Setsliders();for (int i = 0; i < buttons+10; i++){RemoveButton(morphinfo[i]);}buttons=0;

            foreach (SM sm in _mainBank.Concat(_genitalBank))
		{
		RemoveToggle(sm.Storable);
		}
            	_mainBank.Clear();
            	_genitalBank.Clear();

		int count=0;
		if(_people != null)
		//string[] _temp = New ArrayList<string> choices = new List<string>();

	foreach(string num in _people)
		{
		count++;
		if(_people[count].Contains("["+p.name+"]")){_people[count]="";}
		}

	  	//_people.Add("["+p.name+"]");


	    	//Destroy(_characterSelector);			
	    	_mainBank = new List<SM>();
	    	_genitalBank = new List<SM>();
			_person = p;_personid = p.name;
			modelbutton.label="Model:\n"+p.name;
			var chrtmp="";
	try{	
		DAZCharacterSelector _chr = _person.GetComponentInChildren<DAZCharacterSelector>(true);
		sendmorph = new Dictionary<string,string>();
		getmorph = new Dictionary<string,DAZMorph>();int ii=0;
		foreach(DAZMorph sm in _chr.femaleMorphBank1.morphs.Concat(_chr.maleMorphBank1.morphs).Concat(_chr.femaleMorphBank2.morphs.Concat(_chr.maleMorphBank2.morphs))){
		if(!sm.uid.Contains("Custom/") && !sm.uid.Contains(":/")){ii++;
		chrtmp=sm.uid+sm.morphName+sm.morphBank;
		sendmorph.Add(chrtmp,ii.ToString());
		getmorph.Add(ii.ToString(),sm);
		}
		}
		
		}catch(Exception e){SuperController.LogError(chrtmp+" Exception caught: " + e);}
			
		Define();

		if(_count>0){
		_moldcount=9999;Refresh();_moldcount=9999;
}
		break;

		}}


}


                
        string script(string ini)
        {
            string file = storeId.Split('_')[0];
	    file = manager.GetJSON(true, true)["plugins"][file].Value;
            file = file.Replace('/','\\').Substring(0,file.LastIndexOfAny(new char[]{'/','\\'})+1);

	    string [] chk = SuperController.singleton.GetFilesAtPath(file);
	    List<string> files = new List<string>();
	    foreach (string path in chk){
	    string name = path.Substring(path.LastIndexOfAny(new char[] { '/', '\\' })+1);
	    files.Add(name);}
            if (files.Contains(ini)){json("load",file);return file;}else{return "";}			
        }


/*
public System.Threading.Thread SocketThread;
volatile bool keepReading = false;


void startServer()
{
	
	    if (SocketThread == null)
    {
    SocketThread = new System.Threading.Thread(networkCode);
    SocketThread.IsBackground = true;
    SocketThread.Start();
	}
}



private string getIPAddress()
{
    IPHostEntry host;
    string localIP = "";
    host = Dns.GetHostEntry(Dns.GetHostName());
    foreach (IPAddress ip in host.AddressList)
    {
        if (ip.AddressFamily == AddressFamily.InterNetwork)
        {
            localIP = ip.ToString();
        }

    }
    return localIP;
}


public Socket listener;
public Socket handler;

void networkCode()
{
    string data;

    // Data buffer for incoming data.
    byte[] bytes = new Byte[1024];

    // host running the application.
    Debug.Log("Ip " + getIPAddress().ToString());
    IPAddress[] ipArray = Dns.GetHostAddresses(getIPAddress());
    IPEndPoint localEndPoint = new IPEndPoint(ipArray[0], 1755);

    // Create a TCP/IP socket.
	
    listener = new Socket(ipArray[0].AddressFamily,
        SocketType.Stream, ProtocolType.Tcp);

    // Bind the socket to the local endpoint and 
    // listen for incoming connections.

    try
    {
        listener.Bind(localEndPoint);
        listener.Listen(10);

        // Start listening for connections.
        while (true)
        {
            keepReading = true;

            // Program is suspended while waiting for an incoming connection.
            echo3("Waiting for Connection");     //It works

            handler = listener.Accept();
            echo3("Client Connected");     //It doesn't work
            data = null;

            // An incoming connection needs to be processed.
            while (keepReading)
            {
                bytes = new byte[1024];
                int bytesRec = handler.Receive(bytes);
                echo3("Received from Server "+Encoding.ASCII.GetString(bytes, 0, bytesRec));

                if (bytesRec <= 0)
                {
                    keepReading = false;
                    handler.Disconnect(true);
                    break;
                }

                data += Encoding.ASCII.GetString(bytes, 0, bytesRec);
                if (data.IndexOf("<EOF>") > -1)
                {
                    break;
                }

                System.Threading.Thread.Sleep(1);
            }

            System.Threading.Thread.Sleep(1);
        }
    }
    catch (Exception e)
    {
       echo3(e.ToString());
    }
}

void stopServer()
{
	    if (handler != null && handler.Connected)
    {
        handler.Disconnect(false);
        echo3("Disconnected!");
    }
	return;
    keepReading = false;

    //stop thread
    if (SocketThread != null)
    {
        SocketThread.Abort();
    }

    if (handler != null && handler.Connected)
    {
        handler.Disconnect(false);
        echo3("Disconnected!");
    }
}

void OnDisable()
{
    stopServer();
}
*/

private void Define(bool force=false){
	
		  echo3("model> "+_person.name);
		  //if(_person==null){return;}
		  if(_person.on){
		  _characterSelector = _person.GetComponentInChildren<DAZCharacterSelector>(true);}else{people=false;makechooser();return;}
			
		_personname=_characterSelector.name;

		gender=_person.GetComponentInChildren<DAZCharacterSelector>(true).gender.ToString();
		//echo3(_person.GetComponentInChildren<DAZCharacter>().skin.ToString());
		displayName = _person.GetComponentInChildren<DAZCharacter>(true).displayName.ToString();
		femalebank=true;duobank=false;isfuta=false;
		if(displayName.contains("futa")){isfuta=true;duobank=true;

		}else if(gender=="Male"){femalebank=false;}
		if(force){usefemale(_person,isfuta);
		echo9("Skin: "+displayName+" - Name: "+_personid+" - Gender: "+gender+" - Futa: "+isfuta.ToString()+" force: "+force.ToString());}
}

private Color endc;
private bool colorin=true;
		private IEnumerator setrgb(string rgb=""){
			
string[] csplit=rgb.Split(":"[0]);
float R=float.Parse(csplit[0]);
float G=float.Parse(csplit[1]);
float B=float.Parse(csplit[2]);

endc=new Color(R,G,B,1);
Color startc=SuperController.singleton.hiResScreenshotCamera.backgroundColor;
		
for(float cl=0;cl<1;cl+=0.01f){
Color ce=endc*cl;
Color cs=startc*(1-cl);
Color combo=Color.Lerp(startc, endc, cl);
setcams(combo.ToString().Replace("RGBA(","").Replace(",",":").Replace(")",""));
yield return null;

}
colorin=false;
}

		
		

		private bool firstinit=false;
		private bool waitfornick=false;private string oldnick="";private string newnick="";
		private string ruser="USER"+(UnityEngine.Random.Range(1,10)).ToString()+(UnityEngine.Random.Range(0,10)).ToString()+(UnityEngine.Random.Range(0,10)).ToString()+"-VAM";
		
		private bool autoconnect=true;
		
		private float saving=0;
		private void saveini(){
		if(!nickinit){return;}
		echo12("saving");

		if(saving==0){saving=Time.realtimeSinceStartup;
		StartCoroutine(saver());}else{saving=Time.realtimeSinceStartup;}
		}
	
		
		private  IEnumerator saver(){
		while(saving!=0){
		if(Time.realtimeSinceStartup-saving>4){
		if(nickinput.text+"-VAM"!=nick && !waitfornick){
		waitfornick=true;oldnick=nick;newnick=nickinput.text+"-VAM";
		if(Clientconnected){Clientmessage("NICK :"+newnick);}
		yield return new WaitForSecondsRealtime(2f);	
		nick=newnick;nickinput.text=newnick.Replace("-VAM","");
		waitfornick=false;
		tochat("<color=#bbbbbb>Changed nickname to</color> <color=#ff9933>"+newnick+"\n</color>");
		if(Clientconnected){Clientmessage("NAMES :"+chanlist,raw: true, time:1f);}
		}
		json("save",_plugindir+_pluginowner+_plugin+"\\"+_ini);
		if(_input.text!="\nAUTO-SAVED SETTINGS"){_oldtxt=_input.text;}
		Result("AUTO-SAVED SETTINGS");
		saving=0;
		echo12("saving all settings");
		}
		yield return new WaitForSecondsRealtime(1);
		}
		}
	
		private void loadini(){
		json("load",_plugindir+_pluginowner+_plugin+"\\"+_ini);
		}
							
        private void json(string mode, string file)
        {	
	//set file to load and save below
	//var file = "MORPHINE.ini";

	if(mode=="save"){
        JSONClass json = new JSONClass();
	copyText();
	//set your variables to save below
	
		json["godmode"] = godmode.ToString();
		json["realskin"] = userealskin.ToString();
		json["cuafilter"] = cuainput.text;
		json["tooltips"] = showhelptips.ToString();
		json["uisize"] = saveui.ToString();
		json["fov"] = savefov.ToString();
		json["nickname"] = nickinput.text;
		json["autoeditmode"] = editloader;
		json["rgb"] = savergb;
		json["timescale"] = savetime.ToString();
		json["worldscale"] = saveworld.ToString();
		json["fpsscale"] = savefps.ToString();
		json["addfocus"] = SuperController.singleton.focusAtomOnAddToggle.isOn.ToString();
		json["addselect"] = SuperController.singleton.selectAtomOnAddToggle.isOn.ToString();
		json["addhere"] = addhere.ToString();
		json["autoconnect"] = autoconnect.ToString();
		json["loginconfig"] = loginconfig;
		json["humanizer"] = usehumanizer.ToString();
		json["customfilter"] = customfilter;
	    json["frontlight"] = lightslider1.slider.value.ToString();	
	    json["sidelight"] = lightslider2.slider.value.ToString();
	    json["errormute"] = errormute.ToString();
	    json["chatvisible"] = chatvisible.ToString();	
        json["webvisible"] = webvisible.ToString();		
        json["chatonline"] = chatonline.ToString();		
        json["_prefixNameInputField"] = _prefixNameInputField_text;
        json["_regionNameInputField"] = _regionNameInputField_text;
        json["_groupNameInputField"] = _groupNameInputField_text;
        json["_maxInputField"] = _maxInputField_text;
        json["_minInputField"] = _minInputField_text;
        json["_creatorInputField"] = _creatorInputField_text;
	json["_pwInputField"] = _pwInputField_text;
   	json["_filterNameInputField"] = _filterNameInputField_text;
	plugindir();
    this.SaveJSON(json, file);
	
	}else{
		
	if(!FileManagerSecure.FileExists(file)){
	firstinit=true;
	restoreText();		
	return;
	
	}
	JSONNode json = this.LoadJSON(file);

	//set your variables to load back below
	if(sceneplugin){lightval1=0;lightval2=0;}
	try{
	if(json["frontlight"]!=null && json["frontlight"].Value != ""){lightval1=float.Parse(json["frontlight"].Value);}
	if(json["sidelight"]!=null && json["sidelight"].Value != ""){lightval2=float.Parse(json["sidelight"].Value);}
	echo25(lightval1.ToString());
	echo25(lightval2.ToString());

	}catch(Exception e){}

		try{
		if(json["cuafilter"].Value!=""){cuainput.text=json["cuafilter"].Value;}
		}catch(Exception e){}
	
		try{
		if(json["tooltips"].Value!="True"){showhelptips=false;}
		}catch(Exception e){}
		helptipson=showhelptips;
		try{
		godmode=true;if(json["godmode"].Value=="False"){godmode=false;}
		}catch(Exception e){}

		try{
		userealskin=true;if(json["realskin"].Value=="False"){userealskin=false;}
		}catch(Exception e){}
		
		try{
		if(json["fov"].Value!="" && json["fov"].Value!="-999"){
		if(fovslider.slider.value!=savefov){
		savefov=float.Parse(json["fov"].Value);
		StartCoroutine(IEfovscaler(savefov,true));
		fovslider.slider.value=savefov;
		fovlock=savefov;
		}}}catch(Exception e){}
		
		try{
		if(json["uisize"].Value!="" && json["uisize"].Value!="-999"){
		if(uisizeslider.slider.value!=saveui){
		saveui=float.Parse(json["uisize"].Value);
		uisize=saveui/100;
		StartCoroutine(IEfovscaler(savefov,true));
		uisizeslider.slider.value=saveui;
		}}}catch(Exception e){}
		
		try{
		if(json["worldscale"].Value!=null && json["worldscale"].Value!="-999"){
		saveworld=float.Parse(json["worldscale"].Value);
		JSONStorableFloat iniworld = new JSONStorableFloat("worldslide", saveworld, worldscaler, 10, 500f);
		if(worldslider.slider.value!=saveworld){
		worldscaler(iniworld);
		worldslider.slider.value=saveworld;}
		}}catch(Exception e){}
		
		try{
		if(json["timescale"].Value!=null && json["timescale"].Value!="-999"){
		savetime=float.Parse(json["timescale"].Value);
		JSONStorableFloat initime = new JSONStorableFloat("timeslide", savetime, timescaler, 0, 1.001f);
		timescaler(initime);
		timeslider.slider.value=savetime;
		}}catch(Exception e){}
		
		try{
		if(json["fpsscale"].Value!=null && json["fpsscale"].Value!="-999"){
		savefps=float.Parse(json["fpsscale"].Value);
		JSONStorableFloat inifps = new JSONStorableFloat("fpsslide", savefps, fpsscaler, 0, 26);
		fpsscaler(inifps);
		fpsslider.slider.value=savefps;
		}}catch(Exception e){}
		
		try{
		if(json["rgb"].Value!=null && json["rgb"].Value!=""){savergb=json["rgb"].Value;
		//setcams(savergb=json["rgb"].Value);
		StartCoroutine(setrgb(json["rgb"].Value));		
		}}catch(Exception e){}
		
		try{
		addhere=true;if(json["addhere"].Value!="True"){addhere=false;}}catch(Exception e){}
		
		try{
		editloader="OFF";if(json["autoeditmode"].Value=="ON"){editloader="ON";
		SuperController.singleton.gameMode = SuperController.GameMode.Edit;
		}}catch(Exception e){}
		
		try{SuperController.singleton.focusAtomOnAddToggle.isOn=true;if(json["addfocus"].Value!="True"){SuperController.singleton.focusAtomOnAddToggle.isOn=false;}}catch(Exception e){}
		try{SuperController.singleton.selectAtomOnAddToggle.isOn=true;if(json["addselect"].Value!="True"){SuperController.singleton.selectAtomOnAddToggle.isOn=false;}}catch(Exception e){}
		try{autoconnect=false;if(json["autoconnect"].Value!="False"){autoconnect=true;}}catch(Exception e){}
		try{usehumanizer=true;if(json["humanizer"].Value=="False"){usehumanizer=false;}}catch(Exception e){}
		
		try{if(json["chatvisible"].Value=="False"){chatvisible=false;}}catch(Exception e){}
		try{if(json["webvisible"].Value!="False"){webvisible=true;}}catch(Exception e){}
		try{if(json["chatonline"].Value=="False"){chatonline=false;}}catch(Exception e){}
		try{errormute=false;if(json["errormute"].Value!="False"){errormute=true;}}catch(Exception e){}
		
		try{
		loginconfig = json["loginconfig"].Value;
		if(loginconfig!=""){
		if(loginconfig.contains("identify")){
		var ltemp=loginconfig.Replace("\r\n","\n")+"\n";
		string[] lsub=ltemp.Split("\n"[0]);
		for(int i=0;i<lsub.Length;i++){
		if(lsub[i].contains("identify")){
		release=lsub[i].Replace("IDENTIFY","identify").Replace("identify","release");
		//break;
		}}}}}catch(Exception e){}
		
		try{customfilter = json["customfilter"].Value;}catch(Exception e){}
        try{_prefixNameInputField_text = json["_prefixNameInputField"].Value;}catch(Exception e){}
        try{_regionNameInputField_text = json["_regionNameInputField"].Value;}catch(Exception e){}
        try{_groupNameInputField_text = json["_groupNameInputField"].Value;}catch(Exception e){}
        try{_maxInputField_text = json["_maxInputField"].Value;}catch(Exception e){}
        try{_minInputField_text = json["_minInputField"].Value;}catch(Exception e){}
        try{_creatorInputField_text = json["_creatorInputField"].Value;}catch(Exception e){}
		try{nickinput.text = json["nickname"].Value;}catch(Exception e){}
        try{_pwInputField_text = json["_pwInputField"].Value;}catch(Exception e){}
        try{_filterNameInputField_text = json["_filterNameInputField"].Value;}catch(Exception e){}
		restoreText();
        }}

private string release="";
private UIDynamicButton advfield1;private UIDynamicButton advarrow1;
private bool chatvisible=true;
private bool webvisible=false;
private bool chatonline=true;
private string loginconfig="";

private void advanced()
        {
transui3(rightUIContent.parent.parent.parent.transform,1080,901,0,201);
trans2D(_orderButton.transform,329f,43f,-428f,433);
trans2D(_copyButton.transform,289f,43f,-20f,433);
trans2D(_copyButton2.transform,-46f,43f,187f,433);
trans2D(_refreshButton.transform,329f,59f,433f,420f);
trans2D(resultfiller.transform,1204f,52,-0f,520);//w=1194;x=-597;adjustx=0;y=187f;
trans2D(_input.transform,1194f,33f,5f,515);//w=1194;x=-597;adjustx=0;y=168f;
inputpos=_input.transform.localPosition.y-2;
sliderui.transform.localPosition = new Vector2(sliderui.transform.localPosition.x,0.003f);
}


        private void SetLayoutHeight(Component component, float height)
        {
            var layoutElement = component.GetComponent<LayoutElement>();
            layoutElement.minHeight = 0f;
            layoutElement.preferredHeight = height;
        }

        private UIDynamicTextField genNameLabel;
        private UIDynamicTextField bodyNameLabel;
        private UIDynamicTextField[] spacer;


public string[] Splitstring(string needle, string haystack) {
    return haystack.Split(new string[] {needle}, System.StringSplitOptions.None);
 
}

        private void fixselectedlicensed(int level)
        {
		try{bool found=false;islicensed=new Dictionary<string,string>(StringComparer.InvariantCultureIgnoreCase); 	
			//find all licensed	
			foreach(SM sm in _mainBank.Concat(_genitalBank))
			{name = sm.Morph.resolvedDisplayName; var val=sm.Morph.morphValue; var uid=sm.Morph.uid;var add="";var defaultval=sm.Morph.jsonFloat.defaultVal;bool _active=sm.Selected;
			
				if(_active)
				{int license=0;
					if(uid.Contains("/"))
					{found=true;license=1;
					if(uid.Contains(":/")){license=2;if(sm.Morph.packageLicense!="FC"){license=3;}}
					add="";
					if(islicensed.ContainsKey("["+name+"]")){add=islicensed["["+name+"]"]+"\n";islicensed.Remove("["+name+"]");}
					islicensed.Add("["+name+"]",add+name+"\t"+uid+"\t"+val.ToString()+"\t"+license);
					}
				}
			}

			if(found)
			{//echo3(islicensed.Count.ToString());
				var removelicense="";int depth=0;int r=0;int newlicense=0;
				for(int i=0;i<4;i++){
				foreach(DAZMorph sm in _characterSelector.femaleMorphBank1.morphs.Concat(_characterSelector.maleMorphBank1.morphs).Concat(_characterSelector.femaleMorphBank2.morphs.Concat(_characterSelector.maleMorphBank2.morphs)))
				{name = sm.resolvedDisplayName; var val=sm.appliedValue.ToString(); var uid=sm.uid;int license=0;
				if(depth==0){license=uid.IndexOf("/");newlicense=0;}
				else if(depth==1){if(uid.Contains("/") && !uid.Contains(":/")){license=-1;newlicense=1;}}
				else if(depth==2){if(sm.packageLicense=="FC"){license=-1;newlicense=2;}}
				else{if(removelicense.contains(name+"\t"+uid+"\t") && sm.active){r++;echo3(name);sm.morphValue=0.0f;sm.Reset();}
					
					continue;}//remove found morps
				
				if(islicensed.ContainsKey("["+name+"]")){if(!islicensed["["+name+"]"].Contains(name+"\t"+uid+"\t") && license<0){
					//echo3(islicensed["["+name+"]"]);
					
					string[] multi=islicensed["["+name+"]"].Split("\n"[0]);float mval=0;int sublicense=0;
					foreach(string m in multi){
					string[] sub=m.Split("\t"[0]);mval+=float.Parse(sub[2]);int l=intparse(sub[3]);if(l>sublicense){sublicense=l;}
					}
					
					if(newlicense<sublicense){
					removelicense+=islicensed["["+name+"]"]+"\n";islicensed.Remove("["+name+"]");sm.morphValue=mval;r++;//echo3(islicensed.Count.ToString());
					if(islicensed.Count==0){break;}
					}
					
					}}
				
				
				
				}depth++;echo7("converted "+r.ToString()+" licensed morphs");r=0;}
				//echo3(removelicense);
		
			}
		
		}catch(Exception e){SuperController.LogError("Exception caught: " + e);}
		}

        private void fixlicensed(int level)
        {
		try{bool found=false;islicensed=new Dictionary<string,string>(StringComparer.InvariantCultureIgnoreCase); 	
			//find all licensed	
			foreach(DAZMorph sm in _characterSelector.femaleMorphBank1.morphs.Concat(_characterSelector.maleMorphBank1.morphs).Concat(_characterSelector.femaleMorphBank2.morphs.Concat(_characterSelector.maleMorphBank2.morphs)))
			{name = sm.resolvedDisplayName; var val=sm.appliedValue; var uid=sm.uid;var add=""; var active=sm.active;var defaultval=sm.jsonFloat.defaultVal;
			
				if(active && val!=defaultval)
				{int license=0;
					if(uid.Contains("/"))
					{found=true;license=1;
					if(uid.Contains(":/")){license=2;if(sm.packageLicense!="FC"){license=3;}}
					add="";
					if(islicensed.ContainsKey("["+name+"]")){add=islicensed["["+name+"]"]+"\n";islicensed.Remove("["+name+"]");}
					islicensed.Add("["+name+"]",add+name+"\t"+uid+"\t"+val.ToString()+"\t"+license);
					}
				}
			}

			if(found)
			{//echo3(islicensed.Count.ToString());
				var removelicense="";int depth=0;int r=0;int newlicense=0;
				for(int i=0;i<4;i++){
				foreach(DAZMorph sm in _characterSelector.femaleMorphBank1.morphs.Concat(_characterSelector.maleMorphBank1.morphs).Concat(_characterSelector.femaleMorphBank2.morphs.Concat(_characterSelector.maleMorphBank2.morphs)))
				{name = sm.resolvedDisplayName; var val=sm.appliedValue.ToString(); var uid=sm.uid;int license=0;
				if(depth==0){license=uid.IndexOf("/");newlicense=0;}
				else if(depth==1){if(uid.Contains("/") && !uid.Contains(":/")){license=-1;newlicense=1;}}
				else if(depth==2){if(sm.packageLicense=="FC"){license=-1;newlicense=2;}}
				else{if(removelicense.contains(name+"\t"+uid+"\t") && sm.active){r++;echo3(name);sm.morphValue=0.0f;sm.Reset();}
					
					continue;}//remove found morps
				
				if(islicensed.ContainsKey("["+name+"]")){if(!islicensed["["+name+"]"].Contains(name+"\t"+uid+"\t") && license<0){
					//echo3(islicensed["["+name+"]"]);
					
					string[] multi=islicensed["["+name+"]"].Split("\n"[0]);float mval=0;int sublicense=0;
					foreach(string m in multi){
					string[] sub=m.Split("\t"[0]);mval+=float.Parse(sub[2]);int l=intparse(sub[3]);if(l>sublicense){sublicense=l;}
					}
					
					if(newlicense<sublicense){
					removelicense+=islicensed["["+name+"]"]+"\n";islicensed.Remove("["+name+"]");sm.morphValue=mval;r++;//echo3(islicensed.Count.ToString());
					if(islicensed.Count==0){break;}
					}
					
					}}
				
				
				
				}depth++;echo3("converted "+r.ToString()+" licensed morphs");r=0;}
				//echo3(removelicense);
		
			}
		
		}catch(Exception e){SuperController.LogError("Exception caught: " + e);}
		}


        private void Dupes(string mode="select",bool reversed=false,bool filter=false)
        { 
						if(!people){Result("ADD A MODEL FIRST");return;}
		int sd=0;int stotal=0;var action="DE";if(_selectall2){action="";}var adds="";selecting=true;duplicates.Clear();isdupe.Clear();duplicates = new Dictionary<string,string>(StringComparer.InvariantCultureIgnoreCase);isdupe = new Dictionary<string,string>(StringComparer.InvariantCultureIgnoreCase);keepdupe = new Dictionary<string,float>(StringComparer.InvariantCultureIgnoreCase);
			try{
				
				
			//find all dupes	
			foreach(DAZMorph sm in _characterSelector.femaleMorphBank1.morphs.Concat(_characterSelector.maleMorphBank1.morphs).Concat(_characterSelector.femaleMorphBank2.morphs.Concat(_characterSelector.maleMorphBank2.morphs)))
			{var name = sm.resolvedDisplayName; var val=sm.appliedValue.ToString(); var d=sm.jsonFloat.defaultVal.ToString(); var active=sm.active; var uid=sm.uid;var add="";
			if(active==true && val!=d){
			if(duplicates.ContainsKey(name)){if(isdupe.ContainsKey(name)){add=isdupe[name]+"@@";}else{add=duplicates[name]+"@@";}isdupe.Remove(name);isdupe.Add(name,add+name+"[]"+uid+"[]"+val);duplicates.Remove(name);}
			duplicates.Add(name,name+"[]"+uid+"[]"+val);
			}}
					
					//find unlicensed duplicate for keep if any
					if(isdupe !=null){
					
					foreach(KeyValuePair<string, string> d in isdupe){						
					bool safefound=false;bool safestfound=false;float combo=0f; float firstval=0f; var first="";
					string[] ch = Splitstring("@@",d.Value);
									
					foreach(string s in ch){
						
					string[] c = Splitstring("[]",s);var name=c[0];var uid=c[1];float val=float.Parse(c[2]);
					if(first==""){first=name+uid;firstval=val;}
					if(!uid.Contains(":/") && safefound==false && safestfound==false){safefound=true;first=name+uid;}
					if(!uid.Contains("/") && safestfound==false){safefound=true;safestfound=true;first=name+uid;}
					combo=combo+val;
					
					}
					keepdupe.Add(first,combo);		
					}				
					}
					
			//select, remove or combine duplicates found
			
			if(mode == "select"){
			foreach(SM sm in _mainBank.Concat(_genitalBank))
			{var name = sm.Morph.resolvedDisplayName;var uid = sm.Morph.uid;
			if(isdupe.ContainsKey(name) && !keepdupe.ContainsKey(name+uid) && mode=="select"){
				
			if(sm.Selected!=_selectall2){sd++;sm.Storable.val = sm.Selected = _selectall2;}
			
			}else{if(_selectall2){sm.Storable.val = sm.Selected = !_selectall2;}}
			if(sm.Selected){stotal++;}
			}
			if(stotal!=sd){adds=" - TOTAL MORPHS SELECTED: "+stotal;}
			Result(action+"SELECTED "+sd+" DUPLICATES"+adds);
	
			}else{			
			foreach(DAZMorph sm in _characterSelector.femaleMorphBank1.morphs.Concat(_characterSelector.maleMorphBank1.morphs).Concat(_characterSelector.femaleMorphBank2.morphs.Concat(_characterSelector.maleMorphBank2.morphs)))
			{var name = sm.resolvedDisplayName;var uid = sm.uid;var d=sm.jsonFloat.defaultVal.ToString(); var val=sm.appliedValue.ToString(); var active=sm.active;
			if(active==true && val!=d){
			if(mode=="combine" || mode=="remove"){		
			if(isdupe.ContainsKey(name) && !keepdupe.ContainsKey(name+uid)){stotal++;sm.morphValue=0.0f;sm.Reset();}
			if(isdupe.ContainsKey(name) && keepdupe.ContainsKey(name+uid) && mode=="combine"){sd++;sm.morphValue=keepdupe[name+uid];}			
			}}}
			}

			selecting=false;
			
			}
			            catch (Exception e)
            {
                SuperController.LogError("Exception caught: " + e);
            }
		}


        private void Similar(bool doselect=true){try
		{
		 if(!people){Result("ADD A MODEL FIRST");return;}
			selecting=true;var filter="";
		if(doselect){
		echo14("filter1 "+filter);
		foreach (SM sm in _mainBank.Concat(_genitalBank))
		{
		if(sm.Selected){string[] words=sm.Morph.resolvedDisplayName.ToUpper().Replace('.',' ').Replace('-',' ').ToLetters().Split(" "[0]);
		var add="";words[0].Replace(" ","");if(words[0]=="" && words[1]!=null){words[0]=words[1].Replace(" ","");}
		
		if(!"RIGHT,LEFT,UPPER,LOWER,FRONT,REAR,LOW,UP".Contains(words[0])){if(filter!=""){add=",";}filter+=add+words[0];}
				
			}
		}
		echo14("filter "+filter);
		Filter(doselect,false,true,filter);
		}else{
		
		
		string[] words=lastclicked.ToUpper().Replace('.',' ').Replace('-',' ').ToLetters().Split(" "[0]);
		words[0].Replace(" ","");if(words[0]=="" && words[1]!=null){words[0]=words[1].Replace(" ","");}
		if(!"RIGHT,LEFT,UPPER,LOWER,FRONT,REAR,LOW,UP".Contains(words[0])){filter=words[0];}
		Result("deselecting similar to "+lastclicked+" > "+filter);
		Filter(doselect,false,true,filter,action: "DE");
		}
		//echo3(filter);
		
		
		}
		catch (Exception e){SuperController.LogError("Exception caught: " + e);}
		}
		


        private void Filter(bool normal, bool reversed,bool and,string words="",string action="",bool deselect=false)
        {

		var clip = "";
		var backup = _morphNameInputField.text;
		selecting=true;var chk="";int s=0;int stotal=0;
			if(words!=""){chk=words.ToUpper().Replace("@",",");}else{chk =_filterNameInputField.text.ToUpper().Replace("@", ",");}
			string[] chklist = chk.Split(","[0]);
			
			if(!deselect){
                       foreach (SM sm in _mainBank.Concat(_genitalBank))
			{
			if(sm.Selected !=reversed && normal){s--;sm.Storable.val = sm.Selected = reversed;}
			}
			}

                        foreach (SM sm in _mainBank.Concat(_genitalBank))
			{
				var chkm = sm.Morph.displayName.ToUpper();
                        foreach (string chks in chklist)
			{

				if (chkm.Contains(chks) == and)
				{
				if(deselect){
				if(sm.Selected==normal){s++;sm.Storable.val = sm.Selected = !normal;}	
					
				}else{
				if(sm.Selected!=normal){s++;sm.Storable.val = sm.Selected = normal;}
				}
				
				}

			}
			}

                       foreach (SM sm in _mainBank.Concat(_genitalBank))
			{
			if(sm.Selected == true)
				{
				if (and == false)
				sm.Storable.val = sm.Selected = false;
				
				if (and == true)
				clip = clip+sm.Morph.displayName+"\n";
				}
				else
					{
				if (and == false)
				sm.Storable.val = sm.Selected = true;
				
				if (and == false)
				clip = clip+sm.Morph.displayName+"\n";

					}
				if(sm.Selected){stotal++;}
			}

		//_selectAllButton.label = "Select All";
		_morphNameInputField.text = backup;selecting=false;
//GUIUtility.systemCopyBuffer = clip;
clip = "";

Result(action+"SELECTED "+s+" MORPHS - TOTAL SELECTED: "+stotal);
        }

		private string lastclicked;
        private void Clicked(string name,bool selected, bool silent=false)
        {
		lastclicked=name;
		var action="DE";if(selected){action="";}
		var clip = "";
		var backup = _morphNameInputField.text;
		selecting=true;
                        foreach (SM sm in _mainBank.Concat(_genitalBank))
			{

				if (sm.Selected == true)
				{
				clip = clip+sm.Morph.displayName+"\n";
				}

			}
		//_selectAllButton.label = "Select All";
		_morphNameInputField.text = backup;selecting=false;
//GUIUtility.systemCopyBuffer = clip;
if(!silent){Result(action+"SELECTED "+name);}
clip = "";
        }


private bool _selectall1=true;
private bool _selectall2=true;
private bool _selectall3=true;
private UIDynamicButton _selectButton1;
private UIDynamicButton _selectButton2;
private UIDynamicButton _selectButton3;
private UIDynamicButton _similarButton;

private UIDynamicButton _rDButton;
private UIDynamicButton _fDButton;
private UIDynamicButton _headButton;
private UIDynamicButton _bodyButton;
private UIDynamicButton _gensButton;
private UIDynamicButton _afilterButton;
private UIDynamicButton _arfilterButton;
private UIDynamicButton _invertButton;
private UIDynamicButton _deselectAllButton;
private UIDynamicButton _deselectfilterButton;
private UIDynamicButton _5Button;




        private void Invert()
        {
		foreach(SM sm in _mainBank.Concat(_genitalBank))
		{	
		sm.Storable.val = sm.Selected = !sm.Selected;
		}
		}
			
        private void buttonsRight(string mode)
        {
        _selectButton1 = advbutton(adv,() => {_selectall1=!_selectall1;if(_selectall1){_selectButton1.label="Select:";}else{_selectButton1.label="Deselect:";}},"Select:",28f,40f,-597f,316f);
        _selectButton2 = advbutton(adv,() => {_selectall2=!_selectall2;if(_selectall2){_selectButton2.label="Select:";_similarButton.label="similar";}else{_selectButton2.label="Deselect:";_similarButton.label="last";}},"Select:",28f,40f,-597f,279f);
        _deselectfilterButton = advbutton(adv,() => {selectcust(false);},"< deselect",108f,40f,-377f,242f);
		_filterButton = advbutton(adv,() => {selectcust(true);},"Select custom",123f,40f,-597f,242f);

        _similarButton = advbutton(adv,() => {Similar(_selectall2);},"similar",-2f,40f,-472f,279f);
		//var _allButton = advbutton(adv,() => {selectall(_selectall1);},"all",-55f,40f,-472f,316);

        _DButton = advbutton(adv,() => {Dupes();},"duplicates",108f,40f,-377f,279f);
		_5Button = advbutton(adv,() => {},"<",-49f,40f,-220f,316f);
		
			EventTrigger.Entry lowset = new EventTrigger.Entry();
    		lowset.eventID = EventTriggerType.PointerEnter;
			lowset.callback.AddListener((eventData) => {
			

Result("SELECT/DESELECT MORPHS WITH +/- VALUES LOWER THAN SLIDER POSITION");		
if(lowslider!=null){RemoveSlider(lowslider);}
JSONStorableFloat minfloat3 = new JSONStorableFloat("lowslider", 0f, selectlow, 0f, 100f);
lowslider = CreateSliderui(minfloat3);
lowslider.slider.wholeNumbers = true;
lowslider.transform.SetParent(adv.transform,false);
transui2(lowslider.transform,400,0,-457,287f);
Color slidecolor=new Color(0.39f,0.36f,0.42f);//slidecolor.a=0.43f;
lowslider.transform.Find("Slider").GetComponent<Image>().color = slidecolor;
lowslider.sliderValueTextFromFloat.UIInputField.textComponent.fontSize=18;
lowslider.sliderValueTextFromFloat.UIInputField.readOnly=true;
GameObject.Destroy(lowslider.sliderValueTextFromFloat.gameObject);
lowslider.slider.fillRect.transform.SetParent(hide.transform, false);
lowslider.quickButtonsEnabled = false;
lowslider.rangeAdjustEnabled = false;
lowslider.defaultButtonEnabled = false;
lowslider.slider.wholeNumbers = true;
GameObject.Destroy(lowslider.quickButtonsGroup.gameObject);
GameObject.Destroy(lowslider.defaultButton.gameObject);
GameObject.Destroy(lowslider.rangeAdjustGroup.gameObject);
GameObject.Destroy(lowslider.labelText.gameObject);
GameObject.Destroy(lowslider.quickButtonM1.gameObject);
GameObject.Destroy(lowslider.quickButtonM2.gameObject);
GameObject.Destroy(lowslider.quickButtonM3.gameObject);
GameObject.Destroy(lowslider.quickButtonM4.gameObject);
GameObject.Destroy(lowslider.quickButtonP1.gameObject);
GameObject.Destroy(lowslider.quickButtonP2.gameObject);
GameObject.Destroy(lowslider.quickButtonP3.gameObject);
GameObject.Destroy(lowslider.quickButtonP4.gameObject);
//lowslider.slider.OnPinterExit.AddListener(() =>{echo3("kokl");});
			
			EventTrigger.Entry lowexit = new EventTrigger.Entry();
    		lowexit.eventID = EventTriggerType.PointerUp;
			lowexit.callback.AddListener((eventDatasub) => {
			var action="";if(_selectall1){action="DE";}
			float max=lowslider.slider.value;RemoveSlider(lowslider);lowsliding=false;selectall(select: _selectall1, maxvalue: max);echo3(action+"SELECTING ALL BELOW "+lowslider.slider.value.ToString());
			});
    		lowslider.slider.gameObject.AddComponent<EventTrigger>();
			lowslider.slider.gameObject.GetComponent<EventTrigger>().triggers.Add(lowexit);				

			EventTrigger.Entry lowenter = new EventTrigger.Entry();
    		lowenter.eventID = EventTriggerType.PointerEnter;
			lowenter.callback.AddListener((eventDatasub) => {
			lowsliding=true;	
			});
				
			EventTrigger.Entry lowexit2 = new EventTrigger.Entry();
    		lowexit2.eventID = EventTriggerType.PointerExit;
			lowexit2.callback.AddListener((eventDatasub) => {
			lowsliding=false;
			RemoveSlider(lowslider);	
			});
    		lowslider.slider.gameObject.AddComponent<EventTrigger>();
			lowslider.slider.gameObject.GetComponent<EventTrigger>().triggers.Add(lowexit2);				
			lowslider.slider.gameObject.GetComponent<EventTrigger>().triggers.Add(lowenter);				
								
				
			});
			
			
			EventTrigger.Entry lowexit3 = new EventTrigger.Entry();
    		lowexit3.eventID = EventTriggerType.PointerExit;
			lowexit3.callback.AddListener((eventDatasub) => {
			StartCoroutine(lowremove());});
			
    		_5Button.gameObject.AddComponent<EventTrigger>();
			_5Button.gameObject.GetComponent<EventTrigger>().triggers.Add(lowset);
			_5Button.gameObject.GetComponent<EventTrigger>().triggers.Add(lowexit3);

 		_rDButton = advbutton(adv,() => {fixselectedlicensed(0);},"Fix licensed",123f,38f,-597f,207f);
		_fDButton = advbutton(adv,() => {Dupes("combine");},"Fix duplicates",108f,38f,-377f,207f);

				
		_headButton = advbutton(adv,() => {StartCoroutine(Head(false,false,true,false,subtract: !_selectall1));},"head",-24f,40f,-472f,316f);
		_bodyButton = advbutton(adv,() => {StartCoroutine(Head(false,false,true,true,subtract: !_selectall1));},"body",-24f,40f,-399f,316f);
		_gensButton = advbutton(adv,() => {Gens();},"genitals",9f,40f,-326f,316f);
		_afilterButton = advbutton(adv,() => {Filter(true,false,false);},"Delete selected",328f,38f,-164f,207f);
		_selectAllButton = advbutton(adv,() => {selectall(true);},"Select all",328f,40f,-164f,316f);
		_deselectAllButton = advbutton(adv,() => {
			//echo5("smile");
			//ScreenCapture.CaptureScreenshot(name);
			//Screenshot("Saves\\PluginData\\God\\shot.jpg");
			selectall(false);},"Deselect all",328f,40f,-164f,279f);
		_invertButton = advbutton(adv,() => {Invert();},"Invert selection",328f,40f,-164f,242f);
	}


private IEnumerator lowremove(){
yield return new WaitForSecondsRealtime(0.2f);
if(!lowsliding){RemoveSlider(lowslider);}
}
private bool lowsliding=false;
private void Screenshot(string filename)
{
    try
    {
		
		var MacGruber=RenderTexture.active;
		
		SuperController.singleton.SelectModeScreenshot();
		return;
		SuperController.singleton.ClearPossess();
		//var selectMode = SuperController.singleton.SelectMode.Screenshot;
		
		SuperController.singleton.HideMainHUD();
		if (SuperController.singleton.hiResScreenshotCamera != null)
		{
			SuperController.singleton.hiResScreenshotCamera.enabled = true;
			if (SuperController.singleton.hiResScreenShotCameraFOVSlider != null)
			{
				SuperController.singleton.hiResScreenshotCamera.fieldOfView = SuperController.singleton.hiResScreenShotCameraFOVSlider.value;
			}
			else
			{
				SuperController.singleton.hiResScreenshotCamera.fieldOfView = 40f;
			}
		}
		
		if (SuperController.singleton.hiResScreenshotPreview != null)
		{
			SuperController.singleton.hiResScreenshotPreview.gameObject.SetActive(true);
		}
		

            RenderTexture targetTexture = SuperController.singleton.hiResScreenshotCamera.targetTexture;
            if (targetTexture != null)
            {
				
				
SuperController.singleton.MonitorCenterCamera.clearFlags=CameraClearFlags.SolidColor;
SuperController.singleton.hiResScreenshotCamera.backgroundColor=Color.green;

                Texture2D texture2D = new Texture2D(targetTexture.width, targetTexture.height, TextureFormat.ARGB32, false);
                RenderTexture.active = targetTexture;
                texture2D.ReadPixels(new Rect(0f, 0f, targetTexture.width, targetTexture.height), 0, 0);
                texture2D.Apply();
                byte[] bytes = texture2D.EncodeToJPG(100);
                FileManagerSecure.WriteAllBytes(filename, bytes);
                if (SkyshopLightController.singleton != null)
                {
                    SkyshopLightController.singleton.Flash();
                }
                UnityEngine.Object.Destroy(texture2D);
            }
        
        if (SuperController.singleton.GetCancel())
        {
            SuperController.singleton.SelectModeOff();
        }
      RenderTexture.active=MacGruber;
	  SuperController.singleton.ShowMainHUD();
	  
	}
    catch (Exception ex)
    {
        SuperController.LogError("Holy fuck what are you doing??! are you mental!? look at this shit: " + ex.Message);
    }
}

private void Gens(){
var action="DE";if(_selectall1){action="";}
int s = 0; int stotal = 0;
foreach(SM sm in _genitalBank){
if(sm.Selected!=_selectall1){s++;sm.Storable.val = sm.Selected = _selectall1;}
}
var add="";
foreach(SM sm in _mainBank.Concat(_genitalBank)){if(sm.Selected){stotal++;}}
if(s!=stotal){add=" - TOTAL MORPHS SELECTED: "+stotal;}

Result(action+"SELECTED "+s+" GENITAL-MORPHS"+add);
}
        private void selectlow(JSONStorableFloat jf)
        {
		var action="DE";if(_selectall1){action="";}
		Result(action+"SELECTING MORPHS WITH VALUE LESS THAN -/+ "+jf.val.ToString());	
		}

private bool nickinit=false;	
private UIDynamicSlider lowslider;
        private void copyText()
        {
	if(morphNameTextField != null){_morphNameInputField_text = _morphNameInputField.text;}
	if(prefixTextField != null){_prefixNameInputField_text = _prefixNameInputField.text;}
	if(prefixTextField != null){_prefixNameInputField_text = _prefixNameInputField.text;}
	if(groupNameTextField != null){_groupNameInputField_text = _groupNameInputField.text;}
	if(regionNameTextField != null){_regionNameInputField_text = _regionNameInputField.text;}
	if(maxTextField != null){_maxInputField_text = _maxInputField.text;}
	if(minTextField != null){_minInputField_text = _minInputField.text;}
	if(creatorTextField != null){_creatorInputField_text = _creatorInputField.text;}
	if(pwTextField != null){_pwInputField_text = _pwInputField.text;}
	if(filterTextField != null){_filterNameInputField_text = _filterNameInputField.text;}
	}

        private void restoreText()
        {
	if(morphNameTextField != null){_morphNameInputField.text = _morphNameInputField_text;}
	if(prefixTextField != null){_prefixNameInputField.text = _prefixNameInputField_text;}
	if(prefixTextField != null){_prefixNameInputField.text = _prefixNameInputField_text;}
	if(groupNameTextField != null){_groupNameInputField.text = _groupNameInputField_text;}
	if(regionNameTextField != null){_regionNameInputField.text = _regionNameInputField_text;}
	if(maxTextField != null){_maxInputField.text = _maxInputField_text;}
	if(minTextField != null){_minInputField.text = _minInputField_text;}
	if(maxTextField != null){if(_maxInputField.text==""){_maxInputField.text = "3000";}}
	if(minTextField != null){if(_minInputField.text==""){_minInputField.text = "-3000";}}
	if(creatorTextField != null){

	
	if(_creatorInputField_text==""){
			if(nickinput.text=="" || nickinput.text.Contains("USER")){nickinput.text=ruser.Replace("-VAM","");
			echo11(">"+nickinput.text+"<1");
			}
		}else{
			if(nickinput.text=="" || nickinput.text.Contains("USER")){nickinput.text=_creatorInputField_text;
			echo11(">"+nickinput.text+"<2"+_creatorInputField_text);
			}
		}
		_creatorInputField.text = _creatorInputField_text;
		}
		nick=nickinput.text+"-VAM".Replace("-VAM-VAM","-VAM");
		nickinit=true;
	if(pwTextField != null){_pwInputField.text = _pwInputField_text;}
	if(filterTextField != null){_filterNameInputField.text = _filterNameInputField_text;}
	if(firstinit){
		
	//FIRST TIME RUNNING PLUGIN
	
	foreach(Atom a in SuperController.singleton.GetAtoms()){
	bool foundlight=false;
	//echo8(a.type.ToString()+": "+a.name);
	if(a.type.ToString().contains("light")){
		foundlight=true;
		echo8("light: "+a.type.ToString()+": "+a.name);
		//a.SetOn(false);
		//a..enabled=false;
		}
}

	
	

	saveini();
	if(!UITransform.gameObject.active){
		echo25("t5");
	StartCoroutine(OpenPlugin(this.name));
	}
	
	}
	}

        private void removeText(UIDynamicTextField field)
        {
	copyText();
	if(field != null)
	RemoveTextField(field);
	}


        private string processMorphBank()
        {string pr=headVerticiesAdjust;var m="";var n="";var p=_prefixNameInputField.text;headVerticiesFix="";
	if(_morphNameInputField.text==""){m=_person.name;}else{m=_morphNameInputField.text;}
	if(p!=""){
	n=p+"-"+m;n=n.Replace(p+"-"+p+"-",p+"-");
	}else{n=_morphNameInputField.text;}
 	
           foreach (DAZMorph sm in _characterSelector.femaleMorphBank1.morphs.Concat(_characterSelector.maleMorphBank1.morphs).Concat(_characterSelector.femaleMorphBank2.morphs.Concat(_characterSelector.maleMorphBank2.morphs)))
		{
			if(sm == null){continue;}
//echo3(sm.resolvedDisplayName.ToUpper()+" > "+n.ToUpper());
if(sm.resolvedDisplayName.ToUpper()==n.ToUpper()){
//echo3("checking "+sm.resolvedDisplayName);
pr=sm.resolvedDisplayName;
if(sm.uid != null){//echo2("reading "+sm.uid);
if(!FileManagerSecure.FileExists(sm.uid)){pr=VerticesToBodyFix(_headVerticiesFix1);continue;}
var chk=FileManagerSecure.ReadAllText(sm.uid);//echo2("content: "+chk);
if(!chk.Contains("y//")){pr=VerticesToBodyFix(_headVerticiesFix2);continue;}
if(chk.Contains(MD5(_pwInputField.text))){headVerticiesFix=pr;pr=headVerticiesAdjust;}else{pr=VerticesToBodyFix(_bodyVerticiesFix1);}
}}

		}
return pr;
	}




private bool refreshing=false;private float filler=0f;private bool firstscan=true;
        private void Refresh(bool keep = true)
        {
		try{
		/*
		//generate list
		var outlist="";
		foreach (SM sm in _mainBank.Concat(_genitalBank))
		{
		outlist+="\\n"+sm.Morph.resolvedDisplayName+sm.Morph.morphName+"\\t"+sm.Morph.morphValue+"\\t"+sm.Morph.resolvedDisplayName;
		}
		echo4(outlist);		
		*/
			echo3(SuperController.singleton.mainHUD.gameObject.layer.ToString());
		if(rightUIContent !=null){
		foreach (UIDynamicSlider tt in rightUIContent.parent.GetComponentsInChildren<UIDynamicSlider>(true))
		{//echo3("slider "+tt.name);
		RemoveSlider(tt);
		}
		}
		refreshing=true;keep = true;_refreshing = true;bool rb=false;
		if(keep){_refresh = "";}
		

		
		 foreach (SM sm in _mainBank.Concat(_genitalBank))
		{if(!copypaste){
		//if(sm.Morph.morphValue < 0.0001f && sm.Morph.morphValue > -0.0001f);{sm.Morph.morphValue=0.0f;}
		}}

            foreach (SM sm in _mainBank.Concat(_genitalBank))
		{

/*
if(sm.Morph.uid != null){
if(sm.Morph.uid.Contains("pinnacle")){
var cocz=FileManagerSecure.ReadAllText(sm.Morph.uid);
echo(cocz);
}
}
*/
}

	    if(!persons()){echo("ref no persons");
	if(waspeople){
            foreach (SM sm in _mainBank.Concat(_genitalBank))
		{


		if(keep){

				if (sm.Selected == true)
				{
				_refresh+=sm.Morph.resolvedDisplayName+sm.Morph.uid+"[keep]\n";}

				}
                RemoveToggle(sm.Storable);//RemoveButton(sm.Storable);
		rb=true;

		}

if(rb){
for (int i = 0; i < buttons+10; i++){
RemoveButton(morphinfo[i]);}
}buttons=0;
            _mainBank.Clear();
            _genitalBank.Clear();
	    waspeople=false;
}
refreshing=false;
return;
}



            foreach (SM sm in _mainBank.Concat(_genitalBank))
		{

		if(keep){

				if (sm.Selected == true)
				{
				_refresh+=sm.Morph.resolvedDisplayName+sm.Morph.uid+"[keep]\n";}

				}
                RemoveToggle(sm.Storable);//RemoveButton(sm.Storable);
		rb=true;

		}
if(rb){
for (int i = 0; i < buttons+10; i++){//FIX make list/dictionary instead of 5000 large static array
RemoveButton(morphinfo[i]);}
}buttons=0;



         	if (rtitle != null)
                RemoveTextField(rtitle);
			
			if (ltitle != null)
                RemoveTextField(ltitle);

            	if (lend != null)
                RemoveTextField(lend);

               _mainBank.Clear();
               _genitalBank.Clear();
			   
		
		if(_person==null){echo9("woo");people=false;return;}
		if(!_person.on){echo9("wook");people=false;return;}
		Setsliders();
		Define();

		_morphs=0;int gensfound=0;_genmorphs = 0;afound=0;
		//if(checkbank(_characterSelector.morphBank1, _mainBank)){toptitle("License","Body");}
        ScanBank(_characterSelector.morphBank1, _mainBank,0);
		//if(checkbank(_characterSelector.morphBank2, _genitalBank)){gentitle("\nLicense","\nGenitals");gensfound=1;}
		ScanBank(_characterSelector.morphBank2, _genitalBank,1);
		//if(checkbank(_characterSelector.morphBank3, _genitalBank) && gensfound==0){gentitle("\nLicense","\nGenitals");gensfound=1;}
		//ScanBank(_characterSelector.morphBank3, _genitalBank,1);
		filler=0;
		if(_morphs<10 && !loaded){
		filler=0f;echo3("setting filler");
		}
	float d=0f;float rd=0;float ld=0;if(vr){ld=30;rd=20;}
	transui2(leftUIContent.transform,width: 220+filler/2);
	leftUIContent.transform.localPosition = new Vector3(137.5f-filler/2,rightUIContent.transform.localPosition.y,ld);
	transui2(rightUIContent.transform,width: 570+filler);
	rightUIContent.transform.localPosition = new Vector3(347.5f,rightUIContent.transform.localPosition.y,rd);
		if(_morphs>0){endtitle(168);
		if(_morphs>100){endtitle(260);


		
		
		}
				
		Result("REFRESHED LIST - SHOWING "+_morphs+" MORPHS");
		}else{toptitle("","       No active morphs");Result("ADD MORPHS TO YOUR MODEL FIRST");}


	
		if(_refresh != null)
		{int num=0; string[] clips = _refresh.Split("\n"[0]);


			foreach (string chk in clips)
			{	
           			foreach (SM sm in _genitalBank.Concat(_mainBank))
				{     var chks=sm.Morph.resolvedDisplayName+sm.Morph.uid+"[keep]";     


						if(clips[num]==chks && clips[num]!=""){
						sm.Storable.val = sm.Selected = true;clips[num]="";
						}
					}
			num++;}

		}


	
_refreshing=false;	
refreshing=false;

		}
		catch (Exception e){SuperController.LogError("Exception caught: " + e);}
        }


   private void endtitle(int s)
    {
		if(lend!=null){RemoveTextField(lend);}
                lend = CreateTextField(new JSONStorableString("end","\nActive Morphs: "+_morphs+"\n\n"), rightSide: true);
                lend.UItext.fontSize = 27;
                lend.UItext.color = Color.white;
                lend.backgroundColor = Color.clear;
                SetLayoutHeight(lend, s);
    }

   private void gentitle(string ltxt, string rtxt)
    {
		if(ltitle!=null){RemoveTextField(rtitle);RemoveTextField(ltitle);}
                ltitle = CreateTextField(new JSONStorableString("genName", ltxt), rightSide: false);
				ltitle.UItext.color = Color.white;
                ltitle.UItext.fontSize = 27;
                ltitle.backgroundColor = Color.clear;
                SetLayoutHeight(ltitle, 68);

                rtitle = CreateTextField(new JSONStorableString("genName", rtxt), rightSide: true);
                rtitle.UItext.fontSize = 27;
				rtitle.UItext.color = Color.white;
                rtitle.backgroundColor = Color.clear;
                SetLayoutHeight(rtitle, 68);
    }

   private void toptitle(string ltxt, string rtxt)
    {
		if(ltop!=null){RemoveTextField(rtop);RemoveTextField(ltop);}
                ltop = CreateTextField(new JSONStorableString("genName", ltxt), rightSide: false);
                ltop.UItext.fontSize = 27;
				ltop.UItext.color = Color.white;
                ltop.backgroundColor = Color.clear;
                SetLayoutHeight(ltop, 68);

                rtop = CreateTextField(new JSONStorableString("genName", rtxt), rightSide: true);
                rtop.UItext.fontSize = 27;
				rtop.UItext.color = Color.white;
                rtop.backgroundColor = Color.clear;
                SetLayoutHeight(rtop, 68);
    }



		private int afound=0;
        private bool checkbank(DAZMorphBank bank, List<SM> selectableList)
	{
            if (bank == null)
		{
                return false;
		}

           foreach (DAZMorph morph in bank.morphs.OrderByDescending(NormalisedMagnitude))
            	{
            	if (morph.appliedValue != morph.jsonFloat.defaultVal && morph.visible && !automorphs.Contains("["+morph.morphName+"]")){return true;}
		}
		return false;
	}

		private int _mainmorphs;private string igenfirst;private string genfirst;private float toggletime=0f; private string lasthoover="";
        private void ScanBank(DAZMorphBank bank, List<SM> selectableList, int genscan)
        {
            if (bank == null)
		{
                return;
		}
		
		waspeople=true;var lastletter=""; var letters="";var activated = "";var cnt = 0;_mainmorphs=0;var maincnt=0;_genmorphs=0;


			var bnks = _characterSelector.morphBank1.morphs.OrderBy(morph => morph.resolvedDisplayName);
			if(genscan==1){bnks = _characterSelector.morphBank2.morphs.OrderBy(morph => morph.resolvedDisplayName);}
			
			if(!femalebank && !isfuta){
			echo3("IS MALE");
			bnks = _characterSelector.maleMorphBank1.morphs.OrderBy(morph => morph.resolvedDisplayName);
			if(genscan==1){bnks = _characterSelector.maleMorphBank2.morphs.OrderBy(morph => morph.resolvedDisplayName);}	
			}
		
			
			if(isfuta){
			bnks = _characterSelector.femaleMorphBank1.morphs.Concat(_characterSelector.maleMorphBank1.morphs).OrderBy(morph => morph.resolvedDisplayName);
			if(genscan==1){bnks = _characterSelector.femaleMorphBank2.morphs.Concat(_characterSelector.maleMorphBank2.morphs).OrderBy(morph => morph.resolvedDisplayName);}
			}
			
            if (_orderButton.label != "Current sorting: Alphabetical"){ 
			bnks = _characterSelector.morphBank1.morphs.OrderByDescending(NormalisedMagnitude);
			if(genscan==1){bnks = _characterSelector.morphBank2.morphs.OrderByDescending(NormalisedMagnitude);}
			
			if(!femalebank && !isfuta){
			echo3("IS MALE");
			bnks = _characterSelector.maleMorphBank1.morphs.OrderByDescending(NormalisedMagnitude);
			if(genscan==1){bnks = _characterSelector.maleMorphBank2.morphs.OrderByDescending(NormalisedMagnitude);}	
			}
			
			if(isfuta){	
			bnks = _characterSelector.femaleMorphBank1.morphs.Concat(_characterSelector.maleMorphBank1.morphs).OrderByDescending(NormalisedMagnitude);
			if(genscan==1){bnks = _characterSelector.femaleMorphBank2.morphs.Concat(_characterSelector.maleMorphBank2.morphs).OrderByDescending(NormalisedMagnitude);}
			}
			}
		
			if(genscan==1){genfirst="";}
			
            foreach (DAZMorph morph in bnks)
            {

		
                // ReSharper disable once CompareOfFloatsByEqualityOperator
                if (!morph.hasMCMFormulas && morph.appliedValue != morph.jsonFloat.defaultVal && morph.visible && !automorphs.Contains("["+morph.morphName+"]"))
                {
		

		cnt++;

		if (genscan == 1){_genmorphs++;if(_genmorphs==1){gentitle("\nLicense","\nGenitals");}}else{_mainmorphs++;maincnt++;if(maincnt==1){toptitle("License","Body");}}

numvalue.Remove(morph.uid);
numvalue.Add(morph.uid,_morphs);
_morphs++;

                  var jsonStorable = new JSONStorableBool($"{morph.resolvedDisplayName}Bool", false);

                MorphToggles[_morphs] = CreateToggle(jsonStorable, true);
		    
				if(genfirst==""){genfirst=morph.resolvedDisplayName+morph.uid;}
                MorphToggles[_morphs].label = morph.resolvedDisplayName;echo2(morph.resolvedDisplayName.ToString());
  		MorphToggles[_morphs].name = _morphs.ToString();Morphnum[_morphs] = morph;
		var license="";bool custom=false;var tmp="";var hoover="VAM Inbuilt morph: "+morph.morphName;
		Color lowcolor =new Color(0.59f, 0.57f, 0.61f);Color hicolor =new Color(0.85f, 0.83f, 0.87f);var numlicense="[0]\n";

		if(morph.uid.Contains("Custom/")){custom = true;hoover="Custom morph: "+morph.uid;numlicense="[1]\n";
		lowcolor =new Color(0.62f, 0.6f, 1f);hicolor =new Color(0.62f, 0.6f, 1f);
		if(morph.uid.Contains(":/")){tmp=morph.packageLicense;license=tmp;hoover="In Free-license VAR: "+morph.packageUid;numlicense="[2]\n";
		if(tmp!="FC"){license=tmp;lowcolor =new Color(1f, 0.6f, 0.65f);hicolor =new Color(1f, 0.6f, 0.65f);hoover="From licensed VAR: "+morph.packageUid;numlicense="[3]\n";}
		}}
		lowcolor.a=1f;hicolor.a=1f;

				if(ilevel!=4 && inactive.Length>2 && morph.resolvedDisplayName.contains(inactive)){
				lowcolor = hicolor = new Color(0.2f, 0.8f, 0.35f);afound++;
				}

                MorphToggles[_morphs].backgroundColor = Color.Lerp(lowcolor, hicolor, NormalisedMagnitude(morph));

				var hoover2="";var add="";
				if(morph.hasBoneModificationFormulas){hoover2+="Has bone morphs";MorphToggles[_morphs].transform.Find("Background").GetComponent<Image>().color = new Color(1.4f,0.6f,0.6f);}
				if(morph.hasMorphValueFormulas){
				var cstring=morph.formulasString+",";
				cstring=": "+cstring.Replace("\n",",").Replace("Drives: ","").Replace(",,","");
				int cnum=cstring.Length;string[] cchk=cstring.Split(","[0]);
				if(cnum>80){cstring="";}
				
				if(hoover2!=""){add=" - ";}hoover2+=add+"Controls "+cchk.Length.ToString()+" morphs"+cstring;MorphToggles[_morphs].transform.Find("Background").GetComponent<Image>().color = new Color(1.4f,0.6f,0.6f);}
				if(morph.isDriven){if(hoover2!=""){add=" - ";}hoover2="Currently locked and controlled by: "+morph.drivenBy;MorphToggles[_morphs].backgroundColor = new Color(0.24f,0.21f,0.26f);MorphToggles[_morphs].textColor = Color.gray;}
				
				
				//foreach(Image im in MorphToggles[_morphs].GetComponentsInChildren<Image>()){echo3("image: "+im.name);if(im.name.contains("Check")){im.color=Color.white;}}
				
    		EventTrigger.Entry eventtype = new EventTrigger.Entry();
    		eventtype.eventID = EventTriggerType.PointerEnter;
			int mm=_morphs;
			eventtype.callback.AddListener((eventData) => {
			helptip("morphtoggle");
			hud.sortingOrder=32;
			 pboxon=true;
			float slpos=leftUIContent.Find("DynamicTextField(Clone)/").GetComponent<Transform>().localPosition.x;
			float apos=294;
			float corr=0;
			if(_morphs<10){corr=25;}
			if(slpos==117.5f){apos=294+filler;}
			else if(slpos==118.75f){apos=280+filler;}
			else if(slpos==112.5f){apos=261+filler+corr;}
			else if(slpos==111.25f){apos=273+filler;}
			else if(slpos==106.25f){apos=265+filler;}
			lasttoggle=MorphToggles[mm];
			submenu(MorphToggles[mm].transform,"Select similar\nDeselect similar\nSearch similar\nSend to slider,Copy startvalues,Copy endvalues","similar",cap:26,z:20f,suboffsetx:181,suboffsety:-21,subw:-850,w:-850,delay:1.3f,offsetx:125-apos,offsety: -62,spacing: 37,nosub:true,prefx:"  ");
			Result(hoover2); lasthoover=morph.resolvedDisplayName;});
    		MorphToggles[_morphs].gameObject.AddComponent<Toggle>();
    		MorphToggles[_morphs].gameObject.AddComponent<EventTrigger>();
			MorphToggles[_morphs].gameObject.GetComponent<EventTrigger>().triggers.Add(eventtype);
			
			
EventTrigger.Entry eventexit = new EventTrigger.Entry();
    		eventexit.eventID = EventTriggerType.PointerExit;
			eventexit.callback.AddListener((eventData) => {
				pboxon=false;helptip();
				StartCoroutine(removepbox(true,delay:0.7f));
				//if(!pboxon){for (int p=1;p<200;p++){if(pbox[p]!=null){RemoveButton(pbox[p]);}}}
			});
			MorphToggles[_morphs].gameObject.GetComponent<EventTrigger>().triggers.Add(eventexit);

			
			if(!activated.contains(morph.resolvedDisplayName+numlicense)){activated+=morph.resolvedDisplayName+numlicense;}
 
 
                    var selectable = new SM
                    {
                        Morph = morph,
                        Storable = jsonStorable,
						Toggler = MorphToggles[_morphs],

                    };
		int ntmp =_morphs;
                morphinfo[_morphs] = CreateButton(license, rightSide: false);
               	morphinfo[_morphs].buttonColor = Color.gray;
				morphinfo[_morphs].textColor = Color.white;
                if (morphinfo[_morphs] != null){
		if (genscan == 1){
		morphinfo[_morphs].button.onClick.AddListener(() =>{
			
						var key=selectable.Morph.uid+selectable.Morph.resolvedDisplayName;
		
						if(hmorphoriginal.ContainsKey(key)){hmorphoriginal.Remove(key);}
						if(bmorphoriginal.ContainsKey(key)){bmorphoriginal.Remove(key);}
						if(hmorphcopy.ContainsKey(key)){hmorphcopy.Remove(key);}
						if(bmorphcopy.ContainsKey(key)){bmorphcopy.Remove(key);}
						
		Morphnum[ntmp] = null;selectable.Morph.Reset();selectable.Morph.SetValue(morph.jsonFloat.defaultVal);selectableList.Remove(selectable);
_morphs-=1;
		_genmorphs-=1;if(_genmorphs<1){if(ltitle!=null){RemoveTextField(rtitle);RemoveTextField(ltitle);}}
		RemoveToggle(selectable.Storable);RemoveButton(morphinfo[ntmp]);Setsliders();oldparpos=9999999;
		lend.text="\nActive Morphs: "+_morphs+"\n\n";if(_morphs==0){Refresh();}
		});
		}else{
		morphinfo[_morphs].button.onClick.AddListener(() =>{
			
						var key=selectable.Morph.uid+selectable.Morph.resolvedDisplayName;
		
						if(hmorphoriginal.ContainsKey(key)){hmorphoriginal.Remove(key);}
						if(bmorphoriginal.ContainsKey(key)){bmorphoriginal.Remove(key);}
						if(hmorphcopy.ContainsKey(key)){hmorphcopy.Remove(key);}
						if(bmorphcopy.ContainsKey(key)){bmorphcopy.Remove(key);}
						
		Morphnum[ntmp] = null;selectable.Morph.Reset();selectable.Morph.SetValue(morph.jsonFloat.defaultVal);selectableList.Remove(selectable);
_morphs-=1;
		RemoveToggle(selectable.Storable);RemoveButton(morphinfo[ntmp]);Setsliders();oldparpos=9999999;
		lend.text="\nActive Morphs: "+_morphs+"\n\n";if(_morphs==0){Refresh();}
		});
		}
		}
			buttons++;
    		EventTrigger.Entry buttontype = new EventTrigger.Entry();
    		buttontype.eventID = EventTriggerType.PointerEnter;
			buttontype.callback.AddListener((eventData) => {helptip("morphbutton");Result(hoover); });
    		//morphinfo[_morphs].gameObject.AddComponent<Toggle>();
    		morphinfo[_morphs].gameObject.AddComponent<EventTrigger>();
   		morphinfo[_morphs].gameObject.GetComponent<EventTrigger>().triggers.Add(buttontype);

    		EventTrigger.Entry buttontypeexit = new EventTrigger.Entry();
    		buttontypeexit.eventID = EventTriggerType.PointerEnter;
			buttontypeexit.callback.AddListener((eventData) => {helptip();});
    		morphinfo[_morphs].gameObject.AddComponent<EventTrigger>();
			morphinfo[_morphs].gameObject.GetComponent<EventTrigger>().triggers.Add(buttontypeexit);
		
                    MorphToggles[_morphs].toggle.onValueChanged.AddListener(value =>
                    {
					
			if(value){selectedmorphs++;}else{selectedmorphs--;}
			selectable.Selected = value;if(_refreshing==false){Clicked(morph.resolvedDisplayName,value);}

			if(_refreshing==false)

			if(!selecting)
			{
			if(lasthoover==morph.resolvedDisplayName+morph.resolvedDisplayName && Time.time-toggletime<1){
			_morphNameInputField.text = morph.resolvedDisplayName;Clicked(morph.resolvedDisplayName,value,silent:true);Result("COPIED "+morph.resolvedDisplayName+" TO NAME-FIELD");}else{//echo3(lasthoover);
			if(lasthoover==morph.resolvedDisplayName){toggletime=Time.time;lasthoover+=morph.resolvedDisplayName;
			
			}	
			}
			}

                        
            });

                    selectableList.Add(selectable);//echo3("added "+morph.resolvedDisplayName);
                }
				
            }//foreach end
		findletter=true;lettertime=Time.time;	


				// add inactive morphs
		
		//FUTA
		var comp="";
		/*
		foreach(UIDynamicToggle c in _person.GetComponentsInChildren<UIDynamicToggle>(true)){
		if(c!=null){
			
			if(c.name=="UseFemaleMorphsOnMaleToggle"){c.toggle.isOn=true;echo3(c.toggle.isOn.ToString());}
			//comp+=c.transform.parent.parent.name+"/"+c.transform.parent.name+"/"+c.name+"\n";
		
		}
		//echo3(comp);
		//GUIUtility.systemCopyBuffer = comp;
		}
		
		
		foreach(Transform c in _person.GetComponentsInChildren<Transform>(true)){
		if(c!=null){
			
			if(c.transform.parent.name=="Skin Select"){
				
			foreach(UIDynamicToggle cc in c.transform.parent.GetComponentsInChildren<UIDynamicToggle>(true)){
			comp+=cc.transform.parent.parent.name+"/"+cc.transform.parent.name+"/"+cc.name+"\n";
				
			}
			
			
			}
		
		}
		//echo3(comp);
		//GUIUtility.systemCopyBuffer = comp;
		}
		
		if(genscan!=1){//futa
		//_person.GetComponentInChildren<GenerateDAZCharacterSelectorUI>().SetActiveCharacterToggle(_person.GetComponentInChildren<DAZCharacter>().skin.ToString());
		//_person.GetComponentInChildren<DAZCharacterSelector>().SelectCharacterByName("Futa Maria");
		//echo3(_person.GetComponentInChildren<DAZCharacterSelector>().gender.ToString());
		//echo3(_person.GetComponentInChildren<DAZCharacter>().skin.ToString());
		//echo3(_person.GetComponentInChildren<DAZCharacter>().displayName.ToString());
		//popo.SetActiveCharacterToggle(_person.GetComponentInChildren<DAZCharacter>().name);
		
		//_person.GetComponentInChildren<DAZCharacterSelector>().InitComponents();
		}
		
		//var ibnks = bank.morphs.OrderBy(morph => morph.resolvedDisplayName);
		*/
		echo3("CHECKING INACTIVE");
		var ibnks=_characterSelector.morphBank1.morphs.OrderBy(morph => morph.resolvedDisplayName);
		if(genscan==1){ibnks=_characterSelector.morphBank2.morphs.OrderBy(morph => morph.resolvedDisplayName);}
		
		if(!femalebank && !isfuta){
			echo3("IS MALE");
		ibnks = _characterSelector.maleMorphBank1.morphs.OrderBy(morph => morph.resolvedDisplayName);
		if(genscan==1){ibnks = _characterSelector.maleMorphBank2.morphs.OrderBy(morph => morph.resolvedDisplayName);}	
		}
		
		if(isfuta){
			echo3("IS FUTA");
		ibnks = _characterSelector.femaleMorphBank1.morphs.Concat(_characterSelector.maleMorphBank1.morphs).OrderBy(morph => morph.resolvedDisplayName);
		if(genscan==1){ibnks = _characterSelector.femaleMorphBank2.morphs.Concat(_characterSelector.maleMorphBank2.morphs).OrderBy(morph => morph.resolvedDisplayName);}	
		}
		
		var icnt = 0;var licensed="";if(genscan!=1){ifirst="";}else{igenfirst="";}
		if(ilevel==4 || inactive==""){return;}
		
		echo3("LISTING INACTIVE - genitals: "+genscan+" - femalebank:"+femalebank+" - gender:"+gender+" - futa:"+isfuta);
            foreach (DAZMorph morph in ibnks)
            {

			    var iname=morph.resolvedDisplayName;
				var inamechka=iname;
				var inamechkb=iname+morph.group+morph.uid+morph.region;
				var inamechk=inamechka;
				var ichk=iname.Substring(0,1).ToUpper();
				if(inactive.Length>2){
					if(inactive.Contains("/")){
					string[] inactivesub=inactive.Split("/"[0]);
					foreach(string s in inactivesub){
						
						if(s.Contains("+")){bool iadd=true;
							foreach(string plus in s.Split("+"[0])){
							if(plus.Contains("*")){inamechk=inamechkb;}else{inamechk=inamechka;}
							if(!inamechk.contains(plus.Replace("*",""))){iadd=false;}
							}
							if(iadd){ichk=inactive;}
							}
						else{
						if(s.Contains("*")){inamechk=inamechkb;}else{inamechk=inamechka;}
						if(inamechk.contains(s.Replace("*",""))){ichk=inactive;}}
					}
					}
					
							else if(inactive.Contains("+")){bool iadd=true;
							foreach(string plus in inactive.Split("+"[0])){
							if(plus.Contains("*")){inamechk=inamechkb;}else{inamechk=inamechka;}
							if(!inamechk.contains(plus.Replace("*",""))){iadd=false;}
							}
							if(iadd){ichk=inactive;}
							}
								else {
									
									if(inactive.Contains("*")){inamechk=inamechkb;}else{inamechk=inamechka;}
									if(inamechk.contains(inactive.Replace("*",""))){ichk=inactive;}}
				}
					
				 bool include=false;
				if(morph.morphName.contains("height")){echo9(morph.morphName);}
				if(morph.morphValue == morph.jsonFloat.defaultVal && !automorphs.Contains("["+morph.morphName+"]") && ichk==inactive)
				{	
					if(!morph.uid.Contains("/")){if(ilevel==1 || ilevel==0){if(!licensed.contains("["+iname+"[0]\n") && !activated.contains("["+iname+"[0]\n")){licensed+="["+iname+"[0]\n";include=true;}}}
					else if(!morph.uid.Contains(":/")){if(ilevel==2 || ilevel==0){if(!licensed.contains("["+iname+"[1]\n") && !activated.contains("["+iname+"[1]\n")){licensed+="["+iname+"[1]\n";include=true;}}}
					else if(morph.packageLicense=="FC"){if(ilevel==2 || ilevel==0){if(!licensed.contains("["+iname+"[2]\n") && !activated.contains("["+iname+"[2]\n")){licensed+="["+iname+"[2]\n";include=true;}}}
					else{if(!licensed.contains("["+iname+"[3]\n") && !activated.contains("["+iname+"[3]\n")){if(ilevel==3 || ilevel==0){licensed+="["+iname+"[3]\n";include=true;}}}
				}
				
                 if (include)
                {
		

		icnt++;cnt++;

		if (genscan == 1){_genmorphs++;if(_genmorphs==1){gentitle("\nLicense","\nGenitals");}}else{_mainmorphs++;maincnt++;if(maincnt==1){toptitle("License","Body");}}


numvalue.Remove(morph.uid);
numvalue.Add(morph.uid,_morphs);
_morphs++;

                  var jsonStorable = new JSONStorableBool($"{morph.resolvedDisplayName}Bool", false);

                MorphToggles[_morphs] = CreateToggle(jsonStorable, true);
				
				
				if(igenfirst==""){igenfirst=morph.resolvedDisplayName+morph.uid;}
				if(ifirst==""){ifirst=morph.resolvedDisplayName+morph.uid;}
                MorphToggles[_morphs].label = morph.resolvedDisplayName;//echo2(morph.resolvedDisplayName.ToString());
  		MorphToggles[_morphs].name = _morphs.ToString();Morphnum[_morphs] = morph;
		var license="";bool custom=false;var tmp="";var hoover="VAM Inbuilt morph: "+morph.morphName;
		Color lowcolor =new Color(0.99f, 0.99f, 0.99f);Color hicolor =new Color(0.55f, 0.55f, 0.55f);

		if(morph.uid.Contains("Custom/")){custom = true;hoover="Custom morph: "+morph.uid;
		lowcolor =new Color(0.62f, 0.6f, 1f);hicolor =new Color(0.32f, 0.3f, 0.6f);
		if(morph.uid.Contains(":/")){tmp=morph.packageLicense;license=tmp;hoover="From Free-license VAR: "+morph.packageUid;
		if(tmp!="FC"){license=tmp;lowcolor =new Color(1f, 0.6f, 0.65f);hicolor =new Color(0.6f, 0.3f, 0.35f);hoover="From licensed VAR: "+morph.packageUid;}
		}}
		lowcolor.a=0.25f;hicolor.a=1f;

                MorphToggles[_morphs].backgroundColor = hicolor;
				MorphToggles[_morphs].textColor = Color.white;

				var hoover2="";var add="";
				if(morph.hasBoneModificationFormulas){hoover2+="Has bone morphs";MorphToggles[_morphs].transform.Find("Background").GetComponent<Image>().color = new Color(1.4f,0.6f,0.6f);}
				if(morph.hasMorphValueFormulas){
				var cstring=morph.formulasString+",";
				cstring=": "+cstring.Replace("\n",",").Replace("Drives: ","").Replace(",,","");
				int cnum=cstring.Length;string[] cchk=cstring.Split(","[0]);
				if(cnum>80){cstring="";}
				
				if(hoover2!=""){add=" - ";}hoover2+=add+"Controls "+cchk.Length.ToString()+" morphs"+cstring;MorphToggles[_morphs].transform.Find("Background").GetComponent<Image>().color = new Color(1.4f,0.6f,0.6f);}
				if(morph.isDriven){if(hoover2!=""){add=" - ";}hoover2="Currently locked and controlled by: "+morph.drivenBy;MorphToggles[_morphs].backgroundColor = new Color(0.24f,0.21f,0.26f);MorphToggles[_morphs].textColor = Color.gray;}
				

    		EventTrigger.Entry eventtype = new EventTrigger.Entry();
    		eventtype.eventID = EventTriggerType.PointerEnter;
			eventtype.callback.AddListener((eventData) => {helptip("morphtoggle");Result(hoover2); lasthoover=morph.resolvedDisplayName;echo3(lasthoover);});
    		MorphToggles[_morphs].gameObject.AddComponent<Toggle>();
    		MorphToggles[_morphs].gameObject.AddComponent<EventTrigger>();
			MorphToggles[_morphs].gameObject.GetComponent<EventTrigger>().triggers.Add(eventtype);
 
 EventTrigger.Entry eventexit = new EventTrigger.Entry();
    		eventexit.eventID = EventTriggerType.PointerExit;
			eventexit.callback.AddListener((eventData) => {
				pboxon=false;helptip();
				StartCoroutine(removepbox(true,delay:0.7f));
			});
			MorphToggles[_morphs].gameObject.GetComponent<EventTrigger>().triggers.Add(eventexit);
 
                    var selectable = new SM
                    {
                        Morph = morph,
                        Storable = jsonStorable,
						Toggler = MorphToggles[_morphs],

                    };
		int ntmp =_morphs;
                morphinfo[_morphs] = CreateButton(license, rightSide: false);
               	morphinfo[_morphs].buttonColor = Color.black;
		morphinfo[_morphs].textColor = Color.white;
                if (morphinfo[_morphs] != null){float ff=morph.jsonFloat.defaultVal;
		if (genscan == 1){
		morphinfo[_morphs].button.onClick.AddListener(() =>{
			
						var key=selectable.Morph.uid+selectable.Morph.resolvedDisplayName;
		
						if(hmorphoriginal.ContainsKey(key)){hmorphoriginal.Remove(key);}
						if(bmorphoriginal.ContainsKey(key)){bmorphoriginal.Remove(key);}
						if(hmorphcopy.ContainsKey(key)){hmorphcopy.Remove(key);}
						if(bmorphcopy.ContainsKey(key)){bmorphcopy.Remove(key);}
						
		selectable.Morph.morphValue=morph.jsonFloat.defaultVal;selectable.Morph.Reset();slider[ntmp-1].slider.value=ff;//Setsliders();oldparpos=9999999;
		});
		}else{
		morphinfo[_morphs].button.onClick.AddListener(() =>{
			
						var key=selectable.Morph.uid+selectable.Morph.resolvedDisplayName;
		
						if(hmorphoriginal.ContainsKey(key)){hmorphoriginal.Remove(key);}
						if(bmorphoriginal.ContainsKey(key)){bmorphoriginal.Remove(key);}
						if(hmorphcopy.ContainsKey(key)){hmorphcopy.Remove(key);}
						if(bmorphcopy.ContainsKey(key)){bmorphcopy.Remove(key);}	
						
		selectable.Morph.morphValue=morph.jsonFloat.defaultVal;selectable.Morph.Reset();slider[ntmp-1].slider.value=ff;//Setsliders();oldparpos=9999999;
		});
		}
		}
			buttons++;
    		EventTrigger.Entry buttontype = new EventTrigger.Entry();
    		buttontype.eventID = EventTriggerType.PointerEnter;
			buttontype.callback.AddListener((eventData) => {helptip("morphbutton");Result(hoover); });
    		//morphinfo[_morphs].gameObject.AddComponent<Toggle>();
    		morphinfo[_morphs].gameObject.AddComponent<EventTrigger>();
			morphinfo[_morphs].gameObject.GetComponent<EventTrigger>().triggers.Add(buttontype);

    		EventTrigger.Entry buttontypeexit = new EventTrigger.Entry();
    		buttontypeexit.eventID = EventTriggerType.PointerEnter;
			buttontypeexit.callback.AddListener((eventData) => {helptip();});
    		morphinfo[_morphs].gameObject.AddComponent<EventTrigger>();
			morphinfo[_morphs].gameObject.GetComponent<EventTrigger>().triggers.Add(buttontypeexit);

                    MorphToggles[_morphs].toggle.onValueChanged.AddListener(value =>
                    {

			if(value){selectedmorphs++;}else{selectedmorphs--;}
			selectable.Selected = value;if(_refreshing==false){Clicked(morph.resolvedDisplayName,value);}

			if(_refreshing==false)

			if(!selecting)
			{
			
			if(lasthoover==morph.resolvedDisplayName+morph.resolvedDisplayName && Time.time-toggletime<1){
			_morphNameInputField.text = morph.resolvedDisplayName;Clicked(morph.resolvedDisplayName,value,silent:true);Result("COPIED "+morph.resolvedDisplayName+" TO NAME-FIELD");}else{//echo3(lasthoover);
			if(lasthoover==morph.resolvedDisplayName){toggletime=Time.time;lasthoover+=morph.resolvedDisplayName;
			
			}	
			}
			}

                        
                    });

                    selectableList.Add(selectable);
                }
				
            }//end foreach inactive
		findletter=true;lettertime=Time.time;



		
		}//end scanbank
		

private UIDynamicToggle lasttoggle;
private IEnumerator Futa(string model="Futa Maria",bool male=false, string forceselect="", bool created=false){
	
_person.GetComponentInChildren<DAZCharacterSelector>(true).SelectCharacterByName(model);
_person.GetComponentInChildren<DAZCharacterSelector>(true).RemoveAllClothing();
_person.GetComponentInChildren<DAZCharacterSelector>(true).RemoveAllHair();
for (int i=1;i<10;i++){
	_person.GetComponentInChildren<DAZCharacterSelector>(true).RemoveAllClothing();
	_person.GetComponentInChildren<DAZCharacterSelector>(true).RemoveAllHair();
	if(SuperController.singleton.loadingUI.gameObject.active || SuperController.singleton.loadingIcon.gameObject.active){i--;}yield return new WaitForSecondsRealtime(0.2f);}
//setperson(_personid); ERROR might make it choose wrong person, maybe needed for convert to futa.
if(male){echo3("creating male");}

var ibnks = _characterSelector.maleMorphBank1.morphs.Concat(_characterSelector.maleMorphBank2.morphs);
		
if(created){

ibnks = _characterSelector.femaleMorphBank1.morphs;

foreach(DAZMorph sm in ibnks){
var key="\n"+sm.resolvedDisplayName+sm.morphName+"\t";
var malekey="\n"+sm.resolvedDisplayName+sm.morphName+"\n";
var keystart=sm.morphName+"\t";
var keyend="\t"+sm.resolvedDisplayName;
sm.morphValue=0.0f;sm.Reset();
if(!male){
if(femalemaker.Contains(key) && !sm.uid.Contains("Custom/") && !sm.uid.Contains(":/")){
string[] sub1 = Splitstring(keystart,femalemaker);
string[] sub2 = Splitstring(keyend,sub1[1]);
sm.morphValue=float.Parse(sub2[0]);}}
}
	
	
}


ibnks = _characterSelector.maleMorphBank1.morphs.Concat(_characterSelector.maleMorphBank2.morphs);
		


echo3("MADE FUTA!! 111");

			
foreach(DAZMorph sm in ibnks){

var key="\n"+sm.resolvedDisplayName+sm.morphName+"\t";
var malekey="\n"+sm.resolvedDisplayName+sm.morphName+"\n";
var keystart=sm.morphName+"\t";
var keyend="\t"+sm.resolvedDisplayName;
sm.morphValue=sm.jsonFloat.defaultVal;sm.Reset();

echo3("MADE FUTA!! 000");

if(futamake.Contains(key) && !sm.uid.Contains("Custom/") && !sm.uid.Contains(":/")){

string[] sub1 = Splitstring(keystart,futamake);
string[] sub2 = Splitstring(keyend,sub1[1]);

if(male){if(!futalist.Contains(malekey)){sm.morphValue=float.Parse(sub2[0]);}}else{sm.morphValue=float.Parse(sub2[0]);}

}
}
echo3("MADE FUTA!! 222");
Define(force:true);
Refresh();
for (int i=1;i<4;i++){echo3("cooldown-futa "+i.ToString());yield return new WaitForSecondsRealtime(1.0f);}
Refresh();
while(refreshing){}
selectall(false);
if(created && !male){selectall(true);

}else{
foreach(SM sm in _genitalBank){

var key="\n"+sm.Morph.resolvedDisplayName+sm.Morph.morphName+"\t";
var keystart=sm.Morph.morphName+"\t";
var keyend="\t"+sm.Morph.resolvedDisplayName;

if(futamake.Contains(key) && !sm.Morph.uid.Contains("Custom/") && !sm.Morph.uid.Contains(":/") && !sm.Morph.uid.Contains("Sh_Height")){

string[] sub1 = Splitstring(keystart,futamake);
string[] sub2 = Splitstring(keyend,sub1[1]);

sm.Storable.val = sm.Selected = true;

}
}
}

if(!created && !male){
	
yield return new WaitForSecondsRealtime(1.0f);

	for(int i=2;i<102;i+=2){
	sa(i,move:false);
	yield return null;
	}		
	
yield return new WaitForSecondsRealtime(1.0f);

usefemale(_person,true);
Result("CONVERSION TO FUTA COMPLETE - ADJUST PENIS SIZE WITH SLIDER BELOW");
}

}

private T GetChildComponentByName<T>(string name) where T : Component {
        foreach (T component in GetComponentsInChildren<T>(true)) {
            if (component.gameObject.name == name) {
                return component;
            }
        }
        return null;
    }

					private float itime=0;private string ifirst="";private bool initletters=true;private float lettergone=0;private float sublength=0;
					private Dictionary<string,string> isubs = new Dictionary<string,string>();
					private UIDynamicButton[] search=new UIDynamicButton[40];
					private UIDynamicButton[] sub=new UIDynamicButton[5];
					
					private void addletters(string ic,int i){
					for(int ss=0;ss<40;ss++){
					if(search[ss]!=null){RemoveButton(search[ss]);}
						
					}
					//echo3(ic);
					if(isubs.ContainsKey(ic)){//echo3(isubs[ic]);
					string[] isplit=isubs[ic].Split(":"[0]);
					int si=0;int ls=0;
					foreach(string s in isplit){//echo3(i.ToString());
					si++;
					
					var srch=Regex.Replace(s, "(\\[.*\\])|(\".*\")|('.*')|(\\(.*\\))", "");
					var sh=s.Replace("(","").Replace(")","");
					search[si]=setbutton(ui,() => {StartCoroutine(iletters(srch));
					for(int ss=0;ss<5;ss++){if(sub[ss]!=null){RemoveButton(sub[ss]);}}
					for(int ss=0;ss<40;ss++){
					if(search[ss]!=null){RemoveButton(search[ss]);}}
					
					//},sh,sh.Length*7-36,35f,-538,1498+37-(37*i)-37*si);
					},sh,200,45f,-538,1498+35-(37*i)-37*si);
					search[si].buttonColor = verticalscolor;
					search[si].textColor = new Color(1f, 1, 1f);
					search[si].buttonText.fontStyle = FontStyle.Bold;
					search[si].buttonText.fontSize = 24;
					ls=ls+s.Length*7+64;
					int ssss=si;if(si==isplit.Length){ssss-=1;}
					EventTrigger.Entry buttontype = new EventTrigger.Entry();
					buttontype.eventID = EventTriggerType.PointerEnter;
					buttontype.callback.AddListener((eventData) => {
						echo16("coco");
					helptip("iletter");lettergone=0f;
					Color b = new Color(0.43f, 0.43f, 0.5f);
					Color t = new Color(1f, 1, 1f);
					
					for(int ss=0;ss<5;ss++){
					if(sub[ss]!=null){RemoveButton(sub[ss]);}						
					}
					
					EventTrigger.Entry subexit = new EventTrigger.Entry();
					subexit.eventID = EventTriggerType.PointerExit;
					subexit.callback.AddListener((subeventData) => {lettergone=1;});
					
					EventTrigger.Entry subenter = new EventTrigger.Entry();
					subenter.eventID = EventTriggerType.PointerEnter;
					subenter.callback.AddListener((subeventData) => {
						echo16("coco");
						lettergone=0f;});	
					
					int sss=0;
					sub[sss]=setbutton(ui,() => {StartCoroutine(iletters(srch));lettergone=0;},"Search",200,43f,-238,(sublength+1498+35-(37*i)-37*ssss)-37*sss);
					sub[sss].buttonColor = new Color(0.43f, 0.43f, 0.5f);
					sub[sss].textColor = new Color(1f, 1, 1f);
					sub[sss].buttonText.fontStyle = FontStyle.Bold;
					sub[sss].buttonText.fontSize = 24;
					sub[sss].gameObject.AddComponent<EventTrigger>();
					sub[sss].gameObject.GetComponent<EventTrigger>().triggers.Add(subexit);	
					sub[sss].gameObject.GetComponent<EventTrigger>().triggers.Add(subenter);			
					sss++;
					
					sub[sss]=setbutton(ui,() => {Filter(true,false,true,srch.Replace("/",","));lettergone=0;},"Select",200,43f,-238,(sublength+1498+35-(37*i)-37*ssss)-37*sss);
					sub[sss].buttonColor = new Color(0.43f, 0.43f, 0.5f);
					sub[sss].textColor = new Color(1f, 1, 1f);
					sub[sss].buttonText.fontStyle = FontStyle.Bold;
					sub[sss].buttonText.fontSize = 24;
					sub[sss].gameObject.AddComponent<EventTrigger>();
					sub[sss].gameObject.GetComponent<EventTrigger>().triggers.Add(subexit);	
					sub[sss].gameObject.GetComponent<EventTrigger>().triggers.Add(subenter);									
					sss++;
					
					sub[sss]=setbutton(ui,() => {Filter(false,false,true,srch.Replace("/",","),action: "DE");lettergone=0;},"Deselect",200,43f,-238,(sublength+1498+35-(37*i)-37*ssss)-37*sss);
					sub[sss].buttonColor = new Color(0.43f, 0.43f, 0.5f);
					sub[sss].textColor = new Color(1f, 1, 1f);
					sub[sss].buttonText.fontStyle = FontStyle.Bold;
					sub[sss].buttonText.fontSize = 24;
					sub[sss].gameObject.AddComponent<EventTrigger>();
					sub[sss].gameObject.GetComponent<EventTrigger>().triggers.Add(subexit);	
					sub[sss].gameObject.GetComponent<EventTrigger>().triggers.Add(subenter);									
					sss++;					
					
					for(int ss=0;ss<40;ss++){
					if(search[ss]!=null){search[ss].buttonColor=b;search[ss].textColor=t;}}				
					});	
					search[si].gameObject.AddComponent<EventTrigger>();
					search[si].gameObject.GetComponent<EventTrigger>().triggers.Add(buttontype);
					
					EventTrigger.Entry buttonexit = new EventTrigger.Entry();
					buttonexit.eventID = EventTriggerType.PointerExit;
					buttonexit.callback.AddListener((eventData) => {lettergone=1;

					});	
					search[si].gameObject.AddComponent<EventTrigger>();
					search[si].gameObject.GetComponent<EventTrigger>().triggers.Add(buttonexit);					
					
					}	
					//echo3("submenu");
					sublength=0;
					if(search[si].transform.localPosition.y<ibox[lastbox].transform.localPosition.y){
					float l=ibox[lastbox].transform.localPosition.y-search[si].transform.localPosition.y;
					sublength=l;
					for(int ss=0;ss<40;ss++){
					if(search[ss]!=null){
						
						search[ss].transform.localPosition=new Vector2(search[ss].transform.localPosition.x,search[ss].transform.localPosition.y+l);
					
					}}				
						
						
					}
					
					
					}
					}
					private int lastbox=0;
					private IEnumerator iletters(string go="",bool clear=false){
					//echo3(go);
					var lastletter="";var letters="";var added="";int c=0;
					
					var iclick="#:1/2/3/4/5/6/7/8/9/0:!:!!:_:fix/correct:smooth:deep/depth:height/width:up/down:upper:high/low:lower:inner:out:inside/outside:front/rear:left/right:thin/thic:narrow:wide,"+
							"A:age:angle:arm:areola:abdomen/abs/belly:age/aging:ankle:anus/anal,"+
							"B:back:bite:body:bone:bow:belly:breast:breast/chest:breast/chest/nipple/areola:breath:brow:butt/booty:butt/booty/glute,"+
							"C:canine:chest:chest*/breast:center:calf/calves:cheek:chin:cheek/chin:cornea:cornea/pupil/iris:cranium:curve:collar:clit:crotch,"+
							"D:decadent:deep:depth:defined:deltoid:distort,"+
							"E:ear:edge:elbow:elf:extreme:eye:eyes:eye/iris/pupil:eyeball:eyelash:eyebrow,"+
							"F:face:face*:fairy:fang:fat:feet/foot:female:finger:finger/thumb/hand:fitness:fit/build/musc/tone:fill:fix:flesh:flirt:fold:forearm:forehead:front:full,"+
							"G:gastro:gen:genital:gen/vag/pub:glute:glute/butt/booty:goblin:gracilis,"+
							"H:hair:hairline:hamstring:hand:hand/finger/thumb:head:heart:heavy:height:high:hip:hip/thigh:hip/thigh/pelvis:hollow:huge,"+
							"I:illiac:impact:inner:iris:iris/pupil:iris/eye,"+
							"J:jaw:jaw/chin/cheek:jane:jade:jowl,"+
							"K:knee:knuckle,"+
							"L:left:left/right:leg:leg/foot/feet/toe:lip:lips:lip/mouth:long:love:loose:low:lower:labia:labia/majora/minora/mons,"+
							"M:marina:mid:medium:majora:minora:mons:mons/labia/majora/minora:mouth:mouth/lip,"+
							"N:nail:narrow:natural:navel:navel/button:neck:neck/collar:new:nipple:nip:nip/areola:nose:naso:nostril:nos/nostril:nos/nostril/septum:nose tip,"+
							"O:old:old/age:old/young:old/age/young/youth:out:outer:outside,"+
							"P:pain:pear:pelvis:pelvis/hip:pelvis/hip/thigh:perfect:philtrum:pout:puff:puck:pout/puck/puff:preg/pregnant:pretty:proportion:pub:pubic:pub/gen/vag:pupil:pupil/iris:pupil/iris/eye:push:pussy:peehole,"+
							"Q:quick,"+
							"R:rectus:rear:rib:right:ring:roll:rose,"+
							"S:scale/size:shape/shaping:shin:shock:shoulder:short:side:smile:smooth:snarl:snap:squeeze:stephanie:sternum:stomach:straight:strong/strength:surprise,"+
							"T:tall:tara:teen:teen/child/young/old:teeth:teeth/jaw/tongue:temples:thigh:thigh/hip/pelvis:thin:thick:thin/thick/fat:throat:toe:toe/foot/feet:tone:tone/fit/build/musc:tongue:torso:traps,"+
							"U:up:up/down:upper:upper/lower:under:under/over:uterus:uvula,"+
							"V:vagina:vag/pub/gen:vampire;vertical;vianne:victoria:violet:voluptuous,"+
							"W:waist:waist/belly/stomach:wasp:wrist,"+
							"X:xxx:xl,"+
							"Y:young/youth:you/age/old/child,"+
							"Z,"+
							"?"+customfilter; string[] iclicks=iclick.Split(","[0]);
					echo7(customfilter);
					if(go==""){
					
					if(clear){
					for(int i=0;i<iclicks.Length;i++){if(ibox[i]!=null){RemoveButton(ibox[i]);yield return null;}}
					yield break;
					}
					bool wascleared=false;
					for(int i=0;i<iclicks.Length;i++){if(ibox[i]!=null){RemoveButton(ibox[i]);wascleared=true;}
					var ic=iclicks[i];
					if(ic.Contains(":")){string[] ics=ic.Split(":"[0]);
					if(initletters){
					if(isubs.ContainsKey(ics[0])){isubs.Remove(ics[0]);}
					isubs.Add(ics[0],ic.Replace(ics[0]+":",""));
					}
					ic=ics[0];
					}
					if(ic=="?"){lastbox=i;}
					if(!wascleared){yield return null;}
					ibox[i]=setbutton(ui,() => {
					for(int ss=0;ss<40;ss++){
					if(search[ss]!=null){RemoveButton(search[ss]);}}
					
					
					
					StartCoroutine(iletters(ic));
					
					},ic,-50f,35f,-588f,1498-(37*i));
					ibox[i].buttonColor = new Color(0.43f, 0.43f, 0.5f);
					ibox[i].textColor = new Color(1f, 1, 1f);
					ibox[i].buttonText.fontStyle = FontStyle.Bold;
					ibox[i].buttonText.fontSize = 24;
					int iii=i;
					EventTrigger.Entry buttontype = new EventTrigger.Entry();
					buttontype.eventID = EventTriggerType.PointerEnter;
					buttontype.callback.AddListener((eventData) => {helptip("ibox");addletters(ic,iii);lettergone=0f;
					for(int ss=0;ss<5;ss++){
					if(sub[ss]!=null){RemoveButton(sub[ss]);}						
					}
					Color b = new Color(0.43f, 0.43f, 0.5f);
					Color t = new Color(1f, 1, 1f);
					for(int ss=0;ss<40;ss++){
					if(search[ss]!=null){search[ss].buttonColor=b;search[ss].textColor=t;}}					
					});
					
					ibox[i].gameObject.AddComponent<EventTrigger>();
					ibox[i].gameObject.GetComponent<EventTrigger>().triggers.Add(buttontype);					
					EventTrigger.Entry buttonexit = new EventTrigger.Entry();
					buttonexit.eventID = EventTriggerType.PointerExit;
					buttonexit.callback.AddListener((eventData) => {lettergone=1;});	
					ibox[i].gameObject.AddComponent<EventTrigger>();
					ibox[i].gameObject.GetComponent<EventTrigger>().triggers.Add(buttonexit);
					
					}
					initletters=false;
					yield break;
					}
					
					if(go==inactive && lastlevel==ilevel){
					//echo3("trace7");
					foreach (UIDynamicToggle tt in rightUIContent.GetComponentsInChildren<UIDynamicToggle>(true))
					{if(tt==null){yield break;}
					
 					var chk=Morphnum[intparse(tt.name)].resolvedDisplayName+Morphnum[intparse(tt.name)].uid;
					if(chk==ifirst){
						float pos=0-33-tt.transform.localPosition.y;
						rightUIContent.parent.transform.localPosition=new Vector2(rightUIContent.parent.transform.localPosition.x,pos);
						yield break;}									
					}	
						
					}else{if(ilevel==4){setilevel(lastlevel);}lastlevel=ilevel;
					inactive=go;Refresh();while(refreshing){}itime=Time.time;}
					yield return null;
					}
					
								
					
					
					private void findletters(string go=""){var lastletter="";var letters="";var added="";int c=0;
					if(go==""){for(int i=0;i<28;i++){if(letterbox[i]!=null){RemoveButton(letterbox[i]);}}}
					foreach (UIDynamicToggle tt in rightUIContent.GetComponentsInChildren<UIDynamicToggle>(true))
					{if(tt==null){return;}
					
 					var firstletter=tt.label.Substring(0,1).ToUpper();
					if(firstletter!=lastletter && !added.Contains(firstletter+"\n")){
						added+=firstletter+"\n";
					
					//var letter=firstletter+pos.ToString()+"\n";letters+=letter;
					
					if(go!="" && firstletter==go){
						float pos=0-33-tt.transform.localPosition.y;//echo3(pos.ToString());
						rightUIContent.parent.transform.localPosition=new Vector2(rightUIContent.parent.transform.localPosition.x,pos);return;}
					
					if(go=="" && c<28){//echo3("button "+c.ToString());
					letterbox[c]=setbutton(ui,() => {findletters(firstletter);},firstletter,-50f,35f,614f,1498-(37*c));

					EventTrigger.Entry boxenter= new EventTrigger.Entry();
					boxenter.eventID = EventTriggerType.PointerEnter;
					boxenter.callback.AddListener((eventDatasub) => {helptip("letterbox");});
			
					EventTrigger.Entry boxexit= new EventTrigger.Entry();
					boxexit.eventID = EventTriggerType.PointerExit;
					boxexit.callback.AddListener((eventDatasub) => {helptip();});
					
					letterbox[c].transform.gameObject.AddComponent<EventTrigger>();
					letterbox[c].transform.gameObject.GetComponent<EventTrigger>().triggers.Add(boxenter);
					letterbox[c].transform.gameObject.GetComponent<EventTrigger>().triggers.Add(boxexit);
					
					
					letterbox[c].buttonColor = new Color(0.43f, 0.43f, 0.5f);
					letterbox[c].textColor = new Color(1f, 1, 1f);
					letterbox[c].buttonText.fontStyle = FontStyle.Bold;
					letterbox[c].buttonText.fontSize = 24;}
									
					c++;
					}
					lastletter=firstletter;
		
					
					}
					}
					

        private void Merge()
        {
						if(!people){Result("ADD A MODEL FIRST");return;}
            try
            {
		if(float.Parse(_minInputField.text)>float.Parse(_maxInputField.text)){var tmp=_minInputField.text;_minInputField.text=_maxInputField.text;_maxInputField.text=tmp;}
		if(_creatorInputField.text==""){Result("You must choose a creatorname");return;}
                var rndId = processMorphBank();
		if(rndId!=headVerticiesAdjust){Result(rndId);return;}
		morphdir(_creatorInputField.text);
		var cdir=_creatorInputField.text+"/";

               
                var characterSelector = _person.GetComponentInChildren<DAZCharacterSelector>(true);
                if (characterSelector == null)
                    throw new InvalidOperationException("Missing DAZCharacterSelector");

                string morphName = _morphNameInputField.text;

                if (string.IsNullOrEmpty(morphName))
                    morphName = _person.name;

                if (!string.IsNullOrEmpty(_prefixNameInputField.text))
                    morphName = _prefixNameInputField.text+"-"+morphName;

morphName=morphName.Replace(_prefixNameInputField.text+"-"+_prefixNameInputField.text+"-",_prefixNameInputField.text+"-").Replace("--","-");
                //if (!string.IsNullOrEmpty(_prefixNameInputField.text))
                    rndId = "";

                // Main
				var isfullbody="";
                DAZMorph mainMorph = ProcessMorphBank(_mainBank, morphName, morphName);
                if (mainMorph != null)
                {isfullbody=" Genital";

                    string mainMetaPath = characterSelector.morphBank1.autoImportFolder +"/"+cdir+morphName+".vmi";
                    string mainDeltasPath = characterSelector.morphBank1.autoImportFolder +"/"+cdir+morphName+".vmb";

                    var mainMeta = mainMorph.GetMetaJSON();
                    if (mainMeta == null)
                        throw new InvalidOperationException("Failed to generate meta data");
					
var key = "//key"+MD5(_pwInputField.text)+"key//\r\n//\r\n\r\n";
FileManagerSecure.WriteAllText(mainMetaPath,key+mainMeta.ToString().Replace("\",","\",\n").Replace("{","{\n").Replace("}","\n}"));
                    //SaveJSON(mainMeta, mainMetaPath);
                    mainMorph.SaveDeltasToBinaryFile(mainDeltasPath);

			Result("Saved VMI/VMB: "+characterSelector.morphBank1.autoImportFolder +"/"+cdir+morphName);
			//_person.GetComponentInChildren<DAZCharacterSelector>().morphBank1.RebuildAllLookups();
			//_characterSelector.morphBank1.RebuildAllLookups();
			//_characterSelector.morphBank1.Init();
			
	/*			
	sc.SelectController(containingAtom.mainController);
	//
	UITabSelector selector = id.gameObject.GetComponentInChildren<UITabSelector>(true);
	selector.SetActiveTab(mode+"Plugins");
	//
	foreach(var uid in containingAtom.GetStorableIDs())
        {
			
			//echo3("okok");
			//echo3(_person.gameObject.transform.Find("morphsControlFemaleUI").GetComponent<Transform>().ToString()+"ok");//_person.GetComponentInChildren<DAZCharacterSelector>();
			//foreach(Transform tt in _person.GetComponentInChildren<UITabSelector>()){
			//echo3(_person.GetComponentInChildren<UITabSelector>().ToString());
			//}
			
	*/		
                }

                // Genital
				
                DAZMorph genMorph = ProcessMorphBank(_genitalBank, $"{morphName+isfullbody}", $"{morphName} Genital");
                if (genMorph != null)
                {
					
                    string genMetaPath = characterSelector.morphBank2.autoImportFolder +"/"+cdir+morphName+"-Genital.vmi";
                    string genDeltasPath = characterSelector.morphBank2.autoImportFolder +"/"+cdir+morphName+"-Genital.vmb";

                    var genMeta = genMorph.GetMetaJSON();
                    if (genMeta == null)
                        throw new InvalidOperationException("Failed to generate gen meta data");
		    
var key = "//key"+MD5(_pwInputField.text)+"key//\r\n//\r\n\r\n";
FileManagerSecure.WriteAllText(genMetaPath,key+genMeta.ToString().Replace("\",","\",\n").Replace("{","{\n").Replace("}","\n}"));
                    //SaveJSON(genMeta, genMetaPath);
                    genMorph.SaveDeltasToBinaryFile(genDeltasPath);

                    Result("Saved VMI/VMB: "+characterSelector.morphBank2.autoImportFolder +"\\"+cdir+morphName+"-Genital");
                }
            }
            catch (Exception e)
            {
              SuperController.LogError("Exception caught: " + e);
            }
        }


		
		private bool copypaste=false;
		private IEnumerator Headpaste(bool body=false,bool load=false){
							if(!people){Result("ADD A MODEL FIRST");yield break;}	
		if(load){for (int i=1;i<4;i++){
			if(SuperController.singleton.loadingUI.gameObject.active || SuperController.singleton.loadingIcon.gameObject.active){i--;}
			echo3("startup "+i.ToString());yield return new WaitForSecondsRealtime(1.0f);}}
		copypaste=true;
		yield return Head(body,true);
		while(copypaste){}
		copypaste=true;
		int c=0;
		echo3("trace1");
		foreach (DAZMorph m in _characterSelector.femaleMorphBank1.morphs.Concat(_characterSelector.maleMorphBank1.morphs).Concat(_characterSelector.femaleMorphBank2.morphs.Concat(_characterSelector.maleMorphBank2.morphs)))
        {
		var key=m.uid+m.resolvedDisplayName;
		if(hmorphcopy.ContainsKey(key) || bmorphcopy.ContainsKey(key)){c++;
				if(hmorphcopy.ContainsKey(key)){m.morphValue=hmorphcopy[key];}else{m.morphValue=bmorphcopy[key];}
		}
		//else{
						if(hmorphoriginal.ContainsKey(key) && !hmorphcopy.ContainsKey(key)){
						m.morphValue=0.00123456789f;
						//m.Reset();
						}
						if(bmorphoriginal.ContainsKey(key) && !bmorphcopy.ContainsKey(key)){
						m.morphValue=0.00123456789f;
						//m.Reset();
						}

		//}
		}
		//echo3("trace2");
		for (int i=1;i<3;i++){echo3("cooldown-a "+i.ToString());
		if(SuperController.singleton.loadingUI.gameObject.active || SuperController.singleton.loadingIcon.gameObject.active){i--;}
		yield return new WaitForSecondsRealtime(1.0f);}
		Refresh();
		while(refreshing){}
		for (int i=1;i<4;i++){echo3("cooldown-b "+i.ToString());
		if(SuperController.singleton.loadingUI.gameObject.active || SuperController.singleton.loadingIcon.gameObject.active){i--;}
		yield return new WaitForSecondsRealtime(1.0f);}
		//echo3("trace3");//ERROR
		
		morphvalue.Clear();//sa(100);pslider.slider.value=100f;
		horigj=0f;hcopyj=100f;

		//while(hcopyslider==null && horigslider==null){}
		hcopyslider.slider.value=100f;
		horigslider.slider.value=0f;
		JSONStorableFloat hfake = new JSONStorableFloat("hfake", 100f, hslidecombo, 0f, 100f);
		hslidecombo(hfake);
		
		borigj=0f;bcopyj=100f;

		//while(bcopyslider==null && borigslider==null){}
		bcopyslider.slider.value=100f;
		borigslider.slider.value=0f;
		JSONStorableFloat bfake = new JSONStorableFloat("bfake", 100f, bslidecombo, 0f, 100f);
		bslidecombo(bfake);
		var status="fail";
		float opos=bg.transform.localPosition.y;
		for (int i=0;i<30;i++){
		bg.transform.localPosition=new Vector2(bg.transform.localPosition.x,bg.transform.localPosition.y-0.0001f*(30-i));
		}bg.enabled=false;
		for (int i=0;i<102;i++){
		bg.sortingOrder=1;
		bg.enabled=true;
		if(i<31){
		bggroup.alpha+=0.033f;; //echo3(bggroup.alpha.ToString()+" : "+bg.enabled.ToString());
		bg.transform.localPosition=new Vector2(bg.transform.localPosition.x,bg.transform.localPosition.y+0.0001f*(30-i));
		}
		
		status="success";	
		comboslider.slider.value=i;
		
		if(comboslider.slider.value==100){break;}
		yield return new WaitForSecondsRealtime(0.005f);}
		bggroup.alpha=1f;
		echo3(status);
		copypaste=false;		

		yield return null;
		}


private IEnumerator closecombo(){
		for (int i=0;i<30;i++){
		bggroup.alpha-=0.033f;
		bg.transform.localPosition=new Vector2(bg.transform.localPosition.x,bg.transform.localPosition.y-(0.0001f*i));
		yield return new WaitForSecondsRealtime(0.005f);
		}
	
	bggroup.alpha=0;
	bg.enabled=false;
	bg.transform.localPosition=new Vector2(bg.transform.localPosition.x,bgpos);
	yield return null;
}

private UIDynamicTextField slidefiller;private UIDynamicTextField _headcopy;UIDynamicTextField _headorig;UIDynamicTextField _bodycopy;UIDynamicTextField _bodyorig;

private void hcopyslide(){
	
float w=1752;float x=-18f;float adjustx=0;float y=729f;

slidefiller=textbackground(bg.transform,w,x,adjustx,y+15);slidefiller.height=230;
Color resultcolor=Color.black;resultcolor.a=0.98f;
slidefiller.backgroundColor = resultcolor;

var hcopy100=setbutton(bg,() => {hcopyslider.slider.value=100;horigslider.slider.value=0;},"100>",-4f,40f,983,678f);
hcopy100.buttonColor = new Color(0.6f, 0.57f, 0.62f);
hcopy100.buttonText.fontSize = 30;

var horig100=setbutton(bg,() => {hcopyslider.slider.value=0;horigslider.slider.value=100;},"<100",-4f,40f,788,678f);
horig100.buttonColor = new Color(0.6f, 0.57f, 0.62f);
horig100.buttonText.fontSize = 30;

var h5050=setbutton(bg,() => {hcopyslider.slider.value=50;horigslider.slider.value=50;},"50/50",-4f,40f,886,678f);
h5050.buttonColor = new Color(0.6f, 0.57f, 0.62f);
h5050.buttonText.fontSize = 30;
		
var bcopy100=setbutton(bg,() => {bcopyslider.slider.value=100;borigslider.slider.value=0;},"100>",-4f,40f,983,720.5f);
bcopy100.buttonColor = new Color(0.6f, 0.57f, 0.62f);
bcopy100.buttonText.fontSize = 30;

var borig100=setbutton(bg,() => {bcopyslider.slider.value=0;borigslider.slider.value=100;},"<100",-4f,40f,788,720.5f);
borig100.buttonColor = new Color(0.6f, 0.57f, 0.62f);
borig100.buttonText.fontSize = 30;

var b5050=setbutton(bg,() => {bcopyslider.slider.value=50;borigslider.slider.value=50;},"50/50",-4f,40f,886,720.5f);
b5050.buttonColor = new Color(0.6f, 0.57f, 0.62f);
b5050.buttonText.fontSize = 30;

var finish=setbutton(bg,() => {StartCoroutine(closecombo());},"FINISH",100f,56f,846,820.5f);
finish.buttonColor = new Color(0.0f, 0.3f, 0f);
finish.textColor = Color.green;
finish.buttonText.fontSize = 36;


if(syncb==null){syncb=setbutton(bg,() => {
	if(bsync){syncb.buttonColor = new Color(0.4f, 0.37f, 0.42f);syncb.textColor = new Color(0.9f, 0.67f, 0.62f);}else{syncb.textColor = new Color(0.7f, 1.2f, 0.92f);syncb.buttonColor = new Color(0.2f, 0.9f, 0.32f);}
	bsync=!bsync;
	},"SYNC",10f,40f,17,720.5f);
	if(!bsync){syncb.buttonColor = new Color(0.4f, 0.37f, 0.42f);syncb.textColor = new Color(0.9f, 0.67f, 0.62f);}else{syncb.textColor = new Color(0.7f, 1.2f, 0.92f);syncb.buttonColor = new Color(0.2f, 0.9f, 0.32f);}

syncb.buttonText.fontSize = 30;

synch=setbutton(bg,() => {
	if(hsync){synch.buttonColor = new Color(0.4f, 0.37f, 0.42f);synch.textColor = new Color(0.9f, 0.67f, 0.62f);}else{synch.textColor = new Color(0.7f, 1.2f, 0.92f);synch.buttonColor = new Color(0.2f, 0.9f, 0.32f);}
	hsync=!hsync;
},"SYNC",10f,40f,17,678f);
	if(!hsync){synch.buttonColor = new Color(0.4f, 0.37f, 0.42f);synch.textColor = new Color(0.9f, 0.67f, 0.62f);}else{synch.textColor = new Color(0.7f, 1.2f, 0.92f);synch.buttonColor = new Color(0.2f, 0.9f, 0.32f);}

synch.buttonText.fontSize = 30;
}

_headcopy=textfield(bg,200,x+1096,adjustx,y-62,-8);
_headcopy.UItext.alignment = TextAnchor.UpperLeft;
_headcopy.UItext.lineSpacing = 0;
_headcopy.backgroundColor = Color.clear;
_headcopy.UItext.color = new Color(0.8f,0.6f,0.3f);
_headcopy.text="OLD HEAD";
_headcopy.UItext.fontSize=30;
_headcopy.UItext.fontStyle=FontStyle.Bold;

_bodycopy=textfield(bg,200,x+1096,adjustx,y-19,-8);
_bodycopy.UItext.alignment = TextAnchor.UpperLeft;
_bodycopy.UItext.lineSpacing = 0;
_bodycopy.backgroundColor = Color.clear;
_bodycopy.UItext.color = new Color(0.8f,0.6f,0.3f);
_bodycopy.text="OLD BODY";
_bodycopy.UItext.fontSize=30;
_bodycopy.UItext.fontStyle=FontStyle.Bold;

_headorig=textfield(bg,200,x+506,adjustx,y-62,-8);
_headorig.UItext.alignment = TextAnchor.UpperRight;
_headorig.UItext.lineSpacing = 0;
_headorig.backgroundColor = Color.clear;
_headorig.UItext.color = new Color(0.3f,0.8f,0.4f);
_headorig.text="NEW HEAD";
_headorig.UItext.fontSize=30;
_headorig.UItext.fontStyle=FontStyle.Bold;

_bodyorig=textfield(bg,200,x+506,adjustx,y-19,-8);
_bodyorig.UItext.alignment = TextAnchor.UpperRight;
_bodyorig.UItext.lineSpacing = 0;
_bodyorig.backgroundColor = Color.clear;
_bodyorig.UItext.color = new Color(0.3f,0.8f,0.4f);
_bodyorig.text="NEW BODY";
_bodyorig.UItext.fontSize=30;
_bodyorig.UItext.fontStyle=FontStyle.Bold;

if(hcopyslider!=null){RemoveSlider(hcopyslider);}
JSONStorableFloat minfloat = new JSONStorableFloat("hcopy", 100f, hslidecombo, -100f, 200f);
hcopyslider = CreateSliderui(minfloat);
hcopyslider.slider.wholeNumbers = true;
hcopyslider.transform.SetParent(bg.transform,false);
transui2(hcopyslider.transform,732,0,1386,648f);

Color slidecolor=new Color(0.6f,0.57f,0.62f);slidecolor.a=0.43f;
hcopyslider.transform.Find("Slider").GetComponent<Image>().color = slidecolor;
hcopyslider.sliderValueTextFromFloat.UIInputField.textComponent.fontSize=18;
hcopyslider.sliderValueTextFromFloat.UIInputField.readOnly=true;
GameObject.Destroy(hcopyslider.sliderValueTextFromFloat.gameObject);
hcopyslider.slider.fillRect.transform.SetParent(hide.transform, false);
hcopyslider.quickButtonsEnabled = false;
hcopyslider.rangeAdjustEnabled = false;
hcopyslider.defaultButtonEnabled = false;
hcopyslider.slider.wholeNumbers = true;
GameObject.Destroy(hcopyslider.quickButtonsGroup.gameObject);
GameObject.Destroy(hcopyslider.defaultButton.gameObject);
GameObject.Destroy(hcopyslider.rangeAdjustGroup.gameObject);
GameObject.Destroy(hcopyslider.labelText.gameObject);
GameObject.Destroy(hcopyslider.quickButtonM1.gameObject);
GameObject.Destroy(hcopyslider.quickButtonM2.gameObject);
GameObject.Destroy(hcopyslider.quickButtonM3.gameObject);
GameObject.Destroy(hcopyslider.quickButtonM4.gameObject);
GameObject.Destroy(hcopyslider.quickButtonP1.gameObject);
GameObject.Destroy(hcopyslider.quickButtonP2.gameObject);
GameObject.Destroy(hcopyslider.quickButtonP3.gameObject);
GameObject.Destroy(hcopyslider.quickButtonP4.gameObject);
}

private UIDynamicSlider comboslider;private UIDynamicButton synch;private UIDynamicButton syncb;private bool bsync=true;private bool hsync=true;
private void comboslide(){

if(comboslider!=null){RemoveSlider(comboslider);}
JSONStorableFloat minfloat = new JSONStorableFloat("combo", 0f, slidecombo, 0f, 100f);
comboslider = CreateSliderui(minfloat);
comboslider.slider.wholeNumbers = true;
comboslider.transform.SetParent(bg.transform,false);
transui2(comboslider.transform,1796,0,854,737f);

Color slidecolor=new Color(0.6f,0.57f,0.62f);slidecolor.a=0.43f;
comboslider.transform.Find("Slider").GetComponent<Image>().color = slidecolor;
comboslider.sliderValueTextFromFloat.UIInputField.textComponent.fontSize=18;
comboslider.sliderValueTextFromFloat.UIInputField.readOnly=true;
GameObject.Destroy(comboslider.sliderValueTextFromFloat.gameObject);
comboslider.slider.fillRect.transform.SetParent(hide.transform, false);
comboslider.quickButtonsEnabled = false;
comboslider.rangeAdjustEnabled = false;
comboslider.defaultButtonEnabled = false;
comboslider.slider.wholeNumbers = true;
GameObject.Destroy(comboslider.quickButtonsGroup.gameObject);
GameObject.Destroy(comboslider.defaultButton.gameObject);
GameObject.Destroy(comboslider.rangeAdjustGroup.gameObject);
GameObject.Destroy(comboslider.labelText.gameObject);
GameObject.Destroy(comboslider.quickButtonM1.gameObject);
GameObject.Destroy(comboslider.quickButtonM2.gameObject);
GameObject.Destroy(comboslider.quickButtonM3.gameObject);
GameObject.Destroy(comboslider.quickButtonM4.gameObject);
GameObject.Destroy(comboslider.quickButtonP1.gameObject);
GameObject.Destroy(comboslider.quickButtonP2.gameObject);
GameObject.Destroy(comboslider.quickButtonP3.gameObject);
GameObject.Destroy(comboslider.quickButtonP4.gameObject);
}


private void slidecombo(JSONStorableFloat jf){
	
horigslider.slider.value=borigslider.slider.value=jf.val;
hcopyslider.slider.value=bcopyslider.slider.value=100-jf.val;	
}


private void horigslide(){
	
if(horigslider!=null){RemoveSlider(horigslider);}
JSONStorableFloat minfloat = new JSONStorableFloat("horig", 0f, hslidecombo, -100f, 200f);
horigslider = CreateSliderui(minfloat);
horigslider.slider.wholeNumbers = true;
horigslider.transform.SetParent(bg.transform,false);
transui2(horigslider.transform,676,0,407,648f);

Color slidecolor=new Color(0.6f,0.57f,0.62f);slidecolor.a=0.43f;
horigslider.transform.Find("Slider").GetComponent<Image>().color = slidecolor;
horigslider.sliderValueTextFromFloat.UIInputField.textComponent.fontSize=18;
horigslider.sliderValueTextFromFloat.UIInputField.readOnly=true;
GameObject.Destroy(horigslider.sliderValueTextFromFloat.gameObject);
horigslider.slider.fillRect.transform.SetParent(hide.transform, false);
horigslider.quickButtonsEnabled = false;
horigslider.rangeAdjustEnabled = false;
horigslider.defaultButtonEnabled = false;
horigslider.slider.wholeNumbers = true;
GameObject.Destroy(horigslider.quickButtonsGroup.gameObject);
GameObject.Destroy(horigslider.defaultButton.gameObject);
GameObject.Destroy(horigslider.rangeAdjustGroup.gameObject);
GameObject.Destroy(horigslider.labelText.gameObject);
GameObject.Destroy(horigslider.quickButtonM1.gameObject);
GameObject.Destroy(horigslider.quickButtonM2.gameObject);
GameObject.Destroy(horigslider.quickButtonM3.gameObject);
GameObject.Destroy(horigslider.quickButtonM4.gameObject);
GameObject.Destroy(horigslider.quickButtonP1.gameObject);
GameObject.Destroy(horigslider.quickButtonP2.gameObject);
GameObject.Destroy(horigslider.quickButtonP3.gameObject);
GameObject.Destroy(horigslider.quickButtonP4.gameObject);
}

private void bcopyslide(){
if(bcopyslider!=null){RemoveSlider(bcopyslider);}
JSONStorableFloat minfloat = new JSONStorableFloat("bcopy", 100f, bslidecombo, -100f, 200f);
bcopyslider = CreateSliderui(minfloat);
bcopyslider.slider.wholeNumbers = true;
bcopyslider.transform.SetParent(bg.transform,false);
transui2(bcopyslider.transform,732,0,1386,692f);

Color slidecolor=new Color(0.6f,0.57f,0.62f);slidecolor.a=0.43f;
bcopyslider.transform.Find("Slider").GetComponent<Image>().color = slidecolor;
bcopyslider.sliderValueTextFromFloat.UIInputField.textComponent.fontSize=18;
bcopyslider.sliderValueTextFromFloat.UIInputField.readOnly=true;
GameObject.Destroy(bcopyslider.sliderValueTextFromFloat.gameObject);
bcopyslider.slider.fillRect.transform.SetParent(hide.transform, false);
bcopyslider.quickButtonsEnabled = false;
bcopyslider.rangeAdjustEnabled = false;
bcopyslider.defaultButtonEnabled = false;
bcopyslider.slider.wholeNumbers = true;
GameObject.Destroy(bcopyslider.quickButtonsGroup.gameObject);
GameObject.Destroy(bcopyslider.defaultButton.gameObject);
GameObject.Destroy(bcopyslider.rangeAdjustGroup.gameObject);
GameObject.Destroy(bcopyslider.labelText.gameObject);
GameObject.Destroy(bcopyslider.quickButtonM1.gameObject);
GameObject.Destroy(bcopyslider.quickButtonM2.gameObject);
GameObject.Destroy(bcopyslider.quickButtonM3.gameObject);
GameObject.Destroy(bcopyslider.quickButtonM4.gameObject);
GameObject.Destroy(bcopyslider.quickButtonP1.gameObject);
GameObject.Destroy(bcopyslider.quickButtonP2.gameObject);
GameObject.Destroy(bcopyslider.quickButtonP3.gameObject);
GameObject.Destroy(bcopyslider.quickButtonP4.gameObject);
}

private void borigslide(){
if(borigslider!=null){RemoveSlider(borigslider);}
JSONStorableFloat minfloat = new JSONStorableFloat("borig", 0f, bslidecombo, -100f, 200f);
borigslider = CreateSliderui(minfloat);
borigslider.slider.wholeNumbers = true;
borigslider.transform.SetParent(bg.transform,false);
transui2(borigslider.transform,676,0,407,692f);

Color slidecolor=new Color(0.6f,0.57f,0.62f);slidecolor.a=0.43f;
borigslider.transform.Find("Slider").GetComponent<Image>().color = slidecolor;
borigslider.sliderValueTextFromFloat.UIInputField.textComponent.fontSize=18;
borigslider.sliderValueTextFromFloat.UIInputField.readOnly=true;
GameObject.Destroy(borigslider.sliderValueTextFromFloat.gameObject);
borigslider.slider.fillRect.transform.SetParent(hide.transform, false);
borigslider.quickButtonsEnabled = false;
borigslider.rangeAdjustEnabled = false;
borigslider.defaultButtonEnabled = false;
borigslider.slider.wholeNumbers = true;
GameObject.Destroy(borigslider.quickButtonsGroup.gameObject);
GameObject.Destroy(borigslider.defaultButton.gameObject);
GameObject.Destroy(borigslider.rangeAdjustGroup.gameObject);
GameObject.Destroy(borigslider.labelText.gameObject);
GameObject.Destroy(borigslider.quickButtonM1.gameObject);
GameObject.Destroy(borigslider.quickButtonM2.gameObject);
GameObject.Destroy(borigslider.quickButtonM3.gameObject);
GameObject.Destroy(borigslider.quickButtonM4.gameObject);
GameObject.Destroy(borigslider.quickButtonP1.gameObject);
GameObject.Destroy(borigslider.quickButtonP2.gameObject);
GameObject.Destroy(borigslider.quickButtonP3.gameObject);
GameObject.Destroy(borigslider.quickButtonP4.gameObject);
}

private float hcopyj = 0;
private float horigj = 0;
private float bcopyj = 0;
private float borigj = 0;

private UIDynamicSlider hcopyslider;
private UIDynamicSlider horigslider;
private UIDynamicSlider bcopyslider;
private UIDynamicSlider borigslider;


		
		private void hslidecombo(JSONStorableFloat jf) {
		try  {
			if(jf.name!="hfake"){if(jf.name=="horig"){horigj=jf.val;}else{hcopyj=jf.val;}}
			if(hsync){if(jf.name=="horig"){hcopyslider.slider.value=100-jf.val;}else{horigslider.slider.value=100-jf.val;}}
			_headorig.text="NEW HEAD "+horigj.ToString()+"%";
			_headcopy.text=hcopyj.ToString()+"% OLD HEAD";
            foreach (SM sm in _mainBank.Concat(_genitalBank))
			{
			var key=sm.Morph.uid+sm.Morph.resolvedDisplayName;
			float cval=0f;float oval=0f;
			if(hmorphoriginal.ContainsKey(key)){oval=hmorphoriginal[key];}
			if(hmorphcopy.ContainsKey(key)){cval=hmorphcopy[key];}
			float chk=cval+oval;

			if(chk!=0){//merging=true;mergeslide=true;//error
		    float newval=((oval/100)*horigj)+((cval/100)*hcopyj);
			sm.Morph.morphValue=newval;
			
			}					
			}
			}
			            catch (Exception e)
            {
                SuperController.LogError("Exception caught: " + e);//ERROR paste function needs to do what slideall does to morphlist.
            }

		}


		private void bslidecombo(JSONStorableFloat jf) {
		try  {
			if(jf.name!="bfake"){if(jf.name=="borig"){borigj=jf.val;}else{bcopyj=jf.val;}}
			if(bsync){if(jf.name=="borig"){bcopyslider.slider.value=100-jf.val;}else{borigslider.slider.value=100-jf.val;}}
			_bodyorig.text="NEW BODY "+borigj.ToString()+"%";
			_bodycopy.text=bcopyj.ToString()+"% OLD BODY";
			
            foreach (SM sm in _mainBank.Concat(_genitalBank))
			{
			var key=sm.Morph.uid+sm.Morph.resolvedDisplayName;
			float cval=0f;float oval=0f;
			if(bmorphoriginal.ContainsKey(key)){oval=bmorphoriginal[key];}
			if(bmorphcopy.ContainsKey(key)){cval=bmorphcopy[key];}
			float chk=cval+oval;

			if(chk!=0){//merging=true;mergeslide=true;//error
		    float newval=((oval/100)*borigj)+((cval/100)*bcopyj);
			sm.Morph.morphValue=newval;
			}					
			}
			}
			            catch (Exception e)
            {
                SuperController.LogError("Exception caught: " + e);
            }

		}
		
		private bool fading=false;
		private bool fadingb=false;
		
private IEnumerator removegbox(bool change, string mode="none",float delay=0f){fadingb=true;
	if(gboxon){
		
		fadingb=false;
		fading=false;
		
		yield return null;}
		
yield return new WaitForSecondsRealtime(delay);
yield return new WaitForSecondsRealtime(0.01f);
Color b= modelmenucolor;
Color t= modelmenutext;

					if(change){
b= skinmenucolor;
t=skinmenutext;
					}

for (int i=1;i<10;i++){
	if(gboxon){i=10;break;}

					t.a-=0.1f;
					b.a-=0.1f;

	
	for (int p=1;p<200;p++){
	if(gbox[p]!=null){
	gbox[p].buttonColor=b;	
	gbox[p].textColor=t;	
	}}
	yield return new WaitForSecondsRealtime(0.00005f);
	}
	if(!gboxon){

	for (int p=1;p<200;p++){
	if(gbox[p]!=null){
	RemoveButton(gbox[p]);
	}}
	ui.sortingOrder=uilayer;
	}
	fadingb=false;
	fading=false;
	yield return null;
}

private bool addskinperson;
private string cuatag="<color=#cua></color>";
private IEnumerator removepbox(bool change, string mode="none", float delay=0f){fading=true;
	if(pboxon){fading=false;yield return null;}
	//if(addskinperson){fading=false;yield return null;}
	
	
if(delay!=0f){yield return new WaitForSecondsRealtime(delay);}
else{
yield return new WaitForSecondsRealtime(0.02f);
}
Color b= modelmenucolor;
Color t= modelmenutext;



					if(change){
b= skinmenucolor;
t=skinmenutext;
					}

for (int i=1;i<10;i++){
	if(pboxon){i=10;break;}

					t.a-=0.1f;
					b.a-=0.1f;
	
	for (int p=1;p<200;p++){
	

	if(pbox[p]!=null){
	
	if(pbox[p].label.Contains(cuatag) && vrkeys.gameObject.active){continue;}
	pbox[p].buttonColor=b;	
	pbox[p].textColor=t;	
	}}
	yield return new WaitForSecondsRealtime(0.00005f);
	}
	if(!pboxon){
	cuaon=false;StartCoroutine(hidecuas(0));
	for (int p=1;p<200;p++){
	if(pbox[p]!=null){
	if(pbox[p].label.Contains(cuatag) && vrkeys.gameObject.active){continue;}
	RemoveButton(pbox[p]);
	}}
	ui.sortingOrder=uilayer;
	}
	fading=false;
	yield return null;
}

private bool processing = false;
private bool pboxon=false;
private bool gboxon=false;
private IEnumerator Head(bool body=false,bool target=false,bool onlyselect=false, bool invert=false, bool load=false,bool subtract=false){
				if(!people){Result("ADD A MODEL FIRST");yield break;}
				copypaste=true;
				echo3("COPYING");
				//while(refreshing==true){}
				//for (int i=1;i<=3;i++){echo3("cooldown1 "+i.ToString());if(SuperController.singleton.loadingUI.gameObject.active || SuperController.singleton.loadingIcon.gameObject.active){i--;}yield return new WaitForSecondsRealtime(1.0f);}
                VertexFilter vertexFilter = new VertexFilter() {vertecies = _headVerticies, boneNames = _headBoneNames };
                Findvertex(vertexFilter,body,target,onlyselect,invert,subtract);
				while(processing==true){}
				//for (int i=1;i<=3;i++){if(SuperController.singleton.loadingUI.gameObject.active || SuperController.singleton.loadingIcon.gameObject.active){i--;}echo3("cooldown2 "+i.ToString());yield return new WaitForSecondsRealtime(1.0f);}
				echo3("COPY COMPLETE");
				if(load){for (int i=1;i<4;i++){if(SuperController.singleton.loadingUI.gameObject.active || SuperController.singleton.loadingIcon.gameObject.active){i--;}
					echo3("loading "+i.ToString());yield return new WaitForSecondsRealtime(1.0f);}}
				copypaste=false;
		yield return null;
		}


        private void Findvertex(VertexFilter vertexFilter = null,bool body=false,bool target=false, bool onlyselect=false, bool invert=false,bool subtract=false)
        {var selectlist="";
			try {
			processing=true;//echo3(body.ToString());
		if(target){
			hmorphoriginal.Clear();hmorphoriginal = new Dictionary<string,float>();
			bmorphoriginal.Clear();bmorphoriginal = new Dictionary<string,float>();
			}else{hmorphcopy.Clear();hmorphcopy = new Dictionary<string,float>();
				  bmorphcopy.Clear();bmorphcopy = new Dictionary<string,float>();}

				VertexDeltas vertexDeltas = new VertexDeltas();
                Formulas formulas = new Formulas();var l="";var e="";int n=0;
//int cccc = 0;

var bank=_characterSelector.femaleMorphBank1.morphs;
if(!femalebank){bank=_characterSelector.maleMorphBank1.morphs;}

                foreach (DAZMorph sm in bank)
                {//cccc++;
				if(sm.active && !automorphs.Contains("["+sm.morphName+"]")){//echo3("trace "+cccc.ToString());
				bool isface=false;bool select=body;
		//sm.Storable.val = sm.Selected = body;


		    isface=true;
                    if (sm.deltas != null)
                    {
                        foreach (DAZMorphVertex delta in sm.deltas)
                        {
                            if(vertexFilter != null)
                            {
                                if (!vertexFilter.Contains(delta.vertex))
                                { 

                                  isface=false;
				    
                                }
                            }else{isface=false;}
                        }
                    }else{isface=false;}

string[] falsehead = ("back<pear <breast<hip<chest<arm<vag<ankle<hand<nippl<areol<pelv<should<anus<anal<penis<scrotu<uvula<majora<minora<mons <sternu<rib<lats<bicep<belly<abs<abdo<waist<knee<shin <foot<feet<finger<grasp<thumb<elbo<glut<thigh<butt<body<neck").Split("<"[0]);
string[] falsebody = ("AA_<eye<brow<head<jowl<laugh<smile<teeth<jaw<lash<lip<mouth<chin<cheek<ears<ear <lobe<nose<nostr<lobe<philtr<tongu<aa<face").Split("<"[0]);
string[] excludefalsebody = ("rear<forearm<fear").Split("<"[0]);

		if(isface){
//echo3(sm.resolvedDisplayName);


bool issubface=!body;//true



bool changeit=false;string ch="";
foreach(string s in falsehead){
if(sm.resolvedDisplayName.ToUpper().Contains(s.ToUpper())){
changeit=true;ch=s;
}
}

if(changeit){
	
echo5("HAS HEAD ("+ch+") "+sm.resolvedDisplayName);
issubface=!issubface;
}



//if(issubface){ // Causality tried to fuck me, again

//sm.Storable.val = sm.Selected = issubface;
select=issubface;

//} // but I fucked her - again - bareback like the nazislut she indeed is.



}else{

bool issubface=body;
bool changeit=false;string ch="";
foreach(string s in falsebody){
if(sm.resolvedDisplayName.ToUpper().Contains(s.ToUpper())){
changeit=true;ch=s;
foreach(string ss in falsehead){
	
if(sm.resolvedDisplayName.ToUpper().Contains(ss.ToUpper())){
changeit=false;
}

}

}
}

if(changeit){
	
	echo5("HAS HEAD ("+ch+") "+sm.resolvedDisplayName);
issubface=!issubface;
}

//sm.Storable.val = sm.Selected = issubface;
select=issubface;
}

var key=sm.uid+sm.resolvedDisplayName;

if(onlyselect){

	if(select){selectlist+=key+"\n";}
	
}else{
	if(select == true){

	if(target){ //add to face
	if(!hmorphoriginal.ContainsKey(key)){hmorphoriginal.Add(key,sm.appliedValue);}
	}else{
	if(!hmorphcopy.ContainsKey(key)){hmorphcopy.Add(key,sm.appliedValue);}
	}
	
	}else{ //add to body
	
	if(target){
	if(!bmorphoriginal.ContainsKey(key)){bmorphoriginal.Add(key,sm.appliedValue);}
	}else{
	if(!bmorphcopy.ContainsKey(key)){bmorphcopy.Add(key,sm.appliedValue);
	}
	}
	
	} //end else
}//end if onlyselect
	
	
	}
}
//echo3("semi");int ccc=0;

if(onlyselect){
		int dsel=0;var sstatus="SELECTED";int tsel=0;
           	foreach (SM sm in _mainBank.Concat(_genitalBank))
			{var key=sm.Morph.uid+sm.Morph.resolvedDisplayName+"\n";
			if(subtract){
			sstatus="DESELECTED";
			if(selectlist.Contains(key)==!invert){
				if(sm.Selected){dsel++;
				sm.Storable.val = sm.Selected = false;}
				
				}
			}else{
			if(selectlist.Contains(key)){if(sm.Selected==invert){sm.Storable.val = sm.Selected = !invert;if(!invert){dsel++;}}}else{if(sm.Selected==!invert){sm.Storable.val = sm.Selected = invert;if(invert){dsel++;}}}}
				if(sm.Selected==true){tsel++;}
			}
	Result(sstatus+" "+dsel+" MORPHS - TOTAL SELECTED: "+tsel);
	processing=false;
	
	return;
}


var gbank=_characterSelector.femaleMorphBank2.morphs;
if(!femalebank){gbank=_characterSelector.maleMorphBank2.morphs;}

           	foreach (DAZMorph sm in gbank)
			{
			if(sm.active && !automorphs.Contains("["+sm.morphName+"]"))
			{
				
				
				var key=sm.uid+sm.resolvedDisplayName;
				if(target){
					
				if(!bmorphoriginal.ContainsKey(key)){bmorphoriginal.Add(key,sm.appliedValue);}
						//USE sm.morphValue=0.01f;
						//USE sm.Reset();
						//USE sm.active=false;
						//USE sm.visible=false;
						//USE sm.Init();		
				}else{if(!bmorphcopy.ContainsKey(key)){bmorphcopy.Add(key,sm.appliedValue);}
				
				}
				
				
			}
			}
				
				
morphvalue.Clear();
processing=false;
         return;
		 
			}
			
			            catch (Exception e)
            {
                SuperController.LogError("Exception caught: " + e);
            }
        }


        private void Flip()
        {
                foreach (SM sm in _mainBank.Concat(_genitalBank)){
				sm.Storable.val = sm.Selected = !sm.Selected;
				}}

        private void Split()
        {
			if(!people){Result("ADD A MODEL FIRST");return;}
            try
            {

		if(float.Parse(_minInputField.text)>float.Parse(_maxInputField.text)){var tmp=_minInputField.text;_minInputField.text=_maxInputField.text;_maxInputField.text=tmp;}
                //use a more usefull date of creation as random instead of guid
                var rndId = processMorphBank();echo2(rndId);
		if(rndId!=headVerticiesAdjust){Result(rndId);return;}
		if(_creatorInputField.text==""){Result("You must choose a creatorname");return;}
		morphdir(_creatorInputField.text);
		var cdir=_creatorInputField.text+"/";
          

                var characterSelector = _person.GetComponentInChildren<DAZCharacterSelector>(true);
                if (characterSelector == null)
                    throw new InvalidOperationException("Missing DAZCharacterSelector");

                string morphName = _morphNameInputField.text;
                if (string.IsNullOrEmpty(morphName))
                    morphName = _person.name;

                if (!string.IsNullOrEmpty(_prefixNameInputField.text))
                    morphName = _prefixNameInputField.text+"-"+morphName;

morphName=morphName.Replace(_prefixNameInputField.text+"-"+_prefixNameInputField.text+"-",_prefixNameInputField.text+"-").Replace("--","-");
                VertexFilter vertexFilter = new VertexFilter() { vertecies = _headVerticies, boneNames = _headBoneNames };

                // Head
                string tempName = morphName + "-Head";
                DAZMorph mainMorph = ProcessMorphBank(_mainBank, tempName, tempName, vertexFilter);
                if (mainMorph != null)
                {
                    string mainMetaPath = characterSelector.morphBank1.autoImportFolder +"/"+cdir+tempName+".vmi";
                    string mainDeltasPath = characterSelector.morphBank1.autoImportFolder +"/"+cdir+tempName+".vmb";

                    var mainMeta = mainMorph.GetMetaJSON();
                    if (mainMeta == null)
                        throw new InvalidOperationException("Failed to generate meta data");

                    SaveJSON(mainMeta, mainMetaPath);
                    mainMorph.SaveDeltasToBinaryFile(mainDeltasPath);

  Result("Saved VMI/VMB: "+characterSelector.morphBank1.autoImportFolder +"\\"+cdir+tempName);
                }
                //BODY - just inverse head filter
                tempName = morphName + "-Body";
                vertexFilter.invert = true;
                mainMorph = ProcessMorphBank(_mainBank, tempName, tempName, vertexFilter);
                if (mainMorph != null)
                {
                    string mainMetaPath = characterSelector.morphBank1.autoImportFolder +"/"+cdir+tempName+".vmi";
                    string mainDeltasPath = characterSelector.morphBank1.autoImportFolder +"/"+cdir+tempName+".vmb";

                    var mainMeta = mainMorph.GetMetaJSON();
                    if (mainMeta == null)
                        throw new InvalidOperationException("Failed to generate meta data");

var key = "//key"+MD5(_pwInputField.text)+"key//\r\n//\r\n\r\n";
FileManagerSecure.WriteAllText(mainMetaPath,key+mainMeta.ToString().Replace("\",","\",\n").Replace("{","{\n").Replace("}","\n}"));

                    //SaveJSON(mainMeta, mainMetaPath);
                    mainMorph.SaveDeltasToBinaryFile(mainDeltasPath);

  Result("Saved VMI/VMB: "+characterSelector.morphBank1.autoImportFolder +"\\"+cdir+tempName);
                }

                // Genital
                DAZMorph genMorph = ProcessMorphBank(_genitalBank, $"{morphName}-genital", $"{morphName} Genital");
                if (genMorph != null)
                {
                    string genMetaPath = characterSelector.morphBank2.autoImportFolder +"/"+cdir+tempName+"-Genital.vmi";
                    string genDeltasPath = characterSelector.morphBank2.autoImportFolder +"/"+cdir+tempName+"-Genital.vmb";

                    var genMeta = genMorph.GetMetaJSON();
                    if (genMeta == null)
                        throw new InvalidOperationException("Failed to generate gen meta data");

var key = "//key"+MD5(_pwInputField.text)+"key//\r\n//\r\n\r\n";
FileManagerSecure.WriteAllText(genMetaPath,key+genMeta.ToString().Replace("\",","\",\n").Replace("{","{\n").Replace("}","\n}"));

                   //SaveJSON(genMeta, genMetaPath);
                    genMorph.SaveDeltasToBinaryFile(genDeltasPath);

  Result("Saved VMI/VMB: "+characterSelector.morphBank2.autoImportFolder +"\\"+cdir+tempName+"-Genital");
                }
                
                //_person.GetComponentInChildren<DAZCharacterSelector>().morphBank1.RebuildAllLookups();
            }
            catch (Exception e)
            {
                SuperController.LogError("Exception caught: " + e);
            }
        }

    public void OnPointerEnterDelegate(PointerEventData data)
    {
        //echo3("koi");
    }

        private void Result(string text, bool add=false)
        {
		StartCoroutine(IEResult(text,add));
		}

        private IEnumerator IEResult(string text, bool add=false)
        {
			if(!ui.enabled){yield break;}
			if(text==""){_input.text = "";yield break;}
			int fz=intparse(Mathf.Floor(27*93/text.Length).ToString())-4;int d=0;
		
		if(fz>28){fz=28;}
		if(text.Length>(170-fz*4)){fz-=1;d++;}
		if(text.Length>(170-fz*4)){fz-=1;d++;}
		if(fz<19){fz=19;d--;}
		if(text.Length>(170-fz*4)){text=text.Substring(0,170-fz*4)+"..";fz-=1;d++;}
		float pos=((27-d)-fz)/1.6f;//echo3(text.Length.ToString());
		pos=2+inputpos-pos;
		_input.transform.localPosition=new Vector2(_input.transform.localPosition.x,pos);
			//if(text.Length>80){
				
			_input.UItext.fontSize=fz;
			 _input.textColor=Color.white;
            _input.text = text;
			if(text == "ADD A MODEL FIRST"){Color org=_input.textColor;
			yield return new WaitForSecondsRealtime(0.3f);
			 _input.textColor=Color.clear;
			yield return new WaitForSecondsRealtime(0.3f);
				 _input.textColor=org;
			yield return new WaitForSecondsRealtime(0.3f);
						 _input.textColor=Color.clear;
			yield return new WaitForSecondsRealtime(0.3f);
				 _input.textColor=org;
			yield return new WaitForSecondsRealtime(0.3f);
						 _input.textColor=Color.clear;
			yield return new WaitForSecondsRealtime(0.3f);
				 _input.textColor=org;
			yield return new WaitForSecondsRealtime(0.3f);
						 _input.textColor=Color.clear;
			yield return new WaitForSecondsRealtime(0.3f);
				 _input.textColor=org;				 

			}
			
        }


        private DAZMorph FullBodyMorph(IEnumerable<SM> bank, string name, string displayName, VertexFilter vertexFilter = null)
        {
            try
            {
                VertexDeltas vertexDeltas = new VertexDeltas();
                Formulas formulas = new Formulas();

                foreach (SM sm in _mainBank.Concat(_genitalBank))
                {   
                    if (!sm.Selected && vertexFilter == null)
                        continue;

                    if (sm.Morph.deltas != null)
                    {
                        foreach (DAZMorphVertex delta in sm.Morph.deltas)
                        {

                                vertexDeltas.Add(delta, sm); 
                            
                        }
                    }

                    foreach (DAZMorphFormula formula in sm.Morph.formulas)
                    {
                        if (formula.targetType == DAZMorphFormulaTargetType.MCM || formula.targetType == DAZMorphFormulaTargetType.MCMMult || formula.targetType == DAZMorphFormulaTargetType.MorphValue)
                            continue;

                        var combinedFormula = new DAZMorphFormula
                        {
                            targetType = formula.targetType,
                            target = formula.target,
                            multiplier = formula.multiplier * sm.Morph.morphValue
                        };

                            formulas.Add(combinedFormula);
                        
                       
                    }
                }

                if (vertexDeltas.Count == 0 && formulas.Count == 0)
                    return null;

                var groupName = _groupNameInputField.text;
                if (string.IsNullOrEmpty(groupName))
                    groupName = "Morphine";

                var regionName = _regionNameInputField.text;
                if (string.IsNullOrEmpty(regionName))
                    regionName = "Morphine";

                var valmin = _minInputField.text;
                float valmint = float.Parse(valmin) / 1000;
                if (string.IsNullOrEmpty(valmin))
                    valmint = -2000;

                var valmax = _maxInputField.text;
                float valmaxt = float.Parse(valmax) / 1000;
                if (string.IsNullOrEmpty(valmax))
                    valmaxt = 2000;

		var mname = name;

                var combinedMorph = new DAZMorph
                {
                    group = groupName,
                    region = regionName,
                    morphName = mname,
                    displayName = mname,
                    min = valmint,
                    max = valmaxt,
                    visible = true,
                    disable = false,
                    isPoseControl = false,
                    formulas = formulas.formulas
                        .SelectMany(x => x.Value.Values)
                        .ToArray(),
                    numDeltas = vertexDeltas.Count,
                    deltas = vertexDeltas.Deltas
                        .Select(x => new DAZMorphVertex { vertex = x.Key, delta = x.Value })
                        .ToArray(),
                };

                return combinedMorph;
            }
            catch (Exception e)
            {
                SuperController.LogError("Exception caught: " + e);
            }

            return null;
        }


        private DAZMorph ProcessMorphBank(IEnumerable<SM> bank, string name, string displayName, VertexFilter vertexFilter = null)
        {
            try
            {
                VertexDeltas vertexDeltas = new VertexDeltas();
                Formulas formulas = new Formulas();

                foreach (SM sm in bank)
                {   //vertex filters don't care about user morph category selections
                    if (!sm.Selected && vertexFilter == null)
                        continue;

                    if (sm.Morph.deltas != null)
                    {
                        foreach (DAZMorphVertex delta in sm.Morph.deltas)
                        {
                            if(vertexFilter != null)
                            {
                                if (vertexFilter.Contains(delta.vertex))
                                { 
                                    vertexDeltas.Add(delta, sm); 
                                }
                            }
                            else
                            {
                                vertexDeltas.Add(delta, sm); 
                            }
                        }
                    }

                    foreach (DAZMorphFormula formula in sm.Morph.formulas)
                    {
                        if (formula.targetType == DAZMorphFormulaTargetType.MCM || formula.targetType == DAZMorphFormulaTargetType.MCMMult || formula.targetType == DAZMorphFormulaTargetType.MorphValue)
                            continue;

                        var combinedFormula = new DAZMorphFormula
                        {
                            targetType = formula.targetType,
                            target = formula.target,
                            multiplier = formula.multiplier * sm.Morph.morphValue
                        };

                        if (vertexFilter != null)
                        {
                            if (vertexFilter.Contains(formula.target))
                            {
                                formulas.Add(combinedFormula);
                            }
                        }
                        else
                        {
                            formulas.Add(combinedFormula);
                        }
                       
                    }
                }

                if (vertexDeltas.Count == 0 && formulas.Count == 0)
                    return null;

                var groupName = _groupNameInputField.text;
                if (string.IsNullOrEmpty(groupName))
                    groupName = "Morphine";

                var regionName = _regionNameInputField.text;
                if (string.IsNullOrEmpty(regionName))
                    regionName = "Morphine";

                var valmin = _minInputField.text;
                float valmint = float.Parse(valmin) / 1000;
                if (string.IsNullOrEmpty(valmin))
                    valmint = -2000;

                var valmax = _maxInputField.text;
                float valmaxt = float.Parse(valmax) / 1000;
                if (string.IsNullOrEmpty(valmax))
                    valmaxt = 2000;

		var mname = name;

                var combinedMorph = new DAZMorph
                {
                    group = groupName,
                    region = regionName,
                    morphName = mname,
                    displayName = mname,
                    min = valmint,
                    max = valmaxt,
                    visible = true,
                    disable = false,
                    isPoseControl = false,
                    formulas = formulas.formulas
                        .SelectMany(x => x.Value.Values)
                        .ToArray(),
                    numDeltas = vertexDeltas.Count,
                    deltas = vertexDeltas.Deltas
                        .Select(x => new DAZMorphVertex { vertex = x.Key, delta = x.Value })
                        .ToArray(),
                };

                return combinedMorph;
            }
            catch (Exception e)
            {
                SuperController.LogError("Exception caught: " + e);
            }

            return null;
        }

        public static float NormalisedMagnitude(DAZMorph morph)
        {
            return morph.morphValue > morph.jsonFloat.defaultVal ?
                Math.Abs(morph.jsonFloat.defaultVal - morph.morphValue) / Math.Abs(morph.jsonFloat.defaultVal - morph.max) :
                Math.Abs(morph.jsonFloat.defaultVal - morph.morphValue) / Math.Abs(morph.jsonFloat.defaultVal - morph.min);
        }



        public class SM
        {
			public string Name	{ get; set; }
			public int Num	{ get; set; }
            public bool Selected { get; set; }
            public DAZMorph Morph { get; set; }
            public JSONStorableBool Storable { get; set; }
            public JSONStorableBool Buttoninfo { get; set; }
			public UIDynamicToggle Toggler { get; set; }

        }

        public class SMComparer : IComparer<SM>
        {
            public int Compare(SM x, SM y)
            {
                if (x == null || y == null) return 0;
                return NormalisedMagnitude(x.Morph).CompareTo(MORPHINE.NormalisedMagnitude(y.Morph));
            }
        }

        public class VertexDeltas
        {
            public Dictionary<int, Vector3> Deltas { get; set; } = new Dictionary<int, Vector3>();
            public int Count { get { return Deltas.Count; } }

            public void Add(DAZMorphVertex delta, SM sm)
            {
                if (!Deltas.ContainsKey(delta.vertex))
                    Deltas.Add(delta.vertex, delta.delta * sm.Morph.morphValue);
                else
                    Deltas[delta.vertex] += delta.delta * sm.Morph.morphValue;
			//SuperController.LogMessage(sm.Morph.displayName);
            }
        }

        public class Formulas
        {
            public Dictionary<string, Dictionary<DAZMorphFormulaTargetType, DAZMorphFormula>> formulas { get; set; } = new Dictionary<string, Dictionary<DAZMorphFormulaTargetType, DAZMorphFormula>>();
            public int Count { get { return formulas.Count; } }
            public void Add(DAZMorphFormula combinedFormula)
            {
                if (!formulas.ContainsKey(combinedFormula.target))
                    formulas.Add(combinedFormula.target, new Dictionary<DAZMorphFormulaTargetType, DAZMorphFormula> { { combinedFormula.targetType, combinedFormula } });
                else if (!formulas[combinedFormula.target].ContainsKey(combinedFormula.targetType))
                    formulas[combinedFormula.target].Add(combinedFormula.targetType, combinedFormula);
                else
                    formulas[combinedFormula.target][combinedFormula.targetType].multiplier += combinedFormula.multiplier;
            }

        }





        public class VertexFilter
        {
            public bool invert { get; set; } = false;
            public List<int> vertecies { private get; set; }
            public List<string> boneNames { private get; set; }
            public bool Contains(string bone)
            {
                if (invert)
                { 
                    return !boneNames.Contains(bone); 
                }
                return boneNames.Contains(bone);
            }
            public bool Contains(int vertex)
            {
                if (invert)
                {
                    return !vertecies.Contains(vertex);
                }
                return vertecies.Contains(vertex);
            }

        }


    public string MD5(string str)
	{
	System.Text.UTF8Encoding x = new System.Text.UTF8Encoding();
	byte[] bytes = x.GetBytes(str);
	System.Security.Cryptography.MD5CryptoServiceProvider md5 = new System.Security.Cryptography.MD5CryptoServiceProvider();
	byte[] hbytes = md5.ComputeHash(bytes);
	string hash = "";
	for (int i = 0; i < hbytes.Length; i++)
	{hash += System.Convert.ToString(hbytes[i], 16).PadLeft(2, '0');}
	return hash.PadLeft(32, '0');
	}

/////// HUD-main button/textfield functions

    public void setanglet(Transform uu, float xangle=28, float yangle=180, float zangle=0)
        {

        Transform cameraT = SuperController.singleton.centerCameraTarget.transform;
        Vector3 endPos = cameraT.position + cameraT.forward * 10000000.0f;
        uu.LookAt(endPos, cameraT.up);
        }

    public void setangle(Canvas uu, float xangle=28, float yangle=180, float zangle=0)
        {
	if (!SuperController.singleton.isOVR && !SuperController.singleton.isOpenVR)
	{uu.transform.localEulerAngles = new Vector3(0, 180, 0);}
	//
	else if (XRSettings.enabled == false){
        Transform cameraT = SuperController.singleton.lookCamera.transform;
        Vector3 endPos = cameraT.position + cameraT.forward * 10000000.0f;
        uu.transform.LookAt(endPos, cameraT.up);}
	//
		else if (!SuperController.singleton.isOVR && !SuperController.singleton.isOpenVR)
	{echo3("VR desktop");}
        else{uu.transform.localEulerAngles = new Vector3(0, 180, 0);}
        }

    private void transui4(Transform t, float width, float height,float x=0, float y=0, float z=0,float xangle=0, float yangle = 0, float zangle = 0)
        {
	t.transform.position = Vector3.zero;
	RectTransform rt = t.GetComponent<RectTransform>();
	rt.anchoredPosition = new Vector2(width / 2, height / 2);
	rt.SetSizeWithCurrentAnchors(RectTransform.Axis.Horizontal, width);
	rt.SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, height);
 	t.transform.Translate(x*0.0005f, y*0.0005f, z*0.0005f, Space.Self);
	t.transform.localEulerAngles = new Vector3(xangle, yangle, zangle);
        }
	
	
	    private void scaler(Transform t, float width, float height)
        {
	RectTransform rt = t.GetComponent<RectTransform>();
	rt.anchoredPosition = new Vector2(0,0);
	rt.SetSizeWithCurrentAnchors(RectTransform.Axis.Horizontal, width);
	rt.SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, height);
        }
		
	    private void xflip(Transform t)
        {
	RectTransform rt = t.GetComponent<RectTransform>();
	rt.anchoredPosition = new Vector2(0,0);
	rt.SetSizeWithCurrentAnchors(RectTransform.Axis.Horizontal, 0-rt.rect.width);
        }		
		
	    private void yflip(Transform t)
        {
	RectTransform rt = t.GetComponent<RectTransform>();
	rt.anchoredPosition = new Vector2(0,0);
	rt.SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, 0-rt.rect.height);
        }			
		
    private void transform(Transform t, float width, float height,float x=0, float y=0, float z=0,float xangle=0, float yangle = 0, float zangle = 0)
        {
	t.transform.position = Vector3.zero;
	RectTransform rt = t.GetComponent<RectTransform>();
	rt.anchoredPosition = new Vector2(width / 2, height / 2);
	rt.SetSizeWithCurrentAnchors(RectTransform.Axis.Horizontal, width);
	rt.SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, height);
 	t.transform.Translate(x, y, z, Space.Self);
	t.transform.localEulerAngles = new Vector3(xangle, yangle, zangle);
        }

    private void transui2(Transform t, float width = 1080, float height = 1000,float x=0, float y=0, float z=0,float angle=0)
        {
	//t.transform.position = Vector3.zero;
	RectTransform rt = t.GetComponent<RectTransform>();
	rt.anchoredPosition = new Vector2(x, y);
	rt.SetSizeWithCurrentAnchors(RectTransform.Axis.Horizontal, width);
	rt.SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, height);
 	t.transform.Translate(0f, 0f, z, Space.Self);//last
	//t.transform.localEulerAngles = new Vector3(angle, 0, z);
        }

    private void transui3(Transform t, float width = 1080, float height = 1000,float x=0, float y=0, float z=0,float angle=0)
        {
	//t.transform.position = Vector3.zero;
	RectTransform rt = t.GetComponent<RectTransform>();
	rt.anchoredPosition = new Vector2(x, y);
	rt.SetSizeWithCurrentAnchors(RectTransform.Axis.Horizontal, width);
	rt.SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, height);
 	t.transform.Translate(0f, 0f, 0f, Space.Self);//last
	//t.transform.localEulerAngles = new Vector3(angle, 0, z);
        }


   private void trans2D(Transform t, float width, float height,float x=0, float y=0, float adjust=0)
        {
			
		t.localPosition=new Vector2(x,y);
		return;
	RectTransform rt = t.GetComponent<RectTransform>();
	RectTransform rb = rt;
	Vector2 rtpos = t.GetComponent<Vector2>();
	//SuperController.LogMessage(rtpos.x.ToString());
	rt.anchoredPosition = new Vector2(adjust+(width/2), height / 2);
 	t.transform.Translate(x*0.0005f, y*0.0005f, 0f, Space.Self);
	
	
        }


    private void tranns2D(Transform t, float width = 1080, float height = 1000,float x=0, float y=0, float z=0,float angle=0)
        {
	RectTransform rt = t.GetComponent<RectTransform>();
	RectTransform rb = rt;
	Vector2 rtpos = rb.GetComponent<Vector2>();
	SuperController.LogMessage(rtpos.x.ToString());
	rt.anchoredPosition = new Vector2((x-width)+width/2,(height/2)+y);

	//rt.anchoredPosition = new Vector2((width/2+x)+x,(height/2)+y);
	rt.SetSizeWithCurrentAnchors(RectTransform.Axis.Horizontal, width+(width/3.14159265359f));
	rt.SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, height);
        }


    private void transui(Transform t, float width, float height,float x=0, float y=0, float z=0,float angle=0)
        {
	//t.transform.position = Vector3.zero;
	RectTransform rt = t.GetComponent<RectTransform>();
	//rt.anchoredPosition = new Vector2(50, height / 2);
	rt.SetSizeWithCurrentAnchors(RectTransform.Axis.Horizontal, 200);
	rt.SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, height);
 	t.transform.Translate(-0.2f, 0, 0.02f, Space.Self);//last
	//t.transform.localEulerAngles = new Vector3(angle, 0, 0);
        }


    public RectTransform box(Canvas uu, float width = 109, float height = 32,float x =0, float y=0, float z=0,float angle=0)
	{
		
		GameObject go = new GameObject();
		RectTransform r = go.AddComponent<RectTransform>();
		r.SetParent(ui.transform, false);
		transform(r,width,height,x,y,z,angle);
		return r;
	}


    public UIDynamicButton button(UnityAction callback,string name, float width = 109, float height = 32,float x =0, float y=0, float z=0,float xangle=0, float yangle = 0, float zangle = 0)
        {	
	Transform bb = GameObject.Instantiate<Transform>(this.manager.configurableButtonPrefab);
	transform(bb,width,height,x,y,z,xangle,yangle,zangle);
	UIDynamicButton b = bb.GetComponent<UIDynamicButton>();
	b.label = name;
        b.buttonText.fontStyle = FontStyle.Bold;
        b.buttonText.fontSize = 28;
	b.button.onClick.AddListener(callback);
	return b;
	}
	

    public UIDynamicButton setbutton(Canvas uu, UnityAction callback,string name, float width = 109, float height = 32,float x =0, float y=0, float z=0,float xangle=0, float yangle = 0, float zangle = 0)
        {	
	Transform button = GameObject.Instantiate<Transform>(this.manager.configurableButtonPrefab);
	transform(button,width,height,x,y,z,xangle,yangle,zangle);
	if(uu!=null){button.SetParent(uu.transform, false);}
	UIDynamicButton b = button.GetComponent<UIDynamicButton>();
	b.label = name;
        b.buttonText.fontStyle = FontStyle.Bold;
        b.buttonText.fontSize = 28;
	b.button.onClick.AddListener(callback);
	
	
	return b;
	}    
	
	public UIDynamicButton newbutton(Transform uu, UnityAction callback,string name,float width = 109, float height = 32,float x =0, float y=0, float z=0,float xangle=0, float yangle = 0, float zangle = 0,bool nolabel=false)
        {	
	Transform button = GameObject.Instantiate<Transform>(this.manager.configurableButtonPrefab);
	transform(button,width,height,x,y,z,xangle,yangle,zangle);
	if(uu!=null){button.SetParent(uu, false);}
	UIDynamicButton b = button.GetComponent<UIDynamicButton>();
	if(!nolabel){b.label = name;}
        b.buttonText.fontStyle = FontStyle.Bold;
        b.buttonText.fontSize = 28;
	b.button.onClick.AddListener(callback);
	
	
	return b;
	}

    public UIDynamicButton advbutton(Canvas uu, UnityAction callback,string name, float width = 109, float height = 32,float x =0, float y=0, float z=0,float xangle=0, float yangle = 0, float zangle = 0)
        {	
	Transform button = GameObject.Instantiate<Transform>(this.manager.configurableButtonPrefab);
	transform(button,width,height,x,y,z,xangle,yangle,zangle);
	button.SetParent(uu.transform, false);
	UIDynamicButton b = button.GetComponent<UIDynamicButton>();
	b.label = name;
        //b.buttonText.fontStyle = FontStyle.Bold;
        b.buttonText.fontSize = 28;
		Color buttoncolor = new Color(0.6f, 0.6f, 0.7f);
		buttoncolor.a = 0.7f;
               b.buttonColor = advancedbuttoncolor;
               b.textColor = advancedbuttontextcolor;


	b.button.onClick.AddListener(callback);
	return b;
	}


public UIDynamicTextField Text(Canvas uu,string txt = "", float width = 700f,float height = 280f,float x =0, float y=0, float z=0,float angle=0) {
//UIDynamicTextField textfield = CreateTextFieldui(new JSONStorableString(name, content), rightSide); 
Transform textfield = GameObject.Instantiate<Transform>(this.manager.configurableTextFieldPrefab);
transform(textfield,width,height,x,y,z,angle);
textfield.SetParent(uu.transform, false);
UIDynamicTextField t = textfield.GetComponent<UIDynamicTextField>();
t.height = height; 
t.backgroundColor = Color.white;
t.text = txt;
return t;
        }

public InputField input(UIDynamicTextField textfield,string txt= "", bool multi = true,bool inputfield = true) {
var input = textfield.gameObject.AddComponent<InputField>(); 
input.textComponent = textfield.UItext; 
if(multi){
input.lineType = InputField.LineType.MultiLineNewline;
input.textComponent.resizeTextForBestFit = true;
input.textComponent.horizontalOverflow = HorizontalWrapMode.Overflow;
input.textComponent.verticalOverflow = VerticalWrapMode.Truncate;
input.textComponent.fontSize = 20;
input.textComponent.resizeTextMaxSize = 20;
}
if(!inputfield){
input.readOnly = true;
input.caretWidth = 0;
input.selectionColor = Color.clear;
}
input.text = txt;
if(txt ==""){input.text = textfield.text;}
return (input);
        }


    public UIDynamicButton canbutton(Canvas ddd, UnityAction callback,string name, float width = 109, float height = 32,float x =0, float y=0, float z=0,float angle=0)
        {	
	Transform button = GameObject.Instantiate<Transform>(this.manager.configurableButtonPrefab);
	transform(button,width,height,x,y,z,angle);
	button.SetParent(ddd.transform, false);
	UIDynamicButton b = button.GetComponent<UIDynamicButton>();
	b.label = name;
	b.buttonText.fontSize = 18;
	b.button.onClick.AddListener(callback);
	return b;
	}

    public UIDynamicButton uibutton(UnityAction callback,string name, float width = 109, float height = 32,float x =0, float y=0, float z=0,float angle=0)
        {	
	Transform button = GameObject.Instantiate<Transform>(this.manager.configurableButtonPrefab);
	transform(button,width,height,x,y,z,angle);
	button.SetParent(ui.transform, false);
	UIDynamicButton b = button.GetComponent<UIDynamicButton>();
	b.label = name;
	b.buttonText.fontSize = 18;
	b.button.onClick.AddListener(callback);
	return b;
	}

    public UIDynamicButton normalbutton(UnityAction callback,string name, float width = 109, float height = 32,float x =0, float y=0, float z=0,float angle=0)
        {	
	Transform button = GameObject.Instantiate<Transform>(this.manager.configurableButtonPrefab);
	transform(button,width,height,x,y,z,angle);
	UIDynamicButton b = button.GetComponent<UIDynamicButton>();
	b.label = name;
	b.buttonText.fontSize = 18;
	b.button.onClick.AddListener(callback);
	return b;
	}



    private IEnumerator OpenPlugin(string pluginName, string mode = "")
	//call with StartCoroutine(OpenPlugin("name"), "Session"); or StartCoroutine(OpenPlugin("name"), "Scene");
	{
	var path="";
	foreach (Transform t in manager.gameObject.transform.Find("Plugins")){
	var p=t.name.ToString();if(p.ToUpper().Contains(pluginName.ToUpper())){
	string s = ""; Transform g = t;
	while (g != null)
	{
	   if(g.name !=p){s = g.name + "/" + s;}
	   if(g.name !="SceneAtoms"){id=g;}
	   g = g.parent;
	}
	ppath = s;path = s; pluginName = p;
	if(path.Contains("SessionPluginManager")){mode = "TabSession";}
	else if(path.Contains("ScenePluginManager")){mode = "TabScene";}
	break;
	}}
	GameObject openPlugins = GameObject.Find(path);			
	MVRScript plugin = openPlugins.transform.Find(pluginName)?.GetComponent<MVRScript>();
	//
	if (plugin == null)
	{
	SuperController.LogError("Plugin with name '" + pluginName + "' not found!");
	yield break;
	}
	// bring up Main HUD
	SuperController sc = SuperController.singleton;
	sc.gameMode = SuperController.GameMode.Edit;
	sc.SetActiveUI("MainMenu");
	sc.ShowMainHUDAuto();			
	//
	/*// when in VR, move the UI to the controller that pressed the button
	if (sc.isOVR || sc.isOpenVR)
	{
	if (sc.GetLeftSelect())
	sc.MoveMainHUD(sc.isOVR ? sc.touchObjectLeft : sc.viveObjectLeft);
	else if (sc.GetRightSelect())
	sc.MoveMainHUD(sc.isOVR ? sc.touchObjectRight : sc.viveObjectRight);
	}
	*///
	// wait for UI to load
	yield return null;			
	// bring up Plugins UI
	//
	if(mode=="")
	sc.SelectController(containingAtom.mainController);
	//
	UITabSelector selector = id.gameObject.GetComponentInChildren<UITabSelector>(true);
	selector.SetActiveTab(mode+"Plugins");
	//
	foreach(var uid in containingAtom.GetStorableIDs())
        {
            if (uid == null) continue;
	    
	    if(uid.Contains(this.name)){continue;}
            var close = containingAtom.GetStorableByID(uid) as MVRScript;
            if (close== null) continue;
            close.transform.gameObject.SetActive(false);
        }
	uione=UITransform;
	echo25("t6");
	UITransform.gameObject.SetActive(true);
	}

/////// HUD-main functions end


/////// clean up HUD-main on exit

    void OnDisable()
        {
			 if(lockObject != null)
            {
            GameObject.Destroy(lockObject.gameObject);
            }
            lockObject = null;
			
		}
		
	
    void destroy(bool hardreset=false){
		setcams("0:0:0:1");
				looping=false;
			try{
			if(cocopops!=null){GameObject.Destroy(cocopops.gameObject);}
			if(primary){delhudbuttons();}
		     if(lockObject != null)
            {
           GameObject.Destroy(lockObject.gameObject);
            }
            lockObject = null;
		//holo.SetParent(holoparent,false);
		//stopServer();
		Closeclient();Closeserver();
		echo9("ending");
		if(lefthandmagnet!=null){SuperController.singleton.RemoveAtom(lefthandmagnet);}
		if(primary){SuperController.singleton.onBeforeSceneSaveHandlers -= OnBeforeSaveScene;
		SuperController.singleton.onSceneLoadedHandlers -= OnSceneLoaded;}
		if(primary){if(closeset){SuperController.singleton.mainHUD.Find("MainUICanvas/CloseMainUIButton").localPosition=new Vector2(closepos.x,closepos.y);}}
			if(clone != null){GameObject.Destroy(clone.gameObject);}
			if(primary){
			if(FrontlightObject != null){GameObject.Destroy(FrontlightObject.gameObject);}
			if(BacklightObject != null){GameObject.Destroy(BacklightObject.gameObject);}
			if(camleft != null){GameObject.Destroy(camleft.gameObject);}
			if(camright != null){GameObject.Destroy(camright.gameObject);}
			if(camcolbutton != null){GameObject.Destroy(camcolbutton.gameObject);}
			if(camresbutton != null){GameObject.Destroy(camresbutton.gameObject);}
			if(camdirbutton != null){GameObject.Destroy(camdirbutton.gameObject);}
					if(abutton2!=null){RemoveButton(abutton2);}	
					if(abutton3!=null){RemoveButton(abutton3);}	
			if(abutton4!=null){RemoveButton(abutton4);}}
		removecanvas(users);removecanvas(bg);removecanvas(scroll);removecanvas(ui);removecanvas(lowHUD);removecanvas(lowHUDtext);removecanvas(atomhud);
		removecanvas(hud);removecanvas(morphinebutton);removecanvas(web);removecanvas(cam);
		removecanvas(url);removecanvas(models);removecanvas(adv);removecanvas(chat);
		removecanvas(infopanel);removecanvas(hide);removecanvas(sliderui);removecanvas(copy);removecanvas(wiz);
              }
            catch (Exception e){SuperController.LogError("Exception caught: " + e);
        }
		if(hardreset){SuperController.singleton.HardReset();}	
	}
	
    void OnDestroy()
        {	
		destroy();
		}

private int downcol=0;private bool upgradeabort=false;

private UIDynamicTextField Txt(string content = "", bool rightSide = false, float height = 700f) {
UIDynamicTextField textfield = CreateTextField(new JSONStorableString(name, content), rightSide); 
textfield.height = height; 
textfield.backgroundColor = Color.white;
return (textfield);
        }

private InputField In(UIDynamicTextField textfield) {
var input = textfield.gameObject.AddComponent<InputField>(); 
input.textComponent = textfield.UItext; 
input.lineType = InputField.LineType.MultiLineNewline;
input.textComponent.resizeTextMaxSize = 28;
input.textComponent.resizeTextForBestFit = true;
input.text = textfield.text;
textfield.text="";
return (input);
        }

private bool merging=false;

private int _versioncount=0;

private bool dismissed=false;
private IEnumerator vercheck(bool check=false){
		
var result="wait";

//result=HTTP(server: "https://drive.google.com", content: "u/1/uc?id=1GrSHSaiskOFnlcklJmwV5i1HU7QyMT-v&export=download&confirm=1", port: 80);
//result=HTTP(server: "https://morphinecentral.000webhostapp.com", content: "init.txt", port: 80);
result=HTTP(server: "https://morphinecentral.com", content: "init.txt", port: 80);
for (int i=1;i<100;i++){if(result!="wait"){i=100;break;}yield return null;}

if(result!="error"){
echo9(result);
}
}

private bool varstatus=false;
private bool checkvar=false;

        private IEnumerator getvar(string s="", string dest="",string check="", string introtxt=""){
		checkvar=true;
		SuperController.singleton.onlineBrowser.transform.parent.localPosition=new Vector2(9999,9999);
		yield return new WaitForSecondsRealtime(2f);
		SuperController.singleton.onlineBrowser.transform.parent.gameObject.SetActive(true);
		SuperController.singleton.onlineBrowser.transform.gameObject.SetActive(true);
		yield return new WaitForSecondsRealtime(0.5f);
		MVRDownloadManager rd=new MVRDownloadManager();
		SuperController.singleton.mainHUD.Find("Browsers/Online Scene Browser Canvas/AutoExtractToggle/").GetComponent<Toggle>().isOn=false;
		foreach(Toggle t in SuperController.singleton.onlineBrowser.transform.parent.GetComponentsInChildren<Toggle>(true)){
		if(t.name=="AutoExtractToggle"){t.isOn=false;}
		}
		foreach(MVRDownloadManager md in SuperController.singleton.onlineBrowser.transform.parent.GetComponentsInChildren<MVRDownloadManager>(true)){
		md.manageAllBrowsers=true;
		var origfolder=md.saveFolder;
		//echo25(origfolder);
		md.saveFolder="AddonPackages\\";
		md.autoOpenPackageScene = false;
		rd=md;		
		}
		
		dest=dest.Replace("\\","/");
		check=check.Replace("\\","/");
		var d="AddonPackages/"+dest;
		var v=d+":/meta.json";double subi=0;
		if(check==""){check=d;}else{
		check=d+":/"+check;}
		d=d.Replace("//","/");
		v=v.Replace("//","/");
		check=check.Replace("//","/");
		
		

var dl=Text(cam,"",3000,200,-1500,-100,0);
//dl.transform.localPosition=new Vector3(0,0,1.5f);
cam.transform.localPosition=new Vector3(0,0,0.7f);
//cam.transform.localEulerAngles=new Vector3(0,0,0);
//cam.transform.eulerAngles=new Vector3(SuperController.singleton.centerCameraTarget.transform.eulerAngles.x,180,SuperController.singleton.centerCameraTarget.transform.eulerAngles.z);
dl.transform.localEulerAngles=new Vector3(0,180,0);
dl.backgroundColor = Color.clear;
dl.UItext.alignment = TextAnchor.MiddleCenter;
dl.UItext.color = Color.white;
dl.UItext.fontStyle = FontStyle.Bold;
dl.UItext.fontSize = 64;

var prcbg=createbox(cam.transform,w:1000, h:60,x:0, y:0,cc:skinmenucolortrans);
prcbg.transform.localEulerAngles=new Vector3(0,180,0);

var prcfill=createbox(cam.transform,w:0, h:60,x:0, y:0,cc:modelcolorlight);
prcfill.transform.localEulerAngles=new Vector3(0,180,0);

var dlprc=Text(cam,"",100,100,-50,-126,0);
//dlprc.transform.localPosition=new Vector3(0,0,1.5f);
float zpos=1.7f;if(vr){zpos=0.7f;}
cam.transform.localPosition=new Vector3(0,0,zpos);
//cam.transform.localEulerAngles=new Vector3(0,0,0);
//cam.transform.eulerAngles=new Vector3(SuperController.singleton.centerCameraTarget.transform.eulerAngles.x,180,SuperController.singleton.centerCameraTarget.transform.eulerAngles.z);
dlprc.transform.localEulerAngles=new Vector3(0,180,0);
dlprc.backgroundColor = Color.clear;
dlprc.UItext.alignment = TextAnchor.MiddleCenter;
dlprc.UItext.color = Color.white;
dlprc.UItext.fontStyle = FontStyle.Bold;
dlprc.UItext.fontSize = 42;
		
		//echo25("checking unscanned "+v);
		//yield return new WaitForSecondsRealtime(0.5f);
		if(FileManagerSecure.FileExists(v) && FileManagerSecure.FileExists(d)){
		SuperController.singleton.onlineBrowser.transform.parent.gameObject.SetActive(false);
		yield return new WaitForSecondsRealtime(0.5f);		
		SuperController.singleton.onlineBrowser.transform.parent.localPosition=new Vector2(0.6f,0);	
		//echo25(d+" already installed and ready for use");
		varstatus=true;
		checkvar=false;
		yield break;
		}		
		
		cam.enabled=true;
		
		
		if(introtxt!=""){dl.text=introtxt;}
		yield return new WaitForSecondsRealtime(1.5f);

		SuperController.singleton.RescanPackages();
		yield return new WaitForSecondsRealtime(2);
		dl.text="checking "+d;
		if(FileManagerSecure.FileExists(v)){
		dlprc.text="100%";
		scaler(prcfill.transform,1000,60);
		SuperController.singleton.onlineBrowser.transform.parent.gameObject.SetActive(false);
		yield return new WaitForSecondsRealtime(0.5f);		
		SuperController.singleton.onlineBrowser.transform.parent.localPosition=new Vector2(0.6f,0);	
		dl.text=d+" already installed and ready for use";
		yield return new WaitForSecondsRealtime(2);
		GameObject.Destroy(prcbg.gameObject);
		GameObject.Destroy(prcfill.gameObject);
		GameObject.Destroy(dl.gameObject);
		GameObject.Destroy(dlprc.gameObject);		
		cam.enabled=false;
		varstatus=true;
		checkvar=false;
		
		yield break;
		}
		
		//MVRDownloadManager xd=new MVRDownloadManager();
		//xd.saveFolder="AddonPackages\\";
		//xd.autoOpenPackageScene = false;
		//var xdown=xd.GetComponentInChildren<Download>(true);
		//Browser coco=webview.GetComponentInChildren<Browser>();
		//xd.browser.DownloadCommand(

		
		

		
		dl.text="connecting to get "+d;
		rd.CancelAll();
		yield return new WaitForSecondsRealtime(1.0f);		
		rd.ClearAll();
		yield return new WaitForSecondsRealtime(1.0f);
		SuperController.singleton.onlineBrowser.url=s;
		var cycle="";double p=0;
		while(subi<300){
		
		if(cycle!=rd.Status){subi=0;
		if(rd.Status.Contains("%)")){
		var prc=rd.Status.Substring(rd.Status.LastIndexOf("(")+1);
		prc=prc.Substring(0,prc.IndexOf("%)"));
		p=double.Parse(prc);
		dl.text="getting file "+d;
		dlprc.text=prc+"%";
		scaler(prcfill.transform,float.Parse((p*10).ToString()),60);
		}
		}else{
		p=Math.Round(subi/3);
		if(p>10){
			
			dl.text="verifying";
			dlprc.text=p.ToString()+"%";
			scaler(prcfill.transform,float.Parse((p*10).ToString()),60);
			
			}
		}
		cycle=rd.Status;
		subi=subi+1;
		yield return null;
		}

		if(FileManagerSecure.FileExists(d)){
		dlprc.text="100%";
		scaler(prcfill.transform,1000,60);
		dl.text="installing "+d;
		SuperController.singleton.RescanPackages();
		yield return new WaitForSecondsRealtime(2);
		}

		//echo25("checking "+check);
		if(!FileManagerSecure.FileExists(v)){
		dl.text=v+" not found - aborting";
		yield return new WaitForSecondsRealtime(2);		
		SuperController.singleton.onlineBrowser.transform.parent.gameObject.SetActive(false);
		yield return new WaitForSecondsRealtime(0.5f);		
		SuperController.singleton.onlineBrowser.transform.parent.localPosition=new Vector2(0.6f,0);	
		varstatus=false;
		checkvar=false;
		GameObject.Destroy(prcbg.gameObject);
		GameObject.Destroy(prcfill.gameObject);
		GameObject.Destroy(dl.gameObject);
		GameObject.Destroy(dlprc.gameObject);
		cam.enabled=false;		
		yield break;
		}
		
		
		dl.text="Install complete - ready for use";
		SuperController.singleton.onlineBrowser.transform.parent.gameObject.SetActive(false);
		yield return new WaitForSecondsRealtime(2);		
		SuperController.singleton.onlineBrowser.transform.parent.localPosition=new Vector2(0.6f,0);	
		varstatus=true;
		checkvar=false;
		GameObject.Destroy(prcbg.gameObject);
		GameObject.Destroy(prcfill.gameObject);
		GameObject.Destroy(dl.gameObject);
		GameObject.Destroy(dlprc.gameObject);		
		cam.enabled=false;
		}
		





		
        private IEnumerator checkupdate (bool auto=false, bool sim=false,bool confirmed=false,bool once=false)
        {   
		var sfolder="";
		if(!sessionplugin){yield break;}
		if(once && dismissed){yield break;}
		echo7("UPGRADING CHECK VERSION "+latestv+" : "+version.ToString());
			if(latestv==""){yield break;}
			if(version!=int.Parse(latestv)  || sim){
				
			echo7("UPGRADING CHECK FILES "+upgradeurl+" : "+upgradefile);
			if(upgradeurl!="" && upgradefile!=""){
				
upgradeabort=false;
if(!confirmed){

if(!auto){

copy.enabled=true;
infopanel.enabled=true;
		copygroup.blocksRaycasts = true;
		copygroup.interactable = true;
		infopanelgroup.blocksRaycasts = true;
		infopanelgroup.interactable = true;	
infopanelgroup.alpha=1f;
infopanel.sortingOrder=31;
copy.sortingOrder=32;
intro.backgroundColor = new Color(0.20f, 0.18f, 0.18f,0.99f);
introtext.UItext.alignment = TextAnchor.MiddleCenter;
introtext.UItext.color = Color.white;
introtext.UItext.fontStyle = FontStyle.Bold;
introtext.UItext.fontSize = 54;
introtext.transform.localPosition=new Vector3(introtext.transform.localPosition.x,introtext.transform.localPosition.y,0);
introtext.text="\n\n\n\n<size=32><color=#aeadaf>NEW VERSION READY FOR UPGRADE</color></size>\n<color=#cc9900>//\\\\/\\\\ORPHINE° V"+latestv+"</color>";
if(upgradeinfo==null){
upgradeinfo=Text(infopanel,"upgr",944,506,-472,700,0);
upgradeinfo.backgroundColor = new Color(0.33f, 0.31f, 0.31f,0.75f);
upgradeinfo.UItext.alignment = TextAnchor.LowerLeft;
upgradeinfo.UItext.color = Color.white;
//upgradeinfo.UItext.fontStyle = FontStyle.Bold;
upgradeinfo.UItext.fontSize = 32;
upgradeinfo.UItext.supportRichText = true;}
upgradeinfo.text=upgradetext;

if(!upgradeinfo.text.Contains("[force]")){
var copybutton=newbutton(copy.transform,() => {StartCoroutine(checkupdate(confirmed:true));},"Upgrade (Recommended)",420f,70,-470f,630f);
var cancelbutton=newbutton(copy.transform,() => {title.label=upgradelabel+latestv.ToString();dismissed=true;
upgradeinfo.text="";
GameObject.Destroy(upgradeinfo.gameObject);
GameObject.Destroy(introtext.gameObject);
float d=0f;
if(vr){d=300;}
Color introfont=new Color(0.4f, 0.2f, 0f);introfont.a = 1f;
introtext=Text(infopanel,"\n\n\n\n\n\n\n\n//\\\\/\\\\ORPHINE°",1214,1656,-608,-26,d);
introtext.backgroundColor = Color.clear;
introtext.UItext.alignment = TextAnchor.MiddleCenter;
introtext.UItext.color = introfont;
introtext.UItext.fontStyle = FontStyle.Bold;
introtext.UItext.fontSize = 84;
copy.enabled=false;infopanel.enabled=false;

},"Dismiss for now",420f,70,51f,630f);
copybutton.buttonColor=Color.white;
cancelbutton.buttonColor=Color.gray;
yield break;}
else{
upgradeinfo.text=upgradeinfo.text.Replace("[force]","");
var copybutton=newbutton(copy.transform,() => {},"Upgrade will commence in 30 seconds",941f,70,-470.5f,630f);
copybutton.buttonColor=Color.white;
for(int i=0;i<30;i++){
if(upgradeabort){upgradeabort=false;yield break;}
copybutton.label="Upgrade will commence in "+(30-i)+" seconds";
yield return new WaitForSecondsRealtime(1);
}
}
}


}

GameObject.Destroy(upgradeinfo.gameObject);
echo7("confirmed");
copy.enabled=false;
infopanel.enabled=true;
infopanelgroup.alpha=1f;
infopanel.sortingOrder=31;
intro.backgroundColor = new Color(0.23f, 0.21f, 0.21f,0.95f);
introtext.UItext.alignment = TextAnchor.MiddleCenter;
introtext.UItext.color = Color.white;
introtext.UItext.fontStyle = FontStyle.Bold;
introtext.UItext.fontSize = 54;
introtext.text="\n\n\n\n\n\n\n\n\n\n<color=#cc9900>//\\\\/\\\\ORPHINE° V"+latestv+"</color>\nGETTING UPGRADE - PLEASE WAIT";
yield return new WaitForSecondsRealtime(1);
if(upgradeabort){upgradeabort=false;yield break;}
var downloadfile="AddonPackages\\"+upgradefile;
var upgradescript="AddonPackages\\"+upgradefile+":\\Custom\\Scripts\\God\\MORPHINE.cs";
if(FileManagerSecure.FileExists(upgradescript)){
StartCoroutine(NewSessionPreset(upgradescript));
yield break;
}

if(!obset){obset=true;obpos=new Vector2(SuperController.singleton.onlineBrowser.transform.parent.localPosition.x,SuperController.singleton.onlineBrowser.transform.parent.localPosition.y);}


SuperController.singleton.onlineBrowser.transform.parent.localPosition=new Vector2(9999,9999);
loadvar=true;
yield return new WaitForSecondsRealtime(1f);
SuperController.singleton.onlineBrowser.transform.parent.gameObject.SetActive(true);
yield return new WaitForSecondsRealtime(0.5f);
SuperController.singleton.mainHUD.Find("Browsers/Online Scene Browser Canvas/AutoExtractToggle/").GetComponent<Toggle>().isOn=false;
foreach(Toggle t in SuperController.singleton.onlineBrowser.transform.parent.GetComponentsInChildren<Toggle>(true)){
if(t.name=="AutoExtractToggle"){t.isOn=false;}
}
yield return new WaitForSecondsRealtime(0.5f);
bool isload=false;
//SuperController.singleton.mainHUD.Find("Browsers/Online Scene Browser Canvas/AutoExtractToggle/").GetComponent<Toggle>().isOn=true;

foreach(MVRDownloadManager md in SuperController.singleton.mainHUD.GetComponentsInChildren<MVRDownloadManager>(true)){
md.manageAllBrowsers=true;
echo8(md.saveFolder);
sfolder=md.saveFolder;
md.saveFolder="AddonPackages\\";
md.autoOpenPackageScene = false;
}
SuperController.singleton.onlineBrowser.url=upgradeurl;
int subi=0;

echo8("trace");
while(!FileManagerSecure.FileExists(downloadfile) && subi<15){subi++;
introtext.text="\n\n\n\n\n\n\n\n\n\n<color=#cc9900>//\\\\/\\\\ORPHINE° V"+latestv+"</color>\nDOWNLOADING - ESTIMATED "+(15-subi).ToString()+" SECONDS";
yield return new WaitForSecondsRealtime(1);
}

if(FileManagerSecure.FileExists(downloadfile)){
echo8("trace2");
echo8(downloadfile);
SuperController.singleton.RescanPackages();
yield return new WaitForSecondsRealtime(2);
}
echo8("trace3");
if(!FileManagerSecure.FileExists(upgradescript)){
	
SuperController.singleton.mainHUD.Find("Browsers/Online Scene Browser Canvas/AutoExtractToggle/").GetComponent<Toggle>().isOn=true;
foreach(Toggle t in SuperController.singleton.onlineBrowser.transform.parent.GetComponentsInChildren<Toggle>(true)){
if(t.name=="AutoExtractToggle"){t.isOn=true;}
}	
SuperController.singleton.onlineBrowser.transform.parent.gameObject.SetActive(false);
yield return new WaitForSecondsRealtime(0.5f);
SuperController.singleton.onlineBrowser.transform.parent.localPosition=obpos;
introtext.text="\n\n\n\n\n\n\n\n\n\n<color=#cc9900>//\\\\/\\\\ORPHINE° V"+latestv+"</color>\nCOULD NOT FIND UPGRADE - CONTACT GOD ON VAMNET OR HUB";
yield return new WaitForSecondsRealtime(5);
copy.enabled=false;
infopanel.enabled=false;
infopanelgroup.alpha=0f;
		copygroup.blocksRaycasts = false;
		copygroup.interactable = false;
		infopanelgroup.blocksRaycasts = false;
		infopanelgroup.interactable = false;
infopanel.sortingOrder=31;
yield break;
}
introtext.text="\n\n\n\n\n\n\n\n\n\n<color=#cc9900>//\\\\/\\\\ORPHINE° V"+latestv+"</color>\nUPGRADING - PLEASE WAIT";
SuperController.singleton.onlineBrowser.transform.parent.gameObject.SetActive(false);
SuperController.singleton.onlineBrowser.transform.parent.localPosition=obpos;
yield return new WaitForSecondsRealtime(2.5f);
SuperController.singleton.mainHUD.Find("Browsers/Online Scene Browser Canvas/AutoExtractToggle/").GetComponent<Toggle>().isOn=true;


foreach(Toggle t in SuperController.singleton.onlineBrowser.transform.parent.GetComponentsInChildren<Toggle>(true)){
if(t.name=="AutoExtractToggle"){t.isOn=true;}
}

foreach(MVRDownloadManager md in SuperController.singleton.mainHUD.GetComponentsInChildren<MVRDownloadManager>(true)){
md.manageAllBrowsers=true;
md.saveFolder=sfolder;
md.autoOpenPackageScene = true;
}

StartCoroutine(NewSessionPreset(upgradescript));
			
			
			
			}				
			}
			//StartCoroutine(getinit(true));
			yield return null;
        }
		
private void slideall(JSONStorableFloat jf) {

sa(jf.val);

}

private bool buffer=false;
		private void sa(float j,bool move=true) {

try{
	
		int v=180;
	if(pslider.slider.value>0){
	pvalue.UItext.alignment = TextAnchor.MiddleRight;v=-280;
	}else{
	pvalue.UItext.alignment = TextAnchor.MiddleLeft;v=-150;
	}
var f=Mathf.Round(j).ToString();
pvalue.transform.localPosition = new Vector2(pslider.slider.handleRect.transform.localPosition.x+v,pvalue.transform.localPosition.y);pvalue.text=f+"%";

	
		mergeslide=true;

            	foreach (SM sm in _mainBank.Concat(_genitalBank))
			{
				//echo3("check "+sm.Morph.resolvedDisplayName+sm.Morph.morphName);
				if(futalist.Contains("\n"+sm.Morph.resolvedDisplayName+sm.Morph.morphName+"\n") && isfuta){
					//echo3("denied "+sm.Morph.resolvedDisplayName);
					continue;}
					
				if(keeplist.Contains("\n"+sm.Morph.resolvedDisplayName+sm.Morph.morphName+"\t")){
				if(!sm.Morph.uid.Contains("Custom/") && !sm.Morph.uid.Contains(":/")){
				continue;}}
					
				if (sm.Selected == true)
				{

				
float a=0f;
//foreach(KeyValuePair<string, float> d in morphvalue){echo3(d.Key+":<"+d.Value.ToString());}
if(lastvalue.ContainsKey(sm.Morph.uid)){
if(lastvalue[sm.Morph.uid]!=sm.Morph.morphValue){
	
if(morphvalue.ContainsKey(sm.Morph.uid)){
	
	morphvalue.Remove(sm.Morph.uid);//echo3("shiiiit");

	
	}
}
//causality is a bitch
lastvalue.Remove(sm.Morph.uid);
}


if(!morphvalue.ContainsKey(sm.Morph.uid)){morphvalue.Add(sm.Morph.uid,sm.Morph.appliedValue+a);
//echo3("shit "+sm.Morph.uid);
}
		if(morphvalue[sm.Morph.uid]<0.001 && morphvalue[sm.Morph.uid]>-0.001){continue;}
		//echo3(morphvalue[sm.Morph.uid].ToString());
float newvalue=(morphvalue[sm.Morph.uid]/1000)*j*10;
sm.Morph.morphValue=newvalue;

//and I assraped her like the filthy cocaine crack gangbangwhore she is
lastvalue.Add(sm.Morph.uid,newvalue);


if(slider[numvalue[sm.Morph.uid]] != null && move){

//NOTE GPU
Color newc=new Color(0.8f, 0.6f, 0f);
//newc.a=0.4f+NormalisedMagnitude(Morphnum[numvalue[sm.Morph.uid]+1]);
MorphToggles[numvalue[sm.Morph.uid]+1].backgroundColor = newc;

//echo3(Time.deltaTime.ToString());
slider[numvalue[sm.Morph.uid]].slider.value = sm.Morph.morphValue*1000;

}
merging=true;

				}

			}
return;
}catch(Exception e){SuperController.LogError("Exception caught: " + e);return;}
		}


private string et="";private string streamkey; private float streamtime=0f;
protected void slideval(JSONStorableFloat jf) {
if(!mergeslide){//echo3("SLIDING");
			float now = Time.time-last;
			
			if(now>0.5f && last!=0){

if(Morphnum[intparse(jf.name)+1].isDriven){
	Result("Currently locked and controlled by "+Morphnum[intparse(jf.name)+1].drivenBy);
	slider[intparse(jf.name)].slider.value=Morphnum[intparse(jf.name)+1].morphValue*1000;
	jf.val=Morphnum[intparse(jf.name)+1].morphValue*1000;
		return;
}

Morphnum[intparse(jf.name)+1].morphValue=jf.val/1000;if(jf.val<1 && jf.val>-1){Morphnum[intparse(jf.name)+1].morphValue=0.0f;}
//Color newc=MorphToggles[intparse(jf.name)+1].backgroundColor;
Color newc=new Color(1f, 0.7f, 2f);
newc.a=0.4f+Morphnum[intparse(jf.name)+1].jsonFloat.defaultVal;
MorphToggles[intparse(jf.name)+1].backgroundColor = newc;

if(streamover==Morphnum[intparse(jf.name)+1].uid && stream!="off"){
var key=Morphnum[intparse(jf.name)+1];
streamkey=key.uid+key.morphName+key.morphBank;
if(Time.time-mousetime>0.1f){
//et+=((Time.time-mousetime).ToString()+"000").Substring(0,3)+":"+key.morphValue.ToString()+",";
et+=key.morphValue.ToString()+",";
mousetime=Time.time;
}
}

if(mouseover!=""){if(mouseover==Morphnum[intparse(jf.name)+1].uid){
if(morphvalue.ContainsKey(Morphnum[intparse(jf.name)+1].uid)){
morphvalue.Remove(Morphnum[intparse(jf.name)+1].uid);}
morphvalue.Add(Morphnum[intparse(jf.name)+1].uid,((jf.val/pslider.slider.value)*100)/1000);


if(lastvalue.ContainsKey(Morphnum[intparse(jf.name)+1].uid)){
lastvalue.Remove(Morphnum[intparse(jf.name)+1].uid);}
lastvalue.Add(Morphnum[intparse(jf.name)+1].uid,Morphnum[intparse(jf.name)+1].morphValue);

}

						var key=Morphnum[intparse(jf.name)+1].uid+Morphnum[intparse(jf.name)+1].resolvedDisplayName;
		
						if(hmorphoriginal.ContainsKey(key)){hmorphoriginal.Remove(key);}
						if(bmorphoriginal.ContainsKey(key)){bmorphoriginal.Remove(key);}
						if(hmorphcopy.ContainsKey(key)){hmorphcopy.Remove(key);}
						if(bmorphcopy.ContainsKey(key)){bmorphcopy.Remove(key);}				
							
			Result(Morphnum[intparse(jf.name)+1].resolvedDisplayName + " set to " + jf.val);
			
			}//end if mouseover!=""
			}//end if now>0.5...
	}		
		}
		
		
private float mousetime=0f;private string streamover;
private void Preset(bool save=false,string mode="Appearance"){ //Preset(save: true, mode: "Morph");//Preset(save: true, mode: "Appearance");
var f=""; var jpg="";var presetname=mode;if(mode=="Morph"){presetname="Morphs";}
if(!save){
copypaste=true;
StartCoroutine(Head(body: false,load: true));
//while(copypaste){}
}
echo25("t7");
UITransform.gameObject.SetActive(false);
//SuperController.singleton.fileBrowserUI.fileFormat="vap";
SuperController.singleton.GetMediaPathDialog((filePath) =>
                            {
								                                if (String.IsNullOrEmpty(filePath))
                                {
									echo25("t8");
									UITransform.gameObject.SetActive(true);
                                    return;
                                }
								
								echo25("t9");
								UITransform.gameObject.SetActive(true);
								if(!save){Refresh();StartCoroutine(Headpaste(false,true));}					

								f=filePath;		
								
								if(save){
								string file = filePath.Substring(filePath.LastIndexOfAny(new char[] { '/', '\\' })+1);
								string path = filePath.Substring(0,filePath.LastIndexOfAny(new char[] { '/', '\\' })+1);
								f=path+"Preset_"+file+".vap";
								jpg=path+"Preset_"+file+".jpg";
								SuperController.singleton.DoSaveScreenshot(jpg);
								}
								
								JSONStorable js = _person.GetStorableByID(mode+"Presets");
								JSONStorableUrl presetPathJSON = js.GetUrlJSONParam("presetBrowsePath");
								presetPathJSON.val = SuperController.singleton.NormalizePath(f);

								if(save){js.CallAction("StorePreset");}else{js.CallAction("LoadPreset");}
								//_person.GetComponentInChildren<PresetManager>().StorePreset(true);
								
							},filter: "vap",suggestedFolder: "Custom\\Atom\\Person\\"+presetname, fileRemovePrefix: "Preset_", hideExtenstion: true, showInstallFolderInDirectoryList: true);

							if(save){
							uFileBrowser.FileBrowser browser = SuperController.singleton.mediaFileBrowserUI;
							browser.SetTextEntry(true);
							//browser.fileEntryField.text = String.Format("{0}.{1}", ((int)(DateTime.UtcNow - new DateTime(1970, 1, 1)).TotalSeconds).ToString(), "vap");
							browser.ActivateFileNameField();}

	/*
	foreach(Component c in _person.GetComponentsInChildren<Component>(true)){
		if(c.name.contains("appear")){
		string s = ""; Transform g = c.transform;
		while (g != null){s = g.name + "/" + s;g = g.parent;}
		echo3(s+c.name);
			}
			//_person.LoadAppearancePresetDialog();
			*/
	
	}

private void Setsliders(bool refresh=true){
int sliders=0;

if(rightUIContent==null){return;}
	foreach (UIDynamicSlider tt in rightUIContent.parent.GetComponentsInChildren<UIDynamicSlider>(true))
		{//echo3("slider "+tt.name);
		RemoveSlider(tt);
		}

for (int i = 0; i < 5000; i++){if(slider[i] != null){//GameObject.Destroy(slider[sliders].gameObject);
RemoveSlider(slider[i]);
//echo3("removing");
}}

//echo3("trace2");
if(refresh){slidecount=5;oldparpos=0;}
}

private UIDynamicSlider pslider;
private UIDynamicButton zero;
private UIDynamicButton hundred;
private UIDynamicButton bake;private int setp=9999;private UIDynamicTextField pvalue;
private void preview(){

JSONStorableFloat minfloat = new JSONStorableFloat("preview", 100f, slideall, -200f, 200f);
pslider = CreateSliderui(minfloat);
pslider.transform.SetParent(sliderui.transform,false);
pslider.transform.Find("Slider").GetComponent<Image>().color = new Color(0.6f,0.57f,0.62f);
pslider.sliderValueTextFromFloat.UIInputField.textComponent.fontSize=18;
pslider.sliderValueTextFromFloat.UIInputField.readOnly=true;
GameObject.Destroy(pslider.sliderValueTextFromFloat.gameObject);
pvalue=Text(sliderui,pslider.slider.value.ToString()+"%",-5f,29f,200,406,10);
pvalue.UItext.fontSize=22;
pvalue.backgroundColor=Color.clear;
pvalue.UItext.color=Color.white;

pvalue.UItext.lineSpacing = 0;
pvalue.UItext.horizontalOverflow = HorizontalWrapMode.Overflow;
//input.textComponent.verticalOverflow = VerticalWrapMode.Truncate;
pvalue.UItext.alignment = TextAnchor.MiddleRight;
pvalue.transform.localPosition = new Vector2(pslider.slider.handleRect.transform.localPosition.x-50,pvalue.transform.localPosition.y);
transui2(pslider.transform,885,0,-216,372f);
//pslider.sliderValueTextFromFloat.UIInputField.textComponent.color=new Color(0.8f,0.79f,0.82f);

	zero=setbutton(sliderui,() => {sa(0);pslider.slider.value=0f;},"0%",-15f,40f,263f,402f);
                zero.buttonColor = new Color(0.6f, 0.57f, 0.62f);
                zero.textColor = new Color(0f, 0f, 0f);
                //zero.buttonText.fontStyle = FontStyle.Bold;
                zero.buttonText.fontSize = 26;
				
	hundred=setbutton(sliderui,() => {sa(100);pslider.slider.value=100f;},"100%",-15f,40f,337,402f);
                hundred.buttonColor = new Color(0.6f, 0.57f, 0.62f);
                //hundred.textColor = new Color(0.8f, 0.9f, 1f);
                //hundred.buttonText.fontStyle = FontStyle.Bold;
                hundred.buttonText.fontSize = 26;
				
	bake=setbutton(sliderui,() => {morphvalue.Clear();sa(100);pslider.slider.value=100f;},"Set current as normal",180f,40f,418f,402f);
                bake.buttonColor = new Color(0.6f, 0.57f, 0.62f);
                bake.textColor = new Color(0f, 0f, 0f);
                //bake.buttonText.fontStyle = FontStyle.Bold;
                bake.buttonText.fontSize = 26;				

					EventTrigger.Entry defsub = new EventTrigger.Entry();
					defsub.eventID = EventTriggerType.PointerEnter;
					defsub.callback.AddListener((eventData) => {helptip("bake");submenu(bake.transform,"Set as default\nRestore default","defaults",w:180, z:0,offsetx: -89,offsety: -66,spacing: 37,tx:hud.transform);});
					bake.gameObject.AddComponent<EventTrigger>();
					bake.gameObject.GetComponent<EventTrigger>().triggers.Add(defsub);


					EventTrigger.Entry defbuttonrem = new EventTrigger.Entry();
					defbuttonrem.eventID = EventTriggerType.PointerExit;
					defbuttonrem.callback.AddListener((eventData) => {
					pboxon=false;
					if(!fading){StartCoroutine(removepbox(false,delay:0.5f));}				
					});
					bake.gameObject.AddComponent<EventTrigger>();
					bake.gameObject.GetComponent<EventTrigger>().triggers.Add(defbuttonrem);	

/*
foreach(Image im in rightUIContent.parent.transform.GetComponentsInChildren<Image>()){
	echo3(im.name);
}
*/

/*
foreach(Image im in pslider.slider.gameObject.transform.GetComponentsInChildren<Image>()){
	echo(im.name);
}
*/


pslider.slider.fillRect.transform.SetParent(hide.transform, false);

pslider.quickButtonsEnabled = false;
pslider.rangeAdjustEnabled = false;
pslider.defaultButtonEnabled = false;
pslider.slider.wholeNumbers = false;
//slider[sliders].slider.UIText.text = "";
GameObject.Destroy(pslider.quickButtonsGroup.gameObject);
GameObject.Destroy(pslider.defaultButton.gameObject);
GameObject.Destroy(pslider.rangeAdjustGroup.gameObject);
GameObject.Destroy(pslider.labelText.gameObject);
GameObject.Destroy(pslider.quickButtonM1.gameObject);
GameObject.Destroy(pslider.quickButtonM2.gameObject);
GameObject.Destroy(pslider.quickButtonM3.gameObject);
GameObject.Destroy(pslider.quickButtonM4.gameObject);
GameObject.Destroy(pslider.quickButtonP1.gameObject);
GameObject.Destroy(pslider.quickButtonP2.gameObject);
GameObject.Destroy(pslider.quickButtonP3.gameObject);
GameObject.Destroy(pslider.quickButtonP4.gameObject);
}

/*



public void LoadAppearance()
{
	string text = SuperController.singleton.savesDir + type + "\\appearance";
	string text2 = text;
	if (lastLoadAppearanceDir != string.Empty && FileManager.DirectoryExists(lastLoadAppearanceDir))
	{
		string suggestedBrowserDirectoryFromDirectoryPath = FileManager.GetSuggestedBrowserDirectoryFromDirectoryPath(text2, lastLoadAppearanceDir);
		if (suggestedBrowserDirectoryFromDirectoryPath != null && FileManager.DirectoryExists(suggestedBrowserDirectoryFromDirectoryPath))
		{
			text2 = suggestedBrowserDirectoryFromDirectoryPath;
		}
	}
	else if (!FileManager.DirectoryExists(text2))
	{
		FileManager.CreateDirectory(text2);
	}
	List<ShortCut> shortCutsForDirectory = FileManager.GetShortCutsForDirectory(text, true, false, true, true);
	SuperController.singleton.fileBrowserUI.shortCuts = shortCutsForDirectory;
	SuperController.singleton.fileBrowserUI.keepOpen = false;
	SuperController.singleton.fileBrowserUI.defaultPath = text2;
	SuperController.singleton.fileBrowserUI.SetTitle("Select Preset File");
	SuperController.singleton.fileBrowserUI.SetTextEntry(false);
	SuperController.singleton.fileBrowserUI.Show(LoadAppearancePreset);
}
*/

private void setdefaults(string s=""){
var f=_plugindir+_pluginowner+_plugin+"\\default.morphine";

if(s==""){
if(femalebackup==""){femalebackup=femalemake;}
if(FileManagerSecure.FileExists(f)){
femalemake=FileManagerSecure.ReadAllText(f);
femalemaker=femalemake+keeplist;
}	
return;
}
if(s.Contains("Restore")){

if(FileManagerSecure.FileExists(f+".txt")){FileManagerSecure.DeleteFile(f+".txt");}
if(FileManagerSecure.FileExists(f+".json")){FileManagerSecure.DeleteFile(f+".json");}
if(FileManagerSecure.FileExists(f+".json.txt")){FileManagerSecure.DeleteFile(f+".json.txt");}

femalemake=femalebackup;
femalemaker=femalemake+keeplist;
Result("RESTORED DEFAULT MORPHS FOR NEW MODELS");
}
else{

		var outlist="";
		foreach (SM sm in _mainBank.Concat(_genitalBank))
		{
		if(sm.Morph.morphValue!=0.0f){
		outlist+="\n"+sm.Morph.resolvedDisplayName+sm.Morph.morphName+"\t"+sm.Morph.morphValue+"\t"+sm.Morph.resolvedDisplayName;
		}
		}
		var copylist=outlist.Replace("\n","\\n").Replace("\t","\\t");
		femalemake=outlist;
		femalemaker=femalemake+keeplist;
		FileManagerSecure.WriteAllText(f,outlist);
		FileManagerSecure.WriteAllText(f+".txt",copylist);
		
		JSONClass saveJSON = SuperController.singleton.GetSaveJSON(_person, true, true);
		FileManagerSecure.WriteAllText(f+".json",saveJSON.ToString());
		FileManagerSecure.WriteAllText(f+".json.txt",saveJSON.ToString().Replace("\"","'").Replace("\n","").Replace("\t",""));
		
		Result("SET CURRENT AS DEFAULT MORPHS FOR NEW MODELS");
	
		
}
	
}
private void selectrange(){return;
JSONStorableFloat minfloat = new JSONStorableFloat("", 1000f, slideall, 0f, 1000f);
UIDynamicSlider sslider = CreateSliderui(minfloat);
sslider.slider.wholeNumbers = true;
sslider.transform.SetParent(bg.transform,false);
transui2(sslider.transform,200,0,700,800f);
}

private UIDynamicTextField slidetext;
string automorphs="[PHMEyeLidsTopUpR][PHMEyeLidsTopUpL][!R Impact Front1][!L Impact Front1][PHMSmileFullFace][PHMFlirting][PHMEyelidsTopDownR][PHMEyelidsTopDownL][PHMEyeLidsBottomUpR][PHMEyeLidsBottomUpL][PHMEyeLidsBottomDownR][PHMEyeLidsBottomDownL]";

private IEnumerator countmorphs(bool mode=true,bool count=false){
	//yield break;
	
	_mcount=0;
	
			var bnks = _characterSelector.morphBank1.morphs.Concat(_characterSelector.morphBank2.morphs);
			if(isfuta){
			bnks = _characterSelector.femaleMorphBank1.morphs.Concat(_characterSelector.maleMorphBank1.morphs).Concat(_characterSelector.femaleMorphBank2.morphs.Concat(_characterSelector.maleMorphBank2.morphs));
			}
	
	foreach (DAZMorph morph in bnks)
           	{
           	if (morph.appliedValue != morph.jsonFloat.defaultVal && morph.visible){
		if(!automorphs.Contains("["+morph.morphName+"]")){_mcount++;


}}
		}
if(mode==false){_moldcount=_mcount;}
	yield return _mcount;
	}

private bool loaded=false;
private bool mergeslide=false;
private float speed;
private float fov;
private int moved;
private int loadcount=0;
private float last=0;private float lastmerge=0;
private int slidecount =0;
private string chanlist="";
private string msgtargets="";		
private GameObject FrontlightObject;
private Light Frontlight = null;
private GameObject BacklightObject;
private Light Backlight = null;
private Atom coco;
private VRWebBrowser moco;
private Transform lastparent;
public string screenmode(){
	var mode="VR";
	if (!SuperController.singleton.isOVR && !SuperController.singleton.isOpenVR){mode="2D";}
	else if(SuperController.singleton.mainHUD.Find("MainUICanvas/Panel/BackPanel").eulerAngles.x-SuperController.singleton.helpHUDText.transform.eulerAngles.x==0f){mode="2DVR";}
	return mode;
}

private string lastmsg; private string msgtarget="";

private void targetlist(string oldt,string newt,bool clicked=false){
	if(newt==""){if(clicked){_chatinput.ActivateInputField();}
	return;}
	
	var b=_chatinput.text;echo5("saving "+b);
if(clicked){_chatinput.ActivateInputField();}
if(oldt=="" || msgtarget ==""){msgtarget=newt;lastmsg=newt;}
if(oldt!=newt){lastmsg=oldt;msgtarget=newt;}

if(newt!=""){
msgtargets=newt+"\n"+msgtargets.Replace(newt+"\n","");}
if(oldt!=""){
msgtargets=oldt+"\n"+msgtargets.Replace(oldt+"\n","");}

if(msgtarget.Substring(0,1)=="#"){chatlabel.text=chatlabel.text="<color=#ff9933>"+msgtarget+"</color>";
if(!channels.contains(msgtarget+"\n")){Clientmessage("/join "+msgtarget, raw:false);}
else if(chanlist!=msgtarget){chanlist=msgtarget;Clientmessage("NAMES :"+msgtarget,raw: true);}
}
else{chatlabel.text="<color=#ff6622>TO > "+msgtarget+"</color>";}
if(clicked){_chatinput.ActivateInputField();
_chatinput.text=b;
	echo5("restoring "+_chatinput.text);
}
}

private int _ccount=5;private int _cccount=4;
private int _ccount2=2;private int _cccount2=7;
private int _ccount3=1;private int _cccount3=3;
private string stream="off";
private bool optionschk=false;
private Vector2 isobutton;private bool isoset=false;private Transform com2;private bool setagain=false;private bool checkpress=true;private float checktime;
public bool realVR(){
		if(SuperController.singleton.mainHUD.Find("MainUICanvas/Panel/BackPanel").eulerAngles.x-SuperController.singleton.helpHUDText.transform.eulerAngles.x==0f){return false;}
return true;
}

private IEnumerator silentjoin(string s){
var bck=msgtarget;
s=s+",";
var stmp=s.Split(","[0]);
foreach(String ss in stmp){
if(ss!=""){
	Clientmessage("/join "+ss, raw: false);
	yield return new WaitForSecondsRealtime(1);
	
}
	
}
yield return new WaitForSecondsRealtime(1);
targetlist(msgtarget,bck);
}



private float prchk=Time.realtimeSinceStartup;
private IEnumerator checkproximity(bool eternal=true){
var tag="Proximity:";
int tl=tag.Length;
while(eternal){
	
foreach(string s in SuperController.singleton.GetAtomUIDs()){
if(s.contains(tag)){

Atom at=SuperController.singleton.GetAtomByUid(s);


var target=s.Substring(tl,s.Length-tl);
var distance="100";
if(target.Contains(":")){
var tmp=target;
target=target.Substring(0,target.IndexOf(":"));
distance=tmp.Substring(target.Length+1,tmp.Length-(target.Length+1));

}

if(SuperController.singleton.GetAtomByUid(target)!=null){
Atom atarget=SuperController.singleton.GetAtomByUid(target); 

float range=float.Parse(distance);
float dist = Vector3.Distance(at.rigidbodies[0].transform.position, SuperController.singleton.leftHand.position);
float distb = Vector3.Distance(at.rigidbodies[0].transform.position, SuperController.singleton.rightHand.position);
if(distb<dist){dist=distb;}

float cval=1.06f-((dist/range)*100);

if(cval>=-0.1f && cval <=1.1f){

JSONStorable trigger = atarget.GetStorableByID("Trigger");
JSONStorableFloat af = trigger.GetFloatJSONParam("value");
af.val=cval;

	
}
}
}



}


yield return null;	

}
}


private IEnumerator checkslidecontrollers(bool eternal=true){
var tag="SlideController:";
int tl=tag.Length;
while(eternal){
foreach(string s in SuperController.singleton.GetAtomUIDs()){
if(s.contains("SlideController:")){
Atom at=SuperController.singleton.GetAtomByUid(s);
if(!acvalues.ContainsKey(at.name) || acvalues[at.name]!=at.mainController.transform.position){
var target=s.Substring(tl,s.Length-tl);

if(SuperController.singleton.GetAtomByUid(target)!=null){
Atom atarget=SuperController.singleton.GetAtomByUid(target); 
//at.transform.position=atarget.mainController.transform.position;

float cval=Math.Abs(at.rigidbodies[0].transform.position.x*2);
if(cval>1){cval=1;}

JSONStorable trigger = atarget.GetStorableByID("Trigger");
JSONStorableFloat af = trigger.GetFloatJSONParam("value");
af.val=cval;

}
}

if(acvalues.ContainsKey(at.name)){acvalues.Remove(at.name);}
acvalues.Add(at.name,at.mainController.transform.position);
}
}
yield return null;	
}
}


private IEnumerator releasehand(bool eternal=true){
yield return new WaitForSecondsRealtime(1.5f);

}

private GameObject camleft;
private GameObject camright;
private GameObject tooltip;
private GameObject safebox;
private IEnumerator removehelp(){
yield return new WaitForSecondsRealtime(0.5f);
if(tooltip!=null && !helptipson){GameObject.Destroy(tooltip.gameObject);}
	
}


private void helptip(string h=""){


if(!showhelptips){
	if(h!="helpbutton" && h!="installbutton"){
if(tooltip!=null){GameObject.Destroy(tooltip.gameObject);}
	return;}
}

if(h==""){helptipson=false;StartCoroutine(removehelp());}

else{helptipson=true;
StopCoroutine(removehelp());
if(tooltip!=null){GameObject.Destroy(tooltip.gameObject);}
float rr=0;bool r=false;float hh=394;var t="";float ww=0;


if(h=="installbutton"){hh=330.005f;t="//\\\\/\\\\ORPHINE Session-plugin installer";h="POWERFUL - RECOMMENDED: Click to automatically install //\\\\/\\\\ORPHINE as a session- plugin. Using /\\\\/\\\\ORPHINE as a session-plugin gives you all the full features of /\\\\/\\\\ORPHINE.\n\n/\\\\/\\\\ORPHINE session-version has one-click auto-upates as well as automatically include itself as a scene-plugin when you save scenes that has elements or atoms that make use of /\\\\/\\\\ORPHINE functions";}
else if(h=="helpbutton"){hh=330.005f;t="//\\\\/\\\\ORPHINE HELP-system & tooltips";h="Click this button to turn on/off tooltips for every button/menu-element of //\\\\/\\\\ORPHINE, or you can select read documentation, watch tutorial videos, or open the //\\\\/\\\\ORPHINE documentation site externally from the hover menu.\n\nThe tooltip function remembers it`s setting through VAM restart, having it ON is recommended for beginners";}
else if(h=="_input"){hh=130.001f;t="RESULT-display";h="This area will show feedback / results when you perform actions in the main //\\\\/\\\\ORPHINE-panel / Plugin-UI";}
else if(h=="pslider"){hh=330.001f;t="main //\\\\/\\\\ORPHINE-slider";h="The main //\\\\/\\\\ORPHINE-slider will adjust all selected morphs in the above list simultaneously as if they were one merged morph.\nPOWERFUL - RECOMMENDED:\nUse often with selected morphs, your workflow  will be tenfolds faster and more precise as compared to tweaking one and one morph, Sliding collectively gives you  better perspective of your work in realtime, and makes merging morphs obsolete";}
else if(h=="zero"){hh=130;t="0%-button";h="This will set the main //\\\\/\\\\ORPHINE-slider to 0% with all the selected morphs";}
else if(h=="hundred"){hh=160;t="100%-button";h="This will set the main //\\\\/\\\\ORPHINE-slider to 100% and set all selected morphs to the the max/original position they had the moment they were selected";}
else if(h=="bake"){hh=330.001f;t="Set as normal-button";h="This will  set  the  main  //\\\\/\\\\ORPHINE-slider  to  100% without changing the selected morphs,  use  this to add morphs to your selection to keep already selected morphs at their current value - USE OFTEN, and always when changing selections while using main slider.\n\nThe <b>hover-menu</b> will let you save the appearance as the default for new models, or restore the factory default";}
else if(h=="_orderButton"){hh=130;t="Current sorting-button";h="Will order the list of morphs either alphabetically or by descending value highest > lowest";}
else if(h=="_copyButton"){r=false;hh=160;t="Inactive display-button";h="This will select what type of inactive morphs are shown in searches in the above morph-list, be it inbuilt/custom/licenced or all inactive morphs";}
else if(h=="letterbox"){r=false;hh=160f;t="Right letter-menu";h="Shows a list of first letters alphabetically of displayed morphs. Clicking a letter scrolls to the first morph starting with the given letter";}
else if(h=="_selectButton1"){r=false;hh=130;t="Select-mode button 1";h="Will set the head/body/genitals/<-buttons to perform selective or deselective actions";}
else if(h=="_selectButton2"){r=false;hh=130;t="Select-mode button 2";h="Will set the similar/duplicates-buttons to perform selective or deselective actions";}
else if(h=="_copyButton2"){r=false;hh=160;t="Show only active-button";h="The [X]-button will turn of showing inactive morphs, to show inactive morphs again hit the grayed-out area left to the [X]-button";}
else if(h=="_headButton"){r=false;hh=130;t="Select/deselect head";h="Selects/deselects all head-morphs, use this to adjust only the head with the main //\\\\/\\\\ORPHINE-slider";}
else if(h=="_bodyButton"){r=false;hh=130;t="Select/deselect body";h="Selects/deselects all head-morphs, use this to adjust only the head with the main //\\\\/\\\\ORPHINE-slider";}
else if(h=="_gensButton"){r=false;hh=200;t="Select/deselect genitals";h="Selects/deselects all head-morphs, use this to adjust only the head with the main //\\\\/\\\\ORPHINE-slide. the genitaks sekecion is additive/subtractive, adding to anything already selected. To select -only- genitals, hit the\"Deselect all\"-button first";}
else if(h=="_similarButton"){r=false;hh=260;t="Select/deselect similar/last";h="Selects/subtracts all morphs that has similar names as the morphs already selected in the above morph-list. The similar-button will change name to \"last\" when in deselect-mode, hence it will deselect any morphs with similar names to the last morph select-checkmark you clicked in the morph-list";}
else if(h=="_DButton"){r=false;hh=160;t="Select/deselect duplicates";h="Selects all duplicates found in the above morph-list, Tip: use it to zero-out duplicates by hitting 0% on the main //\\\\/\\\\ORPHINE-slider afterwards, then hit [Refresh]";}
else if(h=="_filterButton" || h=="_deselectfilterButton"){r=false;hh=130;t="Select/deselect custom";h="Selects/deselects custom/licensed morphs. Function is additive/subtractive, keeping existing selections";}
else if(h=="selectf" || h=="deselectf"){r=false;hh=130;t="Select/deselect filter";h="Selects/deselects morphs according to the search-filter you have typed in the [Filter:]-inputfield";}
else if(h=="searchf"){r=false;hh=130;t="Search filter";h="Will search and display any morphs based on the keywords in [Filter:]-inputfield";}
else if(h=="_rDButton"){r=false;hh=200;t="Fix licensed-button";h="Will try to convert any licensed morphs you have selected into either local custom morphs or inbuilt morphs, make sure to select morphs first as it only performs on selected morps, to perform on all licensed morphs, hit the [Select all]-button first";}
else if(h=="_fDButton"){r=false;hh=260;t="Fix duplicate-button";h="POWERFUL - RECOMMENDED: Will combine all selected duplicate-morphs, resulting in getting rid of all duplicates without any visual change to the model, make sure to select morphs first as it only performs on selected morphs. To perform on all duplicates, hit the [Select duplicates]- or [Select all]-button first";}
else if(h=="_5Button"){r=false;hh=260;t="Select/deselect value-slider";h="Selects or deselects morphs below the chosen slider-value on the slider that shows up when you move your mouse over the button. POWERFUL - RECOMMENDED: Very effective when combined with setting the [0%]-button after selection to get rid of morphs that shows little or no visual difference to the model, use this optimize and finish models";}
else if(h=="_selectAllButton"){r=false;hh=230;t="Select all-button";h="Will select all morphs currently shown in the above morph-list, recommended to use in combination with the main //\\\\/\\\\ORPHINE-slider to fine-adjust your model or with the [0%]-button then [Refresh] to wipe out all morphs on your model quickly";}
else if(h=="_deselectAllButton"){r=false;hh=200;t="Deselect all-button";h="Will select all morphs currently shown in the above morph-list, recommended to use when you want to select only genuras with the [Select genitals]-buttin afterwards or when selecting a new group of manually selected morphs to work with";}
else if(h=="_invertButton"){r=false;hh=230;t="Invert selection-button";h="Will invert the selected-status of all morhs, eg any selected morphs will be deselected, and any deselected morphs will be selected. Recommended use when example working with head morphs using the main //\\\\/\\\\ORPHINE-slider, then clicking invert selection to continue working with the rest of the body";}
else if(h=="_afilterButton"){r=false;hh=130;t="Delete selected-button";h="Will delete all active morphs currently selected in the morph-list quickly";}
else if(h=="_refreshButton"){r=false;hh=200;t="Refresh-button";h="Will refresh any  results after performing actions,  like adjusting an inactive morph will get moved to active morphs after refresh, zeroed-out active morphs will be removed from the list etc, use [Refresh] often";}
else if(h=="skinbutton"){r=false;hh=260;t="Skin-button";h="POWERFUL - RECOMMENDED: Will show a hover-submenu to change the skin on your currently selected model in //\\\\/\\\\ORPHINE. The skin-button will keep textures and color settings, it will only change the actual model-skin, use this to avoid having to re-apply textures when changing the native model-skin";}
else if(h=="streambutton"){r=false;hh=290;t="STREAM-button";h="EXPERIMENTAL: The Stream-button will start and announce to all users online that you have started a co-op modeling/ morph-editing session, they will get an invite to join your session. Once joined any inbuilt morphs you adjust in the //\\\\/\\\\ORPHINE-main panel morph-list will be adjusted on anyone in the session with a model selected in the //\\\\/\\\\ORPHINE-panel";}
else if(h=="texturepaste"){r=false;hh=380.002f;t="Paste texture-button";h="POWERFUL - RECOMMENDED: Will paste any texture you`ve copied with the Copy-texture button. You can choose from the submenu what parts to paste, or apply RealSKIN™ - a special 8K 6-layer ultra realistic skincell-mesh texture that fits most skins. RealSKIN is smart-applied, so it finds and -only- applies onto empty texture-slots\n\nTip: Use the paste texture function for copying textures between models in a scene, or to keep a texture when loading in a new model in //\\\\/\\\\ORPHINE";}
else if(h=="texturecopy"){r=false;hh=160;t="Copy texture-button";h="POWERFUL - RECOMMENDED: Copies the texture of the current model you have selected in //\\\\/\\\\ORPHINE. Tip: Copy texture survives scene-load";}
else if(h=="morphload"){r=false;hh=230;t="Load //\\\\/\\\\orph-button";h="POWERFUL - RECOMMENDED: Will load in a selected Morph-Preset onto your currently selected model in //\\\\/\\\\ORPHINE and present you with a seamless slider to blend in head/body separately,  good for loading onto an already present look - giving you full control of the blended result";}
else if(h=="morphsave"){r=false;hh=130.001f;t="Save //\\\\/\\\\orph-button";h="Saves the current state of all morphs on your selected model in //\\\\/\\\\ORPHINE as a VAM-native Morph-Preset";}
else if(h=="headl"){r=false;hh=230;t="Load //\\\\/\\\\odel-button";h="POWERFUL - RECOMMENDED: Loads in a selected Appearance-Preset onto your selected model in //\\\\/\\\\ORPHINE and present you with a seamless slider to blend in head/body separately, good for loading onto an already present look - giving you full control of the blended result";}
else if(h=="heads"){r=false;hh=160;t="Save //\\\\/\\\\odel-button";h="Will save your selected model in //\\\\/\\\\ORPHINE as a VAM-native Appearance-Preset with all textures, morphs, clothing and hair";}
else if(h=="headp"){r=false;hh=260;t="Paste //\\\\/\\\\odel-button";h="POWERFUL - RECOMMENDED: Paste model will paste all morphs from any previously copied model in //\\\\/\\\\ORPHINE and present you with a seamless morph-blending slider for head/body separately, giving you full control. Tip: Use this to quickly copy and blend looks/morphs between two or more models in your scene without having to save/load presets";}
else if(h=="headc"){r=false;hh=260;h="POWERFUL - RECOMMENDED: Copy model will copy all active morphs from your current selected model in //\\\\/\\\\ORPHINE, to be pasted later to another model. The copy / paste process survives scene-loading, so you can copy morphs from one model, load in a new scene and paste onto any model in the newly loaded scene";t="Copy //\\\\/\\\\odel-button";}
else if(h=="personbutton"){r=false;hh=380.001f;ww=100;t="Add //\\\\/\\\\odel-button";h="POWERFUL - RECOMMENDED: Presents you with a hover-submenu where you can add any native VAM-inbuilt model directly with a ready-to-use morph-template you can slide from 0-100% on creation - 0% equals the VAM-default model with no morphs. Selecting \"Use humanizer\" will set the physics on the created model to be softer and more humanlike realistic, which is good especially for VR. The \"RealSKIN\"-option will apply a 8K 6-layer ultra-realistic skincell-mesh texture that fits additive onto most skins. Tip: Try moving the chest-controlpoint with your VR-controller when creating a model with humanizer on";}
else if(h=="modelbutton"){r=false;hh=260.001f;t="//\\\\/\\\\odels-list";h="This button will show your currently selected model if any, and present you with a hover-submenu where you can choose what model you want to select for editing in //\\\\/\\\\ORPHINE regardless of what atoms/controls are selected in VAM.\n\nThe [X] lets you delete that model, [C] turns collision ON/OFF";}
else if(h=="creatorTextField"){r=false;hh=230;t="Creator-inputfield";h="This field is part of the advanced morph-merging function in //\\/\\ORPHINE, and defines the Creator-name and the folder where the combined morph youre making/merging will reside. You cannot save merged morphs without setting a creator-name first";}
else if(h=="groupNameTextField"){r=false;hh=160;t="Group-inputfield";h="Part of the advanced morph-merging function in //\\/\\ORPHINE, the field defines the Group-category of the combined morph you`re making/merging";}
else if(h=="regionNameTextField"){r=false;hh=160;t="Region-inputfield";h="Part of the advanced morph-merging function in //\\/\\ORPHINE, the field defines the Region-category of the combined morph you`re making/merging";}
else if(h=="filterTextField"){r=false;hh=230;t="Filter-inputfield";h="Type in keywords to search/deselect/select, separated by a /-sign. Example: &quot;/nos/ear/chin&quot; will filter any morph containing either of those three strings. You can use as many keywords as you like, and putting a *-sign in front of a keyword will also search author/region and groupnames";}
else if(h=="minTextField"){r=false;hh=160;t="Low morph-range";h="Use this to set the minimum slider-range of all displayed morphs in the list above, it will also define the range-start the VAM-native UI uses for merged morphs you save";}
else if(h=="maxTextField"){r=false;hh=160;t="High morph-range";h="Use this to set the maximum slider-range of all displayed morphs in the list above, it will also define the range-end the VAM-native UI uses for merged morphs you save";}
else if(h=="prefixTextField"){r=false;hh=230;t="Prefix-inputfield";h="Prefix is part of the advanced morph-merging function in //\\\\/\\\\ORPHINE, and adds a prefix to all merged morphs you save. Example: setting it to \"YourName\" will name saved morphs accordingly > \"YourName-Arm Length\". It is adviced to always use a prefix to avoid name-duping morphs";}
else if(h=="pwTextField"){r=false;hh=330;t="Password-inputfield";h="Password will ensure you can actually overwrite and resave your own morphs, the password will encrypt and protect any morph from nameduping, as //\\/\\ORPHINE will deny overwriting or name-duplicating any existing inbuilt, custom or licebsed morphs unless you can prove it`s yours with the correct password. Any //\\/\\ORPHINE-made morphs will contain your encrypted password, thus preventing others from eadily overwriting or duplicating it`s exact name";}
else if(h=="morphNameTextField"){r=false;hh=200;t="Morph name-inputfield";h="This is the name of your saved merged morph, as part of the advanced morph-merge function in //\\/\\ORPHINE, any prefix will be added on save, and double-clicking a morph in the morph-list will paste that morph`s name into the name-field";}
else if(h=="split"){r=false;hh=160;t="Split-button";h="Split will save the morphs from the head, genitals and body on your currently selected model in //\\/\\ORPHINE as three separate merged-morphs";}
else if(h=="merge"){r=false;hh=260;t="Merge-button";h="Merge will save any morphs selected in the morph-list above into a combined morph. If you have selected genital-morphs aswell,  two merged morphs will be saved with \"-body\" and \"-genital\" suffix added to it`s name. To prevent adding a suffix, only select body &amp; head morphs then merge, then select only genital morphs and merge to a new name";}
else if(h=="lightslider1"){r=false;hh=200;t="//\\\\/\\\\ORPHINE front work light-slider";h="Adjusts the //\\\\/\\\\ORPHINE front work-light. To turn it off slide it all the way to the left, it`s value will autosave. This light is not visible to VAM or part of VAMs engine, thus they wont save with/mess up a scene";}
else if(h=="lightslider2"){r=false;hh=200;t="//\\\\/\\\\ORPHINE side work light-slider";h="Adjusts the //\\\\/\\\\ORPHINE side work-light. To turn it off slide it all the way to the left, it`s value will autosave. This light is not visible to VAM or part of VAMs engine, thus they wont save with/mess up a scene";}
else if(h=="rotator"){r=false;hh=130.001f;t="Rotate //\\\\/\\\\odel-slider";h="Rotates the model currently selected in //\\\\/\\\\ORPHINE, regardless of what atom-control you have selected in VAM";}
else if(h=="aligner"){r=false;hh=160;t="Align-button";h="Teleports and aligns you to the currently selected model in //\\\\/\\\\ORPHINE, regardless of what atom/person you have selected in VAM";}
else if(h=="inward"){r=false;hh=200;t="Zoom-IN movement-button";h="Moves the scene in inward/zoomed in direction - or if you like: moves you backwards. The button has down-press gradually smooth increased speed, and is more a lot more precise than using the keyboard for fine nudges/movement";}
else if(h=="outward"){r=false;hh=200;t="Zoom-OUT movement-button";h="Moves the scene in outward/zoomed out direction - eg: moves you forward. The button has down-press gradually smooth increased speed, and is more a lot more precise than using the keyboard for fine nudges/movement";}
else if(h=="upward"){r=false;hh=200;t="UP movement button";h="Moves the scene in upward direction - or from your perspective > moves you downwards. The button has down-press gradually smooth increased speed, and is more a lot more precise than using the keyboard for fine nudges/movement";}
else if(h=="downward"){r=false;hh=200;t="DOWN movement-button";h="Moves the scene in downward direction - meaning > moving you upwards. The button has down-press gradually smooth increased speed, and is more a lot more precise than using the keyboard for fine nudges/movement";}
else if(h=="leftward"){r=false;hh=200;t="LEFT movement-button";h="Moves the scene in left direction - hence moving you rightwards. The button has down-press gradually smooth increased speed, and is more a lot more precise than using the keyboard for fine nudges/movement";}
else if(h=="rightward"){r=false;hh=200;t="RIGHT-movement-button";h="Moves the scene in right direction - meaning it moves you leftwards. The button has down-press gradually smooth increased speed, and is more a lot more precise than using the keyboard for fine nudges/movement";}
else if(h=="editbutton"){r=false;hh=200;t="Play / Edit mode-button";h="Switches between Play- and Edit-mode, unlike the VAM-native buttons, this is a switch, indicating orange when in Edit-mode, green when in Play-mode. The hover-menu lets you set the standard mode VAM loads scenes in";}
else if(h=="resbutton"){r=false;hh=100;t="Reset location-button";h="Directly resets and aligns you to factory position in VAM";}
else if(h=="freezebutton"){r=false;hh=160;t="Freeze-button";h="Freezes audio and animation, just like the original VAM-native checkmark, but this blinks while in freeze-mode to remind you of the current state";}
else if(h=="pausebutton"){r=false;hh=200;t="Pause-button";h="Will completaly lowlevel pause and freeze all physics, movement and sound in VAM, effective to use when models explode and VAM-errors occur. The button blinks when paused to remind you of the current state";}
else if(h=="mirrorbutton"){r=false;hh=160;t="Mirror VR-button";h="Will turn mirroring immersive VR on/off. Recommend to use for recording/streaming immersive VR to OBS or other recording software";}
else if(h=="wwwbutton" || h=="wwwbuttonhud"){r=false;hh=160;t="WEB-button";h="Will hide or show the //\\\\/\\\\ORPHINE Web-browser panel. The current state will autosave and keep those settings on VAM / //\\\\/\\\\ORPHINE restart";}
else if(h=="chatbutton" || h=="chatbuttonhud"){r=false;hh=160;t="CHAT-button";h="Will hide or show the //\\\\/\\\\ORPHINE VAMNET ingame chat. The current state will autosave and keep those settings on VAM / //\\\\/\\\\ORPHINE restart";}
else if(h=="minibutton"){r=false;hh=100;t="MINIMIZE-button";h="Will minimize the //\\\\/\\\\ORPHINE main-panel / plugin-UI";}
else if(h=="closebutton"){r=false;hh=200;t="CLOSE-button";h="Will close the //\\\\/\\\\ORPHINE main-panel / plugin-UI, revealing the scene/plugins-panel, same function as the normal plugin-UI CLOSE-button other plugins have at default VAM-native position";}
else if(h=="ibox"){r=false;hh=260;t="Left letter-menu";h="The left-side letter alphabet-menu will let you search/select/deselect morphs with commonly used words from it`s hover-menu. If clicking a letter directly it will search for and list inactive morphs starting with that letter. The last [?]-letter button will contain a list of your 20 last searches used in the [Filter:] search-field below";}
else if(h=="morphbutton"){r=false;hh=230;t="Morph-button";h="The left-side morph-button will be black if that morph is inactive, and gray if it`s active after [Refresh]. Clicking it will delete the active morph, or set an inactive morph to it`s default value. The button also displays it`s current license, blank means VAM-inbuilt";}
else if(h=="morphtoggle"){r=false;ww=700;hh=330.002f;t="Morph-toggle/slider";h="The morph-selection checkmark will select/deselect a morph. Doubleclicking it will paste it`s morph-name to the morph-merge name-field below. When a morph is selected it can be collectively adjusted with the main //\\\\/\\\\ORPHINE-slider below.\n\nLicensed VAR-morphs are red, inbuilt are gray, custom are blue, active morphs found by search turns green, morphs adjusted directly with it`s slider turns pink and morphs adjusted by the main //\\\\/\\\\ORPHINE-slider turns orange. The green, pink and orange colors are set to make it easy to remember what you just did, and they reset to the original colors when you click [Refresh]";}
else if(h=="sendb"){r=false;hh=160;t="SEND-button";h="The SEND-button sends your message written in the chat-inputfield on its left side, the equivalent to hitting [Enter] / [Return] on your keyboard";}
else if(h=="chansb"){r=false;hh=300;t="CHANNEL-button";h="Shows a list of the channels you`re currently in when online in the ingame VAMNET-chat. Clicking a channel will set that as your active channel your messages goes to. The message-window shows the message-output of all channels you are in simultanously with the channel-name in front of any message. The [X] on each channel in the list leaves that channel";}
else if(h=="targetb"){r=false;hh=230;t="TARGET-button";h="Shows a list of all channels and users that youve had activity with. Clicking on a target in the list sets it as the active reciever of your messages. Clicking the TARGET-button directly switches between your two last targets. Clicking the [X] on a target in the list removes the target frim the list";}
else if(h=="autoconnectb"){r=false;hh=200;t="AUTOCONNECT-button";h="Will enable/disable autojoining the VAMNET ingame online chat when starting //\\\\/\\\\ORPHINE or VAM. This setting autosaves and keeps its settings after //\\\\/\\\\ORPHINE and VAM-restart";}
else if(h=="connectb"){r=false;hh=160;t="CONNECT-button";h="The CONNECT-button connects you to the VAMNET ingame online-chat. Clicking it while online will DISCONNECT you from the chat-network, eg the button is a switch";}
else if(h=="nicktext"){r=false;hh=160;t="NICKNAME-inputfield";h="This is where you set your nickname / alias on the VAMNET ingme online-chat. The textfield autosaves and automatically changes your online nickname when it`s changed";}
else if(h=="chatinput"){r=false;hh=130;t="CHAT-input";h="Type your message here, send with the [SEND]-button or by hiting [Return] / [Enter] on the keyboard";}
else if(h=="cconfigb"){r=false;hh=200;t="Chat start-script";h="This is used for setting server-commands to the hosting IRC-server VAMNET is hosted on, when connecting. It`s used to it join a channel with the /join command, authorize a registered nick with /nickserv etc.";}
else if(h=="hud2"){r=false;hh=160;t="Advanced scene-load";h="The load scene-button has a hovermenu to directly start a new empty scene, load scene audio and merge-load a scene. Clicking the original icon will load a scene as normal";}
else if(h=="hud4"){r=false;hh=330.003f;ww=170;t="Advanced scene-save";h="The save scene-button shows a hovermenu with shortcuts to publish scene to new/current VAR-package - it will also automatically scan for dependencies and add them for you. Clicking the original icon will save a scene as normal.\n\n//\\\\/\\\\ORPHINE will automatically detect if there are //\\\\/\\\\ORPHINE- dependant atoms like Supersliders, Superscripts or Magnets in the saved scene and inject itself as a scene-plugin on saving for distribution compability";}
else if(h=="hud6"){r=false;hh=160;t="Package manager-button";h="Shows the a hovermenu-option to directly rescan packages. Clicking the original icon will open the Package Manager as normal";}
else if(h=="hud7"){r=false;hh=200;t="Error Log-button";h="Shows a hovermenu-option to mute/unmute the Error Log-popup on errors, muting it will make the icon flash instead on errors. Clicking the original icon will open the Error Log-window as normal";}
else if(h=="morphine"){r=false;hh=160;t="//\\\\/\\\\ORPHINE main-button";h="Opens/closes the main //\\\\/\\\\ORPHINE plugin-UI panel when clicking the icon, giving you quick and direct access to all //\\\\/\\\\ORPHINE features";}
else if(h=="hud12"){r=false;hh=380.003f;t="Oneclick Add person-button";h="POWERFUL - RECOMMENDED: Will instantly add a VAM-default model/person when clicking the original icon, also shows a hovermenu to select / focus / move to you on creation, and a menu where you can add any native VAM-inbuilt model directly with a ready-to-use morph-template you can slide from 0-100% on creation. Selecting \"Use humanizer\" will set the physics on the created model to be softer and more humanlike.\n\nThe \"RealSKIN\"-option will apply a 8K 6-layer ultra-realistic skincell-mesh texture that fits additive onto most skins.";}
else if(h=="hud13"){r=false;hh=260;t="Oneclick Add Custom Unity Asset-button";h="POWERFUL - RECOMMENDED: Will instantly add Custom Unity Asset (CUA) when clicking the original icon, also shows a hovermenu to select / focus / move to you on creation, and an advanced shortcut-list of all you CUAs with searchable multi-keyword filter. The search-filter is stored / survives restart of VAM";}
else if(h=="hud14"){r=false;hh=160;t="Oneclick Add SubScene-button";h="Will instantly add a SubScene when clicking the original icon, also shows a hovermenu to select / focus / move to you on creation";}
else if(h=="hud15"){r=false;hh=260;h="POWERFUL - RECOMMENDED: Shows a hover-submenu to instantly add any VAM-native atom, with option to focus / select / move to you on creation. The submenu also lets you add WindowCamera and //\\/\\ORPHINE-atoms like Magnets and Supersliders. Clicking the original icon will open the Add-atoms controlpanel as normal";t="Advanced Add atoms-button";}
else if(h=="hud26"){r=false;hh=300;t="Play/Pause-button";h="Shows a hovermenu with the most common functions for Scene-animation, like record, clear all animation, select controllers for recording. If <b><color=#66cbff>TimeLine™</color></b> is installed in a scene/atom, the hovermenu will fully integrate shortcuts to each instance of <b><color=#66cbff>TimeLine™</color></b> in the scene for quick access. Clicking the original icon will play/pause scene-animation as normal";}
else if(h=="hud29"){r=false;hh=330;t="Advanced select Atoms-button";h="POWERFUL - RECOMMENDED: Will present a hover-submenu listing all atoms in the scene with numerous submenu-shortcuts to teleport / move atom to you / copy-paste it`s position and more. Clicking it`s name will open that atom`s controls, clicking [ON] will enable / disable the atom, clicking [C] will turn it`s collision on/off, clicking [X] will remove the atom. Clicking the original icon will open the VAM select-atoms controlpanel like normal";}
else if(h=="hud30"){r=false;hh=300;t="Advanced select Person-button";h="POWERFUL - RECOMMENDED: Will show a hovermenu with all models in scene, with direct submenu-shortcuts to all of that model`s control-Tabs. Clicking the name will open that model`s Root-controls. Clicking [ON] will enable / disable the person, clicking [C] will turn it`s collision on/off, clicking [X] will remove the person. Clicking the original icon will rotate-select the next model like normal";}
else if(h=="hud31"){r=false;hh=260;t="Advanced plugins / Show selected UI-button";h="POWERFUL - RECOMMENDED: Shows a hovermenu with all active Session-, Scene- and Atom-plugins, clicking a name in the list opens that plugin`s controls, clicking the [ON]-button will enable/disable that plugin, and clicking [X] will remove it. Clicking on the original icon will show the last selected atom`s controls like normal";}
else if(h=="timeslider"){r=false;hh=230;t="Timescale-slider";h="Sets the timescale in a seamless and correctly position fashion, will also autosave and override VAM-native settings, eg what you set will be kept after VAM-restart. The saved setting will not be affected other functions, plugins or scenes changing the timescale temporarily";}
else if(h=="worldslider"){r=false;hh=230;t="Worldscale-slider";h="Sets the worldscale in a seamless and correctly position fashion, will also autosave and override VAM-native settings, eg what you set will be kept after VAM-restart. The saved setting will not be affected other functions, plugins or scenes changing the worldscale temporarily";}
else if(h=="fpsslider"){r=false;hh=230;t="FPS-slider";h="Sets the FPS-rate+FPS-cap in a seamless and correctly position fashion, will also autosave and override VAM-native settings, eg what you set will be kept after VAM-restart. The saved setting will not be affected other functions, plugins or scenes changing the FPS-rate+FPS-cap temporarily";}
else if(h=="fovslider"){r=false;hh=260;t="Desktop-mode FOV-slider";h="Sets the Desktop FOV (Field Of View) to the commonly used industry-standard steps 10, 18, 20, 30, 40, 50, 55, 60, 70, 80, 90 and 100 while maintaining the same UI-size correctly. Will autosave and keep the setting after VAM-restart, and the saved setting will not be affected other functions, plugins or scenes changing the FOV temporarily";}
else if(h=="uisizeslider"){r=false;hh=160;t="Desktop UI size-slider";h="Sets the VAM UI-size, due to the nature of the native VAM-UI it will go in effect only after releasing the slider. Will autosave and keep it`s size after VAM-restart";}
else if(h=="Rslider"){r=false;hh=230;t="RGB RED-slider";h="Changes the actual background RED RGB-value in VAM - not the sky, but the actual black void. Will autosave and seamlessly restore it`s value after VAM-restart. The saved setting will not be affected other functions, plugins or scenes changing the RGB temporarily";}
else if(h=="Gslider"){r=false;hh=230;t="RGB GREEN-slider";h="Changes the actual background GREEN RGB-value in VAM - not the sky, but the actual black void. Will autosave and seamlessly restore it`s value after VAM-restart. The saved setting will not be affected other functions, plugins or scenes changing the RGB temporarily";}
else if(h=="Bslider"){r=false;hh=230;t="RGB BLUE-slider";h="Changes the actual background BLUE RGB-value in VAM - not the sky, but the actual black void. Will autosave and seamlessly restore it`s value after VAM-restart. The saved setting will not be affected other functions, plugins or scenes changing the RGB temporarily";}
else if(h=="urlinput"){r=false;hh=130;t="WEB URL-inputfield";h="Type in a URL, then hit the [GO]-button to load that URL/site in the //\\\\/\\\\ORPHINE WEB-Browser";}
else if(h=="urlbackb"){r=false;hh=100;t="WEB BACK-button";h="Takes you back to the previous URL/page/site you visited";}
else if(h=="urlforwardb"){r=false;hh=130;t="WEB NEXT-button";h="Takes you to the next URL/page/site you visited if you`ve already used the [BACK]-button";}
else if(h=="urlb"){r=false;hh=100;h="Takes you to the site/URL entered in the URL-inputfield";t="WEB GO-button";}
else if(h=="linksb"){r=false;hh=160;h="All links coming from the VAMNET ingame chat will get listed in the LINKS-button hovermenu. Clicking directly on the LINKS-button will open the last recieved URL from chat";t="WEB LINKS-button";}
else if(h=="similar"){r=false;hh=300;t="Morph hovermenu";h="POWERFUL - RECOMMENDED: Will search, select or deselect similar morphs to the morph-listing the hovermenu shows over. It also shows option to copy all selected current morph-values to a Superslider as start or end-value Set all selectedmorphs to the wanted start-value, then click copy startvalues, then set all selected morphs to the desired end-values and click copy end-values";}
else if(h=="copyto"){r=false;hh=230;t="Copy to slider";h="POWERFUL - RECOMMENDED: Shows option to copy all selected current morph-values to a Superslider as start or end-value Set all selectedmorphs to the wanted start-value, then click copy startvalues, then set all selected morphs to the desired end-values and click copy end-values";}
else if(h=="qualityslider"){r=false;hh=160;t="Quality + smooth passes";h="Will choose between shader-quality levels low > medium > high while stepping through the 5 smooth-pass levels for each quality, 15 steps in total for quck and easy access";}
else if(h=="speedslider"){r=false;hh=230;t="Movement speed";h="POWERFUL - RECOMMENDED: This will allow you to set the player/your movement-speed in VR, far surpassing the VAM-native limited of only 0.5-4X speed, this slider allows for 0-200X speed smoothly adjusted";}

//else if(h==""){r=false;hh=230;t="";h="";}
else{return;}


if(r){rr=hh;}
if(vr){
float min=0;
//t=hh.ToString()+" "+t;
if(hh>500){min=190;}
if(hh==380.001f){min=80;}
if(hh==380.002f){min=70;}
if(hh==380.003f){min=60;}
if(hh==360){min=60;}
if(hh==330.005f){min=90;}
if(hh==330.004f){min=60;}
if(hh==330.001f){min=60;}
if(hh==330.002f){min=0;}
if(hh==330.003f){min=30;}
if(hh==330){min=90;}
if(hh==300){min=90;}
if(hh==290){min=90;}
else if(hh==260.001f){min=30;}
else if(hh==360.001f){min=120;}
else if(hh==260){min=60;}
else if(hh==230){min=60;}
else if(hh==200){min=30;}
else if(hh==160){min=10;}
else if(hh==160.0001f){min=90;}
else if(hh==130){min=20;}

hh=hh-min;

tooltip=createbox(lowHUD.transform,w:1381, h:hh,x:-0.5f, y:rr+-386f-(hh/2),cc:modelcolor);

}else{
tooltip=createbox(hud.transform,w:826+ww, h:hh,x:1100+(ww/2), y:rr+31.6f-(hh/2),cc:modelcolor);
}


UIDynamicTextField tooltext=tip(tooltip.transform,w:-8,x:7,h:hh-20,y:-(hh+33));
UIDynamicTextField tooltitle=tip(tooltip.transform,x:0,h:40,y:-52);
tooltitle.UItext.alignment = TextAnchor.MiddleCenter;
tooltitle.UItext.fontStyle = FontStyle.Bold;
tooltext.UItext.supportRichText = true;
tooltext.text=h;
tooltitle.text=t;

}
}

private IEnumerator showhelp(){
	
//entry.callback.AddListener((eventData)=>inputModule.GetComponent().PointerEnter(uiText));
string[] but="helpbutton,_orderButton,_copyButton,_refreshButton,_selectButton1,_selectButton2,_similarButton,_headButton,_bodyButton,_gensButton,_afilterButton,_selectAllButton,_deselectAllButton,_invertButton,_DButton,_5Button,_filterButton,_deselectfilterButton,_rDButton,_fDButton,filterTextField,selectf,deselectf,searchf,groupNameTextField,regionNameTextField,minTextField,maxTextField,creatorTextField,prefixTextField,pwTextField,morphNameTextField,split,merge,_copyButton2,resbutton,pausebutton,freezebutton,mirrorbutton,wwwbuttonhud,wwwbutton,chatbuttonhud,chatbutton,editbutton,personbutton2,streambutton,headl,morphsave,morphload,heads,headp,headc,texturecopy,texturepaste,aligner,closebutton,minibutton,autoconnectb,connectb,cconfigb,sendb,urlb,urlbackb,urlforwardb,nicktext,urlinput,chatinput,pslider,hundred,zero,_input,timeslider,worldslider,fpsslider,Rslider,Gslider,Bslider,fovslider,uisizeslider,qualityslider,speedslider,installbutton".Split(","[0]);
			
			for(int i=0;i<but.Length;i++){
			//echo16(i.ToString() +but[i]);
			helpenter[i] = new EventTrigger.Entry();
    		helpenter[i].eventID = EventTriggerType.PointerEnter;

			var bhelp=but[i];
			helpenter[i].callback.AddListener((eventDatasub) => {
				//echo25(bhelp);
			helptip(bhelp);
			if(bhelp=="helpbutton"){
			
							float xmin=0;float ymin=0;float zz=152;if(!vr){zz=0;ymin=-112;xmin=-74;}
					
					var scenepl="";
					if(sceneplugin){
					var mexist=listplugins("morphine","session");
					if(mexist==""){scenepl="Install //\\\\/\\\\ORPHINE° as session-plugin\n";}
					}
					
					showbox="scan";StartCoroutine(showmenu(showbox,helpbutton.transform,scenepl+"Read documentation\nWatch tutorial-videos\nGo to documentation-site","scan",cap:56,w:211,offsetx:-224+xmin,offsety: -11+ymin,nosub:true, spacing: 37,z:-zz,tx:hud.transform,prefx:""));

				
			}
			});
		
			helpenter[100+i] = new EventTrigger.Entry();
    		helpenter[100+i].eventID = EventTriggerType.PointerExit;
			helpenter[100+i].callback.AddListener((eventDatasub) => {
				if(bhelp=="helpbutton"){
					showbox="";
					pboxon=false;
				if(!fading){StartCoroutine(removepbox(true,delay:0.1f));}
				}
			helptip();
			});
			}
			
			int u=0;
			bool done=false;
while(!done){
	echo16("yo");
			if(helpbutton!=null){helpbutton.transform.gameObject.AddComponent<EventTrigger>();}
			if(_orderButton!=null){_orderButton.transform.gameObject.AddComponent<EventTrigger>();}
			if(_copyButton!=null){_copyButton.transform.gameObject.AddComponent<EventTrigger>();}
			if(_refreshButton!=null){_refreshButton.transform.gameObject.AddComponent<EventTrigger>();}
			if(_selectButton1!=null){_selectButton1.transform.gameObject.AddComponent<EventTrigger>();}
			if(_selectButton2!=null){_selectButton2.transform.gameObject.AddComponent<EventTrigger>();}
			if(_similarButton!=null){_similarButton.transform.gameObject.AddComponent<EventTrigger>();}
			if(_headButton!=null){_headButton.transform.gameObject.AddComponent<EventTrigger>();}
			if(_bodyButton!=null){_bodyButton.transform.gameObject.AddComponent<EventTrigger>();}
			if(_gensButton!=null){_gensButton.transform.gameObject.AddComponent<EventTrigger>();}
			if(_afilterButton!=null){_afilterButton.transform.gameObject.AddComponent<EventTrigger>();}
			if(_selectAllButton!=null){_selectAllButton.transform.gameObject.AddComponent<EventTrigger>();}
			if(_deselectAllButton!=null){_deselectAllButton.transform.gameObject.AddComponent<EventTrigger>();}
			if(_invertButton!=null){_invertButton.transform.gameObject.AddComponent<EventTrigger>();}
			if(_DButton!=null){_DButton.transform.gameObject.AddComponent<EventTrigger>();}
			if(_5Button!=null){_5Button.transform.gameObject.AddComponent<EventTrigger>();}
			if(_filterButton!=null){_filterButton.transform.gameObject.AddComponent<EventTrigger>();}
			if(_deselectfilterButton!=null){_deselectfilterButton.transform.gameObject.AddComponent<EventTrigger>();}
			if(_rDButton!=null){_rDButton.transform.gameObject.AddComponent<EventTrigger>();}
			if(_fDButton!=null){_fDButton.transform.gameObject.AddComponent<EventTrigger>();}
			if(filterTextField!=null){filterTextField.transform.gameObject.AddComponent<EventTrigger>();}
			if(selectf!=null){selectf.transform.gameObject.AddComponent<EventTrigger>();}
			if(deselectf!=null){deselectf.transform.gameObject.AddComponent<EventTrigger>();}
			if(searchf!=null){searchf.transform.gameObject.AddComponent<EventTrigger>();}
			if(groupNameTextField!=null){groupNameTextField.transform.gameObject.AddComponent<EventTrigger>();}
			if(regionNameTextField!=null){regionNameTextField.transform.gameObject.AddComponent<EventTrigger>();}
			if(minTextField!=null){minTextField.transform.gameObject.AddComponent<EventTrigger>();}
			if(maxTextField!=null){maxTextField.transform.gameObject.AddComponent<EventTrigger>();}
			if(creatorTextField!=null){creatorTextField.transform.gameObject.AddComponent<EventTrigger>();}
			if(prefixTextField!=null){prefixTextField.transform.gameObject.AddComponent<EventTrigger>();}
			if(pwTextField!=null){pwTextField.transform.gameObject.AddComponent<EventTrigger>();}
			if(morphNameTextField!=null){morphNameTextField.transform.gameObject.AddComponent<EventTrigger>();}
			if(split!=null){split.transform.gameObject.AddComponent<EventTrigger>();}
			if(merge!=null){merge.transform.gameObject.AddComponent<EventTrigger>();}
			if(_copyButton2!=null){_copyButton2.transform.gameObject.AddComponent<EventTrigger>();}
			if(resbutton!=null){resbutton.transform.gameObject.AddComponent<EventTrigger>();}
			if(pausebutton!=null){pausebutton.transform.gameObject.AddComponent<EventTrigger>();}	
			if(freezebutton!=null){freezebutton.transform.gameObject.AddComponent<EventTrigger>();}	
			if(mirrorbutton!=null){mirrorbutton.transform.gameObject.AddComponent<EventTrigger>();}	
			if(wwwbuttonhud!=null){wwwbuttonhud.transform.gameObject.AddComponent<EventTrigger>();}	
			if(wwwbutton!=null){wwwbutton.transform.gameObject.AddComponent<EventTrigger>();}	
			if(chatbuttonhud!=null){chatbuttonhud.transform.gameObject.AddComponent<EventTrigger>();}	
			if(chatbutton!=null){chatbutton.transform.gameObject.AddComponent<EventTrigger>();}	
			if(editbutton!=null){editbutton.transform.gameObject.AddComponent<EventTrigger>();}	
			if(personbutton2!=null){personbutton2.transform.gameObject.AddComponent<EventTrigger>();}	
			if(streambutton!=null){streambutton.transform.gameObject.AddComponent<EventTrigger>();}	
			if(headl!=null){headl.transform.gameObject.AddComponent<EventTrigger>();}	
			if(morphsave!=null){morphsave.transform.gameObject.AddComponent<EventTrigger>();}	
			if(morphload!=null){morphload.transform.gameObject.AddComponent<EventTrigger>();}	
			if(heads!=null){heads.transform.gameObject.AddComponent<EventTrigger>();}	
			if(headp!=null){headp.transform.gameObject.AddComponent<EventTrigger>();}	
			if(headc!=null){headc.transform.gameObject.AddComponent<EventTrigger>();}
			if(texturecopy!=null){texturecopy.transform.gameObject.AddComponent<EventTrigger>();}	
			if(texturepaste!=null){texturepaste.transform.gameObject.AddComponent<EventTrigger>();}	
			if(aligner!=null){aligner.transform.gameObject.AddComponent<EventTrigger>();}
			if(closebutton!=null){closebutton.transform.gameObject.AddComponent<EventTrigger>();}	
			if(minibutton!=null){minibutton.transform.gameObject.AddComponent<EventTrigger>();}	
			if(autoconnectb!=null){autoconnectb.transform.gameObject.AddComponent<EventTrigger>();}	
			if(connectb!=null){connectb.transform.gameObject.AddComponent<EventTrigger>();}	
			if(cconfigb!=null){cconfigb.transform.gameObject.AddComponent<EventTrigger>();}	
			if(sendb!=null){sendb.transform.gameObject.AddComponent<EventTrigger>();}	
			if(urlb!=null){urlb.transform.gameObject.AddComponent<EventTrigger>();}	
			if(urlbackb!=null){urlbackb.transform.gameObject.AddComponent<EventTrigger>();}	
			if(urlforwardb!=null){urlforwardb.transform.gameObject.AddComponent<EventTrigger>();}	
			if(nicktext!=null){nicktext.transform.gameObject.AddComponent<EventTrigger>();}
			if(urlinput!=null){urlinput.transform.gameObject.AddComponent<EventTrigger>();}
			if(chatinput!=null){chatinput.transform.gameObject.AddComponent<EventTrigger>();}
			if(pslider!=null){pslider.transform.gameObject.AddComponent<EventTrigger>();}
			if(hundred!=null){hundred.transform.gameObject.AddComponent<EventTrigger>();}
			if(zero!=null){zero.transform.gameObject.AddComponent<EventTrigger>();}
			if(_input!=null){_input.transform.gameObject.AddComponent<EventTrigger>();}
			if(timeslider!=null){timeslider.transform.gameObject.AddComponent<EventTrigger>();}
			if(worldslider!=null){worldslider.transform.gameObject.AddComponent<EventTrigger>();}
			if(fpsslider!=null){fpsslider.transform.gameObject.AddComponent<EventTrigger>();}
			if(Rslider!=null){Rslider.transform.gameObject.AddComponent<EventTrigger>();}
			if(Gslider!=null){Gslider.transform.gameObject.AddComponent<EventTrigger>();}
			if(Bslider!=null){Bslider.transform.gameObject.AddComponent<EventTrigger>();}
			if(fovslider!=null){fovslider.transform.gameObject.AddComponent<EventTrigger>();}
			if(uisizeslider!=null){uisizeslider.transform.gameObject.AddComponent<EventTrigger>();}
			if(qualityslider!=null){qualityslider.transform.gameObject.AddComponent<EventTrigger>();}
			if(speedslider!=null){speedslider.transform.gameObject.AddComponent<EventTrigger>();}
			if(installbutton!=null){installbutton.transform.gameObject.AddComponent<EventTrigger>();}


			if(helpbutton!=null){helpbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(_orderButton!=null){_orderButton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(_copyButton!=null){_copyButton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(_refreshButton!=null){_refreshButton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(_selectButton1!=null){_selectButton1.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(_selectButton2!=null){_selectButton2.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(_similarButton!=null){_similarButton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(_headButton!=null){_headButton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(_bodyButton!=null){_bodyButton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(_gensButton!=null){_gensButton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(_afilterButton!=null){_afilterButton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(_selectAllButton!=null){_selectAllButton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(_deselectAllButton!=null){_deselectAllButton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(_invertButton!=null){_invertButton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(_DButton!=null){_DButton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(_5Button!=null){_5Button.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(_filterButton!=null){_filterButton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(_deselectfilterButton!=null){_deselectfilterButton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(_rDButton!=null){_rDButton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(_fDButton!=null){_fDButton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(filterTextField!=null){filterTextField.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(selectf!=null){selectf.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(deselectf!=null){deselectf.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(searchf!=null){searchf.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(groupNameTextField!=null){groupNameTextField.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(regionNameTextField!=null){regionNameTextField.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(minTextField!=null){minTextField.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(maxTextField!=null){maxTextField.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(creatorTextField!=null){creatorTextField.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(prefixTextField!=null){prefixTextField.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(pwTextField!=null){pwTextField.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(morphNameTextField!=null){morphNameTextField.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(split!=null){split.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(merge!=null){merge.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(_copyButton2!=null){_copyButton2.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(resbutton!=null){resbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(pausebutton!=null){pausebutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(freezebutton!=null){freezebutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(mirrorbutton!=null){mirrorbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(wwwbuttonhud!=null){wwwbuttonhud.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(wwwbutton!=null){wwwbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(chatbuttonhud!=null){chatbuttonhud.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(chatbutton!=null){chatbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(editbutton!=null){editbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(personbutton2!=null){personbutton2.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(streambutton!=null){streambutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(headl!=null){headl.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(morphsave!=null){morphsave.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(morphload!=null){morphload.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(heads!=null){heads.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(headp!=null){headp.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(headc!=null){headc.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(texturecopy!=null){texturecopy.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(texturepaste!=null){texturepaste.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(aligner!=null){aligner.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(closebutton!=null){closebutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(minibutton!=null){minibutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(autoconnectb!=null){autoconnectb.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(connectb!=null){connectb.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(cconfigb!=null){cconfigb.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(sendb!=null){sendb.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(urlb!=null){urlb.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(urlbackb!=null){urlbackb.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(urlforwardb!=null){urlforwardb.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(nicktext!=null){nicktext.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(urlinput!=null){urlinput.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(chatinput!=null){chatinput.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(pslider!=null){pslider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(hundred!=null){hundred.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(zero!=null){zero.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(_input!=null){_input.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(timeslider!=null){timeslider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;
			if(worldslider!=null){worldslider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;
			if(fpsslider!=null){fpsslider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;
			if(Rslider!=null){Rslider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;
			if(Gslider!=null){Gslider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;
			if(Bslider!=null){Bslider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;
			if(fovslider!=null){fovslider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;
			if(uisizeslider!=null){uisizeslider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;
			if(qualityslider!=null){qualityslider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;
			if(speedslider!=null){speedslider.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	
			if(installbutton!=null){installbutton.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(helpenter[u]);}u++;	

if(u>100){done=true;break;}
u=100;
yield return null;
}

yield return null;
}

private void usefemale(Atom a,bool enable){
JSONStorable abool = a.GetStorableByID("geometry");
JSONStorableBool use = abool.GetBoolJSONParam("useFemaleMorphsOnMale");	
use.val=enable;	
}

private void usemale(Atom a,bool enable){
JSONStorable abool = a.GetStorableByID("geometry");
JSONStorableBool use = abool.GetBoolJSONParam("useMaleMorphsOnFemale");	
use.val=enable;	
}

private void unrec(string aatext){
if(aatext.Contains("animate:")){

String[] av=dynatag(aatext.Replace("\r\n","\n")).Split("\n"[0]);
int i=0; bool cset=false;Dictionary<string,float> pvals=new Dictionary<string,float>();
foreach(string strr in av){
var str=strr.Replace("[TITLE]",av[0]);
str=str.Replace("://",";/;");
if(str.Replace(" ","")==""){continue;}

if((str+"  ").Substring(0,2)=="//"){continue;}
var achk=(str+":").Substring(0,(str+":").IndexOf(":"));
if("animate".Contains(achk)){i++;

var cmd=str.Substring(0,str.IndexOf(":"));
var vv=str.Substring(cmd.Length+1,str.Length-(cmd.Length+1));
if(cmd=="animate"){
echo18(vv);

if(SuperController.singleton.GetAtomByUid(vv)!=null){	
Atom atarget=SuperController.singleton.GetAtomByUid(vv); 
JSONStorable abool = atarget.GetStorableByID("animation");
JSONStorableBool recording = abool.GetBoolJSONParam("armedForRecord");	
recording.val=false;
}


}
}

}
}
}

private string _player;
private string dynatag(string str){
	
	var scon="";
	if(SuperController.singleton.GetSelectedController()!=null){scon=SuperController.singleton.GetSelectedController().containingAtom.name;}
	var result=str.Replace("[PLAYER]",_player).Replace("[CREATOR]",_safecreator).Replace("[TARGET]",scon).Replace("[NICKNAME]",nick).Replace("[TIME]",ttime).Replace("[HOUR]",hhour).Replace("[SECOND]",ssecond).Replace("[TIMEOFDAY]",timeofday).Replace("[MINUTE]",mminute).Replace("[DAY]",dday).Replace("[CLOSEST]",txtclosest).Replace("[CLOSESTUI]",txtclosestui).Replace("[CLOSESTPERSON]",txtclosestperson).Replace("[CLOSESTATOM]",txtclosestatom).Replace("[CLOSEST-VALUE]",(1-cdist).ToString()).Replace("[CLOSESTUI-VALUE]",(1-udist).ToString()).Replace("[CLOSESTPERSON-VALUE]",(1-pdist).ToString()).Replace("[CLOSESTATOM-VALUE]",(1-adist).ToString()).Replace("[CLOSEST+VALUE]",(cdist).ToString()).Replace("[CLOSESTUI+VALUE]",(udist).ToString()).Replace("[CLOSESTPERSON+VALUE]",(pdist).ToString()).Replace("[CLOSESTATOM+VALUE]",(adist).ToString());
	
	return result;
}




		
        private IEnumerator cloneatom(Atom source,bool cua=true,Transform pos=null)
        {
			
			
			SuperController.singleton.pauseAutoSimulation=true;int i=2;
            string copy = source.name+"#"+i;
			while(SuperController.singleton.GetAtomByUid(copy)!=null){i++;
			copy = source.name+"#"+i;
			}
			
			SuperController.singleton.currentSaveDir = SuperController.singleton.currentLoadDir;

            JSONClass sjson = SuperController.singleton.GetSaveJSON(source, true, true);
			echo21(sjson.ToString());
            JSONNode sourceJSON = sjson["atoms"].AsArray[0];

			
		    yield return StartCoroutine(SuperController.singleton.AddAtomByType(source.type, copy));
            Atom cloned = SuperController.singleton.GetAtomByUid(copy);
			cloned.collisionEnabled=false;
			cloned.SetFreezePhysics(true);

			yield return new WaitForSecondsRealtime(0.2f);

			if(source.type=="Person"){
			var aj = "";
			var saveName=_plugindir+_pluginowner+_plugin+"\\default.morphine.json";
			aj = sjson.ToString().Replace("\t","").Replace("\r","").Replace("\n","").Replace(" {\"","{\"").Replace(", \"",",\"").Replace(" ]","]");
			
			var prs="\"type\":\"Person\"";
			if(aj.Contains(prs)){
			aj="{\"atoms\":[ {\"id\":\""+copy+"\", \"on\":\"true\","+aj.Substring(aj.IndexOf(prs)+prs.Length);
			}
			
			var lnk="\"linkTo\":\"";
			var rep=lnk.ToUpper();
			while(aj.Contains(lnk)){
			var atmp=aj.Substring(0,aj.IndexOf(lnk))+rep;
			var atmp2=aj.Substring(atmp.Length);
			aj=atmp+copy+atmp2.Substring(atmp2.IndexOf(":"));
			}
			
			aj=aj.Replace(rep,lnk).Replace("Futa ","").Replace("by Weeb)","(by Ren)");
			
			JSONNode jSONNode = JSON.Parse(aj);
			JSONArray asArray = jSONNode["atoms"].AsArray;
			JSONClass asObject = asArray[0].AsObject;
	
			cloned.PreRestore(usehumanizer, false);
			cloned.RestoreTransform(asObject);
			cloned.Restore(asObject, usehumanizer, true, false, asArray);
			cloned.LateRestore(asObject, usehumanizer, true, false);
			cloned.PostRestore(usehumanizer, true);
			cloned.ResetPhysics(usehumanizer);
			}else{
            cloned.PreRestore();
            cloned.Restore(sourceJSON as JSONClass, false, true, true);
            cloned.LateRestore(sourceJSON as JSONClass, false, true, true);
            cloned.PostRestore();
			}
			
			cloned.mainController.xRotLock=source.mainController.xRotLock;
			cloned.mainController.yRotLock=source.mainController.yRotLock;
			cloned.mainController.zRotLock=source.mainController.zRotLock;
			cloned.mainController.xLock=source.mainController.xLock;
			cloned.mainController.yLock=source.mainController.yLock;
			cloned.mainController.zLock=source.mainController.zLock;
			cloned.mainController.useGravityOnRBWhenOff=source.mainController.useGravityOnRBWhenOff;
			cloned.mainController.physicsEnabled=source.mainController.physicsEnabled;
			yield return new WaitForSecondsRealtime(0.5f);
			
			Vector3 moveto=SuperController.singleton.mainHUD.position;float zto=0;float xto=-0.7f;
			if(pos!=null){
				moveto=pos.position;xto=0f;zto=0f;
				}
			else{if(vr){moveto=SuperController.singleton.leftHand.position;xto=0f;zto=0f;
			vrhands.isOn=false;
			}}
			cloned.mainController.transform.position=new Vector3(moveto.x+xto,moveto.y,moveto.z+zto);
			cloned.mainController.transform.eulerAngles=source.mainController.transform.eulerAngles;

			yield return new WaitForSecondsRealtime(0.5f);
			SuperController.singleton.pauseAutoSimulation=false;
			if(pos==null){cloned.collisionEnabled=true;}
			cloned.SetFreezePhysics(false);

        }





private Vector3 ppos;
private Vector3 prot;
private float pheight;
private bool forcepos=false;
private float lastsceneload=Time.realtimeSinceStartup;
private int slidecheck=0;private int slidecnt=0;

private bool scaleron=false;
private IEnumerator godentr(){
	yield return new WaitForSecondsRealtime(0.3f);
	godbutton.gameObject.SetActive(true);
	
	scaleron=true;scaling=true;
}

private IEnumerator unscaler(){
yield return new WaitForSecondsRealtime(1);
if(!scaleron){
	//echo25(scaleron.ToString());
				scaleslider.gameObject.SetActive(false);
				xslider.gameObject.SetActive(false);
				yslider.gameObject.SetActive(false);
				zslider.gameObject.SetActive(false);
				godbutton.gameObject.SetActive(false);
gmcopybutton.gameObject.SetActive(false);
gmpastebutton.gameObject.SetActive(false);
gmpastexbutton.gameObject.SetActive(false);
gmpasteybutton.gameObject.SetActive(false);
gmpastezbutton.gameObject.SetActive(false);
gmrealbutton.gameObject.SetActive(false);
				gmcopytbutton.gameObject.SetActive(false);
				gmpastetbutton.gameObject.SetActive(false);			
				gmlockrbutton.gameObject.SetActive(false);
				gmlockxbutton.gameObject.SetActive(false);
gmlockybutton.gameObject.SetActive(false);
gmlockzbutton.gameObject.SetActive(false);godbutton2.gameObject.SetActive(false);
				xnudgeslider.gameObject.SetActive(false);
				ynudgeslider.gameObject.SetActive(false);
				znudgeslider.gameObject.SetActive(false);
				
scaling=false;
atomhud.enabled=false;
}
}


private IEnumerator hidescaler(){
if(scaling){yield break;}	
yield return new WaitForSecondsRealtime(1);
if(!scaling){atomhud.enabled=false;}
}

private Transform vrkeys=SuperController.singleton.transform.Find("/SceneAtoms/CoreControl/WorldScaleAdjust/HUD/LowerHUDPivot/LowerHUDFlip/VRKeyboardFull").GetComponentInChildren<Transform>(true);

private Atom rsa=null;
private string rsold="";
private Transform rspos;
private Vector3 rsnudge;
private bool godenter;

private void gmbuttons(bool seton=true){
	float lastposs=-205;
			if(rsa!=null){if(rsa.type=="Person"){lastposs=-250;}}
			if(seton){
			godmode=true;
			gmbutton.gameObject.SetActive(true);
			scalebutton.gameObject.SetActive(true);
			gmonbutton.gameObject.SetActive(true);
			gmcolbutton.gameObject.SetActive(true);
			gmhidebutton.gameObject.SetActive(true);
			gmtelbutton.gameObject.SetActive(true);
			if(!godenter){godbutton.gameObject.SetActive(false);}
			gmmovebutton.gameObject.SetActive(true);
			gmclonebutton.gameObject.SetActive(true);
			gmdelbutton.gameObject.SetActive(true);
			godbutton.transform.localPosition=new Vector3(0,lastposs);
			godbutton2.transform.localPosition=new Vector3(0,lastposs);
			
			godbutton.label="»";
			godbutton2.label="»";
			}
			else{
			godmode=false;
				scaleslider.gameObject.SetActive(false);
				godbutton.gameObject.SetActive(true);
				xslider.gameObject.SetActive(false);
				yslider.gameObject.SetActive(false);
				zslider.gameObject.SetActive(false);
				gmcopybutton.gameObject.SetActive(false);
				gmpastebutton.gameObject.SetActive(false);
				gmpastexbutton.gameObject.SetActive(false);
				gmpasteybutton.gameObject.SetActive(false);
				gmpastezbutton.gameObject.SetActive(false);		
				gmlockrbutton.gameObject.SetActive(false);
				gmlockxbutton.gameObject.SetActive(false);
				gmlockybutton.gameObject.SetActive(false);
				gmlockzbutton.gameObject.SetActive(false);godbutton2.gameObject.SetActive(false);
				gmrealbutton.gameObject.SetActive(false);
				gmcopytbutton.gameObject.SetActive(false);
				gmpastetbutton.gameObject.SetActive(false);				
				xnudgeslider.gameObject.SetActive(false);
				ynudgeslider.gameObject.SetActive(false);
				znudgeslider.gameObject.SetActive(false);	
			gmbutton.gameObject.SetActive(false);
			scalebutton.gameObject.SetActive(false);
			gmonbutton.gameObject.SetActive(false);
			gmcolbutton.gameObject.SetActive(false);
			gmhidebutton.gameObject.SetActive(false);
			gmtelbutton.gameObject.SetActive(false);
			gmmovebutton.gameObject.SetActive(false);
			gmclonebutton.gameObject.SetActive(false);
			gmdelbutton.gameObject.SetActive(false);
			godbutton.transform.localPosition=new Vector3(0,40);
			godbutton2.transform.localPosition=new Vector3(0,40);
			godbutton.label="«";
			godbutton2.label="«";
			}	
}

private bool sel=false;
private IEnumerator checksliders(bool eternall=true){bool switcher=false;
while(eternall){
	
				//godmode
				float yoffset=0.045f;
				bool vrr=false;
				if(vr || screenmode().Contains("VR")){vrr=true;}
				
				float yadd=0f;float sadd=-0.0001f;if(vrr){rselect=rselectvr;yoffset=0.065f;}else{
				
				rselect=rselect2d;
				
				yadd=0.03f;}
				yadd+=-0.01f;

				//echo25(rselect.text);
				//echo25(SuperController.singleton.GetTargetShow().ToString());
				//bool showui=false;
				//try{showui=SuperController.singleton.GetTargetShow();}catch(Exception e){}
				
				//if(rselect!=null){
					
				//if(!vrr){
				//if(!SuperController.singleton.MonitorUI.gameObject.active){}
				//}
				
				//if(rselect.text!="" && rselect.gameObject.active && rsold!=rselect.text){
				var rsel=(rselect.text+":").Substring(0,(rselect.text+":").IndexOf(":"));
				//echo25(rsel);
				if(rsel!="" && SuperController.singleton.GetAtomByUid(rsel)!=null){
				bool highlighted=false;
				if(vrr){highlighted=rselect.gameObject.active;}else if(edit.isOn){highlighted=SuperController.singleton.GetAtomByUid(rsel).mainController.highlighted;}
				if(!highlighted && !sel){
					//echo25("off>"+rselect.text+"<");
					lastscale=Time.realtimeSinceStartup;
					sel=true;
					scaling=false;
					StartCoroutine(unscaler());
				}
				
				else if(highlighted && sel){
				sel=false;
				//echo25("on>"+rselect.text+"<");
				lastscale=Time.realtimeSinceStartup;
				scaling=true;
				scaleron=true;
				godslide=false;
				atomhud.enabled=SuperController.singleton.GetTargetShow();
				
				
				scaleslider.gameObject.SetActive(false);
				xslider.gameObject.SetActive(false);
				yslider.gameObject.SetActive(false);
				zslider.gameObject.SetActive(false);
				godbutton.gameObject.SetActive(!godmode);
				gmcopybutton.gameObject.SetActive(false);
				gmpastebutton.gameObject.SetActive(false);
				gmpastexbutton.gameObject.SetActive(false);
				gmpasteybutton.gameObject.SetActive(false);
				gmpastezbutton.gameObject.SetActive(false);		
				gmlockrbutton.gameObject.SetActive(false);
				gmlockxbutton.gameObject.SetActive(false);
				gmlockybutton.gameObject.SetActive(false);
				gmlockzbutton.gameObject.SetActive(false);godbutton2.gameObject.SetActive(false);
				gmrealbutton.gameObject.SetActive(false);
				gmcopytbutton.gameObject.SetActive(false);
				gmpastetbutton.gameObject.SetActive(false);
				xnudgeslider.gameObject.SetActive(false);
				ynudgeslider.gameObject.SetActive(false);
				znudgeslider.gameObject.SetActive(false);				
				var rsatom=(rselect.text+":").Substring(0,(rselect.text+":").IndexOf(":"));
				rsa=SuperController.singleton.GetAtomByUid(rsatom);
				gmbuttons(godmode);
				while(rsa==null){
				rsatom=(rselect.text+":").Substring(0,(rselect.text+":").IndexOf(":"));
				rsa=SuperController.singleton.GetAtomByUid(rsatom);yield return null;}
				
				
				var storable="scale";if(rsa.type=="Person"){storable="rescaleObject";}
				JSONStorable a1 = rsa.GetStorableByID(storable);
				JSONStorableFloat a2 = a1.GetFloatJSONParam("scale");
				scaleslider.slider.value=(a2.val*11)/(a2.val+1);
				//echo24(rsa.mainController.transform.eulerAngles.ToString());
				xslider.slider.value=rsa.mainController.transform.eulerAngles.x;
				yslider.slider.value=rsa.mainController.transform.eulerAngles.y;
				zslider.slider.value=rsa.mainController.transform.eulerAngles.z;

				
				gmonbutton.textColor=new Color(0.21f,0.22f,0.24f);
				if(rsa.on){gmonbutton.textColor=Color.white;}
				
			    gmcolbutton.textColor=new Color(0.21f,0.22f,0.24f);
				if(rsa.collisionEnabled){gmcolbutton.textColor=Color.white;}
				
				gmhidebutton.textColor=new Color(0.21f,0.22f,0.24f);
				if(rsa.hidden){gmhidebutton.textColor=Color.white;}					
				
				rsold=rselect.text;
				rselecttext=rselect.text;}}else{
					if(!sel){
					lastscale=Time.realtimeSinceStartup;
					sel=true;
					scaling=false;
					StartCoroutine(unscaler());}
				}
				
				if(rselect.text!="" && atomhud.enabled){
				
				rspos=SuperController.singleton.GetAtomByUid(rselect.text.Substring(0,rselect.text.IndexOf(":"))).mainController.transform;}	
				if(rspos!=null){
				float rsdist = Vector3.Distance(rspos.position, SuperController.singleton.lookCamera.transform.position);
				atomhud.transform.position=new Vector3(rspos.position.x+0f,(rspos.position.y-yadd)-yoffset*(1+(rsdist*0.45f)),rspos.position.z);
				float lscale=(0.0004f+sadd)*(1f+(rsdist*0.86f));
				atomhud.transform.localScale=new Vector3(lscale,lscale,lscale);
				atomhud.transform.LookAt(SuperController.singleton.centerCameraTarget.transform);
			
			
				//if(rselect.text!="" && rselect.gameObject.active){
				if(!sel){
				godbutton.gameObject.SetActive(!godmode);
				lastscale=Time.realtimeSinceStartup;
				//godslide=false; //FIX?
				atomhud.enabled=SuperController.singleton.GetTargetShow();
				}else{
					
				rsold="";
				//if(!scaling){StartCoroutine(unscaler());}
				if(scaling){lastscale=Time.realtimeSinceStartup;}
				if(Time.realtimeSinceStartup-lastscale>1){atomhud.enabled=false;}
				}
				}
				//}
				
slidecnt++;switcher=!switcher;
JSONStorableFloat af=null;
            
if(sceneatoms.Contains("@")){		
foreach(string s in SuperController.singleton.GetAtomUIDs()){

var at=SuperController.singleton.GetAtomByUid(s);
if(at.type=="UISlider"){
var aatext="";
JSONStorable ct = at.GetStorableByID("Trigger");
JSONStorableFloat chk = ct.GetFloatJSONParam("value");
var vv="";float cval=-1;float tval=0;float pval=0;float dist=0;float range=100;float aval=0;bool kinetic=false;
Image handle=at.transform.Find("reParentObject/object/rescaleObject/Canvas/Slider/Handle Slide Area/Handle/").GetComponent<Image>();
echo21("trace1");
if(s.contains("@")){
echo21("trace21");
float zero=0;
JSONStorable text = at.GetStorableByID("Text");
JSONStorableString atext = text.GetStringJSONParam("text");	
aatext=atext.val.ToString();
bool alwaysactive=false;
if((aatext+" ").Substring(0,1)=="!"){continue;}
else if((" "+aatext).Substring((" "+aatext).Length-1,1)=="!"){alwaysactive=true;}
else if((aatext+" ").Substring(0,1)=="@"){alwaysactive=true;}
else if((" "+aatext).Substring((" "+aatext).Length-1,1)=="@"){alwaysactive=true;}

if(aatext!="" && (aatext.Replace("start:","slide:").Contains("slide:")  || aatext.Contains("animate:")  || aatext.Contains("time:") || aatext.Contains("proximity:"))){

String[] av=dynatag(aatext.Replace("\r\n","\n")).Split("\n"[0]);
int i=0; bool cset=false;Dictionary<string,float> pvals=new Dictionary<string,float>();
foreach(string strr in av){
var str=strr.Replace("[TITLE]",av[0]);
str=str.Replace("://",";/;");

if((str+"    ").Substring(0,4)=="/vr "){
if(!vr){continue;}
str=str.Substring(4);	
}

else if((str+"         ").Substring(0,9)=="/desktop "){
if(vr){continue;}
str=str.Substring(9);
}
echo24("coco-ok");
if(str.Replace(" ","")==""){continue;}
if((str+"  ").Substring(0,2)=="//"){continue;}
if(str.Substring(0,2)=="//"){continue;}
var achk=((str+":").Substring(0,(str+":").IndexOf(":"))).Replace("start","slide");

if("animate,time,slide,proximity".Contains(achk)){i++;

var cmd=(str.Substring(0,str.IndexOf(":"))).Replace("start","slide");
echo24("coco-ok2b >"+str+"<");
vv=str.Substring(cmd.Length+1,str.Length-(cmd.Length+1));
if(vv.Contains("//")){vv=vv.Replace(" //","//").Replace(" //","//").Replace(" //","//");
vv=vv.Substring(0,vv.IndexOf("//"));
}
Slider handler=at.transform.Find("reParentObject/object/rescaleObject/Canvas/Slider/").GetComponent<Slider>();

if(handler.transform.gameObject.GetComponent<EventTrigger>()==null){
	echo9("notrggersWQ");
	
			EventTrigger.Entry handdown = new EventTrigger.Entry();
    		handdown.eventID = EventTriggerType.PointerDown;
			handdown.callback.AddListener((eventDatasub) => {
			handle.color=Color.red;});
			
			EventTrigger.Entry handup = new EventTrigger.Entry();
    		handup.eventID = EventTriggerType.PointerUp;
			handup.callback.AddListener((eventDatasub) => {
			handle.color=Color.white;
			JSONStorable ttx = at.GetStorableByID("Text");
			JSONStorableString ttx2 = ttx.GetStringJSONParam("text");	
			unrec(ttx2.val.ToString());
			});
			
    		handler.transform.gameObject.AddComponent<EventTrigger>();
			handler.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(handdown);	
			handler.transform.gameObject.GetComponent<EventTrigger>().triggers.Add(handup);	
}


if(cmd=="slide" && handle.color!=Color.red){
try{
var key=at.name+"slide"+i.ToString();
echo24("sliding1");
var slidestart="";
var slidetime="1";
var valstart="0";
var valstop="100";
float bounce=1;
if(vv.Contains("bounce")){bounce=2;vv=vv.Replace(" bounce","bounce").Replace("bounce ","bounce").Replace("bounce","");}

if(vv!=""){
if(vv.Contains(" ")){string[] slsplit=vv.Split(" "[0]);
slidetime=slsplit[0];
valstart=slsplit[1];
}else{valstart=vv;}}

if(slidetime.Contains(",")){
string[] sltmp=slidetime.Split(","[0]);
slidestart=sltmp[0];slidetime=sltmp[1];
}

if(valstart.Contains(",")){
string[] sltmp=valstart.Split(","[0]);
valstart=sltmp[0];valstop=sltmp[1];
}

float lastload=lastsceneload;

if(!slidevals.ContainsKey(key)){
slidevals.Add(key,Time.realtimeSinceStartup.ToString());
lastload=float.Parse(slidevals[key]);
var vt="";
vt=slidestart;
if(vt.Contains("[?")){
var rtmp=vt.Substring(vt.IndexOf("[?")+2);
var rand=rtmp;
if(rtmp.Contains("]")){rand=rand.Substring(0,rand.IndexOf("]"));}
var newnum="";
string[] rp=rand.Split("-"[0]);
if(Math.Abs(float.Parse(rp[0])+float.Parse(rp[1]))<=2){newnum=(UnityEngine.Random.Range(float.Parse(rp[0]),float.Parse(rp[1]))).ToString();}else{newnum=(UnityEngine.Random.Range(int.Parse(rp[0]),int.Parse(rp[1]))).ToString();}vt=vt.Replace("[?"+rand+"]",newnum.ToString());}
slidestart=vt;

vt=slidetime;
if(vt.Contains("[?")){
var rtmp=vt.Substring(vt.IndexOf("[?")+2);
var rand=rtmp;
if(rtmp.Contains("]")){rand=rand.Substring(0,rand.IndexOf("]"));}
var newnum="";
string[] rp=rand.Split("-"[0]);
if(Math.Abs(float.Parse(rp[0])+float.Parse(rp[1]))<=2){newnum=(UnityEngine.Random.Range(float.Parse(rp[0]),float.Parse(rp[1]))).ToString();}else{newnum=(UnityEngine.Random.Range(int.Parse(rp[0]),int.Parse(rp[1]))).ToString();}vt=vt.Replace("[?"+rand+"]",newnum.ToString());}
slidetime=vt;

vt=valstart;
if(vt.Contains("[?")){
var rtmp=vt.Substring(vt.IndexOf("[?")+2);
var rand=rtmp;
if(rtmp.Contains("]")){rand=rand.Substring(0,rand.IndexOf("]"));}
var newnum="";
string[] rp=rand.Split("-"[0]);
if(Math.Abs(float.Parse(rp[0])+float.Parse(rp[1]))<=2){newnum=(UnityEngine.Random.Range(float.Parse(rp[0]),float.Parse(rp[1]))).ToString();}else{newnum=(UnityEngine.Random.Range(int.Parse(rp[0]),int.Parse(rp[1]))).ToString();}vt=vt.Replace("[?"+rand+"]",newnum.ToString());}
valstart=vt;

vt=valstop;
if(vt.Contains("[?")){
var rtmp=vt.Substring(vt.IndexOf("[?")+2);
var rand=rtmp;
if(rtmp.Contains("]")){rand=rand.Substring(0,rand.IndexOf("]"));}
var newnum="";
string[] rp=rand.Split("-"[0]);
if(Math.Abs(float.Parse(rp[0])+float.Parse(rp[1]))<=2){newnum=(UnityEngine.Random.Range(float.Parse(rp[0]),float.Parse(rp[1]))).ToString();}else{newnum=(UnityEngine.Random.Range(int.Parse(rp[0]),int.Parse(rp[1]))).ToString();}vt=vt.Replace("[?"+rand+"]",newnum.ToString());}
valstop=vt;
slidevals.Add(key+"line",slidestart+":"+slidetime+":"+valstart+":"+valstop);
}
else{
string[] vals=slidevals[key+"line"].Split(":"[0]);
slidestart=vals[0];
slidetime=vals[1];
valstart=vals[2];
valstop=vals[3];
lastload=float.Parse(slidevals[key]);
}




if(slidestart=="" || (Time.realtimeSinceStartup-lastload>=float.Parse(slidestart) && Time.realtimeSinceStartup-lastload<=(float.Parse(slidestart)+float.Parse(slidetime)))){


//echo25("slidestart "+slidestart+" > slidetime "+slidetime+" > valstart "+valstart+" > valstop "+valstop);

float fstart=0;
if(slidestart!=""){fstart=float.Parse(slidestart);}
float ftime=float.Parse(slidetime);
float vstart=float.Parse(valstart);
float vstop=float.Parse(valstop);

int fi=0;
float lastloop=float.Parse(slidevals[key]);
if(!slidehits.ContainsKey(key)){slidehits.Add(key,fi);}
else if(slidehits.ContainsKey(key)){fi=slidehits[key];}
float progress=(Time.realtimeSinceStartup-lastloop)-fstart;

if(progress>ftime){
	
ftime=float.Parse(slidetime);
vstart=float.Parse(valstart);
vstop=float.Parse(valstop);

if(slidevals.ContainsKey(key)){fi++;

slidevals.Remove(key);
slidevals.Remove(key+"line");
}
}

echo24("sliding ok > "+progress.ToString()+" > "+ftime.ToString()+" fi > "+fi.ToString());

float percent=progress/ftime*bounce;
float final=percent;
if(percent>1){final=2-percent;}
if(final<0){final=0;}

echo24("percent > "+final.ToString());

float tmp=0+((vstart*(1-final))+(vstop*final));
echo24("value > "+tmp.ToString());
tval=tmp;
kinetic=true;
}

}catch(Exception e){SuperController.LogError("Exception caught: " + e);}

}

if(cmd=="time" && handle.color!=Color.red){
try{

string[] ts=(System.DateTime.Now.ToString("H:m:s:fff")).Split(":"[0]);
if(vv.contains("utc")){ts=(System.DateTime.UtcNow.ToString("H:m:s:fff")).Split(":"[0]);}
float daycycle=(float.Parse(ts[0])*3600000)+(float.Parse(ts[1])*60000)+(float.Parse(ts[2])*1000)+(float.Parse(ts[3]));
if(vv.Contains("bounce")){
float daypercent=(daycycle*2)/86400000;
if(daypercent<1){tval=daypercent;}else{tval=2-daypercent;}
}
else{tval=daycycle/86400000;}
if(vv.Contains("invert")){tval=1-tval;}
kinetic=true;
//echo11(tval.ToString());
}catch(Exception e){SuperController.LogError("Exception caught: " + e);}
echo21("coco-ok3");
}


else if(cmd=="proximity" && handle.color!=Color.red){
	echo21("coco-ok3b");
var a="";var b=vv;
if(vv.Contains(",")){
	string[] ob=vv.Split(","[0]);
	a=ob[0];b=ob[1];
	}
	
	if(b.Contains(":")){
	string[] obs=b.Split(":"[0]);
	b=obs[0];range=float.Parse(obs[1]);
	}	
	
	if(SuperController.singleton.GetAtomByUid(b)!=null){
	Atom ap=SuperController.singleton.GetAtomByUid(b); 
	if(a==""){
		Vector3 playposA=new Vector3(0,0,0);
		Vector3 playposB=new Vector3(0,0,0);
		if(!vr){
			playposA=SuperController.singleton.centerCameraTarget.transform.position;
			playposB=playposB;
		}else{
			playposA=SuperController.singleton.leftHand.position;
			playposB=SuperController.singleton.rightHand.position;
		}
	dist = Vector3.Distance(ap.rigidbodies[0].transform.position, playposA);
	float distb = Vector3.Distance(ap.rigidbodies[0].transform.position, playposB);
		
	if(distb<dist){dist=distb;}
	}else{
	if(SuperController.singleton.GetAtomByUid(a)!=null){
	Atom bp=SuperController.singleton.GetAtomByUid(a); 
	dist = Vector3.Distance(ap.rigidbodies[0].transform.position, bp.rigidbodies[0].transform.position);	
	}	
	}
	
	//pval=(1.06f-((dist/range)*100));
	float ptmp=(1.06f-((dist/range)*100));
	if(ptmp>1){ptmp=1;}
	if(ptmp<0){ptmp=0;}
	pvals.Add(a+b,ptmp);
	kinetic=true;
echo21("coco-ok4");
	}


}
	
else if(cmd=="animate" && handle.color!=Color.red){
	bool rot=false;
if(vv.Contains(":rotate")){
	vv=vv.Substring(0,vv.IndexOf(":rotate"));
	rot=true;
	}		
if(SuperController.singleton.GetAtomByUid(vv)!=null){

Atom atarget=SuperController.singleton.GetAtomByUid(vv); 
if(!cset){cset=true;aval=0;}
if(rot){
float avalz=Math.Abs((atarget.rigidbodies[0].transform.eulerAngles.z/360f));
if(avalz<0.5){aval=1-avalz;}else{aval=avalz;}
aval=(4-aval*4);
}else{
aval=Math.Abs(atarget.rigidbodies[0].transform.position.x*2);
}
if(aval>1){aval=1;}
if(aval<0){aval=0;}
kinetic=true;
}	
}

}
}

echo21("coco-ok5");
if(kinetic){
if(handle.color!=Color.red){
if(i>0){float pi=0;pval=0;
foreach(KeyValuePair<string, float> v in pvals){pi=pi+1f;
	pval+=v.Value;
	}

cval=aval+pval+tval;
if(cval>1){cval=1;}
if(cval<0){cval=0;}
JSONStorable trigger = at.GetStorableByID("Trigger");
af = trigger.GetFloatJSONParam("value");
af.val=cval;
yield return null;
//continue;
}
}
}
}


if(cval==-1){
JSONStorable trigger = at.GetStorableByID("Trigger");
af = trigger.GetFloatJSONParam("value");
cval=af.val;
if(kinetic){continue;}//PS might break shit
}

if(cval!=-1){
if(!afvalues.ContainsKey(at.name) || afvalues[at.name]!=cval || alwaysactive){

//echo25("eyh ok");
if(handle.color==Color.red){

if(SuperController.singleton.GetAtomByUid(vv)!=null){	
Atom atarget=SuperController.singleton.GetAtomByUid(vv); 
atarget.mainController.transform.position=new Vector3(0-cval/2,atarget.mainController.transform.position.y,atarget.mainController.transform.position.z);

JSONStorable abool = atarget.GetStorableByID("animation");
JSONStorableBool recording = abool.GetBoolJSONParam("armedForRecord");	
recording.val=true;
}}

if(aatext==""){
aatext=atext.val.ToString();
}

if(aatext!=""){

//_chatinput.isFocused
String[] av=(dynatag(aatext.Replace("\r\n","\n")+"\n")).Split("\n"[0]);
int i=0;
foreach(string strr in av){bool holo=false;

var str=strr.Replace("[TITLE]",av[0]);
str=str.Replace("://",";/;");
if(str.Replace(" ","")==""){continue;}
if(str+"  ".Substring(0,2)=="//"){continue;}
if(str.Contains(":")){i++;

if(str+"    ".Substring(0,4)=="/vr "){
if(!vr){continue;}
str=str.Substring(4);	
}

else if(str+"         ".Substring(0,9)=="/desktop "){
if(vr){continue;}
str=str.Substring(9);
}

if((str+"    ").Substring(0,4)=="chat"){
if((str+"    ").Substring(0,5)=="chat:"){continue;}
str=str.Replace("chat>","chat:hit>").Replace("chat<","chat:hit<").Replace("chat=","chat:hit=");	
}

else if((str+"    ").Substring(0,4)=="load"){
if((str+"    ").Substring(0,5)=="load:"){continue;}
str=str.Replace("load>","load:hit>").Replace("load<","load:hit<").Replace("load=","load:hit=");	
}

else if((str+"    ").Substring(0,3)=="url"){
if((str+"    ").Substring(0,4)=="url:"){continue;}
str=str.Replace("url>","url:hit>").Replace("url<","url:hit<").Replace("url=","url:hit=");	
}

var cmd=str.Substring(0,str.IndexOf(":"));
var v=str.Substring(cmd.Length+1,str.Length-(cmd.Length+1));


if(v.Contains("[?")){
var rtmp=v.Substring(v.IndexOf("[?")+2);
var rand=rtmp;
if(rtmp.Contains("]")){rand=rand.Substring(0,rand.IndexOf("]"));}

var newnum="";
if(rand.Contains(";")){
string[] rp=rand.Split(";"[0]);	
int choice=UnityEngine.Random.Range(0,rp.Length);
newnum=rp[choice];
}
else{
string[] rp=rand.Split("-"[0]);
if(Math.Abs(float.Parse(rp[0])+float.Parse(rp[1]))<=2){
newnum=(UnityEngine.Random.Range(float.Parse(rp[0]),float.Parse(rp[1]))).ToString();
}else{
newnum=(UnityEngine.Random.Range(int.Parse(rp[0]),int.Parse(rp[1]))).ToString();}
}
v=v.Replace("[?"+rand+"]",newnum.ToString());
}


var l="hit>";
var m="hit<";
var ee="hit=";
var te="title=";

if(v.Contains("value<")){var vl="value<";var more=v.Substring(v.IndexOf(vl)+6);
v=v.Replace(" "+vl+more,vl+more).Replace(vl+more+" ",vl+more).Replace(vl+more,"");
float mr=0;
mr=float.Parse(more);
if(cval>=mr){
continue;
}}

if(v.Contains("value>")){var vl="value>";var more=v.Substring(v.IndexOf(vl)+6);
v=v.Replace(" "+vl+more,vl+more).Replace(vl+more+" ",vl+more).Replace(vl+more,"");
float mr=0;
mr=float.Parse(more);
if(cval<=mr){
continue;
}}

else if(v.Contains("value=")){var vl="value=";var more=v.Substring(v.IndexOf(vl)+6);
v=v.Replace(" "+vl+more,vl+more).Replace(vl+more+" ",vl+more).Replace(vl+more,"");
float mr=0;
mr=float.Parse(more);
if(cval!=mr){
continue;
}}

echo19(v);
if(v.Contains(l)){var more=v.Substring(v.IndexOf(l)+4);
if(more.Contains(" ")){more=more.Substring(0,more.IndexOf(" "));}
if(more.Contains(":")){more=more.Substring(0,more.IndexOf(":"));}
echo19(more);

v=v.Replace(l+more+":",l+more);
v=v.Replace(" "+l+more,l+more).Replace(l+more+" ",l+more).Replace(l+more,"");

echo19(cmd+" "+v);
float mr=0;int hits=0;bool equal=false;
if(more.Contains(",")){
mr=float.Parse(more.Substring(0,more.IndexOf(",")));	
hits=int.Parse(more.Substring(more.IndexOf(",")+1).Replace("=","").Replace("<",""));
if(more.Contains("=")){equal=true;}
}else{mr=float.Parse(more);}

var key=at.name+"line"+i.ToString();
if(cval>=mr){
	if(!slideon.ContainsKey(key)){
		if(!slidehits.ContainsKey(key) || hits==0 || slidehits[key]<=hits){
		int htmp=1;
		if(slidehits.ContainsKey(key)){htmp=slidehits[key];slidehits.Remove(key);}
		slidehits.Add(key,htmp+1);
		if(equal && hits!=htmp){
		echo14("wait >"+htmp.ToString()+" = hits "+hits.ToString()+" < ");slideon.Add(key,true);
			continue;}
		if(equal){slidehits.Remove(key);}
		echo14("on >"+v+"< hits "+hits+" < "+htmp.ToString());slideon.Add(key,true);
		}else{continue;}
		}else{continue;}
	}else{
		if(slideon.ContainsKey(key)){echo14("off >"+v+"<");slideon.Remove(key);}
	continue;
	}
}


else if(v.Contains(m)){l=m;var more=v.Substring(v.IndexOf(l)+4);
if(more.Contains(" ")){more=more.Substring(0,more.IndexOf(" "));}
v=v.Replace(" "+l+more,l+more).Replace(l+more+" ",l+more).Replace(l+more,"");
float mr=0;int hits=0;bool equal=false;
if(more.Contains(",")){
mr=float.Parse(more.Substring(0,more.IndexOf(",")));	
hits=int.Parse(more.Substring(more.IndexOf(",")+1).Replace("=","").Replace("<",""));
if(more.Contains("=")){equal=true;}
}else{mr=float.Parse(more);}

var key=at.name+"line"+i.ToString();
if(cval<=mr){
	if(!slideon.ContainsKey(key)){
		if(!slidehits.ContainsKey(key) || hits==0 || slidehits[key]<=hits){
		int htmp=1;
		if(slidehits.ContainsKey(key)){htmp=slidehits[key];slidehits.Remove(key);}
		slidehits.Add(key,htmp+1);
		if(equal && hits!=htmp){
		echo14("wait >"+htmp.ToString()+" = hits "+hits.ToString()+" < ");slideon.Add(key,true);
			continue;}
		if(equal){slidehits.Remove(key);}
		echo14("on >"+v+"< hits "+hits+" < "+htmp.ToString());slideon.Add(key,true);
		}else{continue;}
		}else{continue;}
	}else{
		if(slideon.ContainsKey(key)){echo14("off >"+v+"<");slideon.Remove(key);}
	continue;
	}
}

else if(v.Contains(ee)){l=ee;var more=v.Substring(v.IndexOf(l)+4);
if(more.Contains(" ")){more=more.Substring(0,more.IndexOf(" "));}
v=v.Replace(" "+l+more,l+more).Replace(l+more+" ",l+more).Replace(l+more,"");
float mr=0;int hits=0;bool equal=false;
if(more.Contains(",")){
mr=float.Parse(more.Substring(0,more.IndexOf(",")));	
hits=int.Parse(more.Substring(more.IndexOf(",")+1).Replace("=","").Replace("<",""));
if(more.Contains("=")){equal=true;}
}else{mr=float.Parse(more);}

var key=at.name+"line"+i.ToString();
if(cval==mr){
	if(!slideon.ContainsKey(key)){
		if(!slidehits.ContainsKey(key) || hits==0 || slidehits[key]<=hits){
		int htmp=1;
		if(slidehits.ContainsKey(key)){htmp=slidehits[key];slidehits.Remove(key);}
		slidehits.Add(key,htmp+1);
		if(equal && hits!=htmp){
		echo14("wait >"+htmp.ToString()+" = hits "+hits.ToString()+" < ");slideon.Add(key,true);
			continue;}
		if(equal){slidehits.Remove(key);}
		echo14("on >"+v+"< hits "+hits+" < "+htmp.ToString());slideon.Add(key,true);
		}else{continue;}
		}else{continue;}
	}else{
		if(slideon.ContainsKey(key)){echo14("off >"+v+"<");slideon.Remove(key);}
	continue;
	}
}

else if(v.Contains(te)){l=te;var more=v.Substring(v.IndexOf(l)+6);
if(more.Contains(" ")){more=more.Substring(0,more.IndexOf(" "));}
v=v.Replace(" "+l+more,l+more).Replace(l+more+" ",l+more).Replace(l+more,"");
var mr="";int hits=0;bool equal=false;
if(more.Contains(",")){
mr=more.Substring(0,more.IndexOf(","));	
hits=int.Parse(more.Substring(more.IndexOf(",")+1).Replace("=","").Replace("<",""));
if(more.Contains("=")){equal=true;}
}else{mr=more;}

var key=at.name+"line"+i.ToString();
if(av[0].contains(mr)){
	if(!slideon.ContainsKey(key)){
		if(!slidehits.ContainsKey(key) || hits==0 || slidehits[key]<=hits){
		int htmp=1;
		if(slidehits.ContainsKey(key)){htmp=slidehits[key];slidehits.Remove(key);}
		slidehits.Add(key,htmp+1);
		if(equal && hits!=htmp){
		echo14("wait >"+htmp.ToString()+" = hits "+hits.ToString()+" < ");slideon.Add(key,true);
			continue;}
		if(equal){slidehits.Remove(key);}
		echo14("on >"+v+"< hits "+hits+" < "+htmp.ToString());slideon.Add(key,true);
		}else{continue;}
		}else{continue;}
	}else{
		if(slideon.ContainsKey(key)){echo14("off >"+v+"<");slideon.Remove(key);}
	continue;
	}
}

if(v.Contains("//")){vv=v.Replace(" //","//").Replace(" //","//").Replace(" //","//");
v=v.Substring(0,v.IndexOf("//"));
}
if(v.Contains(" holo")){holo=true;v=v.Replace(" holo","");}
else if(v.Contains("holo ")){holo=true;v=v.Replace("holo ","");}

//SuperController.LogMessage(i+":  cmd >"+cmd+"< v: >"+v+"<");


//timescale:0,-2


if(cmd=="timescale"){
if(v.Contains(",")){
var start=v.Substring(0,v.IndexOf(","));
var end=v.Substring(start.Length+1,v.Length-(start.Length+1));
float result=0+(float.Parse(start)*(1-cval))+(float.Parse(end)*(cval));
timescale.value=result;
//echo9(result.ToString());
}	
}

if(cmd=="chat"){
	echo26("<chat<< "+v.ToString());
	if(v=="open"){
				chat.enabled=true;
				chatbutton.textColor = new Color(0.8f, 0.9f, 1f);
				chatbuttonhud.textColor = new Color(0.8f, 0.9f, 1f);
				chatvisible=chat.enabled;
	}
		else if(v=="close"){
				chat.enabled=false;
				chatbutton.textColor = new Color(0.4f, 0.5f, 0.6f);
				chatbuttonhud.textColor = new Color(0.4f, 0.5f, 0.6f);
				chatvisible=chat.enabled;
	}
	else{
				chat.enabled=true;
				chatbutton.textColor = new Color(0.8f, 0.9f, 1f);
				chatbuttonhud.textColor = new Color(0.8f, 0.9f, 1f);
				chatvisible=chat.enabled;
				tochat("<color=#bbbbbb>"+v+"\n</color>");
		
	}
				setmenu=true;
}

if(cmd=="url"){
	v=v.Replace(";/;","://");
	if(v=="open"){
		
				webvisible=true;url.enabled=true;web.enabled=true;
				wwwbuttonhud.textColor = new Color(0.8f, 0.9f, 1f);
				wwwbutton.textColor = new Color(0.8f, 0.9f, 1f);
				setmenu=true;
	}
		else if(v=="close"){
		
				webvisible=false;url.enabled=false;web.enabled=false;
				wwwbuttonhud.textColor = new Color(0.4f, 0.5f, 0.6f);
				wwwbutton.textColor = new Color(0.4f, 0.5f, 0.6f);
				setmenu=true;
	}
	else{StartCoroutine(gourl(v));}

}


if(cmd=="fps"){
	
var fps=v;var cap="";
if(v.Length==1){fps="";cap=v;}

UserPreferences u=SuperController.singleton.GetAtomByUid("CoreControl").gameObject.GetComponent<UserPreferences>();

if(v.Contains(",")){

	
var low=v.Substring(0,v.IndexOf(","));
var high=v.Substring(low.Length+1);
var start=(low+"-").Substring(0,(low+"-").IndexOf("-"));
var end=(high+"-").Substring(0,(high+"-").IndexOf("-"));
float endtmp=float.Parse(end);

if(endtmp<60){end="59";}
else if(endtmp<72){end="71";}
else if(endtmp<90){end="89";}
else if(endtmp<120){end="119";}
else if(endtmp<144){end="143";}
else if(endtmp<240){end="239";}
else if(endtmp<288){end="287";}
else if(endtmp<360){end="359";}

float tmp=0+(float.Parse(start)*(1-cval))+(float.Parse(end)*(cval));

if(tmp<50){u.physicsRate=UserPreferences.PhysicsRate._45;u.physicsUpdateCap=3;}
else if(tmp<55){u.physicsRate=UserPreferences.PhysicsRate._45;u.physicsUpdateCap=2;}
else if(tmp<60){u.physicsRate=UserPreferences.PhysicsRate._45;u.physicsUpdateCap=1;}
else if(tmp<64){u.physicsRate=UserPreferences.PhysicsRate._60;u.physicsUpdateCap=3;}
else if(tmp<69){u.physicsRate=UserPreferences.PhysicsRate._60;u.physicsUpdateCap=2;}
else if(tmp<72){u.physicsRate=UserPreferences.PhysicsRate._60;u.physicsUpdateCap=1;}
else if(tmp<78){u.physicsRate=UserPreferences.PhysicsRate._72;u.physicsUpdateCap=3;}
else if(tmp<84){u.physicsRate=UserPreferences.PhysicsRate._72;u.physicsUpdateCap=2;}
else if(tmp<90){u.physicsRate=UserPreferences.PhysicsRate._72;u.physicsUpdateCap=1;}
else if(tmp<100){u.physicsRate=UserPreferences.PhysicsRate._90;u.physicsUpdateCap=3;}
else if(tmp<110){u.physicsRate=UserPreferences.PhysicsRate._90;u.physicsUpdateCap=2;}
else if(tmp<120){u.physicsRate=UserPreferences.PhysicsRate._90;u.physicsUpdateCap=1;}
else if(tmp<128){u.physicsRate=UserPreferences.PhysicsRate._120;u.physicsUpdateCap=3;}
else if(tmp<136){u.physicsRate=UserPreferences.PhysicsRate._120;u.physicsUpdateCap=2;}
else if(tmp<144){u.physicsRate=UserPreferences.PhysicsRate._120;u.physicsUpdateCap=1;}
else if(tmp<170){u.physicsRate=UserPreferences.PhysicsRate._144;u.physicsUpdateCap=3;}
else if(tmp<210){u.physicsRate=UserPreferences.PhysicsRate._144;u.physicsUpdateCap=2;}
else if(tmp<240){u.physicsRate=UserPreferences.PhysicsRate._144;u.physicsUpdateCap=1;}
else if(tmp<250){u.physicsRate=UserPreferences.PhysicsRate._240;u.physicsUpdateCap=3;}
else if(tmp<268){u.physicsRate=UserPreferences.PhysicsRate._240;u.physicsUpdateCap=2;}
else if(tmp<288){u.physicsRate=UserPreferences.PhysicsRate._240;u.physicsUpdateCap=1;}
else if(tmp<300){u.physicsRate=UserPreferences.PhysicsRate._288;u.physicsUpdateCap=3;}
else if(tmp<320){u.physicsRate=UserPreferences.PhysicsRate._288;u.physicsUpdateCap=2;}
else if(tmp<360){u.physicsRate=UserPreferences.PhysicsRate._288;u.physicsUpdateCap=1;}

}

else{
if(v.Contains("-")){
fps=v.Substring(0,v.IndexOf("-"));
cap=v.Substring(fps.Length+1);
}


if(fps!=""){
if(fps=="auto"){u.physicsRate=UserPreferences.PhysicsRate.Auto;}
else if(fps=="45"){u.physicsRate=UserPreferences.PhysicsRate._45;}
else if(fps=="60"){u.physicsRate=UserPreferences.PhysicsRate._60;}
else if(fps=="72"){u.physicsRate=UserPreferences.PhysicsRate._72;}
else if(fps=="90"){u.physicsRate=UserPreferences.PhysicsRate._90;}
else if(fps=="120"){u.physicsRate=UserPreferences.PhysicsRate._120;}
else if(fps=="144"){u.physicsRate=UserPreferences.PhysicsRate._144;}
else if(fps=="240"){u.physicsRate=UserPreferences.PhysicsRate._240;}
else if(fps=="288"){u.physicsRate=UserPreferences.PhysicsRate._288;}
}

if(cap!=""){
u.physicsUpdateCap=int.Parse(cap);
}
}

}



else if(cmd=="teleport"){
bool aligning=false;
bool looking=false;
var vt=v;
if(vt.Contains("align")){aligning=true;vt=vt.Replace(" align","align").Replace("align ","align").Replace("align","");}
if(vt.Contains("look")){looking=true;vt=vt.Replace(" look","look").Replace("look ","look").Replace("look","");}

var travel="";
var dest=vt;

if(vt.Contains(":")){
string[] tmp=vt.Split(":"[0]);
travel=tmp[0];
dest=tmp[1];
}
if(travel==""){
if(SuperController.singleton.GetAtomByUid(dest)!=null){teleport(SuperController.singleton.GetAtomByUid(dest));
if(aligning){
//SuperController.singleton.centerCameraTarget.transform.eulerAngles=new Vector3(0,SuperController.singleton.GetAtomByUid(dest).rigidbodies[0].transform.eulerAngles.y,0);
SuperController.singleton.navigationRig.transform.eulerAngles=new Vector3(0,SuperController.singleton.GetAtomByUid(dest).rigidbodies[0].transform.eulerAngles.y,0);
//yield return null;
//SuperController.singleton.centerCameraTarget.transform.eulerAngles=new Vector3(0,SuperController.singleton.GetAtomByUid(dest).rigidbodies[0].transform.eulerAngles.y,0);
}
if(looking){
//SuperController.singleton.centerCameraTarget.transform.eulerAngles=SuperController.singleton.GetAtomByUid(dest).rigidbodies[0].transform.eulerAngles;
SuperController.singleton.navigationRig.transform.eulerAngles=SuperController.singleton.GetAtomByUid(dest).rigidbodies[0].transform.eulerAngles;
//yield return null;
//SuperController.singleton.centerCameraTarget.transform.eulerAngles=SuperController.singleton.GetAtomByUid(dest).rigidbodies[0].transform.eulerAngles;
}
}
}else{
Atom trv=SuperController.singleton.GetAtomByUid(travel);
Atom dst=SuperController.singleton.GetAtomByUid(dest);
if(trv!=null && dst!=null){
trv.mainController.transform.position=dst.rigidbodies[0].transform.position;
if(aligning){trv.mainController.transform.eulerAngles=new Vector3(0,dst.rigidbodies[0].transform.eulerAngles.y,0);}
if(looking){trv.mainController.transform.eulerAngles=dst.rigidbodies[0].transform.eulerAngles;}
}
}
}
	
else if(cmd=="on"){
if(SuperController.singleton.GetAtomByUid(v)!=null){SuperController.singleton.GetAtomByUid(v).SetOn(true);}
}

else if(cmd=="off"){
if(SuperController.singleton.GetAtomByUid(v)!=null){SuperController.singleton.GetAtomByUid(v).SetOn(false);}
}
	
else if(cmd=="light"){
var subv=v.ToLower()+" ";
bool forcelight=false;
var cont="force";
if(subv.Contains(cont)){
forcelight=true;
}

cont="front";
if(subv.Contains(cont)){
var tmp=subv.Substring(subv.IndexOf(cont)+cont.Length);
tmp=tmp.Substring(0,tmp.IndexOf(" "));
if(tmp.Contains(",")){
var start=tmp.Substring(0,tmp.IndexOf(","));
var end=tmp.Substring(start.Length+1,tmp.Length-(start.Length+1));
tmp=(0+(float.Parse(start)*(1-cval))+(float.Parse(end)*(cval))).ToString();
}
float result=float.Parse(tmp);
lightval1b=result*100;
if(!fadingin && forcelight){Frontlight.intensity=result;}
}

cont="side";
if(subv.Contains(cont)){
var tmp=subv.Substring(subv.IndexOf(cont)+cont.Length);
tmp=tmp.Substring(0,tmp.IndexOf(" "));
if(tmp.Contains(",")){
var start=tmp.Substring(0,tmp.IndexOf(","));
var end=tmp.Substring(start.Length+1,tmp.Length-(start.Length+1));
tmp=(0+(float.Parse(start)*(1-cval))+(float.Parse(end)*(cval))).ToString();
}
float result=float.Parse(tmp);
lightval2b=result*100;
if(!fadingin && forcelight){Backlight.intensity=result;}
}

cont="camera";
if(subv.Contains(cont)){
var tmp=subv.Substring(subv.IndexOf(cont)+cont.Length);
tmp=tmp.Substring(0,tmp.IndexOf(" "));
if(tmp.Contains(",")){
var start=tmp.Substring(0,tmp.IndexOf(","));
var end=tmp.Substring(start.Length+1,tmp.Length-(start.Length+1));
tmp=(0+(float.Parse(start)*(1-cval))+(float.Parse(end)*(cval))).ToString();
}
float result=float.Parse(tmp);
SuperController.singleton.mainHUD.Find("MainUICanvas/Panel/Content/TabSceneLighting/Left/Camera Exposure/").GetComponentInChildren<Slider>(true).value=result;
}

}

else if(cmd=="color"){

var cols=v.ToLower()+" ";
float R=currentR;
float G=currentG;
float B=currentB;
if(cols.Contains("r")){
var r=cols.Substring(cols.IndexOf("r")+1);
r=r.Substring(0,r.IndexOf(" "));
if(r.Contains(",")){
var start=r.Substring(0,r.IndexOf(","));
var end=r.Substring(start.Length+1,r.Length-(start.Length+1));
r=(0+(float.Parse(start)*(1-cval))+(float.Parse(end)*(cval))).ToString();
}
R=float.Parse(r);
}

if(cols.Contains("g")){
var g=cols.Substring(cols.IndexOf("g")+1);
g=g.Substring(0,g.IndexOf(" "));
if(g.Contains(",")){
var start=g.Substring(0,g.IndexOf(","));
var end=g.Substring(start.Length+1,g.Length-(start.Length+1));
g=(0+(float.Parse(start)*(1-cval))+(float.Parse(end)*(cval))).ToString();
}
G=float.Parse(g);
}

if(cols.Contains("b")){
var b=cols.Substring(cols.IndexOf("b")+1);
b=b.Substring(0,b.IndexOf(" "));
if(b.Contains(",")){
var start=b.Substring(0,b.IndexOf(","));
var end=b.Substring(start.Length+1,b.Length-(start.Length+1));
b=(0+(float.Parse(start)*(1-cval))+(float.Parse(end)*(cval))).ToString();
}
B=float.Parse(b);
}

Color setcol=new Color(R,G,B,1);
endc=camclr=setcol;
currentR=R;
currentG=G;
currentB=B;

if(!colorin){
Color camcolval=new Color();
if(camcol=="normal"){camcolval=setcol;}
else if(camcol=="greenscreen"){camcolval=Color.green;}
else if(camcol=="transparent"){camcolval=Color.clear;}
SuperController.singleton.hiResScreenshotCamera.clearFlags=CameraClearFlags.Color;
SuperController.singleton.hiResScreenshotCamera.backgroundColor=camcolval;
if(Mcamera!=null){Mcamera.clearFlags=CameraClearFlags.Color;
Mcamera.backgroundColor=camcolval;}
SuperController.singleton.MonitorCenterCamera.clearFlags=CameraClearFlags.Color;
SuperController.singleton.MonitorCenterCamera.backgroundColor=setcol;
Camera maincam=SuperController.singleton.lookCamera;
maincam.clearFlags =CameraClearFlags.Color;
maincam.backgroundColor=setcol;
if(SuperController.singleton.GetAtomByUid("WindowCamera")!=null){
Camera wincam=SuperController.singleton.GetAtomByUid("WindowCamera").GetComponentInChildren<Camera>(true);
if(wincam!=null){wincam.clearFlags =CameraClearFlags.Color;
wincam.backgroundColor=setcol;
}}
}



}

else if(cmd=="skybox"){
bool setintenity=false;var vi=""; bool seton=true;


if(v.Contains(" off")){
seton=false;
v=v.Replace(" off","off").Replace("off ","off").Replace("off","");
}

var vs=v;

if(vs.Contains(":")){
vs=vs.Substring(0,vs.IndexOf(":"));
vi=v.Substring(vs.Length+1);

if(vi.Contains(",")){
var start=vi.Substring(0,vi.IndexOf(","));
var end=vi.Substring(start.Length+1,vi.Length-(start.Length+1));
vi=(0+(float.Parse(start)*(1-cval))+(float.Parse(end)*(cval))).ToString();
}

float viresult=float.Parse(vi);

SkyshopLightControllerUI sky=SuperController.singleton.GetAtomByUid("CoreControl").gameObject.GetComponentInChildren<SkyshopLightControllerUI>(true);
if(viresult==0){
sky.showSkyboxToggle.isOn=false;
}else{

try{
sky.showSkyboxToggle.isOn=seton;
sky.skyboxIntensitySlider.value=viresult;
}catch(Exception e){SuperController.LogError("Exception caught: " + e);}

}

}
var result=vs;
if(vs.Contains("-")){
echo19("coco");
var start=vs.Substring(0,vs.IndexOf("-"));
var end=vs.Substring(start.Length+1,vs.Length-(start.Length+1));
result=(0+(float.Parse(start)*(1-cval))+(float.Parse(end)*(cval))).ToString();
}
else if(vs.Contains(",")){
string[] cp=vs.Split(","[0]);
int cc=0;
float c=cval*100;
float cplen=float.Parse(cp.Length.ToString());
foreach(string cs in cp){cc++;
float clow=(100/cplen)*(cc-1);
float chigh=(100/cplen)*(cc);
if(c>=clow && c<=chigh){
result=cs;break;
}
} 
}

result=(result+".").Substring(0,(result+".").IndexOf("."));
if(result!="none" && result!=""){setsky(result);}
}




			else if(cmd=="load"){
			if(v!=""){bool local=false;bool loadposition=false;forcepos=true;
			


			if(v.Contains("local")){
			v=((v.Replace(" local","local")).Replace("local ","local")).Replace("local","");
			local=true;
			}
			
			if(v.Contains("loadposition")){
			v=((v.Replace(" loadposition","loadposition")).Replace("loadposition ","loadposition")).Replace("loadposition","");
			loadposition=true;forcepos=false;
			}
			

			var prefix="Saves/scene/";var subvload="";
			var vload=v;var subatom="";bool subload=false;bool merge=false;
			if((v+":").Substring(0,(v+":").IndexOf(":"))=="subscene"){
			vload=v.Substring(v.IndexOf("subscene:")+9);
			if(!vload.Contains(":")){continue;}
			subatom=vload.Substring(0,vload.IndexOf(":"));
			vload=vload.Substring(subatom.Length+1);
			subload=true;subvload=vload;
			prefix="Custom/SubScene/";
			echo18("loading subscene "+subatom);
			}
			else if((v+":").Substring(0,(v+":").IndexOf(":"))=="merge"){
			vload=v.Substring(v.IndexOf("merge:")+6);
			merge=true;
			}
			
			
			getvarinfo();
			vload=vload.Replace("\\","/");
			if(!varinfo.ContainsKey("local scene") && !vload.Contains(":/") && !local){
			echo18(varinfo["varpath"]);
			echo18(varinfo["varuid"]);
			echo18(varinfo["varscene"]);
			prefix=("AddonPackages/"+SuperController.singleton.currentLoadDir+"/").Replace(":/",".var:/");
			}
			vload=(vload.Replace("//","/").Replace("\\","/").Replace("//","/")).Replace("Saves/scene/","").Replace("Custom/SubScene/","");
			vload=(prefix+vload).Replace("//","/").Replace("\\","/").Replace("//","/");
			
			if(!FileManagerSecure.FileExists(vload)){continue;}
			if(subload && SuperController.singleton.GetAtomByUid(subatom)==null){continue;}
			
			echo18(vload);
			SuperController.singleton.useSceneLoadPosition=loadposition;
			if(subload){
			if(Time.realtimeSinceStartup-lastsceneload>8){
			echo18(subatom);
			Atom sa=SuperController.singleton.GetAtomByUid(subatom);
			JSONStorable a1 = sa.GetStorableByID("SubScene");
			JSONStorableUrl a2 = a1.GetUrlJSONParam("storePath");
			a2.val = vload;
			a1.CallAction("LoadSubScene");
			}
			}
			
			else if(merge){

			
			if(Time.realtimeSinceStartup-lastsceneload>8){
			
			if(forcepos){	
			ppos = SuperController.singleton.navigationRig.transform.position;
			prot = SuperController.singleton.navigationRig.transform.eulerAngles;
			pheight=SuperController.singleton.playerHeightAdjust;			
			var forcetmp=ppos.x.ToString()+","+ppos.y.ToString()+","+ppos.z.ToString()+"\n"+prot.x.ToString()+","+prot.y.ToString()+","+prot.z.ToString()+"\n"+pheight.ToString();
			var forcefile=_plugindir+_pluginowner+_plugin+"\\forcepos.tmp";
			FileManagerSecure.WriteAllText(forcefile,forcetmp);
			echo18("saving pos");
			}
				
			SuperController.singleton.LoadMerge(vload);
			}
			}
			else{
			if(Time.realtimeSinceStartup-lastsceneload>8){
			
			if(forcepos){	
			ppos = SuperController.singleton.navigationRig.transform.position;
			prot = SuperController.singleton.navigationRig.transform.eulerAngles;
			pheight=SuperController.singleton.playerHeightAdjust;			
			var forcetmp=ppos.x.ToString()+","+ppos.y.ToString()+","+ppos.z.ToString()+"\n"+prot.x.ToString()+","+prot.y.ToString()+","+prot.z.ToString()+"\n"+pheight.ToString();
			var forcefile=_plugindir+_pluginowner+_plugin+"\\forcepos.tmp";
			FileManagerSecure.WriteAllText(forcefile,forcetmp);
			echo18("saving pos");
			}			
				
			SuperController.singleton.Load(vload);
			//SuperController.singleton.LoadFromJSONEmbed(vload,true,false);
			}
			}
			

			}}


			else if(cmd=="freeze"){
			if(v!=""){
			freezebutton.buttonColor = new Color(0.91f, 0.54f, 0.31f);
			freeze.isOn=true;freezebutton.label="Unfreeze";
			StartCoroutine(unfreezescene(float.Parse(v)));
			}}
			
			else if(cmd=="pause"){
			if(v!=""){
			pausebutton.buttonColor = new Color(0.81f, 0.44f, 0.21f);
			SuperController.singleton.pauseAutoSimulation=true;
			pausebutton.label="Unpause";
			pausebutton.textColor = Color.white;
			StartCoroutine(unpausescene(float.Parse(v)));
			}}



else if(cmd=="morph"){
var p="";

if(_person!=null){p=_person.name;}

if(v.Contains(":")){
p=v.Substring(0,v.IndexOf(":"));
v=v.Substring(p.Length+1,v.Length-(p.Length+1));
}
	
if(v.Contains(" ")){
string[] vp=v.Split(" "[0]);var va="";float result=0;
foreach(string vsub in vp){
if(vsub.Contains(",")){
var start=vsub.Substring(0,vsub.IndexOf(","));
var end=vsub.Substring(start.Length+1,vsub.Length-(start.Length+1));
result=0+((float.Parse(start)/1000)*(1-cval))+((float.Parse(end)/1000)*(cval));
if(switcher && holo){result=0-result;}
}else{
va+=" "+vsub;
}
}
va=va.Substring(1,va.Length-1);
echo26("["+p+"]["+va+"] = "+result.ToString());
if(allmorphs.ContainsKey("["+p+"]["+va+"]")){
allmorphs["["+p+"]["+va+"]"].morphValue=result;
}
}
}


else if(cmd=="rotate"){
if(v.Contains(" ")){
var vvv=v.Substring(2,v.Length-2);
var dir=v.Substring(0,1);
string[] vp=vvv.Split(" "[0]);var va="";float result=0;
foreach(string vsub in vp){
if(vsub.Contains(",")){
var start=vsub.Substring(0,vsub.IndexOf(","));
var end=vsub.Substring(start.Length+1,vsub.Length-(start.Length+1));
result=0+(float.Parse(start)*(1-cval))+(float.Parse(end)*(cval));
if(switcher && holo){result=0-result;}
}else{
va+=" "+vsub;
}
}
va=va.Substring(1,va.Length-1);
if(SuperController.singleton.GetAtomByUid(va)!=null){
Transform a=SuperController.singleton.GetAtomByUid(va).mainController.transform;
//SuperController.LogMessage(va+" > rotate "+dir+" to "+result.ToString());

if(dir.ToLower()=="a"){a.eulerAngles=new Vector3(result,result,result);}
else if(dir.ToLower()=="y"){a.eulerAngles=new Vector3(a.eulerAngles.x,result,a.eulerAngles.z);}
else if(dir.ToLower()=="x"){a.eulerAngles=new Vector3(result,a.eulerAngles.y,a.eulerAngles.z);}
else if(dir.ToLower()=="z"){a.eulerAngles=new Vector3(a.eulerAngles.x,a.eulerAngles.y,result);}
}
}
}


else if(cmd=="move"){
if(v.Contains(" ")){
var vvv=v.Substring(2,v.Length-2);
var dir=v.Substring(0,1);
string[] vp=vvv.Split(" "[0]);var va="";float result=0;
foreach(string vsub in vp){
if(vsub.Contains(",")){
var start=vsub.Substring(0,vsub.IndexOf(","));
var end=vsub.Substring(start.Length+1,vsub.Length-(start.Length+1));
result=0+(float.Parse(start)*(1-cval))+(float.Parse(end)*(cval));
if(switcher && holo){result=0-result;}
}else{
va+=" "+vsub;
}
}
va=va.Substring(1,va.Length-1);
if(SuperController.singleton.GetAtomByUid(va)!=null){
Transform a=SuperController.singleton.GetAtomByUid(va).mainController.transform;
if(dir.ToLower()=="x"){a.position=new Vector3(result,a.position.y,a.position.z);}
else if(dir.ToLower()=="y"){a.position=new Vector3(a.position.x,result,a.position.z);}
else if(dir.ToLower()=="z"){a.position=new Vector3(a.position.x,a.position.y,result);}
}
}
}

else if(cmd=="text"){
var p="";var oldv=v;
if(v.Contains(":")){
p=v.Substring(0,v.IndexOf(":"));
try{v=v.Substring(p.Length+1,v.Length-(p.Length+1));}catch(Exception e){continue;}
}
if(p==""){continue;}
if(v==oldv){continue;}
Atom pp=SuperController.singleton.GetAtomByUid(p);
var pptype="Text";
var ppsubtype="text";
if(pp.type=="SimpleSign"){
pptype="Sign";	
}
else if(pp.type=="Person"){
pptype="SpeechBubble";	
ppsubtype="bubbleText";
if(v.Substring(0,6)=="think:"){
v=v.Substring(6);
pptype="ThoughtBubble";}
}

JSONStorable ptext = pp.GetStorableByID(pptype);
JSONStorableString pptext = ptext.GetStringJSONParam(ppsubtype);	
pptext.val=v;
}

else if(cmd=="worldscale"){
if(v.Contains(",")){
bool locked=false;
if(v.Contains("lock")){
locked=true;
v=v.Replace("lock ","lock").Replace(" lock","lock").Replace("lock","");
}
var start=v.Substring(0,v.IndexOf(","));
var end=v.Substring(start.Length+1,v.Length-(start.Length+1));
float result=0+(float.Parse(start)*(1-cval))+(float.Parse(end)*(cval));
result=(result)/100;
echo14("slider: "+result.ToString());

if(result<0.05f){result=0.05f;}
if(result>20f){result=20f;}
try{

worldset=false;
setworldscale(result,locked,true);

//echo9(result.ToString());
}catch(Exception e){SuperController.LogError("Exception caught: " + e);}
}	
}

else if(cmd=="header"){
var header="";
if(v.Contains(",")){
string[] cp=v.Split(","[0]);

int cc=0;
float c=cval*100;
float cplen=float.Parse(cp.Length.ToString());
foreach(string cs in cp){cc++;
float clow=(100/cplen)*(cc-1);
float chigh=(100/cplen)*(cc);
if(c>=clow && c<=chigh){
header=cs;break;
}
} 
}else{
header=v;
}
var key=at.name+"line"+i.ToString();
if(!slidevals.ContainsKey(key) || slidevals[key]!=header){
if(slidevals.ContainsKey(key)){slidevals.Remove(key);}
slidevals.Add(key,header);
InputField aedit=null;
try{aedit=at.transform.Find("UIPlaceHolder/UIAtomUISlider(Clone)/Canvas/Panel/Content/Slider/InputField/").GetComponent<InputField>();}catch(Exception e){}
if(aedit!=null && aedit.isFocused){
atext.val=aedit.text;
aatext=atext.val;
}else{

atext.val=header+aatext.Substring(aatext.IndexOf("\n"));


}
}
}

else if(cmd=="title"){
if(v.Contains(",")){
var vnum=v;var vprefix="";var vsuffix="";
if(v.Contains(" ")){
string[] vpart=v.Split(" "[0]);
bool vsum=false;
foreach(String vsub in vpart){
if(vsub.Contains(",")){vsum=true;vnum=vsub;}else{
if(vsum){vsuffix+=" "+vsub;}else{vprefix+=vsub+" ";}
}
}
}
var start=vnum.Substring(0,vnum.IndexOf(","));
var end=vnum.Substring(start.Length+1,vnum.Length-(start.Length+1));
float result=0+(float.Parse(start)*(1-cval))+(float.Parse(end)*(cval));
var res=result.ToString();
if(res.Length>2 && res.Contains(".")){if(res.Substring(0,res.IndexOf(".")).Length>1){res=res.Substring(0,res.IndexOf("."));}else{res=res.Substring(0,3);}}

InputField aedit=null;
try{aedit=at.transform.Find("UIPlaceHolder/UIAtomUISlider(Clone)/Canvas/Panel/Content/Slider/InputField/").GetComponent<InputField>();}catch(Exception e){}

if(aedit!=null && aedit.isFocused){
atext.val=aedit.text;
aatext=atext.val;
}else{
var dyna=vprefix+res+vsuffix.Replace(" %","%")+aatext.Substring(aatext.IndexOf("\n"));
atext.val=dyna;
}
//atext.val=aatext.Replace(av[0]+"\n",vprefix+res+vsuffix.Replace(" %","%")+"\n");}

}	
}

//echo25(cmd+" >"+v+"<");
//echo9(i+": "+str);
}

}

//echo9(atext.val);
//echo9(cval.ToString());

}
}
//echo9("3");
if(afvalues.ContainsKey(at.name)){afvalues.Remove(at.name);}
afvalues.Add(at.name,cval);
//if(!manual){af.val=cval;}
}

}
}
}
}
yield return null;
}
}

private bool checkedb=false;
private IEnumerator assignmorphs(bool eternal=true){
while(eternal){
string p="";
foreach(Atom a in SuperController.singleton.GetAtoms()){if(a.type=="Person"){p+=a.name;}}
if(p!=personcount){
assigning=true;
allmorphs = new Dictionary<string,DAZMorph>();
foreach(Atom a in SuperController.singleton.GetAtoms()){
if(a.type=="Person"){
echo14("mapping morphs on "+a.name);
DAZCharacterSelector _chr = a.GetComponentInChildren<DAZCharacterSelector>(true);
foreach(DAZMorph sm in _chr.femaleMorphBank1.morphs.Concat(_chr.maleMorphBank1.morphs).Concat(_chr.femaleMorphBank2.morphs.Concat(_chr.maleMorphBank2.morphs))){
//echo9("["+a.name+"]"+"["+sm.uid+"]"+sm.morphName+sm.morphBank);
//allmorphs.Add("["+a.name+"]"+"["+sm.uid+"]"+sm.morphName+sm.morphBank,sm);
//if(sm.uid.Contains("Breast Large")){SuperController.LogMessage(sm.uid);}
if(!allmorphs.ContainsKey("["+a.name+"]"+"["+sm.uid+"]")){allmorphs.Add("["+a.name+"]"+"["+sm.uid+"]",sm);}
}
}
}
echo14("mapping morphs complete");
assigning=false;
}
personcount=p;
//echo14("morph assign-loop");
yield return new WaitForSecondsRealtime(1);
}
}

private string sceneatoms="";
private string paster="";private UnityEngine.UI.InputField editslide;
private bool editfocus=false;
private bool oldvr=false;
private bool checkvr=false;
private string copier="";
private string copier2="";
private bool assigning=false;private int ucount=0;
private string slideroldvals;
private int swidth=Screen.width;private bool init=false;private bool scenecheck=false;private string lastdir;private float ccol2; private float ccol3;private float ccol4;
private string oldmode="";private float loadtime=0;bool loadwait=false;private bool root=false;private bool hudchk=false;private bool cloned=false;private Transform clone;private string oldsel="";
private float cdist=99999;
private float udist=99999;
private float pdist=99999;
private float adist=99999;
private Atom closest=null;
private Atom closestperson=null;
private Atom closestui=null;
private Atom closestatom=null;
private string txtclosest="";
private string txtclosestperson="";
private string txtclosestui="";
private string txtclosestatom="";
private UnityEngine.UI.Text rselectvr=SuperController.singleton.rightSelectionHUDTransform.Find("LookAt/Canvas/Panel/Selection1Text").GetComponent<Text>();
private UnityEngine.UI.Text rselect=SuperController.singleton.rightSelectionHUDTransform.Find("LookAt/Canvas/Panel/Selection1Text").GetComponent<Text>();
private UnityEngine.UI.Text rselect2d=SuperController.singleton.MonitorModeAuxUI.Find("LayoutGroup/HighlightTextGroup/HighlightText2").GetComponent<Text>();

private bool freezechk=false;
private bool pausechk=false;
private bool echeck;
private bool vr;
private bool setmenu=false;
private string rselecttext="";
private bool firstopen=false;
private Transform rpanel=SuperController.singleton.rightSelectionHUDTransform.Find("LookAt/Canvas/Panel/").GetComponentInChildren<Transform>(true);
	
private IEnumerator helpintro() {

			yield return new WaitForSecondsRealtime(2);
			var helpintrot=newbutton(lowHUD.transform,() => {
			},"<< CLICK HERE FOR HELP",340,73.7f, 836,-422.5f);
			helpintrot.buttonText.fontSize=30;
			helpintrot.buttonColor=new Color(0.1f,0.13f,0);
			helpintrot.textColor=new Color(0.6f,0.3f,0.1f,0);
			
			Vector2 hpos=helpintrot.transform.localPosition;
			for(float i=0;i<50;i+=1){
			
			helpintrot.transform.localPosition=new Vector2(hpos.x-i,hpos.y);
			helpintrot.buttonColor=new Color(0.1f,0.13f,0.15f,0.01f*i);
			helpintrot.textColor=new Color(0.6f,0.3f,0.1f,0.02f*i);
			yield return null;			
			}
			yield return new WaitForSecondsRealtime(3);
			
			for(float i=0;i<50;i+=1){
			helpintrot.transform.localPosition=new Vector2(hpos.x-(50-i),hpos.y);
			helpintrot.buttonColor=new Color(0.1f,0.13f,0.15f,0.01f*(49-i));
			helpintrot.textColor=new Color(0.6f,0.3f,0.1f,0.02f*(49-i));
			yield return null;			
			}
			
			GameObject.Destroy(helpintrot.gameObject);
			
}

private IEnumerator updater(bool looper=true) {int uc=0;bool us=true;float rt=0;
			while(looper){float s=1;uc++;if(uc>90){uc=1;}us=!us;

								try{	

						
				if(!SuperController.singleton.pauseAutoSimulation){
				if(!pausechk){pausechk=true;
				pausebutton.label="Pause";
				pausebutton.textColor=new Color(1,1,1,1);
				pausebutton.buttonColor = new Color(0.41f, 0.44f, 0.51f);}
				}else{pausechk=false;
				pausebutton.buttonColor = new Color(0.81f, 0.44f, 0.21f);
				pausebutton.label="Unpause";
				float ccc=1-20/(90-float.Parse(uc.ToString()));s=0.01f;
				pausebutton.textColor=new Color(1,1,1,ccc);
				}
				
				
				if(!freeze.isOn){
				if(!freezechk){freezechk=true;
				freezebutton.label="Freeze";
				freezebutton.textColor=new Color(1,1,1,1);
				freezebutton.buttonColor = new Color(0.51f, 0.54f, 0.61f);}
				}else{freezechk=false;
				freezebutton.buttonColor = new Color(0.91f, 0.54f, 0.31f);
				freezebutton.label="Unfreeze";
				float ccc=1-20/float.Parse(uc.ToString());s=0.01f;
				freezebutton.textColor=new Color(1,1,1,ccc);
				}
		
				
				
		
			
				
				if(edit!=null){
				if(echeck!=edit.isOn){
				
				if(!edit.isOn){
				if(sceneplugin){var mexist=listplugins("morphine","session");
				if(mexist==""){installbutton.gameObject.SetActive(true);}}
				editbutton.buttonColor = new Color(0.21f, 0.84f, 0.31f);
				editbutton.label="Goto Edit mode (E)";
				}else{
				installbutton.gameObject.SetActive(false);	
				editbutton.buttonColor = new Color(0.91f, 0.54f, 0.31f);
				editbutton.label="Goto Play mode (P)";
				}
				setmenu=true;
				}
				}
				echeck=edit.isOn;
				
				
				if(Time.realtimeSinceStartup-rt>1){
				

string[] ts=(System.DateTime.Now.ToString("H:m:s")).Split(":"[0]);
dday=System.DateTime.Now.ToString("dddd");
ttime=System.DateTime.Now.ToString("HH:mm:ss");
hhour=ts[0];
ssecond=ts[2];
mminute=ts[1];
int hh=int.Parse(hhour);var td="";
if(hh<5){td="night";}
else if(hh<10){td="morning";}
else if(hh<18){td="day";}
else{td="evening";}
timeofday=td;

			cdist=adist=pdist=udist=99999;
			foreach(Atom aid in SuperController.singleton.GetAtoms()){
			var disable=aid.name.Substring(0,1);
			if(disable!="!" && !aid.name.contains("magnet") && aid.name!="[CameraRig]" && aid.type!="WindowCamera" && aid.type!="CoreControl" && aid.type!="PlayerNavigationPanel"){
			int rigid=0;if(aid.type=="Person"){rigid=406;}

			float dist = Vector3.Distance(aid.rigidbodies[rigid].transform.position, SuperController.singleton.lookCamera.transform.position);

			if(dist<cdist){cdist=dist;closest=aid;txtclosest=aid.name;}
			if(	aid.type=="Person"){
			
			if(dist<pdist){pdist=dist;closestperson=aid;txtclosestperson=aid.name;}
			}	
			else{
			if(aid.type.Contains("UI")){
			if(dist<udist){udist=dist;closestui=aid;txtclosestui=aid.name;}	
			}else{
			if(dist<adist){adist=dist;closestatom=aid;txtclosestatom=aid.name;}	
			}
			}
			
			}
			}

var atomclose="";
if(closest!=null){atomclose=" - closest: "+closest.name;}
var cr="";
if(_creator!="" && _creator!="Anonymous"){cr="<color=#ffffff>"+_creator+"</color> - ";}
infobutton.label=cr+SuperController.singleton.versionText.text.Replace("Version","VAM")+" - MORPHINE V"+version+" - "+dday+" "+ttime.Substring(0,ttime.LastIndexOf(":"))+" - "+(getfps.text+".").Substring(0,(getfps.text+".").IndexOf("."))+atomclose;
		var atemp="";
		foreach(string p in SuperController.singleton.GetAtomUIDs()){atemp+=p;}
		sceneatoms=atemp;
		
if(SuperController.singleton.GetSelectedController() != null){
Atom at=SuperController.singleton.GetSelectedController().containingAtom;
			
			
if(at.name.Contains("@") && at.type=="UISlider"){
editslide=null;
Vector3 caret=new Vector3(0,0,0);
Transform caretr=null;

try{

editslide=at.transform.Find("UIPlaceHolder/UIAtomUISlider(Clone)/Canvas/Panel/Content/Slider/InputField/").GetComponent<InputField>();
caretr=at.transform.Find("UIPlaceHolder/UIAtomUISlider(Clone)/Canvas/Panel/Content/Slider/InputField/InputField Input Caret").GetComponent<RectTransform>().transform;
caret=at.transform.Find("UIPlaceHolder/UIAtomUISlider(Clone)/Canvas/Panel/Content/Slider/InputField/InputField Input Caret").GetComponent<RectTransform>().transform.localPosition-editslide.transform.parent.parent.localPosition;
//echo9("found");

if(editslide.textComponent.fontSize!=26){
editslide.textComponent.fontSize=26;
editslide.textComponent.color=Color.white;
editslide.transform.GetComponent<Image>().color=skinmenucolor;
editslide.transform.parent.GetComponent<Image>().color=skinmenucolor;
}

}catch(Exception e){

}
}
}

	var tcr=_creator.Replace("Anonymous","");
	string[] tmpnames=(("babe,"+tcr+",handsome,"+tcr+",baby,"+tcr+",darlin,"+tcr+",sweetie").Replace(",,",",")).Split(","[0]);
	_player=tmpnames[UnityEngine.Random.Range(0,tmpnames.Length)];
	_safecreator=_creator.Replace("Anonymous",_player);
		//textfind(SuperController.singleton.rightSelectionHUDTransform,"tree:control",getroot:false);
	//echo20(SuperController.singleton.rightSelectionHUDTransform.Find("LookAt/Canvas/Panel/Selection1Text").GetComponent<Text>().text);

	 
	 ////2.5D MODE! / VR PRIVACY
	 //SuperController.singleton.MonitorUI.gameObject.SetActive(false);
	//SuperController.singleton.MonitorRig.gameObject.SetActive(false);
	// SuperController.singleton.MonitorModeAuxUI.gameObject.SetActive(true);
/*
	SuperController.singleton.lookCamera.transform.eulerAngles=new Vector3(0,0,0);
	SuperController.singleton.lookCamera.transform.localEulerAngles=new Vector3(0,0,0);
	SuperController.singleton.MonitorCenterCamera.transform.eulerAngles=new Vector3(0,0,0);
	SuperController.singleton.MonitorCenterCamera.transform.localEulerAngles=new Vector3(0,0,0);
	SuperController.singleton.OVRCenterCamera.transform.localEulerAngles=new Vector3(0,0,0);
	SuperController.singleton.OVRCenterCamera.transform.eulerAngles=new Vector3(0,0,0);
	SuperController.singleton.MonitorRig.transform.eulerAngles=new Vector3(0,0,0);
	SuperController.singleton.MonitorRig.transform.localEulerAngles=new Vector3(0,0,0);
	SuperController.singleton.MonitorUI.transform.eulerAngles=new Vector3(0,0,0);
	SuperController.singleton.MonitorUI.transform.localEulerAngles=new Vector3(0,0,0);
	SuperController.singleton.mainHUD.LookAt(SuperController.singleton.lookCamera.transform);
	SuperController.singleton.MonitorUIAnchor.eulerAngles=new Vector3(0,0,0);
*/		
		
				if(cuainput.isFocused && cuafilter!=cuainput.text){
				cuafilter=cuainput.text;
				initcua=true;
				StartCoroutine(listcuas(cuafilter));
				saveini();
				}
				//echo9("checking playmode");
				
				if(!vr){
				if(SuperController.singleton.topWorldUI.gameObject.active){
				fovtext.UItext.color=Color.gray;
				}else{
				fovtext.UItext.color=Color.white;
				}
				
				if(SuperController.singleton.MonitorUI.gameObject.active){
				SuperController.singleton.monitorUIYOffset=0;
				}else{
				SuperController.singleton.monitorUIYOffset=-44;	
				}
				}	
				

				}
				
				if(vrhands.isOn){
				vrhand.color=new Color(0.924f,0.1f,0.712f,1f);
				}else{
					//vrhand.color=new Color(0.624f,0.071f,0.412f);
					vrhand.color=new Color(0.624f,0.071f,0.412f,0.1f);
					}
				
				
				}catch(Exception e){s=0.1f;}
				
				
					if(Time.realtimeSinceStartup-rt>1){
					rt=Time.realtimeSinceStartup;}
					yield return null;
					//yield return new WaitForSecondsRealtime(s);
			
			}
		}

private string lastactive="";
private string lastactiveui="";
private string camcol="normal";
private string texold;
private bool camactive=false;
private Text tex;
private Text tex2;
private Text tex3;
private bool camdir=false;
private bool camdirold=false;
private bool cambuttonmade=false;
		void FixedUpdate() {
			if(camactive && SuperController.singleton.mainHUD.gameObject.active){			
			SuperController.singleton.mainHUD.GetComponentInChildren<UITabSelector>(true).SetActiveTab(lastactive);
			SuperController.singleton.SetActiveUI(lastactiveui);
			camactive=false;
			echo26("done");
			}
			if(!shooting){
			if(SuperController.singleton.hiResScreenshotPreview.gameObject.active){
			
			
			if(SuperController.singleton.GetRightSelect() || SuperController.singleton.GetMouseSelect()){
			string camfile=((int)(DateTime.UtcNow - new DateTime(1970, 1, 1)).TotalSeconds).ToString();
			
			var cit="";
			if(FileManagerSecure.FileExists("Saves/screenshots/"+camfile+".png")){
			int ci=0;
			while(FileManagerSecure.FileExists("Saves/screenshots/"+camfile+(ci.ToString())+".png")){
			ci++;
			}
			cit=ci.ToString();
			}
			
			StartCoroutine(bigshot("Saves/screenshots/"+camfile+cit+".png"));}
		
		if(camdir!=camdirold){
		camleft.SetActive(camdir);
		camright.SetActive(camdir);
		camdirold=camdir;
		}
		
		if(!camfx){camfx=true;
		if(cam1file!="error"){
		URLAudioClipManager bobo=SuperController.singleton.GetAtomByUid("CoreControl").gameObject.GetComponentInChildren<URLAudioClipManager>(true);
		bobo.QueueClip(cam1file,"cam1");
		bobo.QueueClip(cam2file,"cam2");}	
		}
		if(!cambuttonmade){
		//StartCoroutine(imagefind(SuperController.singleton.hiResScreenshotPreview,0,70,time: 0.5f));

Slider sli=SuperController.singleton.hiResScreenshotPreview.transform.Find("ScreenShotCanvas/Panel/HiResScrFOV").GetComponentInChildren<Slider>(true);
tex=SuperController.singleton.hiResScreenshotPreview.transform.Find("ScreenShotCanvas/Panel/HiResScrFOV/Text").GetComponentInChildren<Text>(true);
tex2=SuperController.singleton.hiResScreenshotPreview.transform.Find("ScreenShotCanvas/Panel/").GetComponentInChildren<Text>(true);
tex3=SuperController.singleton.hiResScreenshotPreview.transform.Find("ScreenShotCanvas/Panel/HiResScrFOV/Value Text").GetComponentInChildren<Text>(true);
tex.text="FOV: "+tex3.text;	
tex2.text="Take photo: SELECT   -   Cancel: ESC/REMOTE GRAB/TRIGGER";
tex2.fontSize=18;	
tex.fontSize=20;	
tex.color=Color.white;
tex3.alignment = TextAnchor.MiddleRight;
tex3.gameObject.SetActive(true);
tex3.color=Color.clear;
tex2.color=skinmenucolorlight;

tex2.transform.localPosition=new Vector2(0,456);
tex3.transform.localPosition=new Vector2(200,-50);
//transui2(sli.transform,388,58,40,0);
scaler(sli.GetComponent<Transform>(),509,34);
sli.transform.localPosition=new Vector2(-21f,-410);

sli.GetComponent<Image>().color = skinmenucolorlight;
sli.handleRect.transform.GetComponent<Image>().color=Color.clear;
sli.fillRect.transform.GetComponent<Image>().color=hudslidecolorlight;
	
Image sliback =SuperController.singleton.hiResScreenshotPreview.transform.Find("ScreenShotCanvas/Panel/HiResScrFOV").transform.GetComponentInChildren<Image>(true);
		sliback.color=Color.clear;
		scaler(sliback.transform,300,200);
		//sliback.transform
		//sliback
		//sliback.gameObject.SetActive(true);
		//sliback.transform
		
		SuperController.singleton.hiResScreenshotPreview.transform.Find("ScreenShotCanvas/Panel/HiResScrFOV").transform.GetComponentInChildren<Button>(true).gameObject.SetActive(true);
		Transform btn=SuperController.singleton.hiResScreenshotPreview.transform.Find("ScreenShotCanvas/Panel/HiResScrFOV").transform.GetComponentInChildren<Button>(true).transform;
		scaler(btn,45,34);
		btn.GetComponentInChildren<Text>(true).text="1:1";
		btn.GetComponentInChildren<Text>(true).fontSize=21;
		btn.GetComponentInChildren<Text>(true).color=Color.white;
		btn.GetComponent<Image>().color=modelcolor;
		btn.transform.localPosition=new Vector2(254,-410);
		camleft=createbox(SuperController.singleton.hiResScreenshotPreview.transform.Find("ScreenShotCanvas/Panel"),w:182.5f, h:300,x:-176f, y:250,cc:skinmenucolortrans);
		camright=createbox(SuperController.singleton.hiResScreenshotPreview.transform.Find("ScreenShotCanvas/Panel"),w:182.5f, h:300,x:176f, y:250,cc:skinmenucolortrans);
		
				var cdirtext="Landscape";
				if(camdir){cdirtext="Portrait";}
				camleft.SetActive(camdir);
				camright.SetActive(camdir);
				

			
				camresbutton=newbutton(SuperController.singleton.hiResScreenshotPreview.transform.Find("ScreenShotCanvas"),() => {
				if(photomode=="normal"){photomode="2K";}
				else if(photomode=="2K"){photomode="4K";}				
				else if(photomode=="4K"){photomode="8K";}
				else if(photomode=="8K"){photomode="12K";}
				else if(photomode=="12K"){photomode="16K";}
				else if(photomode=="16K"){photomode="normal";}
				camresbutton.label="Resolution: "+photomode;
				},"Resolution: "+photomode,-330,34,175,-41);
				camresbutton.buttonText.fontSize=16;
				camresbutton.buttonColor=skinmenucolor;
				camresbutton.textColor=Color.white;
				
				camdirbutton=newbutton(SuperController.singleton.hiResScreenshotPreview.transform.Find("ScreenShotCanvas"),() => {
				var cdirtext2="Portrait";
				if(camdir){camdir=false;cdirtext2="Landscape";}else{camdir=true;}
				camdirbutton.label="Rotation: "+cdirtext2;
				},"Rotation: "+cdirtext,-310,34,336,-41);
				camdirbutton.buttonText.fontSize=16;
				camdirbutton.buttonColor=skinmenucolor;
				camdirbutton.textColor=Color.white;				
				
				camcolbutton=newbutton(SuperController.singleton.hiResScreenshotPreview.transform.Find("ScreenShotCanvas"),() => {
				if(camcol=="normal"){camcol="greenscreen";}
				else if(camcol=="greenscreen"){camcol="transparent";}
				else if(camcol=="transparent"){camcol="normal";}
				camcolbutton.label="Background: "+camcol;	
				Color camcolval=new Color();
				if(camcol=="normal"){camcolval=camclr;}
				else if(camcol=="greenscreen"){camcolval=Color.green;}
				else if(camcol=="transparent"){camcolval=Color.clear;}
				SuperController.singleton.hiResScreenshotCamera.clearFlags=CameraClearFlags.Color;
				SuperController.singleton.hiResScreenshotCamera.backgroundColor=camcolval;
				if(Mcamera!=null){Mcamera.clearFlags=CameraClearFlags.Color;
				Mcamera.backgroundColor=camcolval;}
				},"Background: "+camcol,-290,34,-26,-41);
				camcolbutton.buttonText.fontSize=16;
				camcolbutton.buttonColor=skinmenucolor;
				camcolbutton.textColor=Color.white;				
				
				cambuttonmade=true;
		}

if(tex3.text!=texold){
Image slihandle=SuperController.singleton.hiResScreenshotPreview.transform.Find("ScreenShotCanvas/Panel/HiResScrFOV").GetComponentInChildren<Slider>(true).handleRect.transform.GetComponent<Image>();
if(tex3.text!=""){
tex.text="FOV: "+tex3.text;
int chkt=int.Parse(tex3.text);
if(chkt>32){
tex.transform.localPosition=new Vector2(slihandle.transform.localPosition.x+84,-410);
}else{tex.transform.localPosition=new Vector2(slihandle.transform.localPosition.x+180,-410);}
texold=tex3.text;
}
}
}
}
			
			/*
			foreach(AudioListener au in SuperController.singleton.transform.GetComponentsInChildren<AudioListener>(true)){
			//echo24(au.ToString());
			//AudioListener uu=au;
			//echo24(uu.volume.ToString());
			}
			//SuperController.singleton.MonitorCenterCamera.AudioListener.volume=0;
			//UnityEngine.SoundEmitter.volume=0;
			*/
			
			
			if(prvalues!=SuperController.singleton.leftHand.position.ToString()+SuperController.singleton.rightHand.position.ToString()){
			prchk=Time.realtimeSinceStartup;	
			}
			prvalues=SuperController.singleton.leftHand.position.ToString()+SuperController.singleton.rightHand.position.ToString();
			
			if(sceneatoms.Contains("magnet")){
			foreach(string aid in SuperController.singleton.GetAtomUIDs()){
			
			var chk=aid.ToLower();
			if(chk.Contains("magnet")){
				
			if(chk.Contains("hud")){
			SuperController.singleton.GetAtomByUid(aid).mainController.transform.position=SuperController.singleton.mainHUDAttachPoint.position;
			SuperController.singleton.GetAtomByUid(aid).mainController.transform.eulerAngles=SuperController.singleton.mainHUDAttachPoint.eulerAngles;
			}

			if(chk.Contains("!menu")){
			SuperController.singleton.GetAtomByUid(aid).mainController.transform.position=SuperController.singleton.mainHUDAttachPoint.position;
			SuperController.singleton.GetAtomByUid(aid).mainController.transform.eulerAngles=SuperController.singleton.mainHUDAttachPoint.eulerAngles;
			SuperController.singleton.GetAtomByUid(aid).SetOn(!SuperController.singleton.mainHUD.gameObject.active);
			}

			else if(chk.Contains("menu")){
			SuperController.singleton.GetAtomByUid(aid).mainController.transform.position=SuperController.singleton.mainHUD.position;
			SuperController.singleton.GetAtomByUid(aid).mainController.transform.eulerAngles=SuperController.singleton.mainHUD.eulerAngles;
			SuperController.singleton.GetAtomByUid(aid).SetOn(SuperController.singleton.mainHUD.gameObject.active);
			}				
			
			if(vr){
			if(chk.Contains("left")){
			if(chk.Contains("wrist")){
			SuperController.singleton.GetAtomByUid(aid).mainController.transform.position=new Vector3(SuperController.singleton.leftHand.position.x,SuperController.singleton.leftHand.position.y+0.2f,SuperController.singleton.leftHand.position.z);
			}else{
			SuperController.singleton.GetAtomByUid(aid).mainController.transform.position=SuperController.singleton.leftHand.position;}
			if(!chk.Contains("-left")){SuperController.singleton.GetAtomByUid(aid).mainController.transform.eulerAngles=SuperController.singleton.leftHand.eulerAngles;}
			}
			
			else if(chk.Contains("right")){
			if(chk.Contains("wrist")){
			SuperController.singleton.GetAtomByUid(aid).mainController.transform.position=new Vector3(SuperController.singleton.rightHand.position.x,SuperController.singleton.rightHand.position.y+0.2f,SuperController.singleton.rightHand.position.z);
			}else{				
			SuperController.singleton.GetAtomByUid(aid).mainController.transform.position=SuperController.singleton.rightHand.position;}
			if(!chk.Contains("-right")){SuperController.singleton.GetAtomByUid(aid).mainController.transform.eulerAngles=SuperController.singleton.rightHand.eulerAngles;}
			}
			
			else if(chk.Contains("head")){
			SuperController.singleton.GetAtomByUid(aid).mainController.transform.position=SuperController.singleton.lookCamera.transform.position;
			SuperController.singleton.GetAtomByUid(aid).mainController.transform.eulerAngles=SuperController.singleton.lookCamera.transform.eulerAngles;
			}	
			}else{
				
			bool magnetize=false;float shift=0.3f;float zshift=1.4f;
			if(chk.Contains("left")){
			magnetize=true;
			}
			
			else if(chk.Contains("right")){
			shift=0-shift;magnetize=true;
			}
			
			else if(chk.Contains("head")){
			shift=0f;magnetize=true;zshift=0.4f;
			}		
			
			if(magnetize){
			Transform attch=SuperController.singleton.centerCameraTarget.transform;
			Vector3 magnetpos=attch.position;
			Vector3 magnetangle=attch.eulerAngles;
			//Vector3 magnetpos=attch.position;
			 SuperController.singleton.GetAtomByUid(aid).mainController.transform.SetParent(attch,false);
			SuperController.singleton.GetAtomByUid(aid).rigidbodies[0].transform.SetParent(attch,false);
		    SuperController.singleton.GetAtomByUid(aid).mainController.transform.localPosition=new Vector3(0-shift,0,zshift);
			//SuperController.singleton.GetAtomByUid(aid).mainController.transform.eulerAngles=magnetangle;
			//setanglet(SuperController.singleton.GetAtomByUid(aid).mainController.transform);	
			}
			}
				
			if(chk.Contains("look")){
			SuperController.singleton.GetAtomByUid(aid).mainController.transform.LookAt(SuperController.singleton.lookCamera.transform);
			}


			
			}
			}}
			
			
			//echo7(SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas").GetComponent<Canvas>().enabled.ToString());
			if(!ready){return;}
			
vr=realVR();
//debugger
//SuperController.singleton.alwaysEnablePointers=true;
//echo23(SuperController.singleton.sceneControlUI.gameObject.active.ToString());
//try{echo23(SuperController.singleton.worldUI.gameObject.active.ToString());}catch(Exception e){SuperController.LogMessage("bad");}
//try{echo23(SuperController.singleton.rayLineWidth.ToString());}catch(Exception e){SuperController.LogMessage("bad");}
//try{echo23(SuperController.singleton.mouseSelectionHUD.ToString());}catch(Exception e){SuperController.LogMessage("bad");}
//try{echo23(SuperController.singleton.GetTargetShow().ToString());}catch(Exception e){SuperController.LogMessage("bad");}
if(!checkvr){oldvr=!vr;checkvr=true;}
if(vr!=oldvr){
UserPreferences u=SuperController.singleton.GetAtomByUid("CoreControl").gameObject.GetComponent<UserPreferences>();

		
if(vr){
	vrkeys.localPosition=new Vector2(0,-0.2094f);
	//if(vrpointer==-999){vrpointer = u.steamVRPointerAngle;}
	u.steamVRPointerAngle=45;
	echo23("vr");
	speedslider.gameObject.SetActive(true);
	speedtext.gameObject.SetActive(true);
	qualityslider.gameObject.SetActive(true);
	qualitytext.gameObject.SetActive(true);	
	uisizeslider.gameObject.SetActive(false);
	fovslider.gameObject.SetActive(false);
	uisizetext.gameObject.SetActive(false);
	fovtext.gameObject.SetActive(false);
	morphinebutton.transform.localEulerAngles=new Vector3(29.5f,180,0);
	morphinebutton.transform.localPosition=new Vector3(0.32f,-0.191f,0.1085f);
 
}else{
	speedslider.gameObject.SetActive(false);
	speedtext.gameObject.SetActive(false);
	qualityslider.gameObject.SetActive(false);
	qualitytext.gameObject.SetActive(false);	
	vrkeys.localPosition=new Vector2(0,-0.25f);
	//if(vrpointer==-999){vrpointer = u.steamVRPointerAngle;}
	if(!screenmode().Contains("VR")){u.steamVRPointerAngle=-90;}else{u.steamVRPointerAngle=45;}
	//SteamVR_Settings.pauseGameWhenDashboardVisible=false;
	//SuperController.singleton.MonitorRig.gameObject.SetActive(false);SuperController.singleton.MonitorUI.gameObject.SetActive(false);
		echo23("desktop");
	uisizeslider.gameObject.SetActive(true);
	fovslider.gameObject.SetActive(true);
	uisizetext.gameObject.SetActive(true);
	fovtext.gameObject.SetActive(true);
	morphinebutton.transform.localEulerAngles=new Vector3(0,180,0);
	morphinebutton.transform.localPosition=new Vector3(0.320f,-0.2195f,0f);
}
}
oldvr=vr;
			
				
			if(closest!=null){int rigid=0;if(closest.type=="Person"){rigid=406;}
			float dist = Vector3.Distance(closest.rigidbodies[rigid].transform.position, SuperController.singleton.lookCamera.transform.position);
			cdist=dist;
			}
			
			if(closestperson!=null){
			float dist = Vector3.Distance(closestperson.rigidbodies[406].transform.position, SuperController.singleton.lookCamera.transform.position);
			pdist=dist;
			}
			
			if(closestui!=null){
			float dist = Vector3.Distance(closestui.rigidbodies[0].transform.position, SuperController.singleton.lookCamera.transform.position);
			udist=dist;
			}
			
			if(closestatom!=null){
			float dist = Vector3.Distance(closestatom.rigidbodies[0].transform.position, SuperController.singleton.lookCamera.transform.position);
			adist=dist;
			}
			
			if(editslide!=null){
			if(editslide.isFocused && !editfocus){editfocus=true;
			echo14("edit got focus");
			slidebutton.transform.gameObject.SetActive(editslide.isFocused);
			pslidebutton.transform.gameObject.SetActive(editslide.isFocused);
			}
			else if(!editslide.isFocused && editfocus){editfocus=false;
			echo14("edit lost focus");
								showbox="";
					gboxon=false;
					pboxon=false;
						if(!fading){
							StartCoroutine(removegbox(change));
							StartCoroutine(removepbox(change));
							}
			slidehits = new Dictionary<string,int>();
			slideon = new Dictionary<string,bool>();
			slidevals = new Dictionary<string,string>();
			slidebutton.transform.gameObject.SetActive(editslide.isFocused);
			pslidebutton.transform.gameObject.SetActive(editslide.isFocused);
			}
			}
		    else{
			slidebutton.transform.gameObject.SetActive(false);
			pslidebutton.transform.gameObject.SetActive(false);
			}
			
			//echo7(SuperController.singleton.worldScaleTransform.gameObject.active.ToString());
			if(rightUIContent==null){return;}
			
			
			
			if(SuperController.singleton.loadingUI.gameObject.active || SuperController.singleton.loadingIcon.gameObject.active || SuperController.singleton.isLoading){
				scenecheck=false;loadwait=true;loadtime=Time.time;return;}
			
			try {

bool hudopen=false;bool rootopen=SuperController.singleton.mainHUD.gameObject.active;bool soptions=false;
if(rootopen){
if(!firstopen){
	//echo25("first root-hud open");
	StartCoroutine(renderscaler());
	StartCoroutine(helpintro());
firstopen=true;}
if(optionschk!=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Panel/ClickForMoreOptions/OtherOptionsPopup").gameObject.active){
morphinebutton.enabled=optionschk;	
}	
	
optionschk=SuperController.singleton.mainHUD.Find("LowerHUDPivot/LowerHUDFlip/Scene Control Canvas/Panel/ClickForMoreOptions/OtherOptionsPopup").gameObject.active;

if(SuperController.singleton.GetSelectedController() != null){
if(!SuperController.singleton.GetSelectedController().guihidden){change=false;
	if(oldsel!=SuperController.singleton.GetSelectedController().containingAtom.name+SuperController.singleton.GetSelectedController().name){
		if(SuperController.singleton.activeUI.ToString()=="SelectedOptions"){
		
		echo5(SuperController.singleton.GetSelectedController().containingAtom.type);
		echo5(SuperController.singleton.GetSelectedController().transform.ToString());
		Transform t=SuperController.singleton.GetSelectedController().containingAtom.transform;
		foreach(UIDynamicButton com in t.GetComponentsInChildren<UIDynamicButton>()){
			if(com.name=="DynamicButton(Clone)"){
			echo5(com.name+" x "+com.transform.localPosition.x.ToString()+" < y "+com.transform.localPosition.y.ToString());
			com.GetComponent<Image>().color=Color.white;
			isobutton=new Vector2(com.transform.localPosition.x,com.transform.localPosition.y);
			scaler(com.transform,300,56);
			com.transform.localPosition=new Vector2(-398,1349);
			com.transform.localPosition=new Vector2(-398,1349);
			com2=com.transform;setagain=true;
			}
		}
		
		}
	}else{if(setagain){
		setagain=false;
		scaler(com2,300,56);
		com2.localPosition=new Vector2(-398,1349);
		com2.localPosition=new Vector2(-398,1349);}
	}
	oldsel=SuperController.singleton.GetSelectedController().containingAtom.name+SuperController.singleton.GetSelectedController().name;
	soptions=true;
	hudopen=true;}
}

if(SuperController.singleton.mainHUD.Find("MainUICanvas/Panel/BackPanel").gameObject.active){hudopen=true;soptions=false;}
else if(!SuperController.singleton.mainHUD.Find("MainUICanvas/Panel/BackPanel").gameObject.active && SuperController.singleton.gameMode!=SuperController.GameMode.Edit){hudopen=false;soptions=false;}
else if(SuperController.singleton.activeUI.ToString()=="Custom"){hudopen=true;soptions=false;}
else if(SuperController.singleton.activeUI.ToString()=="OnlineBrowser"){hudopen=true;soptions=false;}

}


if(setmenu || root!=rootopen || hudchk!=hudopen || swidth!=Screen.width || fov!=SuperController.singleton.MonitorCenterCamera.fieldOfView){
setmenu=false;
//Transform schud=SuperController.singleton.mainHUD.Find("MainUICanvas/Panel/BackPanel");
//schud.localPosition=new Vector2(schud.localPosition.x,schud.localPosition.y+2);
echo5("hud is "+hudopen+" - root is "+rootopen);
echo5(SuperController.singleton.activeUI.ToString());

if(hudopen){
	scaler(hudfiller.transform,1321,34);
	hudfiller.transform.localPosition=new Vector2(0,17);
	//if(SuperController.singleton.activeUI.ToString()=="SelectedOptions"){StartCoroutine(imagefind(_person.gameObject.transform,110,188));}
	//SceneAtoms/X-wife/UI/UIPlaceHolderModel/UIModel/Canvas/DynamicButton(Clone)/
	//dynText.text = fcv3.containingAtom.name + ":" + fcv3.name;
	
	chat.transform.localPosition=new Vector2(chatpos.x,chatpos.y+0.847f);
	if(vr){ 
	
	if(chat.enabled){
	web.transform.localPosition=chat.transform.localPosition;
	url.transform.localPosition=chat.transform.localPosition;
	}
	else{
	float adj=0.163f;
	web.transform.localPosition=new Vector3(chat.transform.localPosition.x,chat.transform.localPosition.y-adj+0.0119f,chat.transform.localPosition.z-0.087f);
	url.transform.localPosition=new Vector3(chat.transform.localPosition.x,chat.transform.localPosition.y-adj+0.0119f,chat.transform.localPosition.z-0.087f);
	}
	
		web.transform.localEulerAngles=new Vector3(-29.5f,180,0);
		chat.transform.localEulerAngles=new Vector3(-29.5f,180,0);
		url.transform.localEulerAngles=new Vector3(-29.5f,180,0);
		webwindow.transform.localPosition=new Vector2(0,932);
		webpanel.transform.localPosition=new Vector2(0,466);
		urlfiller.transform.localPosition=new Vector2(webwindow.transform.localPosition.x-151,webwindow.transform.localPosition.y-541);
		urlb.transform.localPosition=new Vector2(urlfiller.transform.localPosition.x+482,urlfiller.transform.localPosition.y);
		urlbackb.transform.localPosition=new Vector2(urlfiller.transform.localPosition.x+575,urlfiller.transform.localPosition.y);
		urlforwardb.transform.localPosition=new Vector2(urlfiller.transform.localPosition.x+647,urlfiller.transform.localPosition.y);
		linksb.transform.localPosition=new Vector2(urlfiller.transform.localPosition.x+763,urlfiller.transform.localPosition.y);
		urlinput.transform.localPosition=new Vector2(urlfiller.transform.localPosition.x-22,urlfiller.transform.localPosition.y);
		
		
		}else{
	web.transform.localEulerAngles=new Vector3(0f,180,0);
	chat.transform.localEulerAngles=new Vector3(0f,180,0);
	url.transform.localEulerAngles=new Vector3(0f,180,0);
		//web.transform.SetParent(SuperController.singleton.mainHUD.transform.parent.parent,true);
	web.transform.localPosition=new Vector2(chat.transform.localPosition.x,chat.transform.localPosition.y);
	//web.transform.localPosition=new Vector2(3+chat.transform.localPosition.x-webwindow.transform.GetComponent<RectTransform>().sizeDelta.x/1000,(Screen.height/1000)-1);
	//web.transform.localPosition=new Vector2(chatpos.x,chatpos.y+0.847f);
	//scaler(webwindow.transform,1200+Screen.width,900);
	//float fovadj=2-(1-(100/SuperController.singleton.MonitorCenterCamera.fieldOfView)/30);
	//float fovadjy=20/(20+((SuperController.singleton.MonitorCenterCamera.fieldOfView-20)/10));
	//float fovadjx=20/SuperController.singleton.MonitorCenterCamera.fieldOfView;	
	//float fovadj=(40-SuperController.singleton.MonitorCenterCamera.fieldOfView);
	//SuperController.singleton.monitorUIScaleSlider.value=0.87f+(((SuperController.singleton.MonitorCenterCamera.fieldOfView)*0.45f)/100);
	float fovadj=0;
	//echo7("FOV "+fovadj);

	webwindow.transform.localPosition=new Vector2(-(1860+(fovadj*6))+Screen.width*2.4f,-(2750+(fovadj*4))+Screen.height*2.4f);
	url.transform.localPosition=new Vector2(0-web.transform.localPosition.x,0.847f);
	webpanel.transform.localPosition=new Vector2(webwindow.transform.localPosition.x/2,webwindow.transform.localPosition.y/2);
	urlfiller.transform.localPosition=new Vector2(webwindow.transform.localPosition.x-151,webwindow.transform.localPosition.y-541);
	
		urlb.transform.localPosition=new Vector2(urlfiller.transform.localPosition.x+482,urlfiller.transform.localPosition.y);
		urlbackb.transform.localPosition=new Vector2(urlfiller.transform.localPosition.x+575,urlfiller.transform.localPosition.y);
		urlforwardb.transform.localPosition=new Vector2(urlfiller.transform.localPosition.x+647,urlfiller.transform.localPosition.y);
		linksb.transform.localPosition=new Vector2(urlfiller.transform.localPosition.x+763,urlfiller.transform.localPosition.y);
		urlinput.transform.localPosition=new Vector2(urlfiller.transform.localPosition.x-22,urlfiller.transform.localPosition.y);
		
	//webpanel.transform.localPosition=new Vector2(-1000,-1000);

	//echo5(Screen.width.ToString());
	//echo5(chat.transform.position.ToString());
	echo5(url.transform.localPosition.ToString());
	}
}else{

	scaler(hudfiller.transform,1382,34);
	hudfiller.transform.localPosition=new Vector2(0,17);
	web.transform.localEulerAngles=new Vector3(0f,180,0);
	chat.transform.localEulerAngles=new Vector3(0f,180,0);
	url.transform.localEulerAngles=new Vector3(0f,180,0);
	chat.transform.localPosition=new Vector2(chatpos.x,chatpos.y);
	
	if(chat.enabled){
	web.transform.localPosition=chat.transform.localPosition;
	url.transform.localPosition=chat.transform.localPosition;
	}
	else{
	float adj=0.163f;
	web.transform.localPosition=new Vector2(chat.transform.localPosition.x,chat.transform.localPosition.y-adj);
	url.transform.localPosition=new Vector2(chat.transform.localPosition.x,chat.transform.localPosition.y-adj);
	}
	webwindow.transform.localPosition=new Vector2(0,932);
	webpanel.transform.localPosition=new Vector2(0,webwindow.transform.localPosition.y/2);
	urlfiller.transform.localPosition=new Vector2(webwindow.transform.localPosition.x-151,webwindow.transform.localPosition.y-541);
		urlb.transform.localPosition=new Vector2(urlfiller.transform.localPosition.x+482,urlfiller.transform.localPosition.y);
		urlbackb.transform.localPosition=new Vector2(urlfiller.transform.localPosition.x+575,urlfiller.transform.localPosition.y);
		urlforwardb.transform.localPosition=new Vector2(urlfiller.transform.localPosition.x+647,urlfiller.transform.localPosition.y);
		linksb.transform.localPosition=new Vector2(urlfiller.transform.localPosition.x+763,urlfiller.transform.localPosition.y);
	    urlinput.transform.localPosition=new Vector2(urlfiller.transform.localPosition.x-22,urlfiller.transform.localPosition.y);
}
}
root=rootopen;hudchk=hudopen;
swidth=Screen.width;
fov=SuperController.singleton.MonitorCenterCamera.fieldOfView;

if(loadtime!=0){
if(Time.time-loadtime<5){
return;}

if(loadvar){loadvar=false;SuperController.singleton.SetActiveUI("MainMenu");}
//SuperController.singleton.onlineBrowserUI.transform.SetParent(lastparent, false);
checktime=loadtime;loadtime=0;loadwait=false;scenecheck=true;
}

if(scenecheck){
if(Time.time-checktime<15 && Time.time-checktime>3){

}else{if(Time.time-checktime>14){scenecheck=false;checktime=0;}}
}

float  col=_count/5;col=col/20;float negcol=2-col;float ccol=col;if(col>1){ccol=negcol;}


_ccount++;
_ccount2++;
if(_ccount==3){
_ccount=0;
_cccount++;
float  col2=_cccount/5;col2=col2/20;float negcol2=2-col2;ccol2=col2;if(col2>1){ccol2=negcol2;}
if(_cccount==200){_cccount=0;}
}

if(_ccount2==9){
_ccount2=0;
_cccount2++;
float  col2=_cccount2/5;col2=col2/20;float negcol2=2-col2;ccol3=col2;if(col2>1){ccol3=negcol2;}
if(_cccount2==200){_cccount2=0;}
}

if(_ccount3==5){
_ccount3=0;
_cccount3++;
float  col2=_cccount3/5;col2=col2/20;float negcol2=2-col2;ccol4=col2;if(col2>1){ccol4=negcol2;}
if(_cccount3==200){_cccount3=0;}
}
				_count++;
				/*
				UserPreferences u=SuperController.singleton.GetAtomByUid("CoreControl").gameObject.GetComponent<UserPreferences>();
				//echo24(u.steamVRRightHandPointer.gameObject.active.ToString());
				foreach(LineDrawer ld in SuperController.singleton.GetComponentsInChildren<LineDrawer>(true)){
				echo24(ld.ToString());
				}
				Transform ray=SuperController.singleton.transform.Find("/SceneAtoms/CoreControl/WorldScaleAdjust/RightRayLine/").transform;
				LineRenderer rayline=SuperController.singleton.transform.Find("/SceneAtoms/CoreControl/WorldScaleAdjust/RightRayLine/").GetComponent<LineRenderer>();
				foreach(Component cp in ray.GetComponentsInChildren<Component>(true)){
				//echo24(cp.ToString());
				}
				ray.gameObject.SetActive(true);
				rayline.gameObject.SetActive(true);
				rayline.material.SetColor("_Color", new Color(1f, 1f, 1f, 0.3f));
				
				//ray.GetComponentInChildren<LineRenderer>(true).GetComponentInChildren<Material>(true).color=Color.red;
				//echo24(SuperController.singleton.rayLineWidth.ToString());
				*/
				/*
				foreach(Component b in SuperController.singleton.GetComponentsInChildren<Component>(true)){
				if(b.ToString().contains("rightrayline")){
				getparent(b.transform,b.transform.name);
				//echo24(b.gameObject.active.ToString());
				}
				//echo24(SuperController.drawRayLineLeft.ToString());
				}
				*/
				//echo24(u.steamVRRightHandPointer.GetComponent<Image>().color.ToString());
				//echo9(_count.ToString());

				//var point=new MVRScript();
				
				if(_chatinput.isFocused == true && _chatinput.text.Length>1 && _chatinput.text.Substring(_chatinput.text.Length-1,1)=="\n"){
					
				if(_chatinput.text.Replace("\n","")==""){_chatinput.text="";}else{
				echo5("detected sendmessage");
				//sendb.SendMessage("OnClick");
				_chatinput.text=_chatinput.text.Substring(0,_chatinput.text.Length-1);
				Clientmessage(_chatinput.text,raw: false);
				
				//_chatinput.text="";
				//_chatinput.ActivateInputField();
				}
				}
			/*	
			if(SuperController.singleton.GetAtomByUid("coco")!=null){
				if(coco==null){
				coco=SuperController.singleton.GetAtomByUid("coco");}
				}
			*/
			





				


if(setusers!=0f){
if(addusers==0){
userwindow.text="";
userwindow.UItext.lineSpacing = 1.13f;
var w=userwindow.gameObject.transform.Find("Scroll View/Viewport/Content");
foreach(UIDynamicButton uib in w.transform.GetComponentsInChildren<UIDynamicButton>()){
//echo5("removed "+uib.name);
RemoveButton(uib);
}
}
if(Time.realtimeSinceStartup-setusers>2.5f && logindone){
if(addusers<addlist.Length){
	


		var aa="";	
		if(addlist[addusers]!=""){
		aa=addlist[addusers];
		Color tcolor=new Color(1f,1f,1f,1f);
	if(aa.Substring(aa.Length-1,1)=="+"){tcolor=new Color(0.3f,0.9f,0.4f);aa=aa.Substring(0,aa.Length-1);}
	if(aa.Substring(aa.Length-1,1)=="@"){tcolor=new Color(1f,0.6f,0.3f);aa=aa.Substring(0,aa.Length-1);}
	
var al=aa;
if(al.Length>17){al=al.Substring(0,15)+"..";}
var w=userwindow.gameObject.transform.Find("Scroll View/Viewport/Content");int ads=addusers;
	var b=newbutton(w.transform,() => {
		
		targetlist(msgtarget,aa,clicked:true);
		
	
	},"  "+al,14f,43,0f,-43-(43*addusers));
	b.buttonColor=new Color(1f,0.6f,0.2f,0.05f);
	b.textColor=tcolor;
	b.buttonText.alignment = TextAnchor.MiddleLeft;
		
		
		addusers++;}
		
		}else{

setusers=0f;
	
}

}
}

	
/*				
if(!cloned){
if(UITransform!=null){
	
	cloned=true;
	
	clone = Instantiate(UITransform);
	clone.SetParent(SuperController.singleton.mainHUD, false);
	clone.localPosition=new Vector2(clone.localPosition.x+5,clone.localPosition.y);
	clone.gameObject.SetActive(true);
	
	echo5("CLONED");
}
}
*/



//Readclients();
				
			
/*
Navigationrig = SuperController.singleton.navigationRig.transform;
Player = SuperController.singleton.centerCameraTarget.transform;
Playerheight = SuperController.singleton.centerCameraTarget.transform.parent.parent;
int ri=0;
foreach(Rigidbody rb in _person.rigidbodies){
	
	//echo3(ri.ToString()+" : "+rb.name);
	ri++;
}
echo3("Player local "+Player.localPosition.y.ToString()+" Playerheight local "+Playerheight.localPosition.y.ToString()+" Navigationrig local "+Navigationrig.localPosition.y.ToString()+" Person "+_person.rigidbodies[406].transform.position.y.ToString());
echo3("Player global "+Player.position.y.ToString()+" Playerheight global "+Playerheight.position.y.ToString()+" Navigationrig global "+Navigationrig.position.y.ToString()+" Person "+_person.rigidbodies[406].transform.position.y.ToString());
//echo3("Navigationrig x "+Navigationrig.position.x.ToString()+" Player x "+Player.position.x.ToString()+" Playerheight x "+Playerheight.position.x.ToString());
*/

				//bool isvr=UnityEngine.Camera.stereoEnabled;
				var ang=UITransform.eulerAngles.z-SuperController.singleton.helpHUDText.transform.eulerAngles.z;
//echo3(realVR().ToString());



//VR-privacy
//SuperController.singleton.MonitorRig.gameObject.SetActive(false);SuperController.singleton.MonitorUI.gameObject.SetActive(false);
if(UITransform.gameObject.active){
if(loaded && doupgrade){
doupgrade=false;
echo25("t13");
StartCoroutine(checkupdate(once:true));
}
if(streamover!=""){
if(et.Split(","[0]).Length==20 || Time.time-streamtime>2){
	if(et!=""){
var etmp=et;et="";
Clientmessage("/msg "+stream+" [m"+sendmorph[streamkey]+"["+etmp+"]m]",raw: false);}
streamtime=Time.time;
}
}
	
	var mode="";
	if (!SuperController.singleton.isOVR && !SuperController.singleton.isOpenVR){mode="desktop";}
	else if(SuperController.singleton.MonitorUI.gameObject.active){mode="desktop";}
	else if (XRSettings.enabled){mode="xr";}
	else{mode="vr";}
	//echo3(SuperController.singleton.MonitorRig.gameObject.active.ToString());
	//echo3(SuperController.singleton.isOpenVR.ToString());
	
	if(oldmode!=mode && oldmode!=""){echo3(oldmode+" > "+mode);}
	oldmode=mode;

if(lettergone!=0){

if(lettergone==1){
	for(int ss=0;ss<5;ss++){if(sub[ss]!=null){RemoveButton(sub[ss]);}}	
	for(int ss=0;ss<40;ss++){if(search[ss]!=null){RemoveButton(search[ss]);}}
	lettergone=0;}
	else{
if(Time.time-lettergone>0){
					for(int ss=0;ss<5;ss++){
					if(sub[ss]!=null){RemoveButton(sub[ss]);}						
					}
float alpha=1.0f-(Time.time-lettergone);
					Color b = new Color(0.43f, 0.43f, 0.5f);
					Color t = new Color(1f, 1, 1f);
					t.a=alpha;b.a=alpha;
					for(int ss=0;ss<40;ss++){
					if(search[ss]!=null){
						search[ss].buttonColor=b;
						search[ss].textColor=t;
						if(Time.time-lettergone>1){RemoveButton(search[ss]);}	
						}}
					if(Time.time-lettergone>1){lettergone=0f;}
	
	}}
}

if(setp!=9999){
setp++;echo3(pslider.slider.value.ToString());
if(setp==50 || setp==150){pslider.slider.value=setp-50;setp=9999;echo3(pslider.slider.value.ToString());}
}
if(!loaded){
if(intro.text != null){introtext.UItext.color = new Color(ccol, 0.2f, ccol);}
if(rightUIContent.transform != null){
if(loadcount==0){infopanel.enabled=true;}

loadcount++;


rightUIContent.parent.parent.parent.transform.GetComponent<Image>().color=uiscrollwindowcolor;//scroll-window
rightUIContent.parent.parent.parent.parent.parent.parent.transform.GetComponent<Image>().color=uiframecolor;//frame
rightUIContent.parent.parent.parent.parent.transform.GetComponent<Image>().color=uibackgroundcolor;//background

float d=0f;float rd=0;float ld=0;if(vr){ld=30;rd=20;d=-0.0004f*(1+(loadcount/100));}
transui2(introtext.transform,1210,1654,0,767,d);
if(loadcount == 50){

	transui2(leftUIContent.transform,width: 220+filler/2);
	leftUIContent.transform.localPosition = new Vector3(137.5f-filler/2,rightUIContent.transform.localPosition.y,ld);
	transui2(rightUIContent.transform,width: 570+filler);echo3("filling "+filler.ToString());
	rightUIContent.transform.localPosition = new Vector3(347.5f,rightUIContent.transform.localPosition.y,rd);
	//filler=0f;
/*
	echo3(rightUIContent.transform.parent.parent.parent.transform.lossyScale.x.ToString());
	echo3(rightUIContent.transform.parent.parent.parent.transform.localPosition.x.ToString());
	echo3(rightUIContent.transform.parent.parent.parent.transform.name.ToString());
	
*/

}
if(loadcount>150){uigroup.alpha=1;infopanelgroup.alpha -= 0.01f;
modelsgroup.alpha = advgroup.alpha = 1-infopanelgroup.alpha;
if(loadcount==350){//StartCoroutine(imagefind(SuperController.singleton.mainHUD.parent,0,2000,time: 0.005f));
	//startServer();
	//Connecttohost("irc.homelien.no", 6667);
	/*
	foreach(Transform c in SuperController.singleton.onlineBrowserUI.GetComponentsInChildren<Transform>(true)){
	echo5(c.transform.parent.parent.parent.name+"/"+c.transform.parent.parent.name+"/"+c.transform.parent.name+"/"+c.name);
	//SuperController.singleton.onlineBrowserUI.transform.SetParent(chat.transform,false);
	//SuperController.singleton.onlineBrowser.transform.SetParent(web.transform,false);
}
*/
	StartCoroutine(getpublicip());
	sa(100);pslider.slider.value=100f;
	loaded=true;wiz.enabled = !people;
	if(wiz.enabled){StartCoroutine(iletters(clear:true));}else{StartCoroutine(iletters());}
	infopanelgroup.alpha = 0f;modelsgroup.alpha = advgroup.alpha = 1;infopanel.enabled=false;slideruigroup.alpha=1;selectrange();
		copygroup.blocksRaycasts = false;
		copygroup.interactable = false;
		infopanelgroup.blocksRaycasts = false;
		infopanelgroup.interactable = false;
		

	if(sessionplugin){
		echo25("t14");
		StartCoroutine(checkupdate(once:true));}
	}}
}
}

if(!addingperson){
if(merging){mergeslide=true;merging=false;lastmerge = Time.time;}
else{
	
if(lastmerge!=0){
if(Time.time-lastmerge>0.1f && !buffer){buffer=true;
//echo3("done mergesliding");
//TouchScreenKeyboard keyboard = TouchScreenKeyboard.Open("", TouchScreenKeyboardType.Default);
//NOTE GPU
				foreach (SM sm in _mainBank.Concat(_genitalBank))
				{
				if(keeplist.Contains("\n"+sm.Morph.resolvedDisplayName+sm.Morph.morphName+"\t")){
				if(!sm.Morph.uid.Contains("Custom/") && !sm.Morph.uid.Contains(":/")){
				continue;}}
				
				if(lastvalue.ContainsKey(sm.Morph.uid)){
				if(morphvalue[sm.Morph.uid]!=null && Morphnum[numvalue[sm.Morph.uid]+1] != null){
				if (sm.Selected == true && morphvalue[sm.Morph.uid]!=0)
				{
				Color newc=new Color(0.8f, 0.6f, 0f);
				newc.a=0.4f+NormalisedMagnitude(Morphnum[numvalue[sm.Morph.uid]+1]);
				if(MorphToggles[numvalue[sm.Morph.uid]+1]!=null){MorphToggles[numvalue[sm.Morph.uid]+1].backgroundColor = newc;}
				if(lastvalue.ContainsKey(sm.Morph.uid)){
				if(slider[numvalue[sm.Morph.uid]] != null){
				slider[numvalue[sm.Morph.uid]].slider.value = lastvalue[sm.Morph.uid]*1000;
				}}}
				}}
				}

}
if(Time.time-lastmerge>0.2f && buffer){
	StartCoroutine(countmorphs());
	if(_moldcount>_mcount && _moldcount!=9999){Result("Active morphs after refresh: "+_moldcount+" > "+_mcount);}
	lastmerge=0;mergeslide=false;buffer=false;
	}
}

}
}



slidecount++;
float parpos=rightUIContent.parent.transform.localPosition.y;
if(parpos!=oldparpos){
speed=parpos-oldparpos;
var tmp=speed.ToString().Replace("-","");
speed=Mathf.Floor(float.Parse(tmp));
if(speed>=2){moved=1;slidecount=0;}
}

if(slidecount > 10 && once==2 && slidecount < 20){slidecount=0;moved=0;
if(rightUIContent != null){
	foreach (UIDynamicToggle tt in rightUIContent.GetComponentsInChildren<UIDynamicToggle>(true))
		{

int sliders=intparse(tt.name)-1;
float selfpos = (tt.transform.localPosition.y);
float selfposx = (tt.transform.localPosition.x);
float calcs= Mathf.Ceil(selfpos+parpos);
if(calcs>-1600 && calcs <600){

if(slider[sliders] == null){
/*
if(sliders==2){
//slider[1].slider.gameObject.transform.Find("Fill Area").Find("Fill").GetComponent<Image>().color = Color.clear;
//echo3(slider[1].slider.gameObject.transform.Find("Fill Area").Find("Fill").GetComponentsInChildren<Image>(true).Color.ToString());


foreach (Transform ttt in _person.gameObject.transform.GetComponentsInChildren<Transform>(true))
		{
if(ttt.ToString().Contains("Female Morphs")){
//ttt.color = Color.clear;

	string s = ""; Transform g = ttt.transform;
	while (g != null)
	{
	   //if(g.name !=ttt.name.ToString()){
s = g.name + "/" + s;
//}
	   if(g.name !="SceneAtoms"){id=g;}
	   g = g.parent;
	}
echo3(ttt.ToString()+" : "+ttt.gameObject.active.ToString());
ttt.gameObject.SetActive(true);

}
}


//slider[1].slider.gameObject.transform.GetComponent<Image>().color=Color.clear;
}
*/
//DANGER WILL THROW EXCEPTION WITHOUT SOURCE if range textfield is empty
JSONStorableFloat minfloat = new JSONStorableFloat(sliders.ToString(), 0f, slideval, intparse(_minInputField_text), intparse(_maxInputField_text));last = Time.time;
slider[sliders] = CreateSliderui(minfloat);
//slider[sliders].quickButtonsEnabled = true;
//slider[sliders].rangeAdjustEnabled = true;
slider[sliders].defaultButtonEnabled = true;
slider[sliders].slider.wholeNumbers = true;
//slider[sliders].slider.UIText.text = "hy";
GameObject.Destroy(slider[sliders].quickButtonsGroup.gameObject);
GameObject.Destroy(slider[sliders].defaultButton.gameObject);
GameObject.Destroy(slider[sliders].rangeAdjustGroup.gameObject);
GameObject.Destroy(slider[sliders].labelText.gameObject);
GameObject.Destroy(slider[sliders].quickButtonM1.gameObject);
GameObject.Destroy(slider[sliders].quickButtonM2.gameObject);
GameObject.Destroy(slider[sliders].quickButtonM3.gameObject);
GameObject.Destroy(slider[sliders].quickButtonM4.gameObject);
GameObject.Destroy(slider[sliders].quickButtonP1.gameObject);
GameObject.Destroy(slider[sliders].quickButtonP2.gameObject);
GameObject.Destroy(slider[sliders].quickButtonP3.gameObject);
GameObject.Destroy(slider[sliders].quickButtonP4.gameObject);
slider[sliders].sliderValueTextFromFloat.UIInputField.textComponent.fontSize=18;
slider[sliders].sliderValueTextFromFloat.UIInputField.textComponent.color=new Color(0.8f,0.79f,0.82f);
slider[sliders].sliderValueTextFromFloat.UIInputField.contentType = InputField.ContentType.DecimalNumber;
slider[sliders].sliderValueTextFromFloat.UIInputField.lineType = InputField.LineType.SingleLine;
//slider[sliders].sliderValueTextFromFloat.UIInputField.onEndEdit.AddListener(value => {echo3("oko");});
//slider[sliders].sliderValueTextFromFloat.UIInputField.onValueChanged.AddListener(value => {

        //Fetch the Input Field component from the GameObject
        //slidetext = slider[sliders].sliderValueTextFromFloat.UIInputField;

        if (slider[sliders].sliderValueTextFromFloat.UIInputField.isFocused)
        {

		echo3("oko");}


//});
/*
EventTrigger.Entry submit = new EventTrigger.Entry();
    		submit.eventID = EventTriggerType.PointerEnter;
    		slider[sliders].sliderValueTextFromFloat.UIInputField.gameObject.AddComponent<EventTrigger>();
   		slider[sliders].sliderValueTextFromFloat.UIInputField.gameObject.GetComponent<EventTrigger>().triggers.Add(submit);
   		submit.callback.AddListener((eventData) => {
		echo3("koko");
		});
	*/	
	
			EventTrigger.Entry sendm = new EventTrigger.Entry();
    		sendm.eventID = EventTriggerType.PointerUp;
			sendm.callback.AddListener((eventDatasub) => {
			
			var key=Morphnum[intparse(tt.name)];
			streamover="";
			if(sendmorph.ContainsKey(key.uid+key.morphName+key.morphBank) && stream!="off"){
			var etmp=et;et="";
			Clientmessage("/msg "+stream+" [m"+sendmorph[key.uid+key.morphName+key.morphBank]+"["+etmp+key.morphValue.ToString()+"]m]",raw: false,time:1f);
			}
			});
    		slider[sliders].slider.gameObject.AddComponent<EventTrigger>();
			slider[sliders].slider.gameObject.GetComponent<EventTrigger>().triggers.Add(sendm);	
			
			EventTrigger.Entry sendmd = new EventTrigger.Entry();
    		sendmd.eventID = EventTriggerType.PointerDown;
			sendmd.callback.AddListener((eventDatasub) => {
			
			var key=Morphnum[intparse(tt.name)];
			if(sendmorph.ContainsKey(key.uid+key.morphName+key.morphBank) && stream!="off"){
			streamover=key.uid;
			}
			});
    		slider[sliders].slider.gameObject.AddComponent<EventTrigger>();
			slider[sliders].slider.gameObject.GetComponent<EventTrigger>().triggers.Add(sendmd);	
			
//InputField.LineType.MultiLineNewline;InputField.CharacterValidation.Integer

float adds=5;float subs=0;
if(selfposx<287){adds=0;subs=-4;}

float slpos=leftUIContent.Find("DynamicTextField(Clone)/").GetComponent<Transform>().localPosition.x;
float slpospar=leftUIContent.localPosition.x;
float apos=294;float bpos=177;

float corr=0;
if(_morphs<10){corr=25;}
if(slpos==117.5f){apos=294;bpos=177;}
else if(slpos==118.75f){apos=308;bpos=186;}
else if(slpos==112.5f){apos=294;bpos=171+corr;}
else if(slpos==111.25f){apos=284;bpos=167;}
else if(slpos==106.25f){apos=281;bpos=183;}
echo11(slpospar.ToString()+" pos "+slpos.ToString());

float sh=0;float ss=0;float st=0;if(vr){sh=20;ss=30;st=-14;}
echo14(vr.ToString());
transform(slider[sliders].transform,-540f,0f,apos,selfpos+26,ss);
trans2D(slider[sliders].sliderValueTextFromFloat.transform,50,10,0-bpos,6,ss);


slider[sliders].sliderValueTextFromFloat.transform.localPosition=new Vector3(slider[sliders].sliderValueTextFromFloat.transform.localPosition.x+2,slider[sliders].sliderValueTextFromFloat.transform.localPosition.y,st);
transform(slider[sliders].slider.handleRect.transform,20f,24f,-10,-10,sh);//Morphnum[intparse(tt.name)].isDriven
if(Morphnum[intparse(tt.name)].isDriven){
slider[sliders].slider.handleRect.transform.GetComponent<Image>().color=new Color(0.3f,0.29f,0.32f);}
//trans2D(slider[sliders].slider.fillRect.transform,2000f,-50f,-200,8000,20);
slider[sliders].slider.fillRect.transform.SetParent(hide.transform,false);


slider[sliders].slider.gameObject.transform.GetComponent<Image>().color=Color.clear;


//GameObject.Destroy(slider[sliders].slider.handleRect.gameObject);

slider[sliders].transform.SetParent(rightUIContent.parent.transform,false);
trans2D(slider[sliders].slider.transform,200f,-50f,101,-27);
slider[sliders].slider.value = Morphnum[intparse(tt.name)].appliedValue*1000;

    		EventTrigger.Entry slide = new EventTrigger.Entry();
    		slide.eventID = EventTriggerType.PointerEnter;
    		slider[sliders].gameObject.AddComponent<EventTrigger>();
   		slider[sliders].gameObject.GetComponent<EventTrigger>().triggers.Add(slide);
   		slide.callback.AddListener((eventData) => {
		mouseover=Morphnum[intparse(tt.name)].uid;mergeslide=false;
		
		});

    		EventTrigger.Entry slideexit = new EventTrigger.Entry();
    		slideexit.eventID = EventTriggerType.PointerExit;
    		slider[sliders].gameObject.AddComponent<EventTrigger>();
   		slider[sliders].gameObject.GetComponent<EventTrigger>().triggers.Add(slideexit);
   		slideexit.callback.AddListener((eventData) => {
		mouseover="";
		});

}
}
else{if(slider[sliders] != null){RemoveSlider(slider[sliders]);}
//if(sliders > _morphs+1){Setsliders();}

}

sliders++;
}


}

}
oldparpos=parpos;



if(once==1){
if(_count>100){

once=2;slidecount=0;



}
}
if(title!= null){title.textColor = new Color(2f-ccol4, ccol2+0.6f, 1.2f-ccol3+0.42f);

}
if(!isactive){isactive = true;//echo("opened");
if(!closeset){
Transform closebtn2=UITransform.Find("CloseButton").GetComponent<Transform>();
GameObject.Destroy(closebtn2.gameObject);
closeset=true;
closepos=SuperController.singleton.mainHUD.Find("MainUICanvas/CloseMainUIButton").localPosition;
}
SuperController.singleton.mainHUD.Find("MainUICanvas/CloseMainUIButton").localPosition=new Vector2(closepos.x-100,closepos.y-4);
if(loaded){
while(rightUIContent == null){}




modelsgroup.alpha=1f;
modelsgroup.blocksRaycasts = true;}
scroll.enabled = true;
ui.enabled = true;
if(infopanelgroup.alpha==0){wiz.enabled = !people;
if(wiz.enabled){StartCoroutine(iletters(clear:true));}else{StartCoroutine(iletters());}
}
sliderui.enabled=true;
models.enabled = true;
adv.enabled = true;
models.enabled = true;
modelsgroup.alpha=1f;
modelsgroup.blocksRaycasts = true;
if(bggroup.alpha!=0f){bg.enabled = true;}
sliderui.enabled=true;
if(once==0){_count=1;
//while(leftUIContent.transform==null){}

if(rightUIContent.gameObject.active){once=1;
//rightUIContent.parent.gameObject.transform.visible=false;

Refresh(false);

}
//transui2(rightUIContent.parent.parent.parent.transform,1080,1000,0,100);

}
}


}else{
if(merge!= null){morphine.buttonColor = new Color(0.4f, 0.2f, ccol);}
if(isactive){isactive = false;echo("closed");

//if(Frontlight != null){Frontlight.GetComponent<Light>().enabled = false;}
infopanel.enabled = false;
scroll.enabled = false;
ui.enabled = false;
wiz.enabled = false;
adv.enabled = false;
models.enabled = false;
modelsgroup.alpha=0f;
modelsgroup.blocksRaycasts = false;
bg.enabled = false;
sliderui.enabled=false;
if(closeset){SuperController.singleton.mainHUD.Find("MainUICanvas/CloseMainUIButton").localPosition=new Vector2(closepos.x,closepos.y);}

//if(leftUIContent!=null){transui2(leftUIContent.transform,200,954,460);}

}
}
				
				
				if(_count>50 && chg==1){chg++;}
				if(_count>100 && chg==2){chg=0;Result("MODELS/SCENE CHANGED - REFRESHED");}
				if(_count>200){_msubcount++;_versioncount++;
				
				//TRACKING
				//echo3(SuperController.singleton.activeUI.ToString());
				//echo3("mediafilebrowser "+SuperController.singleton.mediaFileBrowserUI.IsHidden().ToString());
				//echo3("filebrowser "+SuperController.singleton.fileBrowserUI.IsHidden().ToString());

if(sessionplugin){				


if(!Clientconnected){
if(_versioncount>800){_versioncount=0;
StartCoroutine(getinit(silent:true));}
}

else{
if(_versioncount>200){_versioncount=0;
Clientmessage("/topic "+ircc,raw:false,silent:true);
}
}
}

if(itime!=0){
if(Time.time-itime>1){itime=0;StartCoroutine(iletters(inactive));}
}
if(findletter){
if(Time.time-lettertime>0.2){
findletter=false;
findletters();//echo3("trace0");
if(people){
StartCoroutine(iletters());
}
}
	
	
}

if(maxTextField != null){
_txtcount++;
if(_txtcount>2){
var slidervals=lightslider1.slider.value.ToString()+":"+lightslider2.slider.value.ToString();
var chk=nickinput.text+"-VAM"+slidervals+_filterNameInputField.text+_prefixNameInputField.text+_creatorInputField.text+_pwInputField.text+_groupNameInputField.text+_regionNameInputField.text+_maxInputField.text+_minInputField.text;
var chkb=nick+slideroldvals+_filterNameInputField_text+_prefixNameInputField_text+_creatorInputField_text+_pwInputField_text+_groupNameInputField_text+_regionNameInputField_text+_maxInputField_text+_minInputField_text;
if(chkb!=chk){if(_minInputField_text!=_minInputField.text || _maxInputField_text!=_maxInputField.text){Setsliders();}saveini();}else{
if(_oldtxt != ""){_input.text=_oldtxt;_oldtxt="";}

}
_txtcount=0;
slideroldvals=slidervals;
}}

_count = 1;
string c=crowd();
if(_moldcount!=9998){
if(_msubcount>2){

echo14("checking morphs");
_msubcount=0;//echo3("1<"+_moldcount+":"+_mcount+":"+c+":"+_crowd);
if(_moldcount == 9999){_moldcount = 9998;StartCoroutine(countmorphs(false));}
else{
	//echo3(_moldcount+":"+_mcount+":"+c+":"+_crowd);
if(_moldcount!=_mcount && c==_crowd){
echo3 ("morph changed "+_mcount);
}}
_moldcount=_mcount;
StartCoroutine(countmorphs());}

}

				if(c !=_crowd && _crowd!="init" && !addingperson){chg=1;

Result("SCENE CHANGED - REFRESHED");
_moldcount=9999;makechooser();_moldcount=9999;
}_crowd=c;

}
			}
			catch (Exception e) {
				SuperController.LogError("Exception caught: " + e);
			}
		}


public static int intparse(string s)
{
	if(s==""){return 0;}
	
		int y = 0;int total=0;
		if(s.Substring(0,1)=="-"){s=s.Substring(1);
		
	        for (int i = 0; i < s.Length; i++)
               y = y * 10 + (s[i] - '0');
        total -= y;	
		
		}else{
		
        for (int i = 0; i < s.Length; i++)
               y = y * 10 + (s[i] - '0');
        total += y;
}
		
		return total;
}


////////////////////////////////////////////////////
//////////// MORPHINE TCP-SOCKET SERVER ////////////

    public int port = 1755;
    public List<ServerClient> clients;
    public List<ServerClient> disconnectList;
	public Dictionary<string,ServerClient> clientsockets;
	
    //creating the socket TCP
    public Socket serverSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

    //create the buffer size, how much info we can send and receive 
    private byte[] serverBuffer = new byte[1024];
	public bool serverStarted;

    public string content;


            //call the function create server here
            //CreateServer();

	
	// Update is called once per frame

public void Closeserver(){
	if (!serverStarted){return;}
	serverSocket.Close();
	serverStarted=false;
}

		public void Readclients(){
        if (serverStarted)
        {	foreach (ServerClient sc in clients)
			{
            //check for presence
            if (!Clientonline(sc.TCPsocket))
            {
                sc.TCPsocket.Close(); //close the socket 
                disconnectList.Add(sc);
                continue;
            }
            //check data from every connected client
            else 
            {
                Readclient(sc);
                AcceptConnections();
            }   
			}
			//detect disconnection
			for (int i = 0; i < disconnectList.Count; i++)
			{
            clients.Remove(disconnectList[i]);
			//clientsockets.Remove(IPAddress.Parse(((IPEndPoint)disconnectList[i].TCPsocket.RemoteEndPoint).Address.ToString()).ToString());
            disconnectList.RemoveAt(i);
			}
		}}

    
    // Bind the socket to the local endpoint and listen for incoming connections.  
    public void CreateServer(){
		clients = new List<ServerClient>();
        disconnectList = new List<ServerClient>();
		clientsockets = new Dictionary<string,ServerClient>();

        try
        {
            echo3("Starting server");
            
            //bind socket
            serverSocket.Bind(new IPEndPoint(IPAddress.Any, port));
            echo3("Success");

            //start listening
            serverSocket.Listen(10); //number of allowed connections at a time
            echo3("Server listening on port: " + port);

            //accept clients
            AcceptConnections();

            serverStarted = true;
        }
        catch (Exception e)
        {
            echo3("Error when binding to port and listening: " + e.Message);
        }
       
    }

    //start async socket to listen for connections
    public void AcceptConnections(){

        serverSocket.BeginAccept(AcceptCallback, serverSocket);
    }

    //async socket
    void AcceptCallback(IAsyncResult ar)
    {
        // Get the socket that handles the client request  
        Socket server = (Socket)ar.AsyncState;
        //Socket handler = server.EndAccept(ar);
        ServerClient handler = new ServerClient(server.EndAccept(ar));

        //begin receiving data from the client
		currentclient=null;
        handler.TCPsocket.BeginReceive(serverBuffer, 0, serverBuffer.Length, 0,ReadCallback, handler);  
        //Readclient(handler);

        clients.Add(handler);
		//clientsockets.Add(IPAddress.Parse(((IPEndPoint)handler.TCPsocket.RemoteEndPoint).Address.ToString()).ToString(),handler);
        //accept incoming connections again
        AcceptConnections();

        echo3("Someone has connected");

        if (clients.Count > 0){
            echo3("client added to the list of clients");
        }

        //send a message to everyone say someone has connected
        Broadcast("some client has connected");  
    }


    /////////CHECK FOR DATA/////////
public ServerClient currentclient;
    public void Readclient(ServerClient socket){
        //begin reading data from a client
		
		currentclient=socket;
		socket.TCPsocket.BeginReceive(serverBuffer, 0, serverBuffer.Length, 0, ReadCallback, socket);
		
    }

    public void ReadCallback(IAsyncResult ar)
    {
		
        //client socket
		try{
		//echo3("data from client: "+(Socket)ar.ToString()+"incoming message ");
        //var handle = ar.AsyncState;
		
		ServerClient client=null;
		if(currentclient==null){
		Socket handler = (Socket)ar.AsyncState;
        client = new ServerClient(handler);
		
		}else{
		
		client = currentclient;}

        // Read data from the client socket   
        int bytes = client.TCPsocket.EndReceive(ar);
		//echo3(bytes.ToString());

        if (bytes == 0)
        {
            //no data to read 
            Debug.Log("no data to receive");
            return;
        }

        var data = new byte[bytes];
        Array.Copy(serverBuffer, data, bytes);
				
        // Get the data 
		currentclient=null;
        client.TCPsocket.BeginReceive(data, 0, bytes, 0,ReadCallback, client.TCPsocket);

        //store the data received
        content = Encoding.ASCII.GetString(data);
        //echo3("data from client "+client.clientName+": "+content);
		Broadcast(client.clientName+": "+content); 
		}catch (Exception ex){echo("error: " + ex.Message);}
    }



    /////////SEND DATA PROCESSED BACK TO THE CLIENT/////////

    public void Broadcast(string data, string filter="", string exclude=""){

        foreach (var cl in clients)
        { 
            try
            {
                //send data back to client
                if(exclude!=cl.clientName){Send(cl.TCPsocket, data);}
                //echo3("Broadcasted to client "+IPAddress.Parse(((IPEndPoint)cl.TCPsocket.RemoteEndPoint).Address.ToString()).ToString());
				
            }
            catch (Exception ex){echo3("error writing data: " + ex.Message);}
        }

    }

    public void Send(Socket handler, String data)
    {

        // Convert the string data to byte data using ASCII encoding  
        byte[] byteData = Encoding.ASCII.GetBytes(data);

        // Begin sending the data to the remote device  
        handler.BeginSend(byteData, 0, byteData.Length, 0,SendCallback, handler);
    }

    public void SendCallback(IAsyncResult ar)
    {

        try
        {
            //client socket 
            Socket handler = (Socket)ar.AsyncState;

            // Complete sending the data to the client  
            int bytesSent = handler.EndSend(ar);


        }
        catch (Exception e)
        {
            echo3("error: " + e.Message);
        }
    }



    /////////check if the client is connected to the server/////////

    public bool Clientonline(Socket c)
    {   try
        {
        if (c != null && c != null && c.Connected){
        if (c.Poll(0, SelectMode.SelectRead)){return !(c.Receive(new byte[1], SocketFlags.Peek) == 0);}
        return true;}
        return false;
        }
        catch{return false;}
    }


    /////////client object/class/////////

    public class ServerClient
    {

        public Socket TCPsocket;
        public string clientName;

        public ServerClient(Socket cs)
        {
            TCPsocket = cs;
			clientName = IPAddress.Parse(((IPEndPoint)cs.RemoteEndPoint).Address.ToString()).ToString();
        }
    }




////////// MORPHINE TCP-SOCKET SERVER END //////////	
////////////////////////////////////////////////////

////////////////////////////////////////////////////
//////////// MORPHINE TCP-SOCKET CLIENT ////////////

//TO CONNECT: Connecttohost("yourdomain.com", port);
//OR: Connecttohost("ipaddress", port);

//TO SEND MESSAGE: Clientmessage("message");

//TO LISTEN FOR HOST-DATA, PUT THIS IN Update()/Fixedupdate()/StartCoroutine():
//  Readhost(Clientsocket);

	public string Clientname;
	public string nick;
    private bool Clientconnected;
    public string Hostdata;
    private byte[] Clientbuffer = new byte[1024];
    public Socket Clientsocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
    public IPEndPoint Host;
    public string usedhost;
	public bool login=false;
    public bool Connecttohost(string host, int port)
    {   if (Clientconnected){return false;}
	echo6("connecting");
	Clientsocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
        //connect to host
        try
        {
		// check if string is an IP or domain
		usedhost=host;login=false;
		if(host.Replace(".","").ToLetters()!=""){
		// Get the IP if its a domain
		var list = Dns.Resolve(host);
		host = list.AddressList[0].ToString();}
		
        //create IP endpoint
        Host = new IPEndPoint(IPAddress.Parse(host), port);
        //connect to host
        Clientsocket.BeginConnect(Host, Connectclient, Clientsocket);
        Clientconnected = true;loginchk="";login=false;
        echo6("Client connected: "+ Clientconnected);

		nick=nickinput.text+"-VAM".Replace("-VAM-VAM","-VAM");
		if(nick=="Anonymous-VAM"){
		nick=ruser;
		}
		
		if(nick=="-VAM"){
		nick=ruser;
		}
		
		StartCoroutine(auth(host));

        }catch (Exception ex){echo4("Client error: " + ex.Message);}
        return Clientconnected;
    }

private IEnumerator auth(string host){
		
		yield return new WaitForSecondsRealtime(1.0f);
		
		echo4("NICK :"+nick);
		Clientmessage("NICK :"+nick); 
		yield return new WaitForSecondsRealtime(1.0f);
		Clientmessage("USER Morphine_V"+version+" 2 * :Virt-A-Mate IRC client MORPHINE V"+version);
		
}


private IEnumerator accepted(){
		logindone=false;
		yield return new WaitForSecondsRealtime(0.5f);
		if(loginconfig!=""){
		var lg=loginconfig.Replace("\r\n","n")+"\n";
		string[] lsplit=lg.Split("\n"[0]);
		for(int i=0;i<lsplit.Length;i++){
		if(lsplit[i]!=""){
		if(lsplit[i].Substring(0,1)=="/"){Clientmessage(lsplit[i],raw:false);}
		else{Clientmessage(lsplit[i]);}
		yield return new WaitForSecondsRealtime(2);
		}}
		}
		
		joining="#MORPHINE\n#\\/\\/\\/\\/\\CHAT\n";
		channels+="#MORPHINE\n#\\/\\/\\/\\/\\CHAT\n";
		yield return new WaitForSecondsRealtime(0.5f);
		Clientmessage("JOIN :"+ircc);
		var cch="";
		if(nickinput.text!="" && nickinput.text!=ruser.Replace("-VAM","")){
		cch="#VAM-"+nickinput.text+"\n";channels+=cch;
		yield return new WaitForSecondsRealtime(2.5f);
		Clientmessage("JOIN :#VAM-"+nickinput.text);}
		yield return new WaitForSecondsRealtime(2.5f);
		Clientmessage("JOIN :#MORPHINE");
		yield return new WaitForSecondsRealtime(2.5f);
		Clientmessage("JOIN :#\\/\\/\\/\\/\\CHAT");
		if(nickinput.text!="" && nickinput.text!=ruser.Replace("-VAM","")){
		tochat("<color=#bbbbbb>You joined your creator-support channel</color> <color=#ff9933>#VAM-"+nickinput.text+"\n</color>");}
		logindone=true;
		names="";
		yield return new WaitForSecondsRealtime(5f);
				tochat("<color=#ff9933>Welcome to \\/\\/\\/\\/\\NET - </color><color=#bbbbbb>You joined</color> <color=#ff9933>#MORPHINE</color> <color=#bbbbbb>and</color> <color=#ff9933>#\\/\\/\\/\\/\\CHAT</color>\n");

		Clientmessage("NAMES :"+chanlist,raw: true, time:1f);
		
}

private bool logindone=false;
private string channels="";private string joining="";private string ircc="#morphinecentral";
private IEnumerator join(string channel,float time=0f){
		
		yield return new WaitForSecondsRealtime(time);
		Clientmessage("JOIN :#"+channel);
		
}

    //callback for connection
    void Connectclient(IAsyncResult a)
    {   try
        {
        // Retrieve the socket 
        Socket client = (Socket)a.AsyncState;
        // Complete the connection  
        Clientsocket.EndConnect(a);
        //Debug.Log("Client successfully connected!!!!!");
        echo4("Client Socket connected to: " + Clientsocket.RemoteEndPoint);
        }
        catch (Exception e){echo4("Error connecting: " + e);}
	}

    //send message
    public void Clientmessage(string data,float time=0f, bool raw=true, bool nochange=false,bool silent=false)
    {
		if(data.Replace("\n","")=="/upgrade" || data.Replace("\n","")=="/upgrade"){
		dismissed=false;
		data=data.Replace("/version","/topic "+ircc);
		data=data.Replace("/upgrade","/topic "+ircc);
		}
		if(time!=0f){StartCoroutine(Clientmessagedelay(data,time: time,raw: raw,nochange: nochange));return;}
		  if(data==""){return;}	
	      if (!Clientconnected)
        {tochat("<color=#ff8822>Failed sending message: You are not connected</color>\n");return;}
			try{

		var outdata="";

		//not a passthrough raw-data message
		if(!raw){
			
		//message is a command
		if("/,@".Contains(data.Substring(0,1))){

		if(data.ToUpper()=="/PART" || data.ToUpper()=="/NAMES" || data.ToUpper()=="/LEAVE"){if(chanlist!=""){data+=" "+chanlist;}}
		if(!data.Contains(" ") || data.Length<2){return;}
		
		string[] sub = data.Split(new char[] { ' ' }, 2);
		echo8(sub[1]);
		
		var cmd=sub[0].Substring(1).ToUpper().Replace("LEAVE","PART").Replace("PM","PRIVMSG").Replace("MSG","PRIVMSG").Replace("CHANGE","JOIN");var pref=sub[0].Substring(0,1);
		echo5(cmd);
		echo5(sub[1]);
		echo5(pref);
		
		if(pref=="/"){
		
					
		if(cmd=="JOIN" || cmd=="PART" || cmd=="NAMES"){
		if(data.contains(ircc.Substring(1))){data="";_chatinput.text="";return;}
		
		if(cmd=="JOIN"){
		
		var j="#"+sub[1].Replace("#","");
		joining+=j.ToUpper()+"\n";
		if(channels.contains(j+"\n")){cmd="NAMES";}
		}
		
		data=cmd+" :"+"#"+sub[1].Replace("#","")+"\r\n";
		
		echo7("data on join: "+data);
		}
		
		else if(cmd=="TOPIC"){
		var args1=sub[1];var args2="";
		if(sub[1].Contains(" ")){
		string[] ssub = sub[1].Split(new char[] { ' ' }, 2);
		args1=ssub[0];args2=" :"+ssub[1];
		}
	    data=cmd+" "+args1+args2+"\r\n";
		}
		//general other commands
		else{
		var args1=sub[1];var args2="";
		if(sub[1].Contains(" ")){
		string[] ssub = sub[1].Split(new char[] { ' ' }, 2);
		args1=ssub[0];args2=" "+ssub[1];
		}	
		data=cmd+" "+args1+args2+"\r\n";
		echo6("general command>"+data);
		}
		
		}
		
		
			
			
		}else{//data is not a "/"-command, but a PRIVMSG to channel or user
			
		if(msgtarget==""){
		userwindow.UItext.supportRichText = true;
		tochat("<color=#ff8822><b>Join a channel first or do \"/MSG nickname message\"</b></color>\n");
		return;
		}
		data=process(data);
		if(msgtarget.Contains("#")){
			outdata="<color=#ff9933>"+msgtarget+"</color> "+nick+": "+data+"\r\n";
			}else{
			outdata="<color=#ff6622><b>PRIVATE TO </b>"+msgtarget+"</color> "+data+"\r\n";
			}
		data="PRIVMSG "+msgtarget+" :"+data+"\r\n";
		}
		
		}else{data+="\r\n";
		echo8("RAW > "+data);}//raw message-data
		echo6(">>>Sending data>>>"+data);
        byte[] byteData = Encoding.ASCII.GetBytes(data);
        Clientsocket.BeginSend(byteData, 0, byteData.Length, 0,(IAsyncResult) => {Sendtohost(IAsyncResult,outdata,silent);}, Clientsocket);
		}catch(Exception e){SuperController.LogError("Exception caught: " + e);return;}
    }
	
	    //send message delayed
    public IEnumerator Clientmessagedelay(string data,float time=0f,bool raw=true,bool nochange=false)
    {   
		yield return new WaitForSecondsRealtime(time);
		Clientmessage(data,raw: raw,nochange: nochange);
		yield return null;
    }
	
	
	//send messagedata to host callback
    void Sendtohost(IAsyncResult a,string data="",bool silent=false)
    {   try
        {
        //Socket client = (Socket)a.AsyncState;
        //send date to host
        int bytes = Clientsocket.EndSend(a);
		if(!silent){_chatinput.text="";}
		if(data!=""){tochat(data);}
        }
        catch (Exception e){if(data==""){tochat("<color=#ff8822>Client-error sending data</color>");}else{tochat("<color=#ff8822>Client-error sending: " + data+"</color>");}}
    }
	
	private bool socketonline=false;
    public IEnumerator Readhost(Socket client)
	{
	echo8("reading socket");
	socketonline=true;
      while (socketonline)
        {
        if(Clientconnected){Clientsocket.BeginReceive(Clientbuffer, 0, Clientbuffer.Length, 0, Gethostdata, Clientsocket);}
		yield return null;
		}
	}

private string process(string s){
int bstart=0;int bstop=0;int cstart=0;int cstop=0;int sstart=0;int sstop=0;

var adds="";
if(s.contains("<b>")){foreach (Match m in Regex.Matches(s,"<b>")){bstart++;}}
if(s.contains("</b>")){foreach (Match m in Regex.Matches(s,"</b>")){bstop++;}}
if(s.contains("<color=")){foreach (Match m in Regex.Matches(s,"<color=")){cstart++;}}
if(s.contains("</color>")){foreach (Match m in Regex.Matches(s,"</color>")){cstop++;}}
if(s.contains("<size=")){foreach (Match m in Regex.Matches(s,"<size=")){sstart++;}}
if(s.contains("</size>")){foreach (Match m in Regex.Matches(s,"</size>")){sstop++;}}

echo6(bstart.ToString()+" : "+bstop.ToString());
for(int i=bstop;i<bstart;i++){adds+="</b>";}
for(int i=cstop;i<cstart;i++){adds+="</color>";}
for(int i=sstop;i<sstart;i++){adds+="</size>";}


 string pattern = @"([\w+]+\:\/\/)?([\w\d-]+\.)*[\w-]+[\.\:]\w+([\/\?\=\&\#.]?[\w-]+)*\/?";
        RegexOptions options = RegexOptions.Multiline;
        
        foreach (Match m in Regex.Matches(s, pattern, options))
        {
			if(m.Value.Contains("hub.") || m.Value.Contains("youtube") || m.Value.Contains("://")){s=s.Replace(m.Value,"<color=#69b7ff><b>"+m.Value+"</b> (added to LINKS)</color>");
			links=m.Value+"\n"+links.Replace(m.Value+"\n","");
			lastlink=m.Value;}
			
        }

int lcount=0;int mindex=-1;
if(links.Contains("\n")){foreach(Match m in Regex.Matches(links,"\n")){lcount++;if(lcount==20){mindex=m.Index;}}}
if(mindex!=-1){links=links.Substring(0,mindex+1);}


	return s+adds;
}

private bool doupgrade=false;
private string links="";private string lastlink="";
private string loginchk=""; private string hostcache="";

    void Gethostdata(IAsyncResult a)
    {   try
        {
        // Read data from host.  
        Socket client = (Socket)a.AsyncState;
        int bytes = Clientsocket.EndReceive(a);
        //if stream quits/server disconnects
        if (bytes == 0)
        {
        echo4("Disconnected");
		Clientsocket.Close();
		Clientconnected = false;
		connectb.label="CONNECT";
        return;
        }
        var data = new byte[bytes];
        Array.Copy(Clientbuffer, data, bytes);
		// Get the data  
        Clientsocket.BeginReceive(data, 0, bytes, 0,Gethostdata, Clientsocket);
        Hostdata = Encoding.Default.GetString(data);
		}
        catch (Exception ex){
		tochat("<color=#ff9933>Disconnected \\/\\/\\/\\/\\NET - Thank you for visiting</color>\n\n");
		connectb.label="CONNECT";
		Clientsocket.Close();
		Clientconnected = false;
		}
		
		if(Hostdata.Substring(Hostdata.Length-2)!="\r\n"){hostcache+=Hostdata;return;}
		Hostdata=hostcache+Hostdata;
		hostcache="";
		
		echo5("<<<<< DATA from host >>>>>:\r\n"+Hostdata.Replace("\r","\\r").Replace("\n","\\n")+"\r\n<<<<< END of data >>>>>");

		var hdata=Hostdata.Replace("\r\n","\n");
		String[] hd=hdata.Split("\n"[0]);
		
		echo6("FULL DATA: \r\n>>>>"+Hostdata+"<<<<\r\n");
		//all messages
		for(int h=0;h<hd.Length;h++){
		//filter out empty lines and PING
		if(hd[h]==""){continue;}
		if(!hd[h].Contains(" ")){continue;}
		if(hd[h].Substring(0,4)=="PING"){
		echo7("PING > PONG replied to server");
		Clientmessage(Hostdata.Replace("PING","PONG"));
		continue;}

		//define userid and usertype
		bool self=false;bool user=false;var fullargs="";var usernick="";var cmd="";var t="";var chk="";var args="";var argsecho="";var sdata="";
		var d=hd[h];
		var checkid=d.Substring(1,d.IndexOf(" ")-1);
		var id=checkid;var fullid=id;
		var ip=id;
		
		////////is a user
		if(checkid.Contains("!")){
		id=checkid.Substring(0,checkid.IndexOf("!"));
		ip=checkid.Substring(checkid.IndexOf("@")+1);
		usernick=id;fullid=checkid;user=true;
		if(id==nick){self=true;usernick="You";}
		////////define command, target and args
		fullargs=d.Substring(d.IndexOf(" ")+1);
		cmd=fullargs.Substring(0,fullargs.IndexOf(" ")).Replace(":","");
		chk=fullargs.Substring(fullargs.IndexOf(" ")+1);
		if(chk.Contains(" ")){t=chk.Substring(0,chk.IndexOf(" ")).Replace(":","");args=chk.Substring(chk.IndexOf(" ")+2);argsecho="\n[ARGS>"+args+"]\n";}
		else{t=chk.Replace(":","");}
		
		//////////////////////////////////////////////////////////////////////////////////////////////
		////////handle different user-commands, use if(self) to handle commands by this client////////
		//DEBUG
		echo6("[ID>"+usernick+"] [IP>"+ip+"] [CMD>"+cmd+"] [TARGET>"+t+"]"+argsecho);
		
		//incoming channel or private message.
		if(cmd=="PRIVMSG"){
		var realchannel=t;
		if(channels.contains(t+"\n")){realchannel=channels.Substring(channels.ToUpper().IndexOf(t.ToUpper()),t.Length);}
		if(realchannel.Substring(0,9)=="#[STREAM]"){
		if(args.Substring(0,2)=="[m"){
		StartCoroutine(getmorphs(args,usernick,realchannel));
		return;
		}		
		}
		if(t==nick){targetlist(msgtarget,usernick);}
		args=process(args);
		if(realchannel==ircc && args=="[STREAM]"){
		tochat("<color=#ffffff><b>"+usernick+"</b> started a morphine-STREAM\njoin in by clicking <b>#[STREAM]-"+usernick+"</b> in your TARGET-button.</color>\n");
		msgtargets="#[STREAM]-"+usernick+"\n"+msgtargets;
		}
		else{
		var fr=realchannel;
		if(realchannel==nick){fr="<color=#ff6622>PRIVATE FROM</color>";}
		tochat("<color=#a5a4a6ff><b>"+fr+"</b></color> <color=#ffffffff>"+usernick+":</color> <color=#cbcacf>"+args+"</color>\n");
		}
		}
		
		//other users joining a channel
		if(cmd=="JOIN"){
		if(!self){
		var joinedc=channels.Substring(channels.ToUpper().IndexOf(t.ToUpper()),t.Length);	
		
			if(joinedc==chanlist){
			tochat("<color=#a5a4a6ff><b>"+usernick+" joined</b></color> <color=#ffffffff>"+joinedc+"</color>\n");
			Clientmessage("NAMES :"+chanlist,raw: true, time:1.5f);}
		}	
			
		}
		
		//client or others leaving a channel
		if(cmd=="PART"){
		var realchannel=channels.Substring(channels.ToUpper().IndexOf(t.ToUpper()),t.Length);
		
		if(!self){
			if(realchannel==chanlist){
			tochat("<color=#a5a4a6ff><b>"+usernick+" left</b></color> <color=#ffffffff>"+realchannel+"</color>\n");
			Clientmessage("NAMES :"+chanlist,raw: true, time:1.5f);
			}
			}
		
		if(self){
		tochat("<color=#a5a4a6ff><b>"+usernick+" left</b></color> <color=#ffffffff>"+realchannel+"</color>\n");
		bool foundtarget=false;
		channels=channels.Replace(realchannel+"\n","");
		msgtargets=msgtargets.Replace(realchannel+"\n","");
		if(msgtarget==t){
		if(channels!=""){
		var tt=channels.Substring(0,channels.IndexOf("\n")).Replace("\n","");
		targetlist("",tt);
		foundtarget=true;
		}
		else if(msgtargets!=""){
		var tt=msgtargets.Substring(0,msgtargets.IndexOf("\n")).Replace("\n","");
		targetlist("",tt);
		foundtarget=true;
		}
		else{
		msgtarget="";
		lastmsg="";
		chanlist="";
		msgtargets="";
		channels="";
		tochat("<color=#ff8822><b>Left remaining channels. Type /join #channelname or \"/msg nickname message\" to get started</b></color>\n");
		chatlabel.text="";
		_chatinput.text="";		
		}
		}
		}
		}
		
		
		}else{
		////////is server-data/response
		////////define responses, target and args from server
		fullargs=d.Substring(d.IndexOf(" ")+1);
		if(!fullargs.Contains(" ")){continue;}
		cmd=fullargs.Substring(0,fullargs.IndexOf(" ")).Replace(":","");
		chk=fullargs.Substring(fullargs.IndexOf(" ")+1);sdata=chk;
		if(chk.Contains(" ")){t=chk.Substring(0,chk.IndexOf(" ")).Replace(":","");args=chk.Substring(chk.IndexOf(" ")+1);argsecho="\n[ARGS>"+args+"]\n";}
		else{t=chk.Replace(":","");}




		//////////////////////////////////////////////////////////
		////////handle different server-commands/responses////////
		//DEBUG
		//echo6("SERVER> [CMD>"+cmd+"] [TARGET>"+t+"]\n[DATA>"+sdata+"]");	

		//Server accepted AUTH/login - do pass/identify/join on startup here
		if("001,002,003,005,372,375".Contains(cmd)){
		if(!login){names="";logindone=false;
		login=true;chatlabel.text="ACCEPTED LOGIN";
		StartCoroutine(accepted());
		continue;
		}
		}
		
	
		//Asked by server to release registered nick
		if(cmd=="432"){
		tochat("<color=#ffffffff>"+args.Substring(0,args.IndexOf(" :"))+": "+args.Substring(args.IndexOf(" :")+2)+"</color>\n");
		//_input.text="/NICKSRV RELEASE "+nick ;_chatinput.ActivateInputField();
		//echo7("SERVER> [CMD>"+cmd+"] [TARGET>"+t+"]\n[DATA>"+sdata+"]");
		Clientmessage("/nick "+ruser,raw:false,time:1f);
		Clientmessage(release,raw:false,time:2f);
		Clientmessage("nick "+nick,raw:false,time:3f);
		}	
		
		//Channel TOPIC announced on join
		if(cmd=="332"){
		var source=args.Substring(0,args.IndexOf(" :"));
		var topicmessage=args.Substring(args.IndexOf(" :")+2);

		if(source==ircc){
		var uchk=topicmessage.Replace(" ","");
		if(topicmessage!="" && uchk.Length>1 && uchk.Length < 5 && uchk.ToLetters()==""){
		latestv=topicmessage;
		if(latestv!=version.ToString()){
			
		if(sessionplugin){
		if(loaded && dismissed){
			title.label=upgradelabel+latestv.ToString();
			}
		else{
			
			if(!UITransform.gameObject.active){
				echo25("t9");
				doupgrade=true;StartCoroutine(OpenPlugin(this.name));}
			else{
				echo25("t14");
				StartCoroutine(checkupdate(once:true));}
			
			}
		
		}
		
		}
		}
			
		}else{tochat("<color=#ffffffff>"+source+": "+topicmessage+"</color>\n");}
		echo6("SERVER> [CMD>"+cmd+"] [TARGET>"+t+"]\n[DATA>"+sdata+"]");
		}	
		
		//Channel URL
		if(cmd=="328"){
		echo6("<<<<<<<<<<<< CHANNEL URL:"+sdata);
		}		
		
		//Start of NAMES response (and JOIN confirmation/finding real channel name if client is joining a channel)
		if(cmd=="353" && logindone){
		if(names==""){
		if(sdata.Contains("=")){var schk=sdata.Replace(" ","");
		var realchannel=schk.Substring(schk.IndexOf("=")+1,schk.IndexOf(":")-schk.IndexOf("=")-1);
		//echo6(joining+"<<<<>>>>"+realchannel);
		if(joining.contains(realchannel+"\n")){
		echo6("<<<<<REAL CHANNEL NAME:["+realchannel+"]");
		joining=joining.Replace(realchannel.ToUpper()+"\n","");
		chanlist=realchannel;
		targetlist(msgtarget,realchannel);
		if(realchannel=="#[STREAM]-"+nick){
		tochat("<color=#a5a4a6ff><b>"+nick+" started a morphine-stream in</b></color> <color=#ff9933>"+realchannel+"</color>\n");	
		stream=realchannel;
		recieve=realchannel;
		streambutton.label="Stop stream";
		Clientmessage("/msg "+ircc+" [STREAM]",raw:false);
		Clientmessage("/topic "+realchannel+" co-op modelling is OFF",raw:false, time:1);
		
		}
		else if(realchannel.Contains("[STREAM]-")){
		recieve=realchannel;
		stream=realchannel;
		streambutton.label="Stop stream";
		tochat("<color=#a5a4a6ff><b>You joined a morphine-stream in</b></color> <color=#ff9933>"+realchannel+"</color>\n");
		
		
		}
		else{
		if(!channels.contains(realchannel+"\n")){
		var cr="";if(realchannel=="#VAM-"+_creator){cr=" your creator support-channel: ";}
		tochat("<color=#a5a4a6ff><b>You joined"+cr+"</b></color> <color=#ff9933>"+realchannel+"</color>\n");}
		}
		channels=realchannel+"\n"+channels.Replace(realchannel+"\n","");
		}
		}
		}
		if(!names.Contains(Hostdata)){names+=Hostdata;}
		}
		
		//End of NAMES response
		if(cmd=="366" && logindone){
		if(!names.Contains(Hostdata)){names+=Hostdata;}
		listnames();		
		}
		
		}//server/user-handle end

		echo6(d);
		}//loop all messages end


		bool fromhost=true;var userfullcmd="";var usercmd="";var fulluserinfo="";var userinfo="";var userip="";var userargs="";var target="";
		var hostchk=Hostdata.Substring(0,Hostdata.IndexOf(" "));var hostcmd=hostchk;
		echo5("HOSTID: "+hostchk);
		if(!hostchk.Contains(usedhost)){
		hostcmd="";	int rem=1;
		fromhost=false;
		userfullcmd=Hostdata.Substring(Hostdata.IndexOf(" ")+1);
		
		usercmd=userfullcmd.Substring(0,userfullcmd.IndexOf(" "));
		

		if(Hostdata.Contains(" ")){fulluserinfo=Hostdata.Substring(1,Hostdata.IndexOf(" "));}
		if(fulluserinfo.Contains("!") && fulluserinfo.Contains("@")){
		userinfo=fulluserinfo.Substring(0,fulluserinfo.IndexOf("!"));
		userip=fulluserinfo.Substring(fulluserinfo.IndexOf("@")+1);}
		userargs=userfullcmd.Substring(usercmd.Length+1,userfullcmd.Length-usercmd.Length-3);
		if(userargs!=""){if(userargs.Substring(0,1)==":"){userargs=userargs.Substring(1,userargs.Length-1);}}
		//echo4("args ["+userargs+"]");
		if(userargs.Contains(" :")){
		target=userargs.Substring(0,userargs.IndexOf(" :"));
		if(userargs.Length>target.Length+2){userargs=userargs.Substring(target.Length+2);}}else{target=userargs;userargs="";}
		
		if(userinfo=="" || userip.Length<3){fromhost=true;}
		}
		
		if(fromhost){var hostcode="";var hostreply="";


		if(Hostdata.Contains(":"+usedhost+" 311") && logindone){
		if(!whois.Contains(Hostdata)){whois+=Hostdata;}
		}
		
		if(Hostdata.Contains(":"+usedhost+" 318") && logindone){
		if(!whois.Contains(Hostdata)){whois+=Hostdata;}
		if(silentwhois){silentwhois=false;Whois();}else{Whois(true);}
		}		
			
		
		}
    }


private IEnumerator getmorphs(string m="",string unick="",string rc=""){//[m109[0.2:-0.286,0.2:0.437,]m]
if(!people){Result(unick+" is trying to stream a morph, please add a model");yield break;}

m=m.Replace("[m","").Replace("]m]","");
DAZMorph gmorph=getmorph[m.Substring(0,m.IndexOf("["))];
m=m.Substring(m.IndexOf("[")+1);
string[] mt=m.Split(","[0]);

    float smoothTime = 0.2f;
    float yVelocity = 0.1f;

for(int i=0;i<mt.Length;i++){var tmp=mt[i];
if(tmp!=""){
//string[] gsub=tmp.Split(":"[0]);
float start=Time.time;
float gval=gmorph.morphValue;
for(float g=0;g<1;g+=0.05f){
	
	    gmorph.morphValue = Mathf.SmoothStep(gval, float.Parse(tmp), g);
		yield return new WaitForSecondsRealtime(0.001f);
}
//gmorph.morphValue=float.Parse(gsub[1]);
//yield return null;
}
}

yield return null;	
}

private string recieve="off";
private string names="";private int usersadded=0;private string[] addlist;private float setusers=0f;private int addusers=0;private string whois="";private bool silentwhois=false;

private void Whois(bool chat=false){
if(!logindone){return;}
if(whois=="" || whois.Contains(usedhost+" 401 ")){whois="";tochat("No such user\n");return;}
whois=whois.Replace("\r\n","\n");
string[] sub=whois.Split("\n"[0]);

var ip="";
var chans="";
var fulluser="";
var user="";
var morphinev="";
var morphinevstring="";

foreach(string s in sub){if(s!=""){var ss=s.Substring(1);var chk=ss.Substring(0,usedhost.Length+5);

if(ss.Substring(0,usedhost.Length+5)==usedhost+" 311 "){
fulluser=ss.Substring(usedhost.Length+nick.Length+6).Replace("~"," ");
if(fulluser.Contains(" ")){user=fulluser.Substring(0,fulluser.IndexOf(" "));}
if(fulluser.Contains("client MORPHINE V")){morphinev=fulluser.Substring(fulluser.IndexOf("client MORPHINE V")+17);morphinevstring="Using MORPHINE V"+morphinev+"\n";}

Regex reg = new Regex("((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)");ip=reg.Match(ss).ToString();}
if(ss.Substring(0,usedhost.Length+5)==usedhost+" 319 "){chans+=ss.Substring(ss.IndexOf(":")+1);}

}}
echo5("User: "+user+"\nChannels: "+chans+"\n"+morphinevstring);

if(chat){
		if(morphinev==""){tochat("User: "+user+"\nChannels: "+chans+"\nIP: "+ip+"\n");}
		else{tochat("User: "+user+"\nChannels: "+chans+"\n"+morphinevstring);}
		}
		
whois="";
}


private void listnames(){
if(!logindone){names="";return;}
names=names.Replace("\r\n","\n");
string[] sub=names.Split("\n"[0]);
var addnames="";
foreach(string s in sub){if(s!=""){var ss=s.Substring(1);var chk=ss.Substring(0,usedhost.Length+5);
if(ss.Substring(0,usedhost.Length+5)==usedhost+" 353 "){addnames+=ss.Substring(ss.IndexOf(":")+1);}
}}
//FileManagerSecure.WriteAllText("Saves\\PluginData\\God\\ircnames.txt",names+"\r\n\r\n"+addnames);
if(addnames==""){return;}

//addnames=addnames.Replace(" @","@ ").Replace(" +","+ ");

addlist=addnames.Split(" "[0]);var addsub="";var adds="";
foreach(string a in addlist){
	if(a!=""){
		var sa=a.Replace("\r\n","");
		if(sa.Substring(0,1)=="+"){addsub+=adds+sa.Substring(1)+"+";}
		else if(sa.Substring(0,1)=="@"){addsub+=adds+sa.Substring(1)+"@";}
		else{addsub+=adds+sa;}
		adds=" ";
	}
}
addlist=addsub.Split(" "[0]);	
Array.Sort(addlist);	
setusers=Time.realtimeSinceStartup;		
addusers=0;

//users.transform.SetParent(w.transform.parent.parent,false);
//users.transform.localPosition=new Vector2(w.transform.parent.parent.localPosition.x,w.transform.parent.parent.localPosition.y);

userwindow.text="";
var w=userwindow.gameObject.transform.Find("Scroll View/Viewport/Content/Text");int i=0;

/*
	foreach (UIDynamicButton uib in rightUIContent.GetComponentsInChildren<UIDynamicButton>(true))
		{
		RemoveButton(uib);
		}
*/		
names="";
}

// WAMNET OFFLINE/EMERGENCY BACKUP
public string latestv="";
public string ircserver="irc.homelien.no";
public string ircport="6667";
public string homepage="https://www.youtube.com";
public string banlist="";
public string forbidden="God";
public string excludemorphs="";

private void tochat(string t){


/*	
	foreach(ScrollRect p in chatwindow.gameObject.transform.GetComponentsInChildren<ScrollRect>(true)){
		//echo4(p.ToString());
		//echo4("name "+p.transform.parent.parent.parent.parent.parent.name+"/"+p.transform.parent.parent.parent.parent.name+"/"+p.transform.parent.parent.parent.name+"/"+p.transform.parent.parent.name+"/"+p.transform.parent.name+"/"+p.name);
	if(p.ToString()=="Scroll View (UnityEngine.RectTransform)"){echo4(p.ToString());

			//var b=newbutton(p.transform,() => {StartCoroutine(OpenPlugin(this.name));},"//\\\\/\\\\ORPHINE° by God",520f,70,0f,0f);
		
	}
	if(p.ToString()=="Viewport (UnityEngine.RectTransform)"){
		
		//var b=newbutton(p.transform,() => {StartCoroutine(OpenPlugin(this.name));},"//\\\\/\\\\ORPHINE° by God",12000f,300,0f,0f);
		//b.transform.localPosition=p.transform.localPosition;
		}
	if(p.ToString()=="Content (UnityEngine.RectTransform)"){
			foreach(Component pp in p.gameObject.transform.GetComponentsInChildren<Component>(true)){
	//echo4(pp.ToString());	
	//if(pp.ToString()=="Text (UnityEngine.RectTransform)"){echo4("name "+pp.transform.parent.parent.parent.parent.parent.name+"/"+pp.transform.parent.parent.parent.parent.name+"/"+pp.transform.parent.parent.parent.name+"/"+pp.transform.parent.parent.name+"/"+pp.transform.parent.name+"/"+pp.name);var b=newbutton(pp.transform,() => {StartCoroutine(OpenPlugin(this.name));},"//\\\\/\\\\ORPHINE° by God",520f,70,0f,0f);}
	}
		
	}
	}
	
             string name = sc.name + " Input Caret";
             Transform caret = sc.transform.parent.Find(name);
*/

	//var b=newbutton(sc.transform,() => {StartCoroutine(OpenPlugin(this.name));},"//\\\\/\\\\ORPHINE° by God",200f,70,0f,0f);
	//chatwindow.gameObject.transform.Find("Scroll Rect").GetComponent<ScrollRect>().verticalNormalizedPosition = 0.5f;
	//var scroll=sc.gameObject.transform.GetComponent<ScrollRect>();
	
	var sc=chatwindow.gameObject.transform.Find("Scroll View/Viewport/Content/Text");
	ScrollRect scroller=chatwindow.gameObject.transform.Find("Scroll View").GetComponent<ScrollRect>();

	if(chatwindow.text.Length>5000){
	string[] chk=chatwindow.text.Split("\r"[0]);var replace="";
	int chkcount=int.Parse(chk.Length.ToString());
	for(int ci=2;ci<chk.Length;ci++){
	replace+=chk[ci].Replace("\n","\r\n");
	}
	chatwindow.text=replace;
	}
	userwindow.UItext.supportRichText = true;
	
	chatwindow.text+=t;
	userwindow.UItext.supportRichText = true;
	scroller.verticalNormalizedPosition = 0.0f;
	scroller.velocity = new Vector2 (1000f, 0f);
	scroller.verticalNormalizedPosition = 0.0f;
	scroller.velocity = new Vector2 (1000f, 1000f);
}	
	void Closeclient()
	{
		if (!Clientconnected){return;}
		Clientsocket.Close();
		Clientconnected = false;
		connectb.label="CONNECT";
	}
	
////////// MORPHINE TCP-SOCKET CLIENT END //////////	
////////////////////////////////////////////////////

public string publicip;



public IEnumerator getpublicip(){ //get public ip for TCP-socket server<client co-op gaming
var result="wait";
result=HTTP(server: "api.ipify.org");
for (int i=1;i<10;i++){if(result!="wait"){i=10;break;}yield return new WaitForSecondsRealtime(1.0f);}

if(result!="error"){
echo7("Your public IP address is: "+result);
publicip=result.Replace("\n","").Replace("\r","");}
yield return null;
}


    private Socket Tempsocket(string server, int port)
    {
        Socket s = null;
        IPHostEntry hostEntry = null;

		// host is an IP-address
		if(server.Replace(".","").ToLetters()==""){
		// Get the IP if its a domain
		IPEndPoint ipe = new IPEndPoint(IPAddress.Parse(server), port);
		Socket temp = new Socket(ipe.AddressFamily, SocketType.Stream, ProtocolType.Tcp);
        temp.Connect(ipe);
        if(temp.Connected)
        {
        return temp;
		}}
		
		// host is a DNS-address		
        hostEntry = Dns.GetHostEntry(server);
        foreach(IPAddress address in hostEntry.AddressList)
        {
            IPEndPoint ipe = new IPEndPoint(address, port);
            Socket temp = new Socket(ipe.AddressFamily, SocketType.Stream, ProtocolType.Tcp);
            temp.Connect(ipe);
            if(temp.Connected)
            {
            s = temp;
            break;
            }
            else
            {
            continue;
            }
        }
        return s;
		}

    // Requests a HTTP-page by God.
	// Use:
	// Example: var anyvarname=HTTP(server: "155.55.55.55", content: "somecontent.html", port: 80);
	// Example: var anyvarname=HTTP(server: "http//:somedomain.com", content: "somepath/somecontent.txt", port: 8000);
	//
	// Will strip any "#://" prefix automatically
	// returns "error" if something fails for discreteness, nonblocking.
	
    private string HTTP(string server, string content="", int port=80)
    { try{
		
		//Get rid of "http://" / "https://" / "ftp://" etc prefix if any.
		if(server.Contains("://")){
		server=server.Substring(server.IndexOf("://")+3);
		}
		
        string request = "GET /"+content+" HTTP/1.1\r\nHost: "+server+"\r\nConnection: Close\r\n\r\n";
        Byte[] bytesSent = Encoding.ASCII.GetBytes(request);
        Byte[] bytesReceived = new Byte[256];
        string page = "";
		Socket s = null;
        IPHostEntry hostEntry = null;
		// host is an IP-address
		if(Regex.Replace(server.Replace(".",""), @"[\d-]", string.Empty)==""){
		IPEndPoint ipe = new IPEndPoint(IPAddress.Parse(server), port);
		Socket temp = new Socket(ipe.AddressFamily, SocketType.Stream, ProtocolType.Tcp);
        temp.Connect(ipe);
        if(temp.Connected)
        {s=temp;}
		}else{
		// host is a DNS-address		
        hostEntry = Dns.GetHostEntry(server);
        foreach(IPAddress address in hostEntry.AddressList)
        {
            IPEndPoint ipe = new IPEndPoint(address, port);
            Socket temp = new Socket(ipe.AddressFamily, SocketType.Stream, ProtocolType.Tcp);
            temp.Connect(ipe);
            if(temp.Connected)
            {
            s = temp;
            break;
            }
            else
            {
            continue;
            }
        }
		}//else end
		//connection failed
        if (s == null){return ("error");}

            // Send request to the server.
            s.Send(bytesSent, bytesSent.Length, 0);

            // Receive the server home page content.
            int bytes = 0;
            page = "";

            // The following will block until the page is transmitted.
            do {bytes = s.Receive(bytesReceived, bytesReceived.Length, 0);
                page = page + Encoding.ASCII.GetString(bytesReceived, 0, bytes);
			   }while (bytes > 0);
        
		//Strip away header
		if(page.Contains("Content-Length: ")){var newpage=page.Replace("\r\n","\n");
		string[] sub = Splitstring("Content-Length: ",newpage);
		string[] sub2 = sub[1].Split("\n"[0]);
		int pagelength=int.Parse(sub2[0]);
		if(pagelength==0){return ("error");}
		page=page.Substring(page.Length-pagelength);
		}
		//return the content
        return page;
		}catch(Exception e){return ("error");}
    }

private string humanizer="{\"setUnlistedParamsToDefault\":\"true\",\"V2\":\"true\",\"storables\":[{\"id\":\"hipControl\",\"detachControl\":\"false\",\"interactableInPlayMode\":\"true\",\"deactivateOtherControlsOnPossess\":\"true\",\"possessable\":\"false\",\"canGrabPosition\":\"true\",\"canGrabRotation\":\"true\",\"freezeAtomPhysicsWhenGrabbed\":\"false\",\"xPositionLock\":\"false\",\"yPositionLock\":\"false\",\"zPositionLock\":\"false\",\"xPositionLocalLock\":\"false\",\"yPositionLocalLock\":\"false\",\"zPositionLocalLock\":\"false\",\"xRotationLock\":\"false\",\"yRotationLock\":\"false\",\"zRotationLock\":\"false\",\"physicsEnabled\":\"true\",\"useGravity\":\"true\",\"maxVelocityEnable\":\"true\",\"complyPositionThreshold\":\"0.001\",\"complyRotationThreshold\":\"5\",\"complySpeed\":\"10\",\"positionGrid\":\"0.1\",\"rotationGrid\":\"15\",\"mass\":\"4\",\"drag\":\"1\",\"maxVelocity\":\"0.3\",\"angularDrag\":\"10\",\"holdPositionSpring\":\"2000\",\"holdPositionDamper\":\"72.30816\",\"holdPositionMaxForce\":\"1000\",\"holdRotationSpring\":\"200\",\"holdRotationDamper\":\"7.230816\",\"holdRotationMaxForce\":\"1000\",\"complyPositionSpring\":\"1500\",\"complyPositionDamper\":\"100\",\"complyRotationSpring\":\"150\",\"complyRotationDamper\":\"10\",\"linkPositionSpring\":\"100000\",\"linkPositionDamper\":\"250\",\"linkPositionMaxForce\":\"100000\",\"linkRotationSpring\":\"100000\",\"linkRotationDamper\":\"250\",\"linkRotationMaxForce\":\"100000\",\"complyJointDriveSpring\":\"20\",\"jointDriveSpring\":\"0\",\"jointDriveDamper\":\"0\",\"jointDriveMaxForce\":\"0\",\"jointDriveXTarget\":\"0\",\"jointDriveYTarget\":\"0\",\"jointDriveZTarget\":\"0\",\"positionState\":\"Off\",\"rotationState\":\"Off\",\"positionGridMode\":\"None\",\"rotationGridMode\":\"None\",\"localPosition\":{\"x\":\"-0.09480386\",\"y\":\"1.062695\",\"z\":\"-0.02058667\"},\"localRotation\":{\"x\":\"13.28439\",\"y\":\"358.458\",\"z\":\"358.3762\"}},{\"id\":\"pelvisControl\",\"detachControl\":\"false\",\"interactableInPlayMode\":\"true\",\"deactivateOtherControlsOnPossess\":\"true\",\"possessable\":\"false\",\"canGrabPosition\":\"true\",\"canGrabRotation\":\"true\",\"freezeAtomPhysicsWhenGrabbed\":\"false\",\"xPositionLock\":\"false\",\"yPositionLock\":\"false\",\"zPositionLock\":\"false\",\"xPositionLocalLock\":\"false\",\"yPositionLocalLock\":\"false\",\"zPositionLocalLock\":\"false\",\"xRotationLock\":\"false\",\"yRotationLock\":\"false\",\"zRotationLock\":\"false\",\"physicsEnabled\":\"true\",\"useGravity\":\"true\",\"maxVelocityEnable\":\"true\",\"complyPositionThreshold\":\"0.001\",\"complyRotationThreshold\":\"5\",\"complySpeed\":\"10\",\"positionGrid\":\"0.1\",\"rotationGrid\":\"15\",\"mass\":\"2\",\"drag\":\"1\",\"maxVelocity\":\"0.3\",\"angularDrag\":\"10\",\"holdPositionSpring\":\"2000\",\"holdPositionDamper\":\"72.30816\",\"holdPositionMaxForce\":\"1000\",\"holdRotationSpring\":\"200\",\"holdRotationDamper\":\"7.230816\",\"holdRotationMaxForce\":\"1000\",\"complyPositionSpring\":\"1500\",\"complyPositionDamper\":\"100\",\"complyRotationSpring\":\"150\",\"complyRotationDamper\":\"10\",\"linkPositionSpring\":\"100000\",\"linkPositionDamper\":\"250\",\"linkPositionMaxForce\":\"100000\",\"linkRotationSpring\":\"100000\",\"linkRotationDamper\":\"250\",\"linkRotationMaxForce\":\"100000\",\"complyJointDriveSpring\":\"20\",\"jointDriveSpring\":\"150\",\"jointDriveDamper\":\"1\",\"jointDriveMaxForce\":\"500\",\"jointDriveXTarget\":\"0\",\"jointDriveYTarget\":\"0\",\"jointDriveZTarget\":\"0\",\"positionState\":\"Off\",\"rotationState\":\"Off\",\"positionGridMode\":\"None\",\"rotationGridMode\":\"None\",\"localPosition\":{\"x\":\"-0.09478229\",\"y\":\"1.080389\",\"z\":\"0.001390498\"},\"localRotation\":{\"x\":\"12.56567\",\"y\":\"359.7096\",\"z\":\"359.0613\"}},{\"id\":\"chestControl\",\"detachControl\":\"false\",\"interactableInPlayMode\":\"true\",\"deactivateOtherControlsOnPossess\":\"true\",\"possessable\":\"false\",\"canGrabPosition\":\"true\",\"canGrabRotation\":\"true\",\"freezeAtomPhysicsWhenGrabbed\":\"false\",\"xPositionLock\":\"false\",\"yPositionLock\":\"false\",\"zPositionLock\":\"false\",\"xPositionLocalLock\":\"false\",\"yPositionLocalLock\":\"false\",\"zPositionLocalLock\":\"false\",\"xRotationLock\":\"false\",\"yRotationLock\":\"false\",\"zRotationLock\":\"false\",\"physicsEnabled\":\"true\",\"useGravity\":\"true\",\"maxVelocityEnable\":\"true\",\"complyPositionThreshold\":\"0.001\",\"complyRotationThreshold\":\"5\",\"complySpeed\":\"10\",\"positionGrid\":\"0.1\",\"rotationGrid\":\"15\",\"mass\":\"2\",\"drag\":\"1\",\"maxVelocity\":\"0.3\",\"angularDrag\":\"10\",\"holdPositionSpring\":\"2000\",\"holdPositionDamper\":\"72.30816\",\"holdPositionMaxForce\":\"1000\",\"holdRotationSpring\":\"200\",\"holdRotationDamper\":\"7.230816\",\"holdRotationMaxForce\":\"1000\",\"complyPositionSpring\":\"1500\",\"complyPositionDamper\":\"100\",\"complyRotationSpring\":\"150\",\"complyRotationDamper\":\"10\",\"linkPositionSpring\":\"100000\",\"linkPositionDamper\":\"250\",\"linkPositionMaxForce\":\"100000\",\"linkRotationSpring\":\"100000\",\"linkRotationDamper\":\"250\",\"linkRotationMaxForce\":\"100000\",\"complyJointDriveSpring\":\"20\",\"jointDriveSpring\":\"50\",\"jointDriveDamper\":\"1\",\"jointDriveMaxForce\":\"500\",\"jointDriveXTarget\":\"-11.42117\",\"jointDriveYTarget\":\"0\",\"jointDriveZTarget\":\"0\",\"positionState\":\"On\",\"rotationState\":\"On\",\"positionGridMode\":\"None\",\"rotationGridMode\":\"None\",\"localPosition\":{\"x\":\"-0.08466326\",\"y\":\"1.416971\",\"z\":\"-0.03994935\"},\"localRotation\":{\"x\":\"331.2225\",\"y\":\"356.5589\",\"z\":\"6.392403\"}},{\"id\":\"headControl\",\"detachControl\":\"false\",\"interactableInPlayMode\":\"true\",\"deactivateOtherControlsOnPossess\":\"true\",\"possessable\":\"true\",\"canGrabPosition\":\"true\",\"canGrabRotation\":\"true\",\"freezeAtomPhysicsWhenGrabbed\":\"false\",\"xPositionLock\":\"false\",\"yPositionLock\":\"false\",\"zPositionLock\":\"false\",\"xPositionLocalLock\":\"false\",\"yPositionLocalLock\":\"false\",\"zPositionLocalLock\":\"false\",\"xRotationLock\":\"false\",\"yRotationLock\":\"false\",\"zRotationLock\":\"false\",\"physicsEnabled\":\"true\",\"useGravity\":\"true\",\"maxVelocityEnable\":\"true\",\"complyPositionThreshold\":\"0.001\",\"complyRotationThreshold\":\"14.93614\",\"complySpeed\":\"10\",\"positionGrid\":\"0.1\",\"rotationGrid\":\"15\",\"mass\":\"1\",\"drag\":\"1\",\"maxVelocity\":\"0.3\",\"angularDrag\":\"10\",\"holdPositionSpring\":\"2000\",\"holdPositionDamper\":\"72.30816\",\"holdPositionMaxForce\":\"1000\",\"holdRotationSpring\":\"200\",\"holdRotationDamper\":\"7.230816\",\"holdRotationMaxForce\":\"1000\",\"complyPositionSpring\":\"989.8567\",\"complyPositionDamper\":\"49.50478\",\"complyRotationSpring\":\"90.50037\",\"complyRotationDamper\":\"5.58511\",\"linkPositionSpring\":\"100000\",\"linkPositionDamper\":\"250\",\"linkPositionMaxForce\":\"100000\",\"linkRotationSpring\":\"100000\",\"linkRotationDamper\":\"250\",\"linkRotationMaxForce\":\"100000\",\"complyJointDriveSpring\":\"24.39581\",\"jointDriveSpring\":\"400\",\"jointDriveDamper\":\"5\",\"jointDriveMaxForce\":\"70\",\"jointDriveXTarget\":\"0\",\"jointDriveYTarget\":\"0\",\"jointDriveZTarget\":\"0\",\"positionState\":\"Comply\",\"rotationState\":\"Comply\",\"positionGridMode\":\"None\",\"rotationGridMode\":\"None\",\"localPosition\":{\"x\":\"-0.06748656\",\"y\":\"1.586838\",\"z\":\"-0.1093723\"},\"localRotation\":{\"x\":\"18.28997\",\"y\":\"347.4417\",\"z\":\"349.956\"}},{\"id\":\"rHandControl\",\"detachControl\":\"false\",\"interactableInPlayMode\":\"true\",\"deactivateOtherControlsOnPossess\":\"true\",\"possessable\":\"true\",\"canGrabPosition\":\"true\",\"canGrabRotation\":\"true\",\"freezeAtomPhysicsWhenGrabbed\":\"false\",\"xPositionLock\":\"false\",\"yPositionLock\":\"false\",\"zPositionLock\":\"false\",\"xPositionLocalLock\":\"false\",\"yPositionLocalLock\":\"false\",\"zPositionLocalLock\":\"false\",\"xRotationLock\":\"false\",\"yRotationLock\":\"false\",\"zRotationLock\":\"false\",\"physicsEnabled\":\"true\",\"useGravity\":\"true\",\"maxVelocityEnable\":\"true\",\"complyPositionThreshold\":\"0.001\",\"complyRotationThreshold\":\"5\",\"complySpeed\":\"10\",\"positionGrid\":\"0.1\",\"rotationGrid\":\"15\",\"mass\":\"1\",\"drag\":\"0.1\",\"maxVelocity\":\"0.2\",\"angularDrag\":\"10\",\"holdPositionSpring\":\"502.8351\",\"holdPositionDamper\":\"97.57309\",\"holdPositionMaxForce\":\"850.8065\",\"holdRotationSpring\":\"23.7558\",\"holdRotationDamper\":\"7.230816\",\"holdRotationMaxForce\":\"561.151\",\"complyPositionSpring\":\"1500\",\"complyPositionDamper\":\"100\",\"complyRotationSpring\":\"150\",\"complyRotationDamper\":\"10\",\"linkPositionSpring\":\"100000\",\"linkPositionDamper\":\"250\",\"linkPositionMaxForce\":\"100000\",\"linkRotationSpring\":\"100000\",\"linkRotationDamper\":\"250\",\"linkRotationMaxForce\":\"100000\",\"complyJointDriveSpring\":\"10\",\"jointDriveSpring\":\"14.12732\",\"jointDriveDamper\":\"0.5\",\"jointDriveMaxForce\":\"20\",\"jointDriveXTarget\":\"0\",\"jointDriveYTarget\":\"0\",\"jointDriveZTarget\":\"0\",\"positionState\":\"ParentLink\",\"rotationState\":\"ParentLink\",\"positionGridMode\":\"None\",\"rotationGridMode\":\"None\",\"localPosition\":{\"x\":\"0.4680197\",\"y\":\"1.163345\",\"z\":\"-0.03121205\"},\"localRotation\":{\"x\":\"302.8616\",\"y\":\"313.5795\",\"z\":\"44.75725\"},\"linkTo\":\"Person:lHandControl\"},{\"id\":\"lHandControl\",\"detachControl\":\"false\",\"interactableInPlayMode\":\"true\",\"deactivateOtherControlsOnPossess\":\"true\",\"possessable\":\"true\",\"canGrabPosition\":\"true\",\"canGrabRotation\":\"true\",\"freezeAtomPhysicsWhenGrabbed\":\"false\",\"xPositionLock\":\"false\",\"yPositionLock\":\"false\",\"zPositionLock\":\"false\",\"xPositionLocalLock\":\"false\",\"yPositionLocalLock\":\"false\",\"zPositionLocalLock\":\"false\",\"xRotationLock\":\"false\",\"yRotationLock\":\"false\",\"zRotationLock\":\"false\",\"physicsEnabled\":\"true\",\"useGravity\":\"true\",\"maxVelocityEnable\":\"true\",\"complyPositionThreshold\":\"0.001\",\"complyRotationThreshold\":\"5\",\"complySpeed\":\"10\",\"positionGrid\":\"0.1\",\"rotationGrid\":\"15\",\"mass\":\"1\",\"drag\":\"0.1\",\"maxVelocity\":\"0.3\",\"angularDrag\":\"10\",\"holdPositionSpring\":\"502.8351\",\"holdPositionDamper\":\"92.70795\",\"holdPositionMaxForce\":\"633.0582\",\"holdRotationSpring\":\"55.66185\",\"holdRotationDamper\":\"7.230816\",\"holdRotationMaxForce\":\"614.0442\",\"complyPositionSpring\":\"1500\",\"complyPositionDamper\":\"100\",\"complyRotationSpring\":\"150\",\"complyRotationDamper\":\"10\",\"linkPositionSpring\":\"100000\",\"linkPositionDamper\":\"250\",\"linkPositionMaxForce\":\"100000\",\"linkRotationSpring\":\"100000\",\"linkRotationDamper\":\"250\",\"linkRotationMaxForce\":\"100000\",\"complyJointDriveSpring\":\"10\",\"jointDriveSpring\":\"40\",\"jointDriveDamper\":\"0.5\",\"jointDriveMaxForce\":\"20\",\"jointDriveXTarget\":\"0\",\"jointDriveYTarget\":\"0\",\"jointDriveZTarget\":\"0\",\"positionState\":\"ParentLink\",\"rotationState\":\"ParentLink\",\"positionGridMode\":\"None\",\"rotationGridMode\":\"None\",\"localPosition\":{\"x\":\"-0.5446738\",\"y\":\"1.33693\",\"z\":\"-0.0498902\"},\"localRotation\":{\"x\":\"357.2333\",\"y\":\"43.76266\",\"z\":\"319.2761\"},\"linkTo\":\"Person:rNippleControl\"},{\"id\":\"rFootControl\",\"detachControl\":\"false\",\"interactableInPlayMode\":\"true\",\"deactivateOtherControlsOnPossess\":\"true\",\"possessable\":\"true\",\"canGrabPosition\":\"true\",\"canGrabRotation\":\"true\",\"freezeAtomPhysicsWhenGrabbed\":\"false\",\"xPositionLock\":\"false\",\"yPositionLock\":\"false\",\"zPositionLock\":\"false\",\"xPositionLocalLock\":\"false\",\"yPositionLocalLock\":\"false\",\"zPositionLocalLock\":\"false\",\"xRotationLock\":\"false\",\"yRotationLock\":\"false\",\"zRotationLock\":\"false\",\"physicsEnabled\":\"true\",\"useGravity\":\"true\",\"maxVelocityEnable\":\"true\",\"complyPositionThreshold\":\"0.001\",\"complyRotationThreshold\":\"5\",\"complySpeed\":\"10\",\"positionGrid\":\"0.1\",\"rotationGrid\":\"15\",\"mass\":\"1\",\"drag\":\"1\",\"maxVelocity\":\"0.3\",\"angularDrag\":\"10\",\"holdPositionSpring\":\"2000\",\"holdPositionDamper\":\"72.30816\",\"holdPositionMaxForce\":\"1000\",\"holdRotationSpring\":\"200\",\"holdRotationDamper\":\"7.230816\",\"holdRotationMaxForce\":\"1000\",\"complyPositionSpring\":\"1500\",\"complyPositionDamper\":\"100\",\"complyRotationSpring\":\"150\",\"complyRotationDamper\":\"10\",\"linkPositionSpring\":\"100000\",\"linkPositionDamper\":\"250\",\"linkPositionMaxForce\":\"100000\",\"linkRotationSpring\":\"100000\",\"linkRotationDamper\":\"250\",\"linkRotationMaxForce\":\"100000\",\"complyJointDriveSpring\":\"10\",\"jointDriveSpring\":\"200\",\"jointDriveDamper\":\"0.5\",\"jointDriveMaxForce\":\"50\",\"jointDriveXTarget\":\"0\",\"jointDriveYTarget\":\"0\",\"jointDriveZTarget\":\"0\",\"positionState\":\"Off\",\"rotationState\":\"On\",\"positionGridMode\":\"None\",\"rotationGridMode\":\"None\",\"localPosition\":{\"x\":\"0.1012003\",\"y\":\"0.07750237\",\"z\":\"-0.03989884\"},\"localRotation\":{\"x\":\"19.85729\",\"y\":\"14.87595\",\"z\":\"2.436416\"}},{\"id\":\"lFootControl\",\"detachControl\":\"false\",\"interactableInPlayMode\":\"true\",\"deactivateOtherControlsOnPossess\":\"true\",\"possessable\":\"true\",\"canGrabPosition\":\"true\",\"canGrabRotation\":\"true\",\"freezeAtomPhysicsWhenGrabbed\":\"false\",\"xPositionLock\":\"false\",\"yPositionLock\":\"false\",\"zPositionLock\":\"false\",\"xPositionLocalLock\":\"false\",\"yPositionLocalLock\":\"false\",\"zPositionLocalLock\":\"false\",\"xRotationLock\":\"false\",\"yRotationLock\":\"false\",\"zRotationLock\":\"false\",\"physicsEnabled\":\"true\",\"useGravity\":\"true\",\"maxVelocityEnable\":\"true\",\"complyPositionThreshold\":\"0.001\",\"complyRotationThreshold\":\"5\",\"complySpeed\":\"10\",\"positionGrid\":\"0.1\",\"rotationGrid\":\"15\",\"mass\":\"1\",\"drag\":\"1\",\"maxVelocity\":\"0.3\",\"angularDrag\":\"10\",\"holdPositionSpring\":\"2000\",\"holdPositionDamper\":\"72.30816\",\"holdPositionMaxForce\":\"1000\",\"holdRotationSpring\":\"200\",\"holdRotationDamper\":\"7.230816\",\"holdRotationMaxForce\":\"1000\",\"complyPositionSpring\":\"1500\",\"complyPositionDamper\":\"100\",\"complyRotationSpring\":\"150\",\"complyRotationDamper\":\"10\",\"linkPositionSpring\":\"100000\",\"linkPositionDamper\":\"250\",\"linkPositionMaxForce\":\"100000\",\"linkRotationSpring\":\"100000\",\"linkRotationDamper\":\"250\",\"linkRotationMaxForce\":\"100000\",\"complyJointDriveSpring\":\"10\",\"jointDriveSpring\":\"200\",\"jointDriveDamper\":\"0.5\",\"jointDriveMaxForce\":\"50\",\"jointDriveXTarget\":\"0\",\"jointDriveYTarget\":\"0\",\"jointDriveZTarget\":\"0\",\"positionState\":\"Off\",\"rotationState\":\"On\",\"positionGridMode\":\"None\",\"rotationGridMode\":\"None\",\"localPosition\":{\"x\":\"-0.3690344\",\"y\":\"0.1056819\",\"z\":\"-0.1370223\"},\"localRotation\":{\"x\":\"36.9357\",\"y\":\"353.933\",\"z\":\"4.044982\"}},{\"id\":\"neckControl\",\"detachControl\":\"false\",\"interactableInPlayMode\":\"false\",\"deactivateOtherControlsOnPossess\":\"true\",\"possessable\":\"false\",\"canGrabPosition\":\"true\",\"canGrabRotation\":\"true\",\"freezeAtomPhysicsWhenGrabbed\":\"false\",\"xPositionLock\":\"false\",\"yPositionLock\":\"false\",\"zPositionLock\":\"false\",\"xPositionLocalLock\":\"false\",\"yPositionLocalLock\":\"false\",\"zPositionLocalLock\":\"false\",\"xRotationLock\":\"false\",\"yRotationLock\":\"false\",\"zRotationLock\":\"false\",\"physicsEnabled\":\"true\",\"useGravity\":\"false\",\"maxVelocityEnable\":\"true\",\"complyPositionThreshold\":\"0.001\",\"complyRotationThreshold\":\"5\",\"complySpeed\":\"10\",\"positionGrid\":\"0.1\",\"rotationGrid\":\"15\",\"mass\":\"0.7\",\"drag\":\"1\",\"maxVelocity\":\"0.3\",\"angularDrag\":\"10\",\"holdPositionSpring\":\"2000\",\"holdPositionDamper\":\"72.30816\",\"holdPositionMaxForce\":\"1000\",\"holdRotationSpring\":\"200\",\"holdRotationDamper\":\"7.230816\",\"holdRotationMaxForce\":\"1000\",\"complyPositionSpring\":\"1500\",\"complyPositionDamper\":\"100\",\"complyRotationSpring\":\"150\",\"complyRotationDamper\":\"10\",\"linkPositionSpring\":\"100000\",\"linkPositionDamper\":\"250\",\"linkPositionMaxForce\":\"100000\",\"linkRotationSpring\":\"100000\",\"linkRotationDamper\":\"250\",\"linkRotationMaxForce\":\"100000\",\"complyJointDriveSpring\":\"20\",\"jointDriveSpring\":\"20\",\"jointDriveDamper\":\"2\",\"jointDriveMaxForce\":\"25\",\"jointDriveXTarget\":\"0\",\"jointDriveYTarget\":\"0\",\"jointDriveZTarget\":\"0\",\"positionState\":\"Off\",\"rotationState\":\"Off\",\"positionGridMode\":\"None\",\"rotationGridMode\":\"None\",\"localPosition\":{\"x\":\"-0.06405033\",\"y\":\"1.522024\",\"z\":\"-0.1436484\"},\"localRotation\":{\"x\":\"19.23715\",\"y\":\"350.5869\",\"z\":\"355.759\"}},{\"id\":\"eyeTargetControl\",\"interactableInPlayMode\":\"true\",\"deactivateOtherControlsOnPossess\":\"true\",\"possessable\":\"false\",\"canGrabPosition\":\"true\",\"canGrabRotation\":\"true\",\"freezeAtomPhysicsWhenGrabbed\":\"false\",\"xPositionLock\":\"false\",\"yPositionLock\":\"false\",\"zPositionLock\":\"false\",\"xPositionLocalLock\":\"false\",\"yPositionLocalLock\":\"false\",\"zPositionLocalLock\":\"false\",\"xRotationLock\":\"false\",\"yRotationLock\":\"false\",\"zRotationLock\":\"false\",\"physicsEnabled\":\"false\",\"useGravity\":\"false\",\"maxVelocityEnable\":\"true\",\"complyPositionThreshold\":\"0.001\",\"complyRotationThreshold\":\"5\",\"complySpeed\":\"10\",\"positionGrid\":\"0.1\",\"rotationGrid\":\"15\",\"mass\":\"0.01\",\"drag\":\"0\",\"maxVelocity\":\"10\",\"angularDrag\":\"0\",\"holdPositionSpring\":\"100\",\"holdPositionDamper\":\"0\",\"holdPositionMaxForce\":\"10\",\"holdRotationSpring\":\"0\",\"holdRotationDamper\":\"0\",\"holdRotationMaxForce\":\"0\",\"complyPositionSpring\":\"1500\",\"complyPositionDamper\":\"100\",\"complyRotationSpring\":\"150\",\"complyRotationDamper\":\"10\",\"linkPositionSpring\":\"100000\",\"linkPositionDamper\":\"250\",\"linkPositionMaxForce\":\"100000\",\"linkRotationSpring\":\"100000\",\"linkRotationDamper\":\"250\",\"linkRotationMaxForce\":\"100000\",\"complyJointDriveSpring\":\"20\",\"jointDriveSpring\":\"0\",\"jointDriveDamper\":\"0\",\"jointDriveMaxForce\":\"0\",\"jointDriveXTarget\":\"0\",\"jointDriveYTarget\":\"0\",\"jointDriveZTarget\":\"0\",\"positionState\":\"On\",\"rotationState\":\"On\",\"positionGridMode\":\"None\",\"rotationGridMode\":\"None\",\"localPosition\":{\"x\":\"-1.490116E-08\",\"y\":\"1.7\",\"z\":\"1\"},\"localRotation\":{\"x\":\"0\",\"y\":\"0\",\"z\":\"0\"}},{\"id\":\"rNippleControl\",\"detachControl\":\"false\",\"interactableInPlayMode\":\"true\",\"deactivateOtherControlsOnPossess\":\"true\",\"possessable\":\"false\",\"canGrabPosition\":\"true\",\"canGrabRotation\":\"true\",\"freezeAtomPhysicsWhenGrabbed\":\"false\",\"xPositionLock\":\"false\",\"yPositionLock\":\"false\",\"zPositionLock\":\"false\",\"xPositionLocalLock\":\"false\",\"yPositionLocalLock\":\"false\",\"zPositionLocalLock\":\"false\",\"xRotationLock\":\"false\",\"yRotationLock\":\"false\",\"zRotationLock\":\"false\",\"physicsEnabled\":\"true\",\"useGravity\":\"false\",\"maxVelocityEnable\":\"true\",\"complyPositionThreshold\":\"0.001\",\"complyRotationThreshold\":\"5\",\"complySpeed\":\"10\",\"positionGrid\":\"0.1\",\"rotationGrid\":\"15\",\"mass\":\"0.1\",\"drag\":\"0.1\",\"maxVelocity\":\"10\",\"angularDrag\":\"0\",\"holdPositionSpring\":\"100\",\"holdPositionDamper\":\"0\",\"holdPositionMaxForce\":\"10\",\"holdRotationSpring\":\"0\",\"holdRotationDamper\":\"0\",\"holdRotationMaxForce\":\"0\",\"complyPositionSpring\":\"1500\",\"complyPositionDamper\":\"100\",\"complyRotationSpring\":\"150\",\"complyRotationDamper\":\"10\",\"linkPositionSpring\":\"100000\",\"linkPositionDamper\":\"250\",\"linkPositionMaxForce\":\"100000\",\"linkRotationSpring\":\"100000\",\"linkRotationDamper\":\"250\",\"linkRotationMaxForce\":\"100000\",\"complyJointDriveSpring\":\"20\",\"jointDriveSpring\":\"0\",\"jointDriveDamper\":\"0\",\"jointDriveMaxForce\":\"1000\",\"jointDriveXTarget\":\"0\",\"jointDriveYTarget\":\"0\",\"jointDriveZTarget\":\"0\",\"positionState\":\"Off\",\"rotationState\":\"Off\",\"positionGridMode\":\"None\",\"rotationGridMode\":\"None\",\"localPosition\":{\"x\":\"0.1066568\",\"y\":\"1.340077\",\"z\":\"0.1689012\"},\"localRotation\":{\"x\":\"8.540677\",\"y\":\"219.4757\",\"z\":\"33.1391\"}},{\"id\":\"lNippleControl\",\"detachControl\":\"false\",\"interactableInPlayMode\":\"true\",\"deactivateOtherControlsOnPossess\":\"true\",\"possessable\":\"false\",\"canGrabPosition\":\"true\",\"canGrabRotation\":\"true\",\"freezeAtomPhysicsWhenGrabbed\":\"false\",\"xPositionLock\":\"false\",\"yPositionLock\":\"false\",\"zPositionLock\":\"false\",\"xPositionLocalLock\":\"false\",\"yPositionLocalLock\":\"false\",\"zPositionLocalLock\":\"false\",\"xRotationLock\":\"false\",\"yRotationLock\":\"false\",\"zRotationLock\":\"false\",\"physicsEnabled\":\"true\",\"useGravity\":\"false\",\"maxVelocityEnable\":\"true\",\"complyPositionThreshold\":\"0.001\",\"complyRotationThreshold\":\"5\",\"complySpeed\":\"10\",\"positionGrid\":\"0.1\",\"rotationGrid\":\"15\",\"mass\":\"0.1\",\"drag\":\"0.1\",\"maxVelocity\":\"10\",\"angularDrag\":\"0\",\"holdPositionSpring\":\"100\",\"holdPositionDamper\":\"0\",\"holdPositionMaxForce\":\"10\",\"holdRotationSpring\":\"0\",\"holdRotationDamper\":\"0\",\"holdRotationMaxForce\":\"0\",\"complyPositionSpring\":\"1500\",\"complyPositionDamper\":\"100\",\"complyRotationSpring\":\"150\",\"complyRotationDamper\":\"10\",\"linkPositionSpring\":\"100000\",\"linkPositionDamper\":\"250\",\"linkPositionMaxForce\":\"100000\",\"linkRotationSpring\":\"100000\",\"linkRotationDamper\":\"250\",\"linkRotationMaxForce\":\"100000\",\"complyJointDriveSpring\":\"20\",\"jointDriveSpring\":\"0\",\"jointDriveDamper\":\"0\",\"jointDriveMaxForce\":\"0\",\"jointDriveXTarget\":\"0\",\"jointDriveYTarget\":\"0\",\"jointDriveZTarget\":\"0\",\"positionState\":\"Off\",\"rotationState\":\"Off\",\"positionGridMode\":\"None\",\"rotationGridMode\":\"None\",\"localPosition\":{\"x\":\"-0.2840591\",\"y\":\"1.346769\",\"z\":\"0.1490571\"},\"localRotation\":{\"x\":\"12.69203\",\"y\":\"135.5531\",\"z\":\"332.9642\"}},{\"id\":\"rElbowControl\",\"detachControl\":\"false\",\"interactableInPlayMode\":\"false\",\"deactivateOtherControlsOnPossess\":\"true\",\"possessable\":\"false\",\"canGrabPosition\":\"true\",\"canGrabRotation\":\"true\",\"freezeAtomPhysicsWhenGrabbed\":\"false\",\"xPositionLock\":\"false\",\"yPositionLock\":\"false\",\"zPositionLock\":\"false\",\"xPositionLocalLock\":\"false\",\"yPositionLocalLock\":\"false\",\"zPositionLocalLock\":\"false\",\"xRotationLock\":\"false\",\"yRotationLock\":\"false\",\"zRotationLock\":\"false\",\"physicsEnabled\":\"true\",\"useGravity\":\"true\",\"maxVelocityEnable\":\"true\",\"complyPositionThreshold\":\"0.001\",\"complyRotationThreshold\":\"5\",\"complySpeed\":\"10\",\"positionGrid\":\"0.1\",\"rotationGrid\":\"15\",\"mass\":\"0.3\",\"drag\":\"0.1\",\"maxVelocity\":\"0.3\",\"angularDrag\":\"10\",\"holdPositionSpring\":\"2000\",\"holdPositionDamper\":\"72.30816\",\"holdPositionMaxForce\":\"1000\",\"holdRotationSpring\":\"200\",\"holdRotationDamper\":\"7.230816\",\"holdRotationMaxForce\":\"1000\",\"complyPositionSpring\":\"1500\",\"complyPositionDamper\":\"100\",\"complyRotationSpring\":\"150\",\"complyRotationDamper\":\"10\",\"linkPositionSpring\":\"100000\",\"linkPositionDamper\":\"250\",\"linkPositionMaxForce\":\"100000\",\"linkRotationSpring\":\"100000\",\"linkRotationDamper\":\"250\",\"linkRotationMaxForce\":\"100000\",\"complyJointDriveSpring\":\"20\",\"jointDriveSpring\":\"25\",\"jointDriveDamper\":\"0.5\",\"jointDriveMaxForce\":\"5\",\"jointDriveXTarget\":\"20.40795\",\"jointDriveYTarget\":\"0\",\"jointDriveZTarget\":\"0\",\"positionState\":\"Off\",\"rotationState\":\"Off\",\"positionGridMode\":\"None\",\"rotationGridMode\":\"None\",\"localPosition\":{\"x\":\"0.2767168\",\"y\":\"1.256284\",\"z\":\"-0.1238825\"},\"localRotation\":{\"x\":\"326.4946\",\"y\":\"352.3852\",\"z\":\"323.4736\"}},{\"id\":\"lElbowControl\",\"detachControl\":\"false\",\"interactableInPlayMode\":\"false\",\"deactivateOtherControlsOnPossess\":\"true\",\"possessable\":\"false\",\"canGrabPosition\":\"true\",\"canGrabRotation\":\"true\",\"freezeAtomPhysicsWhenGrabbed\":\"false\",\"xPositionLock\":\"false\",\"yPositionLock\":\"false\",\"zPositionLock\":\"false\",\"xPositionLocalLock\":\"false\",\"yPositionLocalLock\":\"false\",\"zPositionLocalLock\":\"false\",\"xRotationLock\":\"false\",\"yRotationLock\":\"false\",\"zRotationLock\":\"false\",\"physicsEnabled\":\"true\",\"useGravity\":\"true\",\"maxVelocityEnable\":\"true\",\"complyPositionThreshold\":\"0.001\",\"complyRotationThreshold\":\"5\",\"complySpeed\":\"10\",\"positionGrid\":\"0.1\",\"rotationGrid\":\"15\",\"mass\":\"0.3\",\"drag\":\"0.1\",\"maxVelocity\":\"0.3\",\"angularDrag\":\"10\",\"holdPositionSpring\":\"2000\",\"holdPositionDamper\":\"72.30816\",\"holdPositionMaxForce\":\"1000\",\"holdRotationSpring\":\"200\",\"holdRotationDamper\":\"7.230816\",\"holdRotationMaxForce\":\"1000\",\"complyPositionSpring\":\"1500\",\"complyPositionDamper\":\"100\",\"complyRotationSpring\":\"150\",\"complyRotationDamper\":\"10\",\"linkPositionSpring\":\"100000\",\"linkPositionDamper\":\"250\",\"linkPositionMaxForce\":\"100000\",\"linkRotationSpring\":\"100000\",\"linkRotationDamper\":\"250\",\"linkRotationMaxForce\":\"100000\",\"complyJointDriveSpring\":\"20\",\"jointDriveSpring\":\"25\",\"jointDriveDamper\":\"0.5\",\"jointDriveMaxForce\":\"5\",\"jointDriveXTarget\":\"-20.40796\",\"jointDriveYTarget\":\"0\",\"jointDriveZTarget\":\"0\",\"positionState\":\"Off\",\"rotationState\":\"Off\",\"positionGridMode\":\"None\",\"rotationGridMode\":\"None\",\"localPosition\":{\"x\":\"-0.4260645\",\"y\":\"1.298414\",\"z\":\"-0.1991786\"},\"localRotation\":{\"x\":\"342.9998\",\"y\":\"47.40326\",\"z\":\"0.87397\"}},{\"id\":\"rKneeControl\",\"detachControl\":\"false\",\"interactableInPlayMode\":\"false\",\"deactivateOtherControlsOnPossess\":\"true\",\"possessable\":\"false\",\"canGrabPosition\":\"true\",\"canGrabRotation\":\"true\",\"freezeAtomPhysicsWhenGrabbed\":\"false\",\"xPositionLock\":\"false\",\"yPositionLock\":\"false\",\"zPositionLock\":\"false\",\"xPositionLocalLock\":\"false\",\"yPositionLocalLock\":\"false\",\"zPositionLocalLock\":\"false\",\"xRotationLock\":\"false\",\"yRotationLock\":\"false\",\"zRotationLock\":\"false\",\"physicsEnabled\":\"true\",\"useGravity\":\"true\",\"maxVelocityEnable\":\"true\",\"complyPositionThreshold\":\"0.001\",\"complyRotationThreshold\":\"5\",\"complySpeed\":\"10\",\"positionGrid\":\"0.1\",\"rotationGrid\":\"15\",\"mass\":\"1\",\"drag\":\"1\",\"maxVelocity\":\"0.3\",\"angularDrag\":\"10\",\"holdPositionSpring\":\"2000\",\"holdPositionDamper\":\"72.30816\",\"holdPositionMaxForce\":\"1000\",\"holdRotationSpring\":\"200\",\"holdRotationDamper\":\"7.230816\",\"holdRotationMaxForce\":\"1000\",\"complyPositionSpring\":\"1500\",\"complyPositionDamper\":\"100\",\"complyRotationSpring\":\"150\",\"complyRotationDamper\":\"10\",\"linkPositionSpring\":\"100000\",\"linkPositionDamper\":\"250\",\"linkPositionMaxForce\":\"100000\",\"linkRotationSpring\":\"100000\",\"linkRotationDamper\":\"250\",\"linkRotationMaxForce\":\"100000\",\"complyJointDriveSpring\":\"20\",\"jointDriveSpring\":\"20\",\"jointDriveDamper\":\"0.5\",\"jointDriveMaxForce\":\"5\",\"jointDriveXTarget\":\"-22.61987\",\"jointDriveYTarget\":\"0\",\"jointDriveZTarget\":\"0\",\"positionState\":\"Off\",\"rotationState\":\"Off\",\"positionGridMode\":\"None\",\"rotationGridMode\":\"None\",\"localPosition\":{\"x\":\"0.05535619\",\"y\":\"0.54355\",\"z\":\"0.02145239\"},\"localRotation\":{\"x\":\"6.770262\",\"y\":\"7.629391\",\"z\":\"6.01123\"}},{\"id\":\"lKneeControl\",\"detachControl\":\"false\",\"interactableInPlayMode\":\"false\",\"deactivateOtherControlsOnPossess\":\"true\",\"possessable\":\"false\",\"canGrabPosition\":\"true\",\"canGrabRotation\":\"true\",\"freezeAtomPhysicsWhenGrabbed\":\"false\",\"xPositionLock\":\"false\",\"yPositionLock\":\"false\",\"zPositionLock\":\"false\",\"xPositionLocalLock\":\"false\",\"yPositionLocalLock\":\"false\",\"zPositionLocalLock\":\"false\",\"xRotationLock\":\"false\",\"yRotationLock\":\"false\",\"zRotationLock\":\"false\",\"physicsEnabled\":\"true\",\"useGravity\":\"true\",\"maxVelocityEnable\":\"true\",\"complyPositionThreshold\":\"0.001\",\"complyRotationThreshold\":\"5\",\"complySpeed\":\"10\",\"positionGrid\":\"0.1\",\"rotationGrid\":\"15\",\"mass\":\"1\",\"drag\":\"0.1\",\"maxVelocity\":\"0.3\",\"angularDrag\":\"10\",\"holdPositionSpring\":\"2000\",\"holdPositionDamper\":\"72.30816\",\"holdPositionMaxForce\":\"1000\",\"holdRotationSpring\":\"200\",\"holdRotationDamper\":\"7.230816\",\"holdRotationMaxForce\":\"1000\",\"complyPositionSpring\":\"1500\",\"complyPositionDamper\":\"100\",\"complyRotationSpring\":\"150\",\"complyRotationDamper\":\"10\",\"linkPositionSpring\":\"100000\",\"linkPositionDamper\":\"250\",\"linkPositionMaxForce\":\"100000\",\"linkRotationSpring\":\"100000\",\"linkRotationDamper\":\"250\",\"linkRotationMaxForce\":\"100000\",\"complyJointDriveSpring\":\"20\",\"jointDriveSpring\":\"20\",\"jointDriveDamper\":\"0.5\",\"jointDriveMaxForce\":\"5\",\"jointDriveXTarget\":\"-22.61987\",\"jointDriveYTarget\":\"0\",\"jointDriveZTarget\":\"0\",\"positionState\":\"Off\",\"rotationState\":\"Off\",\"positionGridMode\":\"None\",\"rotationGridMode\":\"None\",\"localPosition\":{\"x\":\"-0.2978982\",\"y\":\"0.554099\",\"z\":\"-0.006144043\"},\"localRotation\":{\"x\":\"15.9229\",\"y\":\"357.2787\",\"z\":\"351.0978\"}},{\"id\":\"rToeControl\",\"detachControl\":\"false\",\"interactableInPlayMode\":\"false\",\"deactivateOtherControlsOnPossess\":\"true\",\"possessable\":\"false\",\"canGrabPosition\":\"true\",\"canGrabRotation\":\"true\",\"freezeAtomPhysicsWhenGrabbed\":\"false\",\"xPositionLock\":\"false\",\"yPositionLock\":\"false\",\"zPositionLock\":\"false\",\"xPositionLocalLock\":\"false\",\"yPositionLocalLock\":\"false\",\"zPositionLocalLock\":\"false\",\"xRotationLock\":\"false\",\"yRotationLock\":\"false\",\"zRotationLock\":\"false\",\"physicsEnabled\":\"true\",\"useGravity\":\"true\",\"maxVelocityEnable\":\"true\",\"complyPositionThreshold\":\"0.001\",\"complyRotationThreshold\":\"5\",\"complySpeed\":\"10\",\"positionGrid\":\"0.1\",\"rotationGrid\":\"15\",\"mass\":\"0.1\",\"drag\":\"0\",\"maxVelocity\":\"0.3\",\"angularDrag\":\"0.05\",\"holdPositionSpring\":\"2000\",\"holdPositionDamper\":\"72.30816\",\"holdPositionMaxForce\":\"1000\",\"holdRotationSpring\":\"200\",\"holdRotationDamper\":\"7.230816\",\"holdRotationMaxForce\":\"1000\",\"complyPositionSpring\":\"1500\",\"complyPositionDamper\":\"100\",\"complyRotationSpring\":\"150\",\"complyRotationDamper\":\"10\",\"linkPositionSpring\":\"100000\",\"linkPositionDamper\":\"250\",\"linkPositionMaxForce\":\"100000\",\"linkRotationSpring\":\"100000\",\"linkRotationDamper\":\"250\",\"linkRotationMaxForce\":\"100000\",\"complyJointDriveSpring\":\"20\",\"jointDriveSpring\":\"10\",\"jointDriveDamper\":\"0.5\",\"jointDriveMaxForce\":\"1\",\"jointDriveXTarget\":\"0\",\"jointDriveYTarget\":\"0\",\"jointDriveZTarget\":\"0\",\"positionState\":\"Lock\",\"rotationState\":\"Off\",\"positionGridMode\":\"None\",\"rotationGridMode\":\"None\",\"localPosition\":{\"x\":\"0.1373744\",\"y\":\"0.03083217\",\"z\":\"0.07102631\"},\"localRotation\":{\"x\":\"15.39251\",\"y\":\"16.36211\",\"z\":\"4.801153\"}},{\"id\":\"lToeControl\",\"detachControl\":\"false\",\"interactableInPlayMode\":\"false\",\"deactivateOtherControlsOnPossess\":\"true\",\"possessable\":\"false\",\"canGrabPosition\":\"true\",\"canGrabRotation\":\"true\",\"freezeAtomPhysicsWhenGrabbed\":\"false\",\"xPositionLock\":\"false\",\"yPositionLock\":\"false\",\"zPositionLock\":\"false\",\"xPositionLocalLock\":\"false\",\"yPositionLocalLock\":\"false\",\"zPositionLocalLock\":\"false\",\"xRotationLock\":\"false\",\"yRotationLock\":\"false\",\"zRotationLock\":\"false\",\"physicsEnabled\":\"true\",\"useGravity\":\"true\",\"maxVelocityEnable\":\"true\",\"complyPositionThreshold\":\"0.001\",\"complyRotationThreshold\":\"5\",\"complySpeed\":\"10\",\"positionGrid\":\"0.1\",\"rotationGrid\":\"15\",\"mass\":\"0.1\",\"drag\":\"0\",\"maxVelocity\":\"0.3\",\"angularDrag\":\"0.05\",\"holdPositionSpring\":\"2000\",\"holdPositionDamper\":\"72.30816\",\"holdPositionMaxForce\":\"1000\",\"holdRotationSpring\":\"200\",\"holdRotationDamper\":\"7.230816\",\"holdRotationMaxForce\":\"1000\",\"complyPositionSpring\":\"1500\",\"complyPositionDamper\":\"100\",\"complyRotationSpring\":\"150\",\"complyRotationDamper\":\"10\",\"linkPositionSpring\":\"100000\",\"linkPositionDamper\":\"250\",\"linkPositionMaxForce\":\"100000\",\"linkRotationSpring\":\"100000\",\"linkRotationDamper\":\"250\",\"linkRotationMaxForce\":\"100000\",\"complyJointDriveSpring\":\"20\",\"jointDriveSpring\":\"10\",\"jointDriveDamper\":\"0.5\",\"jointDriveMaxForce\":\"1\",\"jointDriveXTarget\":\"0\",\"jointDriveYTarget\":\"0\",\"jointDriveZTarget\":\"0\",\"positionState\":\"Lock\",\"rotationState\":\"Off\",\"positionGridMode\":\"None\",\"rotationGridMode\":\"None\",\"localPosition\":{\"x\":\"-0.3939689\",\"y\":\"0.02854562\",\"z\":\"-0.03926531\"},\"localRotation\":{\"x\":\"29.9113\",\"y\":\"348.2741\",\"z\":\"354.8307\"}},{\"id\":\"abdomenControl\",\"detachControl\":\"false\",\"interactableInPlayMode\":\"false\",\"deactivateOtherControlsOnPossess\":\"true\",\"possessable\":\"false\",\"canGrabPosition\":\"true\",\"canGrabRotation\":\"true\",\"freezeAtomPhysicsWhenGrabbed\":\"false\",\"xPositionLock\":\"false\",\"yPositionLock\":\"false\",\"zPositionLock\":\"false\",\"xPositionLocalLock\":\"false\",\"yPositionLocalLock\":\"false\",\"zPositionLocalLock\":\"false\",\"xRotationLock\":\"false\",\"yRotationLock\":\"false\",\"zRotationLock\":\"false\",\"physicsEnabled\":\"true\",\"useGravity\":\"true\",\"maxVelocityEnable\":\"true\",\"complyPositionThreshold\":\"0.001\",\"complyRotationThreshold\":\"5\",\"complySpeed\":\"10\",\"positionGrid\":\"0.1\",\"rotationGrid\":\"15\",\"mass\":\"2\",\"drag\":\"1\",\"maxVelocity\":\"0.3\",\"angularDrag\":\"10\",\"holdPositionSpring\":\"2000\",\"holdPositionDamper\":\"72.30816\",\"holdPositionMaxForce\":\"1000\",\"holdRotationSpring\":\"200\",\"holdRotationDamper\":\"7.230816\",\"holdRotationMaxForce\":\"1000\",\"complyPositionSpring\":\"1500\",\"complyPositionDamper\":\"100\",\"complyRotationSpring\":\"150\",\"complyRotationDamper\":\"10\",\"linkPositionSpring\":\"100000\",\"linkPositionDamper\":\"250\",\"linkPositionMaxForce\":\"100000\",\"linkRotationSpring\":\"100000\",\"linkRotationDamper\":\"250\",\"linkRotationMaxForce\":\"100000\",\"complyJointDriveSpring\":\"20\",\"jointDriveSpring\":\"100\",\"jointDriveDamper\":\"1\",\"jointDriveMaxForce\":\"500\",\"jointDriveXTarget\":\"0\",\"jointDriveYTarget\":\"0\",\"jointDriveZTarget\":\"0\",\"positionState\":\"Off\",\"rotationState\":\"Off\",\"positionGridMode\":\"None\",\"rotationGridMode\":\"None\",\"localPosition\":{\"x\":\"-0.09464639\",\"y\":\"1.053344\",\"z\":\"-0.03882412\"},\"localRotation\":{\"x\":\"5.106199\",\"y\":\"357.7634\",\"z\":\"356.7823\"}},{\"id\":\"abdomen2Control\",\"detachControl\":\"false\",\"interactableInPlayMode\":\"false\",\"deactivateOtherControlsOnPossess\":\"true\",\"possessable\":\"false\",\"canGrabPosition\":\"true\",\"canGrabRotation\":\"true\",\"freezeAtomPhysicsWhenGrabbed\":\"false\",\"xPositionLock\":\"false\",\"yPositionLock\":\"false\",\"zPositionLock\":\"false\",\"xPositionLocalLock\":\"false\",\"yPositionLocalLock\":\"false\",\"zPositionLocalLock\":\"false\",\"xRotationLock\":\"false\",\"yRotationLock\":\"false\",\"zRotationLock\":\"false\",\"physicsEnabled\":\"true\",\"useGravity\":\"true\",\"maxVelocityEnable\":\"true\",\"complyPositionThreshold\":\"0.001\",\"complyRotationThreshold\":\"5\",\"complySpeed\":\"10\",\"positionGrid\":\"0.1\",\"rotationGrid\":\"15\",\"mass\":\"2\",\"drag\":\"1\",\"maxVelocity\":\"0.3\",\"angularDrag\":\"10\",\"holdPositionSpring\":\"2000\",\"holdPositionDamper\":\"72.30816\",\"holdPositionMaxForce\":\"1000\",\"holdRotationSpring\":\"200\",\"holdRotationDamper\":\"7.230816\",\"holdRotationMaxForce\":\"1000\",\"complyPositionSpring\":\"1500\",\"complyPositionDamper\":\"100\",\"complyRotationSpring\":\"150\",\"complyRotationDamper\":\"10\",\"linkPositionSpring\":\"100000\",\"linkPositionDamper\":\"250\",\"linkPositionMaxForce\":\"100000\",\"linkRotationSpring\":\"100000\",\"linkRotationDamper\":\"250\",\"linkRotationMaxForce\":\"100000\",\"complyJointDriveSpring\":\"20\",\"jointDriveSpring\":\"100\",\"jointDriveDamper\":\"1\",\"jointDriveMaxForce\":\"500\",\"jointDriveXTarget\":\"0\",\"jointDriveYTarget\":\"0\",\"jointDriveZTarget\":\"0\",\"positionState\":\"Off\",\"rotationState\":\"Off\",\"positionGridMode\":\"None\",\"rotationGridMode\":\"None\",\"localPosition\":{\"x\":\"-0.08973463\",\"y\":\"1.150352\",\"z\":\"-0.02364072\"},\"localRotation\":{\"x\":\"346.3253\",\"y\":\"357.8242\",\"z\":\"356.3166\"}},{\"id\":\"rThighControl\",\"detachControl\":\"false\",\"interactableInPlayMode\":\"false\",\"deactivateOtherControlsOnPossess\":\"true\",\"possessable\":\"false\",\"canGrabPosition\":\"true\",\"canGrabRotation\":\"true\",\"freezeAtomPhysicsWhenGrabbed\":\"false\",\"xPositionLock\":\"false\",\"yPositionLock\":\"false\",\"zPositionLock\":\"false\",\"xPositionLocalLock\":\"false\",\"yPositionLocalLock\":\"false\",\"zPositionLocalLock\":\"false\",\"xRotationLock\":\"false\",\"yRotationLock\":\"false\",\"zRotationLock\":\"false\",\"physicsEnabled\":\"true\",\"useGravity\":\"true\",\"maxVelocityEnable\":\"true\",\"complyPositionThreshold\":\"0.001\",\"complyRotationThreshold\":\"5\",\"complySpeed\":\"10\",\"positionGrid\":\"0.1\",\"rotationGrid\":\"15\",\"mass\":\"2\",\"drag\":\"1\",\"maxVelocity\":\"0.3\",\"angularDrag\":\"10\",\"holdPositionSpring\":\"2000\",\"holdPositionDamper\":\"72.30816\",\"holdPositionMaxForce\":\"1000\",\"holdRotationSpring\":\"200\",\"holdRotationDamper\":\"7.230816\",\"holdRotationMaxForce\":\"1000\",\"complyPositionSpring\":\"1500\",\"complyPositionDamper\":\"100\",\"complyRotationSpring\":\"150\",\"complyRotationDamper\":\"10\",\"linkPositionSpring\":\"100000\",\"linkPositionDamper\":\"250\",\"linkPositionMaxForce\":\"100000\",\"linkRotationSpring\":\"100000\",\"linkRotationDamper\":\"250\",\"linkRotationMaxForce\":\"100000\",\"complyJointDriveSpring\":\"20\",\"jointDriveSpring\":\"50\",\"jointDriveDamper\":\"0.5\",\"jointDriveMaxForce\":\"18\",\"jointDriveXTarget\":\"22.61987\",\"jointDriveYTarget\":\"0\",\"jointDriveZTarget\":\"0\",\"positionState\":\"Off\",\"rotationState\":\"Off\",\"positionGridMode\":\"None\",\"rotationGridMode\":\"None\",\"localPosition\":{\"x\":\"-0.01029488\",\"y\":\"0.9777145\",\"z\":\"-0.03403281\"},\"localRotation\":{\"x\":\"352.4688\",\"y\":\"4.52106\",\"z\":\"9.087741\"}},{\"id\":\"lThighControl\",\"detachControl\":\"false\",\"interactableInPlayMode\":\"false\",\"deactivateOtherControlsOnPossess\":\"true\",\"possessable\":\"false\",\"canGrabPosition\":\"true\",\"canGrabRotation\":\"true\",\"freezeAtomPhysicsWhenGrabbed\":\"false\",\"xPositionLock\":\"false\",\"yPositionLock\":\"false\",\"zPositionLock\":\"false\",\"xPositionLocalLock\":\"false\",\"yPositionLocalLock\":\"false\",\"zPositionLocalLock\":\"false\",\"xRotationLock\":\"false\",\"yRotationLock\":\"false\",\"zRotationLock\":\"false\",\"physicsEnabled\":\"true\",\"useGravity\":\"true\",\"maxVelocityEnable\":\"true\",\"complyPositionThreshold\":\"0.001\",\"complyRotationThreshold\":\"5\",\"complySpeed\":\"10\",\"positionGrid\":\"0.1\",\"rotationGrid\":\"15\",\"mass\":\"2\",\"drag\":\"1\",\"maxVelocity\":\"0.3\",\"angularDrag\":\"10\",\"holdPositionSpring\":\"2000\",\"holdPositionDamper\":\"72.30816\",\"holdPositionMaxForce\":\"1000\",\"holdRotationSpring\":\"200\",\"holdRotationDamper\":\"7.230816\",\"holdRotationMaxForce\":\"1000\",\"complyPositionSpring\":\"1500\",\"complyPositionDamper\":\"100\",\"complyRotationSpring\":\"150\",\"complyRotationDamper\":\"10\",\"linkPositionSpring\":\"100000\",\"linkPositionDamper\":\"250\",\"linkPositionMaxForce\":\"100000\",\"linkRotationSpring\":\"100000\",\"linkRotationDamper\":\"250\",\"linkRotationMaxForce\":\"100000\",\"complyJointDriveSpring\":\"20\",\"jointDriveSpring\":\"50\",\"jointDriveDamper\":\"0.5\",\"jointDriveMaxForce\":\"18\",\"jointDriveXTarget\":\"22.61987\",\"jointDriveYTarget\":\"0\",\"jointDriveZTarget\":\"0\",\"positionState\":\"Off\",\"rotationState\":\"Off\",\"positionGridMode\":\"None\",\"rotationGridMode\":\"None\",\"localPosition\":{\"x\":\"-0.1824768\",\"y\":\"0.9804454\",\"z\":\"-0.03429739\"},\"localRotation\":{\"x\":\"355.7986\",\"y\":\"356.8838\",\"z\":\"343.9542\"}},{\"id\":\"rArmControl\",\"detachControl\":\"false\",\"interactableInPlayMode\":\"false\",\"deactivateOtherControlsOnPossess\":\"true\",\"possessable\":\"false\",\"canGrabPosition\":\"true\",\"canGrabRotation\":\"true\",\"freezeAtomPhysicsWhenGrabbed\":\"false\",\"xPositionLock\":\"false\",\"yPositionLock\":\"false\",\"zPositionLock\":\"false\",\"xPositionLocalLock\":\"false\",\"yPositionLocalLock\":\"false\",\"zPositionLocalLock\":\"false\",\"xRotationLock\":\"false\",\"yRotationLock\":\"false\",\"zRotationLock\":\"false\",\"physicsEnabled\":\"true\",\"useGravity\":\"true\",\"maxVelocityEnable\":\"true\",\"complyPositionThreshold\":\"0.001\",\"complyRotationThreshold\":\"5\",\"complySpeed\":\"10\",\"positionGrid\":\"0.1\",\"rotationGrid\":\"15\",\"mass\":\"0.6\",\"drag\":\"0.1\",\"maxVelocity\":\"0.3\",\"angularDrag\":\"10\",\"holdPositionSpring\":\"2000\",\"holdPositionDamper\":\"72.30816\",\"holdPositionMaxForce\":\"1000\",\"holdRotationSpring\":\"200\",\"holdRotationDamper\":\"7.230816\",\"holdRotationMaxForce\":\"1000\",\"complyPositionSpring\":\"1500\",\"complyPositionDamper\":\"100\",\"complyRotationSpring\":\"150\",\"complyRotationDamper\":\"10\",\"linkPositionSpring\":\"100000\",\"linkPositionDamper\":\"250\",\"linkPositionMaxForce\":\"100000\",\"linkRotationSpring\":\"100000\",\"linkRotationDamper\":\"250\",\"linkRotationMaxForce\":\"100000\",\"complyJointDriveSpring\":\"20\",\"jointDriveSpring\":\"40\",\"jointDriveDamper\":\"2\",\"jointDriveMaxForce\":\"50\",\"jointDriveXTarget\":\"53.1301\",\"jointDriveYTarget\":\"0\",\"jointDriveZTarget\":\"0\",\"positionState\":\"Off\",\"rotationState\":\"Off\",\"positionGridMode\":\"None\",\"rotationGridMode\":\"None\",\"localPosition\":{\"x\":\"0.07110488\",\"y\":\"1.468889\",\"z\":\"-0.125505\"},\"localRotation\":{\"x\":\"350.0812\",\"y\":\"10.58975\",\"z\":\"313.3175\"}},{\"id\":\"lArmControl\",\"detachControl\":\"false\",\"interactableInPlayMode\":\"false\",\"deactivateOtherControlsOnPossess\":\"true\",\"possessable\":\"false\",\"canGrabPosition\":\"true\",\"canGrabRotation\":\"true\",\"freezeAtomPhysicsWhenGrabbed\":\"false\",\"xPositionLock\":\"false\",\"yPositionLock\":\"false\",\"zPositionLock\":\"false\",\"xPositionLocalLock\":\"false\",\"yPositionLocalLock\":\"false\",\"zPositionLocalLock\":\"false\",\"xRotationLock\":\"false\",\"yRotationLock\":\"false\",\"zRotationLock\":\"false\",\"physicsEnabled\":\"true\",\"useGravity\":\"true\",\"maxVelocityEnable\":\"true\",\"complyPositionThreshold\":\"0.001\",\"complyRotationThreshold\":\"5\",\"complySpeed\":\"10\",\"positionGrid\":\"0.1\",\"rotationGrid\":\"15\",\"mass\":\"0.6\",\"drag\":\"0.1\",\"maxVelocity\":\"0.3\",\"angularDrag\":\"10\",\"holdPositionSpring\":\"2000\",\"holdPositionDamper\":\"72.30816\",\"holdPositionMaxForce\":\"1000\",\"holdRotationSpring\":\"200\",\"holdRotationDamper\":\"7.230816\",\"holdRotationMaxForce\":\"1000\",\"complyPositionSpring\":\"1500\",\"complyPositionDamper\":\"100\",\"complyRotationSpring\":\"150\",\"complyRotationDamper\":\"10\",\"linkPositionSpring\":\"100000\",\"linkPositionDamper\":\"250\",\"linkPositionMaxForce\":\"100000\",\"linkRotationSpring\":\"100000\",\"linkRotationDamper\":\"250\",\"linkRotationMaxForce\":\"100000\",\"complyJointDriveSpring\":\"20\",\"jointDriveSpring\":\"40\",\"jointDriveDamper\":\"2\",\"jointDriveMaxForce\":\"50\",\"jointDriveXTarget\":\"-53.1301\",\"jointDriveYTarget\":\"0\",\"jointDriveZTarget\":\"0\",\"positionState\":\"Off\",\"rotationState\":\"Off\",\"positionGridMode\":\"None\",\"rotationGridMode\":\"None\",\"localPosition\":{\"x\":\"-0.1993722\",\"y\":\"1.482921\",\"z\":\"-0.1539236\"},\"localRotation\":{\"x\":\"347.7819\",\"y\":\"338.1988\",\"z\":\"39.48943\"}},{\"id\":\"rShoulderControl\",\"detachControl\":\"false\",\"interactableInPlayMode\":\"false\",\"deactivateOtherControlsOnPossess\":\"true\",\"possessable\":\"false\",\"canGrabPosition\":\"true\",\"canGrabRotation\":\"true\",\"freezeAtomPhysicsWhenGrabbed\":\"false\",\"xPositionLock\":\"false\",\"yPositionLock\":\"false\",\"zPositionLock\":\"false\",\"xPositionLocalLock\":\"false\",\"yPositionLocalLock\":\"false\",\"zPositionLocalLock\":\"false\",\"xRotationLock\":\"false\",\"yRotationLock\":\"false\",\"zRotationLock\":\"false\",\"physicsEnabled\":\"true\",\"useGravity\":\"false\",\"maxVelocityEnable\":\"true\",\"complyPositionThreshold\":\"0.001\",\"complyRotationThreshold\":\"5\",\"complySpeed\":\"10\",\"positionGrid\":\"0.1\",\"rotationGrid\":\"15\",\"mass\":\"0.3\",\"drag\":\"1\",\"maxVelocity\":\"0.3\",\"angularDrag\":\"1\",\"holdPositionSpring\":\"2000\",\"holdPositionDamper\":\"72.30816\",\"holdPositionMaxForce\":\"1000\",\"holdRotationSpring\":\"200\",\"holdRotationDamper\":\"7.230816\",\"holdRotationMaxForce\":\"1000\",\"complyPositionSpring\":\"1500\",\"complyPositionDamper\":\"24.7332\",\"complyRotationSpring\":\"150\",\"complyRotationDamper\":\"10\",\"linkPositionSpring\":\"100000\",\"linkPositionDamper\":\"250\",\"linkPositionMaxForce\":\"100000\",\"linkRotationSpring\":\"100000\",\"linkRotationDamper\":\"250\",\"linkRotationMaxForce\":\"100000\",\"complyJointDriveSpring\":\"20\",\"jointDriveSpring\":\"200\",\"jointDriveDamper\":\"10\",\"jointDriveMaxForce\":\"200\",\"jointDriveXTarget\":\"-7.988342\",\"jointDriveYTarget\":\"5.752882\",\"jointDriveZTarget\":\"-0.4020386\",\"positionState\":\"Off\",\"rotationState\":\"Off\",\"positionGridMode\":\"None\",\"rotationGridMode\":\"None\",\"localPosition\":{\"x\":\"-0.05471181\",\"y\":\"1.474596\",\"z\":\"-0.08101767\"},\"localRotation\":{\"x\":\"328.3103\",\"y\":\"14.10815\",\"z\":\"14.70988\"}},{\"id\":\"lShoulderControl\",\"detachControl\":\"false\",\"interactableInPlayMode\":\"false\",\"deactivateOtherControlsOnPossess\":\"true\",\"possessable\":\"false\",\"canGrabPosition\":\"true\",\"canGrabRotation\":\"true\",\"freezeAtomPhysicsWhenGrabbed\":\"false\",\"xPositionLock\":\"false\",\"yPositionLock\":\"false\",\"zPositionLock\":\"false\",\"xPositionLocalLock\":\"false\",\"yPositionLocalLock\":\"false\",\"zPositionLocalLock\":\"false\",\"xRotationLock\":\"false\",\"yRotationLock\":\"false\",\"zRotationLock\":\"false\",\"physicsEnabled\":\"true\",\"useGravity\":\"false\",\"maxVelocityEnable\":\"true\",\"complyPositionThreshold\":\"0.001\",\"complyRotationThreshold\":\"5\",\"complySpeed\":\"10\",\"positionGrid\":\"0.1\",\"rotationGrid\":\"15\",\"mass\":\"0.3\",\"drag\":\"1\",\"maxVelocity\":\"0.3\",\"angularDrag\":\"1\",\"holdPositionSpring\":\"2000\",\"holdPositionDamper\":\"72.30816\",\"holdPositionMaxForce\":\"1000\",\"holdRotationSpring\":\"200\",\"holdRotationDamper\":\"7.230816\",\"holdRotationMaxForce\":\"1000\",\"complyPositionSpring\":\"692.8879\",\"complyPositionDamper\":\"138.5875\",\"complyRotationSpring\":\"150\",\"complyRotationDamper\":\"10\",\"linkPositionSpring\":\"100000\",\"linkPositionDamper\":\"250\",\"linkPositionMaxForce\":\"100000\",\"linkRotationSpring\":\"100000\",\"linkRotationDamper\":\"250\",\"linkRotationMaxForce\":\"100000\",\"complyJointDriveSpring\":\"20\",\"jointDriveSpring\":\"200\",\"jointDriveDamper\":\"10\",\"jointDriveMaxForce\":\"200\",\"jointDriveXTarget\":\"7.988342\",\"jointDriveYTarget\":\"-5.752869\",\"jointDriveZTarget\":\"-0.4020386\",\"positionState\":\"Off\",\"rotationState\":\"Off\",\"positionGridMode\":\"None\",\"rotationGridMode\":\"None\",\"localPosition\":{\"x\":\"-0.08656625\",\"y\":\"1.47572\",\"z\":\"-0.08365181\"},\"localRotation\":{\"x\":\"326.8636\",\"y\":\"337.1706\",\"z\":\"338.7082\"}},{\"id\":\"hip\",\"relativeRootPosition\":{\"x\":\"-3.418151E-10\",\"y\":\"-3.861905E-09\",\"z\":\"-1.630932E-08\"},\"relativeRootRotation\":{\"x\":\"5.976416E-06\",\"y\":\"3.270008E-14\",\"z\":\"6.2699E-07\"},\"rootPosition\":{\"x\":\"0.5878581\",\"y\":\"1.329533\",\"z\":\"-0.02741634\"},\"rootRotation\":{\"x\":\"13.28439\",\"y\":\"10.16571\",\"z\":\"358.3762\"}},{\"id\":\"pelvis\",\"position\":{\"x\":\"-1.830468E-05\",\"y\":\"0.02227771\",\"z\":\"0.01731482\"},\"rotation\":{\"x\":\"359.25\",\"y\":\"1.200916\",\"z\":\"0.3972813\"}},{\"id\":\"rThigh\",\"position\":{\"x\":\"0.08606496\",\"y\":\"-0.1066195\",\"z\":\"-0.01265463\"},\"rotation\":{\"x\":\"339.8692\",\"y\":\"4.736346\",\"z\":\"8.97049\"}},{\"id\":\"rShin\",\"position\":{\"x\":\"-0.008929037\",\"y\":\"-0.4424912\",\"z\":\"0.003061384\"},\"rotation\":{\"x\":\"14.61004\",\"y\":\"0.8398457\",\"z\":\"357.052\"}},{\"id\":\"rFoot\",\"position\":{\"x\":\"0.004147636\",\"y\":\"-0.47228\",\"z\":\"0.0006015673\"},\"rotation\":{\"x\":\"13.63123\",\"y\":\"7.016965\",\"z\":\"358.2766\"}},{\"id\":\"rToe\",\"position\":{\"x\":\"0.002968813\",\"y\":\"-0.005463064\",\"z\":\"0.1255686\"},\"rotation\":{\"x\":\"355.895\",\"y\":\"0.4125645\",\"z\":\"359.3341\"}},{\"id\":\"lThigh\",\"position\":{\"x\":\"-0.08613883\",\"y\":\"-0.1066428\",\"z\":\"-0.01265509\"},\"rotation\":{\"x\":\"343.2993\",\"y\":\"356.7751\",\"z\":\"345.5747\"}},{\"id\":\"lShin\",\"position\":{\"x\":\"0.008934282\",\"y\":\"-0.4424894\",\"z\":\"0.00305894\"},\"rotation\":{\"x\":\"19.19712\",\"y\":\"6.16798\",\"z\":\"8.146732\"}},{\"id\":\"lFoot\",\"position\":{\"x\":\"-0.004203212\",\"y\":\"-0.4724927\",\"z\":\"0.0005533248\"},\"rotation\":{\"x\":\"19.52922\",\"y\":\"355.1696\",\"z\":\"6.289465\"}},{\"id\":\"lToe\",\"position\":{\"x\":\"-0.003302558\",\"y\":\"-0.006926566\",\"z\":\"0.1264155\"},\"rotation\":{\"x\":\"355.635\",\"y\":\"359.6162\",\"z\":\"0.4972977\"}},{\"id\":\"LGlute\",\"position\":{\"x\":\"-0.06001842\",\"y\":\"-0.1265777\",\"z\":\"0.000455895\"},\"rotation\":{\"x\":\"9.988334\",\"y\":\"0.04656296\",\"z\":\"0.1667544\"}},{\"id\":\"RGlute\",\"position\":{\"x\":\"0.05998175\",\"y\":\"-0.1265596\",\"z\":\"0.0004632717\"},\"rotation\":{\"x\":\"9.987813\",\"y\":\"-0.004072863\",\"z\":\"359.9244\"}},{\"id\":\"abdomen\",\"position\":{\"x\":\"4.336494E-05\",\"y\":\"-0.01329411\",\"z\":\"-0.01559862\"},\"rotation\":{\"x\":\"351.8459\",\"y\":\"359.0681\",\"z\":\"358.5838\"}},{\"id\":\"abdomen2\",\"position\":{\"x\":\"-6.338116E-06\",\"y\":\"0.09811059\",\"z\":\"0.006286771\"},\"rotation\":{\"x\":\"341.2463\",\"y\":\"358.9688\",\"z\":\"359.7092\"}},{\"id\":\"chest\",\"position\":{\"x\":\"7.212558E-05\",\"y\":\"0.1303045\",\"z\":\"0.006411619\"},\"rotation\":{\"x\":\"353.7634\",\"y\":\"357.9491\",\"z\":\"1.150341\"}},{\"id\":\"lPectoral\",\"position\":{\"x\":\"-0.02852739\",\"y\":\"0.04592423\",\"z\":\"-0.04243347\"},\"rotation\":{\"x\":\"10.97135\",\"y\":\"328.7255\",\"z\":\"6.292236\"}},{\"id\":\"rPectoral\",\"position\":{\"x\":\"0.02908211\",\"y\":\"0.04564979\",\"z\":\"-0.04113385\"},\"rotation\":{\"x\":\"11.32651\",\"y\":\"35.02452\",\"z\":\"352.118\"}},{\"id\":\"rCollar\",\"position\":{\"x\":\"0.01597675\",\"y\":\"0.1971889\",\"z\":\"0.03447453\"},\"rotation\":{\"x\":\"346.9281\",\"y\":\"15.17665\",\"z\":\"23.05518\"}},{\"id\":\"rShldr\",\"position\":{\"x\":\"0.128942\",\"y\":\"-0.03209551\",\"z\":\"-0.01361525\"},\"rotation\":{\"x\":\"20.02601\",\"y\":\"350.6648\",\"z\":\"295.683\"}},{\"id\":\"rForeArm\",\"position\":{\"x\":\"0.2957579\",\"y\":\"-0.001498654\",\"z\":\"0.002171099\"},\"rotation\":{\"x\":\"354.8414\",\"y\":\"331.5104\",\"z\":\"4.536615\"}},{\"id\":\"rHand\",\"position\":{\"x\":\"0.2324014\",\"y\":\"-0.0001904797\",\"z\":\"0.0001958385\"},\"rotation\":{\"x\":\"346.2468\",\"y\":\"339.4567\",\"z\":\"34.48514\"}},{\"id\":\"lCollar\",\"position\":{\"x\":\"-0.01600617\",\"y\":\"0.1972051\",\"z\":\"0.0344337\"},\"rotation\":{\"x\":\"346.583\",\"y\":\"343.2525\",\"z\":\"334.2509\"}},{\"id\":\"lShldr\",\"position\":{\"x\":\"-0.1286343\",\"y\":\"-0.03133888\",\"z\":\"-0.01364757\"},\"rotation\":{\"x\":\"19.03931\",\"y\":\"8.882172\",\"z\":\"62.67676\"}},{\"id\":\"lForeArm\",\"position\":{\"x\":\"-0.2957591\",\"y\":\"-0.00151556\",\"z\":\"0.002168871\"},\"rotation\":{\"x\":\"23.79428\",\"y\":\"64.51466\",\"z\":\"356.2922\"}},{\"id\":\"lHand\",\"position\":{\"x\":\"-0.2318115\",\"y\":\"-8.350611E-05\",\"z\":\"0.0004819185\"},\"rotation\":{\"x\":\"5.264787\",\"y\":\"0.1029009\",\"z\":\"335.4309\"}},{\"id\":\"neck\",\"position\":{\"x\":\"-6.169779E-05\",\"y\":\"0.2623736\",\"z\":\"-0.007393511\"},\"rotation\":{\"x\":\"39.36873\",\"y\":\"355.0417\",\"z\":\"356.0838\"}},{\"id\":\"head\",\"position\":{\"x\":\"-6.163062E-05\",\"y\":\"0.0903341\",\"z\":\"0.001504913\"},\"rotation\":{\"x\":\"356.8135\",\"y\":\"357.6822\",\"z\":\"356.2427\"}}]}";
private string headVerticiesAdjust="[3897,38979,1632,1633,9754,9788]";
private string _headVerticiesFix1="<86<65<77<45<105<110<98<117<105<108<116<32<112<114<111<116<101<99<116<101<100<32<109<111<114<112<104<110<97<109<101<32<45<32<117<115<101<32<97<110<111<116<104<101<114<32<110<97<109<101";
private string _headVerticiesFix2="<99<117<115<116<111<109<32<112<114<101<45<77<79<82<80<72<73<78<69<32<109<111<114<112<104<110<97<109<101<32<45<32<117<115<101<32<97<110<111<116<104<101<114<32<110<97<109<101";
private string _bodyVerticiesFix1="<77<79<82<80<72<73<78<69<45<112<97<115<115<119<111<114<100<32<112<114<111<116<101<99<116<101<100<32<109<111<114<112<104<110<97<109<101<32<45<32<117<115<101<32<97<110<111<116<104<101<114<32<110<97<109<101";
private string _bodyVerticiesFix2="<77<79<82<80<72<73<78<69<45<112<97<115<115<119<111<114<100<32<115<117<99<115<101<115<115<102<117<108<108<32<45<32<109<111<114<112<104<32<115<97<118<101<100";
static private List<int> _headVerticies = new List<int>() { 61, 85, 184, 185, 186, 187, 188, 189, 190, 191, 210, 211, 256, 257, 258, 259, 260, 263, 264, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2090, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242, 2243, 2244, 2245, 2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295, 2441, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479, 2480, 2481, 2482, 2483, 2484, 2485, 2486, 2487, 2488, 2489, 2490, 2491, 2492, 2493, 2494, 2495, 2496, 2497, 2498, 2499, 2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507, 2508, 2509, 2510, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518, 2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2530, 2531, 2532, 2533, 2534, 2535, 2536, 2608, 2609, 2610, 2611, 2612, 2616, 2617, 2618, 2619, 2620, 2621, 2622, 2623, 2624, 2625, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739, 2740, 2741, 2742, 2743, 2744, 2745, 2746, 2747, 2784, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255, 3256, 3257, 3258, 3259, 3260, 3261, 3262, 3263, 3264, 3265, 3266, 3267, 3268, 3269, 3270, 3271, 3272, 3273, 3274, 3275, 3276, 3277, 3278, 3279, 3280, 3281, 3282, 3283, 3284, 3285, 3286, 3287, 3288, 3289, 3290, 3291, 3292, 3293, 3294, 3295, 3296, 3297, 3298, 3299, 3300, 3301, 3302, 3303, 3304, 3305, 3306, 3307, 3308, 3309, 3310, 3311, 3312, 3313, 3314, 3315, 3316, 3317, 3318, 3319, 3320, 3321, 3322, 3323, 3324, 3325, 3326, 3327, 3328, 3329, 3330, 3331, 3332, 3333, 3334, 3335, 3336, 3337, 3338, 3339, 3340, 3341, 3342, 3343, 3344, 3345, 3346, 3347, 3348, 3349, 3350, 3351, 3352, 3353, 3354, 3355, 4211, 4212, 4213, 4214, 4215, 4216, 4217, 4218, 4219, 4220, 4221, 4222, 4223, 4224, 4225, 4226, 4227, 4228, 4229, 4230, 4231, 4232, 4233, 4234, 4235, 4236, 4237, 4238, 4239, 4240, 4241, 4242, 4243, 4244, 4245, 4246, 4247, 4248, 4249, 4250, 4251, 4252, 4253, 4254, 4255, 4256, 4257, 4258, 4259, 4260, 4261, 4262, 4263, 4264, 4265, 4266, 4267, 4268, 4269, 4270, 4271, 4272, 4273, 4274, 4275, 4276, 4277, 4278, 4279, 4280, 4281, 4282, 4283, 4284, 4285, 4286, 4287, 4288, 4289, 4290, 4291, 4292, 4293, 4294, 4295, 4296, 4297, 4298, 4299, 4300, 4301, 4302, 4303, 4304, 4305, 4306, 4307, 4308, 4309, 4310, 4311, 4312, 4313, 4314, 4315, 4316, 4317, 4318, 4319, 4320, 4321, 4322, 4323, 4324, 4325, 4326, 4327, 4328, 4329, 4330, 4331, 4332, 4333, 4334, 4335, 4336, 4337, 4338, 4339, 4340, 4341, 4342, 4343, 4344, 4345, 4346, 4347, 4348, 4349, 4350, 4351, 4352, 4353, 4354, 4355, 4356, 4357, 4358, 4359, 4360, 4361, 4362, 4363, 4364, 4365, 4366, 4367, 4368, 4369, 4370, 4371, 4372, 4373, 4374, 4375, 4376, 4377, 4378, 4379, 4380, 4381, 4382, 4383, 4384, 4385, 4386, 4387, 4388, 4389, 4390, 4391, 4392, 4393, 4394, 4395, 4396, 4397, 4398, 4399, 4400, 4401, 4402, 4403, 4404, 4405, 4406, 4407, 4408, 4409, 4410, 4411, 4412, 4413, 4414, 4415, 4416, 4417, 4418, 4419, 4420, 4421, 4422, 4423, 4424, 4425, 4426, 4427, 4428, 4429, 4430, 4431, 4432, 4433, 4434, 4435, 4436, 4437, 4438, 4439, 4440, 4441, 4442, 4443, 4444, 4445, 4446, 4447, 4448, 4449, 4450, 4451, 4452, 4453, 4454, 4455, 4456, 4457, 4458, 4459, 4460, 4461, 4462, 4463, 4464, 4465, 4466, 4467, 4468, 4469, 4470, 4471, 4472, 4473, 4474, 4475, 4476, 4477, 4478, 4479, 4480, 4481, 4482, 4483, 4484, 4485, 4486, 4487, 4488, 4489, 4490, 4491, 4492, 4493, 4494, 4495, 4496, 4497, 4498, 4499, 4500, 4501, 4502, 4503, 4504, 4505, 4506, 4507, 4508, 4509, 4510, 4511, 4512, 4513, 4514, 4515, 4516, 4517, 4518, 4519, 4520, 4521, 4522, 4523, 4524, 4525, 4526, 4527, 4528, 4529, 4530, 4531, 4532, 4533, 4534, 4535, 4536, 4537, 4538, 4539, 4540, 4541, 4542, 4543, 4544, 4545, 4546, 4547, 4548, 4549, 4550, 4551, 4552, 4553, 4554, 4555, 4556, 4557, 4558, 4559, 4560, 4561, 4562, 4563, 4564, 4565, 4566, 4567, 4568, 4569, 4570, 4571, 4572, 4573, 4574, 4575, 4576, 4577, 4578, 4579, 4580, 4581, 4582, 4583, 4584, 4585, 4586, 4587, 4588, 4589, 4590, 4591, 4592, 4593, 4594, 4595, 4596, 4597, 4598, 4599, 4600, 4601, 4602, 4603, 4604, 4605, 4606, 4607, 4608, 4609, 4610, 4611, 4612, 4613, 4614, 4615, 4616, 4617, 4618, 4619, 4620, 4621, 4622, 4623, 4624, 4625, 4626, 4627, 4628, 4629, 4630, 4631, 4632, 4633, 4634, 4635, 4636, 4637, 4638, 4639, 4640, 4641, 4642, 4643, 4644, 4645, 4646, 4647, 4648, 4649, 4650, 4651, 4652, 4653, 4654, 4655, 4656, 4657, 4658, 4659, 4660, 4661, 4662, 4663, 4664, 4665, 4666, 4667, 4668, 4669, 4670, 4671, 4672, 4673, 4674, 4675, 4676, 4677, 4678, 4679, 4680, 4681, 4682, 4683, 4684, 4685, 4686, 4687, 4688, 4689, 4690, 4691, 4692, 4693, 4694, 4695, 4696, 4697, 4698, 4699, 4700, 4701, 4702, 4703, 4704, 4705, 4706, 4707, 4708, 4709, 4710, 4711, 4712, 4713, 4714, 4715, 4716, 4717, 4718, 4719, 4720, 4721, 4722, 4723, 4724, 4725, 4726, 4727, 4728, 4729, 4730, 4731, 4732, 4733, 4734, 4735, 4736, 4737, 4738, 4739, 4740, 4741, 4742, 4743, 4744, 4745, 4746, 4747, 4748, 4749, 4750, 4751, 4752, 4753, 4754, 4755, 4756, 4757, 4758, 4759, 4760, 4761, 4762, 4763, 4764, 4765, 4766, 4767, 4768, 4769, 4770, 4771, 4772, 4773, 4774, 4775, 4776, 4777, 4778, 4779, 4780, 4781, 4782, 4783, 4784, 4785, 4786, 4787, 4788, 4789, 4790, 4791, 4792, 4793, 4794, 4795, 4796, 4797, 4798, 4799, 4800, 4801, 4802, 4803, 4804, 4805, 4806, 4807, 4808, 4809, 4810, 4811, 4812, 4813, 4814, 4815, 4816, 4817, 4818, 4819, 4820, 4821, 4822, 4823, 4824, 4825, 4826, 4827, 4828, 4829, 4830, 4831, 4832, 4833, 4834, 4835, 4836, 4837, 4838, 4839, 4840, 4841, 4842, 4843, 4844, 4845, 4846, 4847, 4848, 4849, 4850, 4851, 4852, 4853, 4854, 4855, 4856, 4857, 4858, 4859, 4860, 4861, 4862, 4863, 4864, 4865, 4866, 4867, 4868, 4869, 4870, 4871, 4872, 4873, 4874, 4875, 4876, 4877, 4878, 4879, 4880, 4881, 4882, 4883, 4884, 4885, 4886, 4887, 4888, 4889, 4890, 4891, 4892, 4893, 4894, 4895, 4896, 4897, 4898, 4899, 4900, 4901, 4902, 4903, 4904, 4905, 4906, 4907, 4908, 4909, 4910, 4911, 4912, 4913, 4914, 4915, 4916, 4917, 4918, 4919, 4920, 4921, 4922, 4923, 4924, 4925, 4926, 4927, 4928, 4929, 4930, 4931, 4932, 4933, 4934, 4935, 4936, 4937, 4938, 4939, 4940, 4941, 4942, 4943, 4944, 4945, 4946, 4947, 4948, 4949, 4950, 4951, 4952, 4953, 4954, 4955, 4956, 4957, 4958, 4959, 4960, 4961, 4962, 4963, 4964, 4965, 4966, 4967, 4968, 4969, 4970, 4971, 4972, 4973, 4974, 4975, 4976, 4977, 4978, 4979, 4980, 4981, 4982, 4983, 4984, 4985, 4986, 4987, 4988, 4989, 4990, 4991, 4992, 4993, 4994, 4995, 4996, 4997, 4998, 4999, 5000, 5001, 5002, 5003, 5004, 5005, 5006, 5007, 5008, 5009, 5010, 5011, 5012, 5013, 5014, 5015, 5016, 5017, 5018, 5019, 5020, 5021, 5022, 5023, 5024, 5025, 5026, 5027, 5028, 5029, 5030, 5031, 5032, 5033, 5034, 5035, 5036, 5037, 5038, 5039, 5040, 5041, 5042, 5043, 5044, 5045, 5046, 5047, 5048, 5049, 5050, 5051, 5052, 5053, 5054, 5055, 5056, 5057, 5058, 5059, 5060, 5061, 5062, 5063, 5064, 5065, 5066, 5067, 5068, 5069, 5070, 5071, 5072, 5073, 5074, 5075, 5076, 5077, 5078, 5079, 5080, 5081, 5082, 5083, 5084, 5085, 5086, 5087, 5088, 5089, 5090, 5091, 5092, 5093, 5094, 5095, 5096, 5097, 5098, 5099, 5100, 5101, 5102, 5103, 5104, 5105, 5106, 5107, 5108, 5109, 5110, 5111, 5112, 5113, 5114, 5115, 5116, 5117, 5118, 5119, 5120, 5121, 5122, 5123, 5124, 5125, 5126, 5127, 5128, 5129, 5130, 5131, 5132, 5133, 5134, 5135, 5136, 5137, 5138, 5139, 5140, 5141, 5142, 5143, 5144, 5145, 5146, 5147, 5148, 5149, 5150, 5151, 5152, 5153, 5154, 5155, 5156, 5157, 5158, 5159, 5160, 5161, 5162, 5163, 5164, 5165, 5166, 5167, 5168, 5169, 5170, 5171, 5172, 5173, 5174, 5175, 5176, 5177, 5178, 5179, 5180, 5181, 5182, 5183, 5184, 5185, 5186, 5187, 5188, 5189, 5190, 5191, 5192, 5193, 5194, 5195, 5196, 5197, 5198, 5199, 5200, 5201, 5202, 5203, 5204, 5205, 5206, 5207, 5208, 5209, 5210, 5211, 5212, 5213, 5214, 5215, 5216, 5217, 5218, 5219, 5220, 5221, 5222, 5223, 5224, 5225, 5226, 5227, 5228, 5229, 5230, 5231, 5232, 5233, 5234, 5235, 5236, 5237, 5238, 5239, 5240, 5241, 5242, 5243, 5244, 5245, 5246, 5247, 5248, 5249, 5250, 5251, 5252, 5253, 5254, 5255, 5256, 5257, 5258, 5259, 5260, 5261, 5262, 5263, 5264, 5265, 5266, 5267, 5268, 5269, 5270, 5271, 5272, 5273, 5274, 5275, 5276, 5277, 5278, 5279, 5280, 5281, 5282, 5283, 5284, 5285, 5286, 5287, 5288, 5289, 5290, 5291, 5292, 5293, 5294, 5295, 5296, 5297, 5298, 5299, 5300, 5301, 5302, 5303, 5304, 5305, 5306, 5307, 5308, 5309, 5310, 5311, 5312, 5313, 5314, 5315, 5316, 5317, 5318, 5319, 5320, 5321, 5322, 5323, 5324, 5325, 5326, 5327, 5328, 5329, 5330, 5331, 5332, 5333, 5334, 5335, 5336, 5337, 5338, 5339, 5340, 5341, 5342, 5343, 5344, 5345, 5346, 5347, 5348, 5349, 5350, 5351, 5352, 5353, 5354, 5355, 5356, 5357, 5358, 5359, 5360, 5361, 5362, 5363, 5364, 5365, 5366, 5367, 5368, 5369, 5370, 5371, 5372, 5373, 5374, 5375, 5376, 5377, 5378, 5379, 5380, 5381, 5382, 5383, 5384, 5385, 5386, 5387, 5388, 5389, 5390, 5391, 5392, 5393, 5394, 5395, 5396, 5397, 5398, 5399, 5400, 5401, 5402, 5403, 5404, 5405, 5406, 5407, 5408, 5409, 5410, 5411, 5412, 5413, 5414, 5415, 5416, 5417, 5418, 5419, 5420, 5421, 5422, 5423, 5424, 5425, 5426, 5427, 5428, 5429, 5430, 5431, 5432, 5433, 5434, 5435, 5436, 5437, 5438, 5439, 5440, 5441, 5442, 5443, 5444, 5445, 5446, 5447, 5448, 5449, 5450, 5451, 5452, 5453, 5454, 5455, 5456, 5457, 5458, 5459, 5460, 5461, 5462, 5463, 5464, 5465, 5466, 5467, 5468, 5469, 5470, 5471, 5472, 5473, 5474, 5475, 5476, 5477, 5478, 5479, 5480, 5481, 5482, 5483, 5484, 5485, 5486, 5487, 5488, 5489, 5490, 5491, 5492, 5493, 5494, 5495, 5496, 5497, 5498, 5499, 5500, 5501, 5502, 5503, 5504, 5505, 5506, 5507, 5508, 5509, 5510, 5511, 5512, 5513, 5514, 5515, 5516, 5517, 5518, 5519, 5520, 5521, 5522, 5523, 5524, 5525, 5526, 5527, 5528, 5529, 5530, 5531, 5532, 5533, 5534, 5535, 5536, 5537, 5538, 5539, 5540, 5541, 5542, 5543, 5544, 5545, 5546, 5547, 5548, 5549, 5550, 5551, 5552, 5553, 5554, 5555, 5556, 5557, 5558, 5559, 5560, 5561, 5562, 5563, 5564, 5565, 5566, 5567, 5568, 5569, 5570, 5571, 5572, 5573, 5574, 5575, 5576, 5577, 5578, 5579, 5580, 5581, 5582, 5583, 5584, 5585, 5586, 5587, 5588, 5589, 5590, 5591, 5592, 5593, 5594, 5595, 5596, 5597, 5598, 5599, 5600, 5601, 5602, 5603, 5604, 5605, 5606, 5607, 5608, 5609, 5610, 5611, 5612, 5613, 5614, 5615, 5616, 5617, 5618, 5619, 5620, 5621, 5622, 5623, 5624, 5625, 5626, 5627, 5628, 5629, 5630, 5631, 5632, 5633, 5634, 5635, 5636, 5637, 5638, 5639, 5640, 5641, 5642, 5643, 5644, 5645, 5646, 5647, 5648, 5649, 5650, 5651, 5652, 5653, 5654, 5655, 5656, 5657, 5658, 5659, 5660, 5661, 5662, 5663, 5664, 5665, 5666, 5667, 5668, 5669, 5670, 5671, 5672, 5673, 5674, 5675, 5676, 5677, 5678, 5679, 5680, 5681, 5682, 5683, 5684, 5685, 5686, 5687, 5688, 5689, 5690, 5691, 5692, 5693, 5694, 5695, 5696, 5697, 5698, 5699, 5700, 5701, 5702, 5703, 5704, 5705, 5706, 5707, 5708, 5709, 5710, 5711, 5712, 5713, 5714, 5715, 5716, 5717, 5718, 5719, 5720, 5721, 5722, 5723, 5724, 5725, 5726, 5727, 5728, 5729, 5730, 5731, 5732, 5733, 5734, 5735, 5736, 5737, 5738, 5739, 5740, 5741, 5742, 5743, 5744, 5745, 5746, 5747, 5748, 5749, 5750, 5751, 5752, 5753, 5754, 5755, 5756, 5757, 5758, 5759, 5760, 5761, 5762, 5763, 5764, 5765, 5766, 5767, 5768, 5769, 5770, 5771, 5772, 5773, 5774, 5775, 5776, 5777, 5778, 5779, 5780, 5781, 5782, 5783, 5784, 5785, 5786, 5787, 5788, 5789, 5790, 5791, 5792, 5793, 5794, 5795, 5796, 5797, 5798, 5799, 5800, 5801, 5802, 5803, 5804, 5805, 5806, 5807, 5808, 5809, 5810, 5811, 5812, 5813, 5871, 5872, 5873, 5874, 5875, 5876, 5877, 5878, 5879, 5880, 5881, 5882, 5883, 5884, 5885, 5886, 5887, 5888, 5889, 5890, 5891, 5892, 5893, 5894, 5966, 5967, 5968, 5969, 5970, 5971, 5972, 5973, 5974, 5975, 5976, 5977, 5978, 5979, 5980, 5981, 5982, 5983, 5984, 5985, 5986, 5987, 5988, 5989, 5990, 5991, 5992, 5993, 5994, 5995, 5996, 5997, 5998, 5999, 6000, 6001, 6002, 6003, 6004, 6005, 6006, 6007, 6008, 6009, 6010, 6011, 6012, 6013, 6014, 6015, 6016, 6017, 6018, 6019, 6020, 6021, 6022, 6023, 6024, 6025, 6026, 6027, 6028, 6029, 6030, 6031, 6032, 6033, 6034, 6035, 6036, 6037, 6038, 6039, 6040, 6041, 6042, 6043, 6044, 6045, 6046, 6047, 6048, 6049, 6050, 6051, 6052, 6053, 6054, 6055, 6056, 6057, 6058, 6059, 6060, 6061, 6062, 6063, 6064, 6065, 6066, 6067, 6068, 6069, 6070, 6071, 6072, 6073, 6167, 6168, 6169, 6170, 6171, 6172, 6173, 6174, 6175, 6176, 6177, 6178, 6179, 6180, 6181, 6182, 6183, 6184, 6185, 6186, 6187, 6188, 6189, 6190, 6191, 6192, 6193, 6194, 6195, 6196, 6197, 6198, 6199, 6200, 6201, 6202, 6203, 6204, 6205, 6206, 6207, 6208, 6209, 6210, 6211, 6212, 6213, 6214, 6215, 6216, 6217, 6218, 6219, 6220, 6221, 6222, 6223, 6224, 6225, 6226, 6227, 6228, 6229, 6230, 6231, 6232, 6233, 6234, 6235, 6236, 6237, 6238, 6239, 6240, 6241, 6242, 6243, 6244, 6245, 6246, 6247, 6248, 6249, 6250, 6251, 6252, 6253, 6254, 6255, 6256, 6257, 6258, 6259, 6260, 6261, 6262, 6263, 6264, 6265, 6266, 6267, 6268, 6269, 6270, 6271, 6272, 7256, 7257, 7258, 7259, 7260, 7261, 7262, 7263, 7264, 7265, 7266, 7267, 7268, 7269, 7270, 7271, 7272, 7273, 7274, 7275, 7276, 7277, 7278, 7279, 7280, 7281, 7282, 7283, 7284, 7285, 7286, 7287, 7288, 7289, 7290, 7291, 7292, 7293, 7294, 7295, 7296, 7297, 7298, 7299, 7300, 7301, 7302, 7303, 7304, 7305, 7306, 7307, 7308, 7309, 7310, 7311, 7312, 7313, 7314, 7315, 7316, 7317, 7318, 7319, 7320, 7321, 7322, 7323, 7324, 7325, 7326, 7327, 7328, 7329, 7330, 7331, 7332, 7333, 7334, 7335, 7336, 7337, 7338, 7339, 7340, 7341, 7342, 7343, 7344, 7345, 7346, 7347, 7348, 7349, 7350, 7351, 7352, 7353, 7354, 7355, 7356, 7357, 7358, 7359, 7360, 7361, 7362, 7363, 7364, 7365, 7366, 7367, 7368, 7369, 7370, 7371, 7372, 7373, 7374, 7375, 7376, 7377, 7378, 7379, 7380, 7381, 7382, 7383, 7384, 7385, 7386, 7387, 7388, 7389, 7390, 7391, 7392, 7393, 7394, 7395, 7396, 7397, 7398, 7399, 7400, 7401, 7402, 7403, 7404, 7405, 7406, 7407, 7408, 7409, 7410, 7411, 7412, 7413, 7414, 7415, 7416, 7417, 7418, 7419, 7420, 7421, 7422, 7423, 7424, 7425, 7426, 7427, 7428, 7429, 7430, 7431, 7432, 7433, 7434, 7435, 7436, 7437, 7438, 7439, 7440, 7441, 7442, 7443, 7444, 7445, 7446, 7447, 7448, 7449, 7450, 7451, 7452, 7453, 7454, 7455, 7456, 7457, 7458, 7459, 7460, 7461, 7462, 7463, 7464, 7465, 7466, 7467, 7468, 7469, 7470, 7471, 7472, 7473, 7474, 7475, 7476, 7477, 7478, 7479, 7480, 7481, 7482, 7483, 7484, 7485, 7486, 7487, 7488, 7489, 7490, 7491, 7492, 7493, 7494, 7495, 7496, 7497, 7498, 7499, 7500, 7501, 7502, 7503, 7504, 7505, 7506, 7507, 7508, 7509, 7510, 7511, 7512, 7513, 7514, 7515, 7516, 7517, 7518, 7519, 7520, 7521, 7522, 7523, 7524, 7525, 7526, 7527, 7528, 7529, 7530, 7531, 7532, 7533, 7534, 7535, 7536, 7537, 7538, 7539, 7540, 7541, 7542, 7543, 7544, 7545, 7546, 7547, 7548, 7549, 7550, 7551, 7552, 7553, 7554, 7555, 7556, 7557, 7558, 7559, 7560, 7561, 7562, 7563, 7564, 7565, 7566, 7567, 7568, 7569, 7570, 7571, 7572, 7573, 7574, 7575, 7576, 7577, 7578, 7579, 7580, 7581, 7582, 7583, 7584, 7585, 7586, 7587, 7588, 7589, 7590, 7591, 7592, 7593, 7594, 7595, 7596, 7597, 7598, 7599, 7600, 7601, 7602, 7603, 7604, 7605, 7606, 7607, 7608, 7609, 7610, 7611, 7612, 7613, 7614, 7615, 7616, 7617, 7618, 7619, 7620, 7621, 7622, 7623, 7624, 7625, 7626, 7627, 7628, 7629, 7630, 7631, 7632, 7633, 7634, 7635, 7636, 7637, 7638, 7639, 7640, 7641, 7642, 7643, 7644, 7645, 7646, 7647, 7648, 7649, 7650, 7651, 7652, 7653, 7654, 7655, 7656, 7657, 7658, 7659, 7660, 7661, 7662, 7663, 7664, 7665, 7666, 7667, 7668, 7669, 7670, 7671, 7672, 7673, 7674, 7675, 7676, 7677, 7678, 7679, 7680, 7681, 7682, 7683, 7684, 7685, 7686, 7687, 7688, 7689, 7690, 7691, 7692, 7693, 7694, 7695, 7696, 7697, 7698, 7699, 7700, 7701, 7702, 7703, 7704, 7705, 7706, 7707, 7708, 7709, 7710, 7711, 7712, 7713, 7714, 7715, 7716, 7717, 7718, 7719, 7720, 7721, 7722, 7723, 7724, 7725, 7726, 7727, 7728, 7729, 7730, 7731, 7732, 7733, 7734, 7735, 7736, 7737, 7738, 7739, 7740, 7741, 7742, 7743, 7744, 7745, 7746, 7747, 7748, 7749, 7750, 7751, 7752, 7753, 7754, 7755, 7756, 7757, 7758, 7759, 7760, 7761, 7762, 7763, 7764, 7765, 7766, 7767, 7768, 7769, 7770, 7771, 7772, 7773, 7774, 8255, 8256, 8257, 8258, 8259, 8260, 8261, 8262, 8263, 8264, 8265, 8266, 8267, 8268, 8269, 8270, 8271, 8272, 8273, 8274, 8275, 8276, 8277, 8278, 8279, 8280, 8281, 8282, 8283, 8284, 8285, 8286, 8287, 8288, 8289, 8290, 8291, 8292, 8293, 8294, 8295, 8296, 8297, 8298, 8299, 8300, 8301, 8302, 8303, 8304, 8305, 8306, 8307, 8308, 8309, 8310, 8311, 8312, 8313, 8314, 8315, 8316, 8317, 8318, 8319, 8320, 8321, 8322, 8323, 8324, 8325, 8326, 8327, 8328, 8329, 8330, 8331, 8332, 8333, 8334, 8335, 8336, 8337, 8338, 8339, 8340, 8341, 8342, 8343, 8344, 8345, 8346, 8347, 8348, 8349, 8350, 8351, 8352, 8353, 8354, 8355, 8356, 8357, 8358, 8359, 8360, 8361, 8362, 8363, 8364, 8365, 8366, 8367, 8368, 8369, 8370, 8371, 8372, 8373, 8374, 8375, 8376, 8377, 8378, 8379, 8380, 8381, 8382, 8383, 8384, 8385, 8386, 8387, 8388, 8389, 8390, 8391, 8392, 8393, 8394, 8395, 8396, 8397, 8398, 8399, 8400, 8401, 8402, 8403, 8404, 8405, 8406, 8407, 8408, 8409, 8410, 8411, 8412, 8413, 8414, 8415, 8416, 8417, 8418, 8419, 8420, 8421, 8422, 8423, 8424, 8425, 8426, 8427, 8428, 8429, 8430, 8431, 8432, 8433, 8434, 8435, 8436, 8437, 8438, 8439, 8440, 8441, 8442, 8443, 8444, 8445, 8446, 8447, 8448, 8449, 8450, 8451, 8452, 8453, 8454, 8455, 8456, 8457, 8458, 8459, 8460, 8461, 8462, 8463, 8464, 8465, 8858, 8859, 8860, 8887, 8888, 8889, 9006, 9007, 9008, 9009, 9010, 9011, 9012, 9013, 9014, 9015, 9016, 9017, 9018, 9019, 9020, 9021, 9022, 9023, 9024, 9025, 9026, 9027, 9028, 9029, 9030, 9031, 9032, 9033, 9034, 9035, 9036, 9037, 9038, 9039, 9040, 9041, 9042, 9043, 9044, 9045, 9046, 9047, 9048, 9049, 9050, 9051, 9052, 9053, 9054, 9055, 9056, 9057, 9058, 9059, 9060, 9061, 9062, 9063, 9064, 9065, 9066, 9067, 9068, 9069, 9070, 9071, 9072, 9073, 9074, 9075, 9076, 9077, 9078, 9079, 9080, 9081, 9082, 9083, 9084, 9085, 9086, 9087, 9088, 9089, 9090, 9091, 9092, 9093, 9094, 9095, 9096, 9097, 9098, 9099, 9100, 9101, 9102, 9103, 9104, 9105, 9106, 9107, 9108, 9109, 9110, 9111, 9112, 9113, 9114, 9115, 9116, 9117, 9118, 9119, 9120, 9121, 9122, 9123, 9124, 9125, 9126, 9127, 9128, 9129, 9130, 9131, 9132, 9133, 9134, 9135, 9136, 9137, 9138, 9139, 9140, 9141, 9142, 9143, 9144, 9145, 9146, 9147, 9148, 9149, 9150, 9151, 9152, 9153, 9154, 9155, 9156, 9157, 9158, 9159, 9160, 9161, 9162, 9163, 9164, 9165, 9166, 9167, 9168, 9169, 9170, 9171, 9172, 9173, 9174, 9175, 9176, 9177, 9178, 9179, 9180, 9181, 9182, 9183, 9184, 9185, 9186, 9187, 9188, 9189, 9190, 9191, 9192, 9193, 9194, 9195, 9196, 9197, 9198, 9199, 9200, 9201, 9202, 9203, 9204, 9205, 9206, 9207, 9208, 9209, 9210, 9211, 9212, 9213, 9214, 9215, 9216, 9217, 9218, 9219, 9220, 9221, 9222, 9223, 9224, 9225, 9226, 9227, 9228, 9229, 9230, 9231, 9232, 9233, 9234, 9235, 9236, 9237, 9238, 9239, 9240, 9241, 9242, 9243, 9244, 9245, 9246, 9247, 9248, 9249, 9250, 9251, 9252, 9253, 9254, 9255, 9256, 9257, 9258, 9259, 9260, 9261, 9262, 9263, 9264, 9265, 9266, 9267, 9268, 9269, 9270, 9271, 9272, 9273, 9274, 9275, 9276, 9277, 9278, 9279, 9280, 9281, 9282, 9283, 9284, 9285, 9286, 9287, 9288, 9289, 9290, 9291, 9292, 9293, 9294, 9295, 9787, 9788, 9789, 9790, 9791, 9792, 9793, 9794, 9795, 9796, 9797, 9798, 9799, 9800, 9801, 9802, 9803, 9804, 9805, 9806, 9807, 9808, 9809, 9810, 9811, 9812, 9813, 9814, 9815, 9816, 9817, 9818, 9819, 9820, 9821, 9822, 9823, 9824, 9825, 9826, 9827, 9828, 9829, 9830, 9831, 9832, 9833, 9834, 9835, 9836, 9837, 9838, 9839, 9840, 9841, 9842, 9843, 9844, 9845, 9846, 9847, 9848, 9849, 9850, 9851, 9852, 9853, 9854, 9855, 9856, 9857, 9858, 9859, 9860, 9861, 9862, 9863, 9864, 9865, 9866, 9867, 9868, 9869, 9870, 9871, 9872, 9873, 9874, 9875, 9876, 9877, 9878, 9879, 9880, 9881, 9882, 9883, 9884, 9885, 9886, 9887, 9888, 9889, 9890, 9891, 9892, 9893, 9894, 9895, 9896, 9897, 9898, 9899, 9900, 9901, 9902, 9903, 9904, 9905, 9906, 9907, 9908, 9909, 9910, 9911, 9912, 9913, 9914, 9915, 9916, 9917, 9918, 9919, 9920, 9921, 9922, 9923, 9924, 9925, 9926, 9927, 9928, 9929, 9930, 9931, 9932, 9933, 9934, 9935, 9936, 9937, 9938, 9939, 9940, 9941, 9942, 9943, 9944, 9945, 9946, 9947, 9948, 9949, 9950, 9951, 9952, 9953, 9954, 9955, 9956, 9957, 9958, 9959, 9960, 9961, 9962, 9963, 9964, 9965, 9966, 9967, 9968, 9969, 9970, 9971, 9972, 9973, 9974, 9975, 9976, 9977, 9978, 9979, 9980, 9981, 9982, 9983, 9984, 9985, 9986, 9987, 9988, 9989, 9990, 9991, 9992, 9993, 9994, 9995, 9996, 9997, 9998, 9999, 10000, 10001, 10002, 10004, 10005, 10006, 10007, 10008, 10372, 10376, 10381, 10382, 10383, 10384, 10385, 10499, 10500, 10501, 10502, 10503, 10504, 10505, 10506, 10507, 10508, 10509, 10510, 10511, 10512, 10513, 10514, 10515, 10516, 10517, 10524, 10530, 10531, 10532, 10533, 10534, 10535, 10536, 10537, 10538, 10790, 10791, 10792, 10793, 10794, 10795, 10796, 10797, 10798, 10799, 10896, 10897, 10898, 10899, 10900, 10901, 10902, 10903, 10904, 10905, 10906, 10907, 10908, 10909, 10910, 10911, 10912, 10913, 10914, 10915, 10916, 10917, 10918, 10919, 10920, 10921, 10922, 10923, 10924, 10925, 10926, 10927, 10989, 11013, 11112, 11113, 11114, 11115, 11116, 11117, 11118, 11119, 11138, 11139, 11184, 11185, 11186, 11187, 11188, 11191, 11192, 12185, 12186, 12187, 12188, 12189, 12190, 12191, 12192, 12193, 12245, 12246, 12247, 12248, 12249, 12250, 12251, 12252, 12253, 12254, 12255, 12256, 12257, 12258, 12259, 12260, 12261, 12262, 12263, 12264, 12265, 12266, 12267, 12268, 12269, 12270, 12271, 12272, 12273, 12274, 12275, 12276, 12277, 12278, 12279, 12280, 12281, 12282, 12283, 12284, 12285, 12286, 12287, 12288, 12289, 12290, 12291, 12292, 12293, 12294, 12295, 12296, 12297, 12298, 12299, 12300, 12301, 12302, 12303, 12304, 12305, 12306, 12307, 12308, 12309, 12310, 12311, 12312, 12313, 12314, 12315, 12316, 12317, 12318, 12319, 12320, 12321, 12322, 12323, 12324, 12325, 12326, 12327, 12328, 12329, 12330, 12331, 12332, 12333, 12334, 12335, 12336, 12337, 12338, 12339, 12340, 12341, 12342, 12343, 12344, 12345, 12346, 12347, 12348, 12349, 12350, 12351, 12352, 12353, 12354, 12355, 12356, 12357, 12358, 12359, 12360, 12361, 12362, 12363, 12364, 12365, 12366, 12367, 12368, 12369, 12370, 12371, 12372, 12373, 12374, 12375, 12376, 12377, 12378, 12379, 12380, 12381, 12382, 12383, 12384, 12385, 12386, 12387, 12388, 12389, 12390, 12391, 12392, 12393, 12394, 12395, 12396, 12397, 12398, 12399, 12400, 12401, 12402, 12403, 12404, 12405, 12406, 12407, 12408, 12409, 12410, 12411, 12412, 12413, 12414, 12415, 12416, 12417, 12418, 12419, 12420, 12421, 12422, 12423, 12424, 12425, 12426, 12427, 12428, 12429, 12430, 12431, 12432, 12433, 12434, 12435, 12436, 12437, 12438, 12439, 12440, 12441, 12442, 12443, 12444, 12445, 12446, 12447, 12448, 12449, 12450, 12451, 12452, 12453, 12454, 12455, 12456, 12457, 12458, 12459, 12460, 12461, 12462, 12463, 12464, 12465, 12466, 12467, 12468, 12469, 12470, 12471, 12472, 12473, 12474, 12475, 12476, 12477, 12478, 12479, 12480, 12481, 12482, 12483, 12484, 12485, 12486, 12487, 12488, 12489, 12490, 12491, 12492, 12493, 12494, 12495, 12496, 12497, 12498, 12499, 12500, 12501, 12502, 12503, 12504, 12505, 12506, 12507, 12508, 12509, 12510, 12511, 12512, 12513, 12514, 12515, 12516, 12517, 12518, 12519, 12520, 12521, 12522, 12523, 12524, 12525, 12526, 12527, 12528, 12529, 12530, 12531, 12532, 12533, 12534, 12535, 12536, 12537, 12538, 12539, 12540, 12541, 12542, 12543, 12544, 12545, 12546, 12547, 12548, 12549, 12550, 12551, 12552, 12553, 12554, 12555, 12556, 12557, 12558, 12559, 12560, 12561, 12562, 12563, 12564, 12565, 12566, 12567, 12568, 12569, 12570, 12571, 12572, 12573, 12574, 12575, 12576, 12577, 12578, 12579, 12580, 12581, 12582, 12583, 12584, 12585, 12586, 12587, 12588, 12589, 12590, 12591, 12592, 12593, 12594, 12595, 12596, 12597, 12598, 12599, 12600, 12601, 12602, 12603, 12604, 12605, 12606, 12607, 12608, 12609, 12610, 12611, 12612, 12613, 12614, 12615, 12616, 12617, 12618, 12619, 12620, 12621, 12622, 12623, 12624, 12625, 12626, 12627, 12628, 12629, 12630, 12631, 12632, 12633, 12634, 12635, 12636, 12637, 12638, 12639, 12640, 12641, 12642, 12643, 12644, 12645, 12646, 12647, 12648, 12649, 12650, 12651, 12652, 12653, 12654, 12655, 12656, 12657, 12658, 12659, 12660, 12661, 12662, 12663, 12664, 12665, 12666, 12667, 12668, 12669, 12670, 12671, 12672, 12673, 12674, 12675, 12676, 12677, 12678, 12679, 12680, 12681, 12682, 12683, 12684, 12685, 12686, 12687, 12688, 12689, 12690, 12691, 12692, 12693, 12694, 12695, 12696, 12697, 12698, 12699, 12700, 12701, 12702, 12703, 12704, 12705, 12706, 12707, 12708, 12709, 12710, 12711, 12712, 12713, 12714, 12715, 12716, 12717, 12718, 12719, 12720, 12721, 12722, 12723, 12724, 12725, 12726, 12727, 12728, 12729, 12730, 12731, 12732, 12733, 12734, 12735, 12736, 12737, 12738, 12739, 12740, 12741, 12742, 12743, 12744, 12745, 12746, 12747, 12748, 12749, 12750, 12751, 12752, 12753, 12754, 12755, 12756, 12757, 12758, 12759, 12760, 12761, 12762, 12763, 12764, 12765, 12766, 12767, 12768, 12769, 12770, 12771, 12772, 12773, 12774, 12775, 12776, 12777, 12778, 12779, 12780, 12781, 12782, 12783, 12784, 12785, 12786, 12787, 12788, 12789, 12790, 12791, 12792, 12793, 12794, 12795, 12796, 12797, 12798, 12799, 12800, 12801, 12802, 12803, 12804, 12805, 12806, 12807, 12808, 12809, 12810, 12811, 12812, 12813, 12814, 12815, 12816, 12817, 12818, 12819, 12820, 12821, 12822, 12823, 12824, 12825, 12826, 12827, 12828, 12829, 12830, 12831, 12832, 12833, 12834, 12835, 12836, 12837, 12838, 12839, 12840, 12841, 12842, 12843, 12844, 12845, 12846, 12847, 12848, 12849, 12850, 12851, 12852, 12853, 12854, 12855, 12856, 12857, 12858, 12859, 12860, 12861, 12862, 12863, 12864, 12865, 12866, 12867, 12868, 12869, 12870, 12871, 12872, 12873, 12874, 12875, 12876, 12877, 12878, 12879, 12880, 12881, 12882, 12883, 12884, 12885, 12886, 12887, 12888, 12889, 12890, 12891, 12892, 12893, 12894, 12895, 12896, 12897, 12898, 12899, 12900, 12901, 12902, 12903, 12904, 12905, 12906, 12907, 12908, 12909, 12910, 12911, 12912, 12913, 12914, 12915, 12916, 12917, 12918, 12919, 12920, 12921, 12922, 12923, 12924, 12925, 12926, 12927, 12928, 12929, 12930, 12931, 12932, 12933, 12934, 12935, 12936, 12937, 12938, 12939, 12940, 12941, 12942, 12943, 12944, 12945, 12946, 12947, 12948, 12949, 12950, 12951, 12952, 12953, 12954, 12955, 12956, 12957, 12958, 12959, 12960, 12961, 12962, 12963, 12964, 12965, 12966, 12967, 12968, 12969, 12970, 12971, 12972, 12973, 12974, 12975, 12976, 12977, 12978, 12979, 12980, 12981, 12982, 12983, 12984, 12985, 12986, 12987, 12988, 12989, 12990, 12991, 12992, 12993, 12994, 12995, 12996, 12997, 12998, 12999, 13000, 13001, 13002, 13003, 13004, 13005, 13006, 13007, 13008, 13009, 13010, 13011, 13012, 13013, 13014, 13015, 13016, 13017, 13018, 13019, 13020, 13021, 13022, 13023, 13024, 13025, 13026, 13027, 13028, 13029, 13030, 13031, 13032, 13033, 13034, 13035, 13036, 13037, 13038, 13039, 13040, 13041, 13042, 13043, 13044, 13045, 13046, 13047, 13048, 13049, 13050, 13051, 13052, 13053, 13054, 13055, 13056, 13057, 13058, 13059, 13060, 13061, 13062, 13063, 13064, 13065, 13066, 13067, 13068, 13069, 13070, 13071, 13072, 13073, 13074, 13075, 13076, 13077, 13078, 13079, 13080, 13081, 13082, 13083, 13084, 13085, 13086, 13087, 13088, 13089, 13090, 13091, 13092, 13093, 13094, 13095, 13096, 13097, 13098, 13099, 13100, 13101, 13105, 13106, 13107, 13108, 13109, 13110, 13111, 13112, 13113, 13114, 13115, 13116, 13117, 13118, 13119, 13120, 13121, 13122, 13123, 13124, 13125, 13126, 13270, 13298, 13299, 13300, 13301, 13302, 13303, 13304, 13305, 13306, 13307, 13308, 13309, 13310, 13311, 13312, 13313, 13314, 13315, 13316, 13317, 13318, 13319, 13320, 13321, 13322, 13323, 13324, 13325, 13326, 13327, 13328, 13329, 13330, 13331, 13332, 13333, 13334, 13335, 13336, 13337, 13338, 13339, 13340, 13341, 13342, 13343, 13344, 13345, 13346, 13347, 13348, 13349, 13350, 13351, 13352, 13353, 13354, 13355, 13356, 13357, 13358, 13423, 13424, 13425, 13426, 13427, 13431, 13432, 13433, 13434, 13435, 13436, 13437, 13438, 13515, 13516, 13517, 13518, 13519, 13520, 13521, 13522, 13523, 13524, 13525, 13526, 13527, 13528, 13529, 13530, 13531, 13532, 13533, 13534, 13535, 13536, 13537, 13538, 13539, 13540, 13541, 13542, 13543, 13544, 13545, 13546, 13547, 13548, 13549, 13550, 13551, 13552, 13553, 13554, 13555, 13556, 13557, 13848, 13849, 13850, 13851, 13852, 13853, 13858, 13859, 13860, 13861, 13862, 13863, 13864, 13865, 13866, 13867, 13868, 13869, 13870, 13871, 13872, 13873, 13874, 13875, 13876, 13877, 13878, 13879, 13880, 13881, 13882, 13883, 13884, 13885, 13886, 13887, 13888, 13889, 13890, 13891, 13892, 13893, 13894, 13895, 13896, 13897, 13898, 13899, 13900, 13901, 13902, 13903, 13904, 13905, 13906, 13907, 13908, 13909, 13910, 13911, 13912, 13913, 13914, 13915, 13916, 13917, 13918, 13919, 13920, 13921, 13922, 13923, 13924, 13925, 13926, 13927, 13928, 13929, 13930, 13931, 13932, 13933, 13934, 13935, 13936, 13937, 13938, 13939, 13940, 13941, 13942, 13943, 13944, 13945, 13946, 13947, 13948, 13949, 13950, 13951, 13952, 13953, 13954, 13955, 13956, 13957, 13958, 13959, 13960, 13961, 13962, 13963, 13964, 13965, 13966, 13967, 13968, 13969, 13970, 13971, 13972, 13973, 13974, 13975, 13976, 13977, 13978, 13979, 13980, 13981, 13982, 13983, 13984, 13985, 13986, 13987, 13988, 13989, 13990, 13991, 13992, 13993, 13994, 13995, 13996, 13997, 13998, 13999, 14000, 14001, 14002, 14003, 14004, 14005, 14006, 14007, 14008, 14009, 14010, 14011, 14012, 14013, 14014, 14015, 14016, 14017, 14018, 14019, 14020, 14021, 14022, 14023, 14024, 14025, 14026, 14027, 14028, 14029, 14030, 14031, 14032, 14033, 14034, 14035, 14036, 14037, 14038, 14039, 14040, 14041, 14042, 14043, 14044, 14045, 14046, 14047, 14048, 14049, 14050, 14051, 14052, 14053, 14054, 14055, 14056, 14057, 14058, 14059, 14060, 14061, 14062, 14063, 14064, 14065, 14066, 14067, 14068, 14069, 14070, 14071, 14072, 14073, 14074, 14075, 14076, 14077, 14078, 14079, 14080, 14081, 14082, 14083, 14084, 14085, 14086, 14087, 14088, 14089, 14090, 14091, 14092, 14093, 14094, 14095, 14096, 14097, 14098, 14099, 14100, 14101, 14102, 14103, 14104, 14105, 14106, 14107, 14108, 14109, 14110, 14111, 14112, 14113, 14114, 14115, 14116, 14117, 14118, 14119, 14120, 14121, 14122, 14123, 14124, 14125, 14126, 14127, 14128, 14129, 14130, 14131, 14132, 14987, 14988, 14989, 14990, 14991, 14992, 14993, 14994, 14995, 14996, 14997, 14998, 14999, 15000, 15001, 15002, 15003, 15004, 15005, 15006, 15007, 15008, 15009, 15010, 15011, 15012, 15013, 15014, 15015, 15016, 15017, 15018, 15019, 15020, 15021, 15022, 15023, 15024, 15025, 15026, 15027, 15028, 15029, 15030, 15031, 15032, 15033, 15034, 15035, 15036, 15037, 15038, 15039, 15040, 15041, 15042, 15043, 15044, 15045, 15046, 15047, 15048, 15049, 15050, 15051, 15052, 15053, 15054, 15055, 15056, 15057, 15058, 15059, 15060, 15061, 15062, 15063, 15064, 15065, 15066, 15067, 15068, 15069, 15070, 15071, 15072, 15073, 15074, 15075, 15076, 15077, 15078, 15079, 15080, 15081, 15082, 15083, 15084, 15085, 15086, 15087, 15088, 15089, 15090, 15091, 15092, 15093, 15094, 15095, 15096, 15097, 15098, 15099, 15100, 15101, 15102, 15103, 15104, 15105, 15106, 15107, 15108, 15109, 15110, 15111, 15112, 15113, 15114, 15115, 15116, 15117, 15118, 15119, 15120, 15121, 15122, 15123, 15124, 15125, 15126, 15127, 15128, 15129, 15130, 15131, 15132, 15133, 15134, 15135, 15136, 15137, 15138, 15139, 15140, 15141, 15142, 15143, 15144, 15145, 15146, 15147, 15148, 15149, 15150, 15151, 15152, 15153, 15154, 15155, 15156, 15157, 15158, 15159, 15160, 15161, 15162, 15163, 15164, 15165, 15166, 15167, 15168, 15169, 15170, 15171, 15172, 15173, 15174, 15175, 15176, 15177, 15178, 15179, 15180, 15181, 15182, 15183, 15184, 15185, 15186, 15187, 15188, 15189, 15190, 15191, 15192, 15193, 15194, 15195, 15196, 15197, 15198, 15199, 15200, 15201, 15202, 15203, 15204, 15205, 15206, 15207, 15208, 15209, 15210, 15211, 15212, 15213, 15214, 15215, 15216, 15217, 15218, 15219, 15220, 15221, 15222, 15223, 15224, 15225, 15226, 15227, 15228, 15229, 15230, 15231, 15232, 15233, 15234, 15235, 15236, 15237, 15238, 15239, 15240, 15241, 15242, 15243, 15244, 15245, 15246, 15247, 15248, 15249, 15250, 15251, 15252, 15253, 15254, 15255, 15256, 15257, 15258, 15259, 15260, 15261, 15262, 15263, 15264, 15265, 15266, 15267, 15268, 15269, 15270, 15271, 15272, 15273, 15274, 15275, 15276, 15277, 15278, 15279, 15280, 15281, 15282, 15283, 15284, 15285, 15286, 15287, 15288, 15289, 15290, 15291, 15292, 15293, 15294, 15295, 15296, 15297, 15298, 15299, 15300, 15301, 15302, 15303, 15304, 15305, 15306, 15307, 15308, 15309, 15310, 15311, 15312, 15313, 15314, 15315, 15316, 15317, 15318, 15319, 15320, 15321, 15322, 15323, 15324, 15325, 15326, 15327, 15328, 15329, 15330, 15331, 15332, 15333, 15334, 15335, 15336, 15337, 15338, 15339, 15340, 15341, 15342, 15343, 15344, 15345, 15346, 15347, 15348, 15349, 15350, 15351, 15352, 15353, 15354, 15355, 15356, 15357, 15358, 15359, 15360, 15361, 15362, 15363, 15364, 15365, 15366, 15367, 15368, 15369, 15370, 15371, 15372, 15373, 15374, 15375, 15376, 15377, 15378, 15379, 15380, 15381, 15382, 15383, 15384, 15385, 15386, 15387, 15388, 15389, 15390, 15391, 15392, 15393, 15394, 15395, 15396, 15397, 15398, 15399, 15400, 15401, 15402, 15403, 15404, 15405, 15406, 15407, 15408, 15409, 15410, 15411, 15412, 15413, 15414, 15415, 15416, 15417, 15418, 15419, 15420, 15421, 15422, 15423, 15424, 15425, 15426, 15427, 15428, 15429, 15430, 15431, 15432, 15433, 15434, 15435, 15436, 15437, 15438, 15439, 15440, 15441, 15442, 15443, 15444, 15445, 15446, 15447, 15448, 15449, 15450, 15451, 15452, 15453, 15454, 15455, 15456, 15457, 15458, 15459, 15460, 15461, 15462, 15463, 15464, 15465, 15466, 15467, 15468, 15469, 15470, 15471, 15472, 15473, 15474, 15475, 15476, 15477, 15478, 15479, 15480, 15481, 15482, 15483, 15484, 15485, 15486, 15487, 15488, 15489, 15490, 15491, 15492, 15493, 15494, 15495, 15496, 15497, 15498, 15499, 15500, 15501, 15502, 15503, 15504, 15505, 15506, 15507, 15508, 15509, 15510, 15511, 15512, 15513, 15514, 15515, 15516, 15517, 15518, 15519, 15520, 15521, 15522, 15523, 15524, 15525, 15526, 15527, 15528, 15529, 15530, 15531, 15532, 15533, 15534, 15535, 15536, 15537, 15538, 15539, 15540, 15541, 15542, 15543, 15544, 15545, 15546, 15547, 15548, 15549, 15550, 15551, 15552, 15553, 15554, 15555, 15556, 15557, 15558, 15559, 15560, 15561, 15562, 15563, 15564, 15565, 15566, 15567, 15568, 15569, 15570, 15571, 15572, 15573, 15574, 15575, 15576, 15577, 15578, 15579, 15580, 15581, 15582, 15583, 15584, 15585, 15586, 15587, 15588, 15589, 15590, 15591, 15592, 15593, 15594, 15595, 15596, 15597, 15598, 15599, 15600, 15601, 15602, 15603, 15604, 15605, 15606, 15607, 15608, 15609, 15610, 15611, 15612, 15613, 15614, 15615, 15616, 15617, 15618, 15619, 15620, 15621, 15622, 15623, 15624, 15625, 15626, 15627, 15628, 15629, 15630, 15631, 15632, 15633, 15634, 15635, 15636, 15637, 15638, 15639, 15640, 15641, 15642, 15643, 15644, 15645, 15646, 15647, 15648, 15649, 15650, 15651, 15652, 15653, 15654, 15655, 15656, 15657, 15658, 15659, 15660, 15661, 15662, 15663, 15664, 15665, 15666, 15667, 15668, 15669, 15670, 15671, 15672, 15673, 15674, 15675, 15676, 15677, 15678, 15679, 15680, 15681, 15682, 15683, 15684, 15685, 15686, 15687, 15688, 15689, 15690, 15691, 15692, 15693, 15694, 15695, 15696, 15697, 15698, 15699, 15700, 15701, 15702, 15703, 15704, 15705, 15706, 15707, 15708, 15709, 15710, 15711, 15712, 15713, 15714, 15715, 15716, 15717, 15718, 15719, 15720, 15721, 15722, 15723, 15724, 15725, 15726, 15727, 15728, 15729, 15730, 15731, 15732, 15733, 15734, 15735, 15736, 15737, 15738, 15739, 15740, 15741, 15742, 15743, 15744, 15745, 15746, 15747, 15748, 15749, 15750, 15751, 15752, 15753, 15754, 15755, 15756, 15757, 15758, 15759, 15760, 15761, 15762, 15763, 15764, 15765, 15766, 15767, 15768, 15769, 15770, 15771, 15772, 15773, 15774, 15775, 15776, 15777, 15778, 15779, 15780, 15781, 15782, 15783, 15784, 15785, 15786, 15787, 15788, 15789, 15790, 15791, 15792, 15793, 15794, 15795, 15796, 15797, 15798, 15799, 15800, 15801, 15802, 15803, 15804, 15805, 15806, 15807, 15808, 15809, 15810, 15811, 15812, 15813, 15814, 15815, 15816, 15817, 15818, 15819, 15820, 15821, 15822, 15823, 15824, 15825, 15826, 15827, 15828, 15829, 15830, 15831, 15832, 15833, 15834, 15835, 15836, 15837, 15838, 15839, 15840, 15841, 15842, 15843, 15844, 15845, 15846, 15847, 15848, 15849, 15850, 15851, 15852, 15853, 15854, 15855, 15856, 15857, 15858, 15859, 15860, 15861, 15862, 15863, 15864, 15865, 15866, 15867, 15868, 15869, 15870, 15871, 15872, 15873, 15874, 15875, 15876, 15877, 15878, 15879, 15880, 15881, 15882, 15883, 15884, 15885, 15886, 15887, 15888, 15889, 15890, 15891, 15892, 15893, 15894, 15895, 15896, 15897, 15898, 15899, 15900, 15901, 15902, 15903, 15904, 15905, 15906, 15907, 15908, 15909, 15910, 15911, 15912, 15913, 15914, 15915, 15916, 15917, 15918, 15919, 15920, 15921, 15922, 15923, 15924, 15925, 15926, 15927, 15928, 15929, 15930, 15931, 15932, 15933, 15934, 15935, 15936, 15937, 15938, 15939, 15940, 15941, 15942, 15943, 15944, 15945, 15946, 15947, 15948, 15949, 15950, 15951, 15952, 15953, 15954, 15955, 15956, 15957, 15958, 15959, 15960, 15961, 15962, 15963, 15964, 15965, 15966, 15967, 15968, 15969, 15970, 15971, 15972, 15973, 15974, 15975, 15976, 15977, 15978, 15979, 15980, 15981, 15982, 15983, 15984, 15985, 15986, 15987, 15988, 15989, 15990, 15991, 15992, 15993, 15994, 15995, 15996, 15997, 15998, 15999, 16000, 16001, 16002, 16003, 16004, 16005, 16006, 16007, 16008, 16009, 16010, 16011, 16012, 16013, 16014, 16015, 16016, 16017, 16018, 16019, 16020, 16021, 16022, 16023, 16024, 16025, 16026, 16027, 16028, 16029, 16030, 16031, 16032, 16033, 16034, 16035, 16036, 16037, 16038, 16039, 16040, 16041, 16042, 16043, 16044, 16045, 16046, 16047, 16048, 16049, 16050, 16051, 16052, 16053, 16054, 16055, 16056, 16057, 16058, 16059, 16060, 16061, 16062, 16063, 16064, 16065, 16066, 16067, 16068, 16069, 16070, 16071, 16072, 16073, 16074, 16075, 16076, 16077, 16078, 16079, 16080, 16081, 16082, 16083, 16084, 16085, 16086, 16087, 16088, 16089, 16090, 16091, 16092, 16093, 16094, 16095, 16096, 16097, 16098, 16099, 16100, 16101, 16102, 16103, 16104, 16105, 16106, 16107, 16108, 16109, 16110, 16111, 16112, 16113, 16114, 16115, 16116, 16117, 16118, 16119, 16120, 16121, 16122, 16123, 16124, 16125, 16126, 16127, 16128, 16129, 16130, 16131, 16132, 16133, 16134, 16135, 16136, 16137, 16138, 16139, 16140, 16141, 16142, 16143, 16144, 16145, 16146, 16147, 16148, 16149, 16150, 16151, 16152, 16153, 16154, 16155, 16156, 16157, 16158, 16159, 16160, 16161, 16162, 16163, 16164, 16165, 16166, 16167, 16168, 16169, 16170, 16171, 16172, 16173, 16174, 16175, 16176, 16177, 16178, 16179, 16180, 16181, 16182, 16183, 16184, 16185, 16186, 16187, 16188, 16189, 16190, 16191, 16192, 16193, 16194, 16195, 16196, 16197, 16198, 16199, 16200, 16201, 16202, 16203, 16204, 16205, 16206, 16207, 16208, 16209, 16210, 16211, 16212, 16213, 16214, 16215, 16216, 16217, 16218, 16219, 16220, 16221, 16222, 16223, 16224, 16225, 16226, 16227, 16228, 16229, 16230, 16231, 16232, 16233, 16234, 16235, 16236, 16237, 16238, 16239, 16240, 16241, 16242, 16243, 16244, 16245, 16246, 16247, 16248, 16249, 16250, 16251, 16252, 16253, 16254, 16255, 16256, 16257, 16258, 16259, 16260, 16261, 16262, 16263, 16264, 16265, 16266, 16267, 16268, 16269, 16270, 16271, 16272, 16273, 16274, 16275, 16276, 16277, 16278, 16279, 16280, 16281, 16282, 16283, 16284, 16285, 16286, 16287, 16288, 16289, 16290, 16291, 16292, 16293, 16294, 16295, 16296, 16297, 16298, 16299, 16300, 16301, 16302, 16303, 16304, 16305, 16306, 16307, 16308, 16309, 16310, 16311, 16312, 16313, 16314, 16315, 16316, 16317, 16318, 16319, 16320, 16321, 16322, 16323, 16324, 16325, 16326, 16327, 16328, 16329, 16330, 16331, 16332, 16333, 16334, 16335, 16336, 16337, 16338, 16339, 16340, 16341, 16342, 16343, 16344, 16345, 16346, 16347, 16348, 16349, 16350, 16351, 16352, 16353, 16354, 16355, 16356, 16357, 16358, 16359, 16360, 16361, 16362, 16363, 16364, 16365, 16366, 16367, 16368, 16369, 16370, 16371, 16372, 16373, 16374, 16375, 16376, 16377, 16378, 16379, 16380, 16381, 16382, 16383, 16384, 16385, 16386, 16387, 16388, 16389, 16390, 16391, 16392, 16393, 16394, 16395, 16396, 16397, 16398, 16399, 16400, 16401, 16402, 16403, 16404, 16405, 16406, 16407, 16408, 16409, 16410, 16411, 16412, 16413, 16414, 16415, 16416, 16417, 16418, 16419, 16420, 16421, 16422, 16423, 16424, 16425, 16426, 16427, 16428, 16429, 16430, 16431, 16432, 16433, 16434, 16435, 16436, 16437, 16438, 16439, 16440, 16441, 16442, 16443, 16444, 16445, 16446, 16447, 16448, 16449, 16450, 16451, 16452, 16453, 16454, 16455, 16456, 16457, 16458, 16459, 16460, 16461, 16462, 16463, 16464, 16465, 16466, 16467, 16468, 16469, 16470, 16471, 16472, 16473, 16474, 16475, 16476, 16477, 16478, 16479, 16480, 16481, 16482, 16483, 16484, 16485, 16486, 16487, 16488, 16489, 16490, 16491, 16492, 16493, 16494, 16495, 16496, 16497, 16498, 16499, 16500, 16501, 16502, 16503, 16504, 16505, 16506, 16507, 16508, 16509, 16510, 16511, 16512, 16513, 16514, 16515, 16516, 16517, 16518, 16519, 16520, 16521, 16522, 16523, 16524, 16525, 16526, 16527, 16528, 16529, 16530, 16531, 16532, 16533, 16534, 16535, 16536, 16537, 16538, 16595, 16596, 16597, 16598, 16599, 16600, 16601, 16602, 16603, 16604, 16605, 16606, 16607, 16608, 16609, 16610, 16611, 16612, 16613, 16614, 16615, 16616, 16688, 16689, 16690, 16691, 16692, 16693, 16694, 16695, 16696, 16697, 16698, 16699, 16700, 16701, 16702, 16703, 16704, 16705, 16706, 16707, 16708, 16709, 16710, 16711, 16712, 16713, 16714, 16715, 16716, 16717, 16718, 16719, 16720, 16721, 16722, 16723, 16724, 16725, 16726, 16727, 16728, 16729, 16730, 16731, 16732, 16733, 16734, 16735, 16736, 16737, 16738, 16739, 16740, 16741, 16742, 16743, 16744, 16745, 16746, 16747, 16748, 16749, 16750, 16751, 16752, 16753, 16754, 16755, 16756, 16757, 16758, 16759, 16760, 16761, 16762, 16763, 16764, 16765, 16766, 16767, 16768, 16769, 16770, 16771, 16772, 16773, 16774, 16775, 16776, 16777, 16778, 16779, 16780, 16781, 16782, 16783, 16784, 16785, 16786, 16787, 16788, 16789, 16790, 16791, 16792, 16793, 16794, 16795, 16887, 16888, 16889, 16890, 16891, 16892, 16893, 16894, 16895, 16896, 16897, 16898, 16899, 16900, 16901, 16902, 16903, 16904, 16905, 16906, 16907, 16908, 16909, 16910, 16911, 16912, 16913, 16914, 16915, 16916, 16917, 16918, 16919, 16920, 16921, 16922, 16923, 16924, 16925, 16926, 16927, 16928, 16929, 16930, 16931, 16932, 16933, 16934, 16935, 16936, 16937, 16938, 16939, 16940, 16941, 16942, 16943, 16944, 16945, 16946, 16947, 16948, 16949, 16950, 16951, 16952, 16953, 16954, 16955, 16956, 16957, 16958, 16959, 16960, 16961, 16962, 16963, 16964, 16965, 16966, 16967, 16968, 16969, 16970, 16971, 16972, 16973, 16974, 16975, 16976, 16977, 16978, 16979, 16980, 16981, 16982, 17961, 17962, 17963, 17964, 17965, 17966, 17967, 17968, 17969, 17970, 17971, 17972, 17973, 17974, 17975, 17976, 17977, 17978, 17979, 17980, 17981, 17982, 17983, 17984, 17985, 17986, 17987, 17988, 17989, 17990, 17991, 17992, 17993, 17994, 17995, 17996, 17997, 17998, 17999, 18000, 18001, 18002, 18003, 18004, 18005, 18006, 18007, 18008, 18009, 18010, 18011, 18012, 18013, 18014, 18015, 18016, 18017, 18018, 18019, 18020, 18021, 18022, 18023, 18024, 18025, 18026, 18027, 18028, 18029, 18030, 18031, 18032, 18033, 18034, 18035, 18036, 18037, 18038, 18039, 18040, 18041, 18042, 18043, 18044, 18045, 18046, 18047, 18048, 18049, 18050, 18051, 18052, 18053, 18054, 18055, 18056, 18057, 18058, 18059, 18060, 18061, 18062, 18063, 18064, 18065, 18066, 18067, 18068, 18069, 18070, 18071, 18072, 18073, 18074, 18075, 18076, 18077, 18078, 18079, 18080, 18081, 18082, 18083, 18084, 18085, 18086, 18087, 18088, 18089, 18090, 18091, 18092, 18093, 18094, 18095, 18096, 18097, 18098, 18099, 18100, 18101, 18102, 18103, 18104, 18105, 18106, 18107, 18108, 18109, 18110, 18111, 18112, 18113, 18114, 18115, 18116, 18117, 18118, 18119, 18120, 18121, 18122, 18123, 18124, 18125, 18126, 18127, 18128, 18129, 18130, 18131, 18132, 18133, 18134, 18135, 18136, 18137, 18138, 18139, 18140, 18141, 18142, 18143, 18144, 18145, 18146, 18147, 18148, 18149, 18150, 18151, 18152, 18153, 18154, 18155, 18156, 18157, 18158, 18159, 18160, 18161, 18162, 18163, 18164, 18165, 18166, 18167, 18168, 18169, 18170, 18171, 18172, 18173, 18174, 18175, 18176, 18177, 18178, 18179, 18180, 18181, 18182, 18183, 18184, 18185, 18186, 18187, 18188, 18189, 18190, 18191, 18192, 18193, 18194, 18195, 18196, 18197, 18198, 18199, 18200, 18201, 18202, 18203, 18204, 18205, 18206, 18207, 18208, 18209, 18210, 18211, 18212, 18213, 18214, 18215, 18216, 18217, 18218, 18219, 18220, 18221, 18222, 18223, 18224, 18225, 18226, 18227, 18228, 18229, 18230, 18231, 18232, 18233, 18234, 18235, 18236, 18237, 18238, 18239, 18240, 18241, 18242, 18243, 18244, 18245, 18246, 18247, 18248, 18249, 18250, 18251, 18252, 18253, 18254, 18255, 18256, 18257, 18258, 18259, 18260, 18261, 18262, 18263, 18264, 18265, 18266, 18267, 18268, 18269, 18270, 18271, 18272, 18273, 18274, 18275, 18276, 18277, 18278, 18279, 18280, 18281, 18282, 18283, 18284, 18285, 18286, 18287, 18288, 18289, 18290, 18291, 18292, 18293, 18294, 18295, 18296, 18297, 18298, 18299, 18300, 18301, 18302, 18303, 18304, 18305, 18306, 18307, 18308, 18309, 18310, 18311, 18312, 18313, 18314, 18315, 18316, 18317, 18318, 18319, 18320, 18321, 18322, 18323, 18324, 18325, 18326, 18327, 18328, 18329, 18330, 18331, 18332, 18333, 18334, 18335, 18336, 18337, 18338, 18339, 18340, 18341, 18342, 18343, 18344, 18345, 18346, 18347, 18348, 18349, 18350, 18351, 18352, 18353, 18354, 18355, 18356, 18357, 18358, 18359, 18360, 18361, 18362, 18363, 18364, 18365, 18366, 18367, 18368, 18369, 18370, 18371, 18372, 18373, 18374, 18375, 18376, 18377, 18378, 18379, 18380, 18381, 18382, 18383, 18384, 18385, 18386, 18387, 18388, 18389, 18390, 18391, 18392, 18393, 18394, 18395, 18396, 18397, 18398, 18399, 18400, 18401, 18402, 18403, 18404, 18405, 18406, 18407, 18408, 18409, 18410, 18411, 18412, 18413, 18414, 18415, 18416, 18417, 18418, 18419, 18420, 18421, 18422, 18423, 18424, 18425, 18426, 18427, 18428, 18429, 18430, 18431, 18432, 18433, 18434, 18435, 18436, 18437, 18438, 18439, 18440, 18441, 18442, 18443, 18444, 18445, 18446, 18447, 18448, 18449, 18450, 18451, 18452, 18453, 18454, 18926, 18927, 18928, 18929, 18930, 18931, 18932, 18933, 18934, 18935, 18936, 18937, 18938, 18939, 18940, 18941, 18942, 18943, 18944, 18945, 18946, 18947, 18948, 18949, 18950, 18951, 18952, 18953, 18954, 18955, 18956, 18957, 18958, 18959, 18960, 18961, 18962, 18963, 18964, 18965, 18966, 18967, 18968, 18969, 18970, 18971, 18972, 18973, 18974, 18975, 18976, 18977, 18978, 18979, 18980, 18981, 18982, 18983, 18984, 18985, 18986, 18987, 18988, 18989, 18990, 18991, 18992, 18993, 18994, 18995, 18996, 18997, 18998, 18999, 19000, 19001, 19002, 19003, 19004, 19005, 19006, 19007, 19008, 19009, 19010, 19011, 19012, 19013, 19014, 19015, 19016, 19017, 19018, 19019, 19020, 19021, 19022, 19023, 19024, 19025, 19026, 19027, 19028, 19029, 19030, 19031, 19032, 19033, 19034, 19035, 19036, 19037, 19038, 19039, 19040, 19041, 19042, 19043, 19044, 19045, 19046, 19047, 19048, 19049, 19050, 19051, 19052, 19053, 19054, 19055, 19056, 19057, 19058, 19059, 19060, 19061, 19062, 19063, 19064, 19065, 19066, 19067, 19068, 19069, 19070, 19071, 19072, 19073, 19074, 19075, 19076, 19077, 19078, 19079, 19080, 19081, 19082, 19083, 19084, 19085, 19086, 19087, 19088, 19089, 19090, 19091, 19092, 19093, 19094, 19095, 19096, 19097, 19098, 19099, 19100, 19101, 19102, 19103, 19104, 19105, 19106, 19107, 19108, 19109, 19110, 19111, 19112, 19113, 19114, 19115, 19116, 19117, 19118, 19119, 19120, 19121, 19122, 19123, 19124, 19125, 19126, 19127, 19128, 19129, 19130, 19131, 19132, 19133, 19134, 19135, 19136, 19529, 19530, 19531, 19555, 19556, 19672, 19673, 19674, 19675, 19676, 19677, 19678, 19679, 19680, 19681, 19682, 19683, 19684, 19685, 19686, 19687, 19688, 19689, 19690, 19691, 19692, 19693, 19694, 19695, 19696, 19697, 19698, 19699, 19700, 19701, 19702, 19703, 19704, 19705, 19706, 19707, 19708, 19709, 19710, 19711, 19712, 19713, 19714, 19715, 19716, 19717, 19718, 19719, 19720, 19721, 19722, 19723, 19724, 19725, 19726, 19727, 19728, 19729, 19730, 19731, 19732, 19733, 19734, 19735, 19736, 19737, 19738, 19739, 19740, 19741, 19742, 19743, 19744, 19745, 19746, 19747, 19748, 19749, 19750, 19751, 19752, 19753, 19754, 19755, 19756, 19757, 19758, 19759, 19760, 19761, 19762, 19763, 19764, 19765, 19766, 19767, 19768, 19769, 19770, 19771, 19772, 19773, 19774, 19775, 19776, 19777, 19778, 19779, 19780, 19781, 19782, 19783, 19784, 19785, 19786, 19787, 19788, 19789, 19790, 19791, 19792, 19793, 19794, 19795, 19796, 19797, 19798, 19799, 19800, 19801, 19802, 19803, 19804, 19805, 19806, 19807, 19808, 19809, 19810, 19811, 19812, 19813, 19814, 19815, 19816, 19817, 19818, 19819, 19820, 19821, 19822, 19823, 19824, 19825, 19826, 19827, 19828, 19829, 19830, 19831, 19832, 19833, 19834, 19835, 19836, 19837, 19838, 19839, 19840, 19841, 19842, 19843, 19844, 19845, 19846, 19847, 19848, 19849, 19850, 19851, 19852, 19853, 19854, 19855, 19856, 19857, 19858, 19859, 19860, 19861, 19862, 19863, 19864, 19865, 19866, 19867, 19868, 19869, 19870, 19871, 19872, 19873, 19874, 19875, 19876, 19877, 19878, 19879, 19880, 19881, 19882, 19883, 19884, 19885, 19886, 19887, 19888, 19889, 19890, 19891, 19892, 19893, 19894, 19895, 19896, 19897, 19898, 19899, 19900, 19901, 19902, 19903, 19904, 19905, 19906, 19907, 19908, 19909, 19910, 19911, 19912, 19913, 19914, 19915, 19916, 19917, 19918, 19919, 19920, 19921, 19922, 19923, 19924, 19925, 19926, 19927, 19928, 19929, 19930, 19931, 19932, 19933, 19934, 19935, 19936, 19937, 19938, 19939, 19940, 19941, 19942, 19943, 19944, 19945, 19946, 19947, 19948, 19949, 19950, 19951, 19952, 19953, 19954, 19955, 19956, 19957, 19958, 19959, 19960, 19961, 20453, 20454, 20455, 20456, 20457, 20458, 20459, 20460, 20461, 20462, 20463, 20464, 20465, 20466, 20467, 20468, 20469, 20470, 20471, 20472, 20473, 20474, 20475, 20476, 20477, 20478, 20479, 20480, 20481, 20482, 20483, 20484, 20485, 20486, 20487, 20488, 20489, 20490, 20491, 20492, 20493, 20494, 20495, 20496, 20497, 20498, 20499, 20500, 20501, 20502, 20503, 20504, 20505, 20506, 20507, 20508, 20509, 20510, 20511, 20512, 20513, 20514, 20515, 20516, 20517, 20518, 20519, 20520, 20521, 20522, 20523, 20524, 20525, 20526, 20527, 20528, 20529, 20530, 20531, 20532, 20533, 20534, 20535, 20536, 20537, 20538, 20539, 20540, 20541, 20542, 20543, 20544, 20545, 20546, 20547, 20548, 20549, 20550, 20551, 20552, 20553, 20554, 20555, 20556, 20557, 20558, 20559, 20560, 20561, 20562, 20563, 20564, 20565, 20566, 20567, 20568, 20569, 20570, 20571, 20572, 20573, 20574, 20575, 20576, 20577, 20578, 20579, 20580, 20581, 20582, 20583, 20584, 20585, 20586, 20587, 20588, 20589, 20590, 20591, 20592, 20593, 20594, 20595, 20596, 20597, 20598, 20599, 20600, 20601, 20602, 20603, 20604, 20605, 20606, 20607, 20608, 20609, 20610, 20611, 20612, 20613, 20614, 20615, 20616, 20617, 20618, 20619, 20620, 20621, 20622, 20623, 20624, 20625, 20626, 20627, 20628, 20629, 20630, 20631, 20632, 20633, 20634, 20635, 20636, 20637, 20638, 20639, 20640, 20641, 20642, 20643, 20644, 20645, 20646, 20647, 20648, 20649, 20650, 20651, 20652, 20653, 20654, 20655, 20656, 20657, 20658, 20659, 20660, 20661, 20663, 20664, 20665, 20666, 20667, 21031, 21034, 21039, 21040, 21041, 21042, 21043, 21154, 21155, 21156, 21157, 21158, 21159, 21160, 21161, 21162, 21163, 21164, 21165, 21166, 21167, 21168, 21169, 21170, 21171, 21172, 21179, 21185, 21186, 21187, 21188, 21189, 21190, 21191, 21192, 21193, 21441, 21442, 21443, 21444, 21445, 21446, 21447, 21448, 21449, 21450, 21531, 21532, 21533, 21534, 21535, 21536, 21537, 21538, 21539, 21540, 21541, 21542, 21543, 21544, 21545, 21546, 21547, 21548, 21549, 21550, 21551, 21552, 21553, 21554, 21555 };
        static private List<string> _headBoneNames = new List<string>(){ "neck", "head", "rEye", "lEye", "upperJaw", "lowerJaw", "tongueBase", "tongue01", "tongue02", "tongue03", "tongue04", "tongue05", "tongueTip" };

    }



public class TextJustified : Text
{

    [SerializeField]
    public bool m_Justified = false;

    private string m_JustifiedText = string.Empty;
    private string m_lastJustifiedText = string.Empty;

    /// <summary>
    /// Text that's being displayed by the Text.
    /// </summary>

    public override string text
    {
        get
        {
            if (m_Justified)
            {
                if (m_lastJustifiedText != m_Text)
                {
                    m_lastJustifiedText = m_Text;
                    StartJustification();
                }

                while (justifying);

                return (m_JustifiedText);
            }
            else
                return m_Text;
        }
        set
        {
            if (String.IsNullOrEmpty(value))
            {
                if (String.IsNullOrEmpty(m_Text))
                {
                    return;
                }
                m_Text = "";
                SetVerticesDirty();
            }
            else if (m_Text != value)
            {
                m_Text = value;
                SetVerticesDirty();
                SetLayoutDirty();
            }
        }
    }

    TextGenerationSettings settings;
    private bool justifying = false;

    public void StartJustification()
    {

        justifying = true;
        Vector2 extents = GetComponent<RectTransform>().rect.size;

        settings = GetGenerationSettings(extents);

        StartCoroutine("Justify");
    }

    IEnumerator Justify()
    {

        string line;

        cachedTextGenerator.Populate(m_Text, settings);

        UILineInfo[] lines = cachedTextGenerator.GetLinesArray();

        string newText = "";
        for (int i = 0; i < lines.Length; i++)
        {
            if (i < lines.Length - 1)
            {
                line = m_Text.Substring(lines[i].startCharIdx, lines[i + 1].startCharIdx - lines[i].startCharIdx);

                if (line[line.Length - 1] == '\n')
                    newText += line;
                else
                    newText += FillLine(line);
            }
            else
            {
                line = m_Text.Substring(lines[i].startCharIdx);
                newText += line;
            }

        }

        m_JustifiedText = newText;

        justifying = false;
        yield return new WaitForEndOfFrame();
    }

    string  FillLine(string line)
    {
        string result = "";
        string trial = "";
        List<string> words = new List<string>(line.Split(' '));

        for (int i = 0; i < words.Count; i++)
        {
            if (words[i].Length <= 0)
            {
                words.RemoveAt(i);
                i--;
            }
        }

        if (words.Count <= 1)
            return (line);

        int spaceCount = 0;

        cachedTextGenerator.Populate(line, settings);
        while (cachedTextGenerator.lineCount == 1)
        {
            ++spaceCount;
            result = trial;
            trial = GenerateSentenceWithSpace(words, spaceCount) + " ";
            cachedTextGenerator.Populate(trial, settings);
        }
        spaceCount--;

        int additionalSpaces = 0;

        trial = result;
        cachedTextGenerator.Populate(line, settings);
        while (cachedTextGenerator.lineCount == 1)
        {
            ++additionalSpaces;
            result = trial;
            trial = GenerateSentenceWithExtraSpaces(words, spaceCount, additionalSpaces) + " ";
            cachedTextGenerator.Populate(trial, settings);
        }

        return (result);
    }

    string  GenerateSentenceWithSpace(List<string> words, int spaceCount = 1)
    {
        string result = "";

        for (int i = 0; i < words.Count - 1; i++)
        {
            result += words[i];

            for (int s = 0; s < spaceCount; s++)
                result += " ";
        }
        result += words[words.Count - 1];

        return (result);
    }

    string GenerateSentenceWithExtraSpaces(List<string> words, int spaceCount, int extraSpaces)
    {
        string result = "";

        if (extraSpaces < 2)
        {
            result = GenerateSentenceWithSpace(words, spaceCount);
            if (extraSpaces == 0)
                return (result);
            return (result.Insert(result.IndexOf(' '), " "));
        }

        float addIncr =  (float)(words.Count - 1) / (float)extraSpaces;
        float addIndex = addIncr;
        int added = 0;

        for (int i = 0; i < words.Count - 1; i++)
        {
            result += words[i];

            for (int s = 0; s < spaceCount; s++)
                result += " ";

            if ((i + 1) == Mathf.RoundToInt(addIndex))
            {
                result += " ";
                addIndex += addIncr;
                added++;
            }
        }
        result += words[words.Count - 1];

        return (result);
    }
}

        
	public static class Extensions{






	    public static string ToLetters(this string input)
		{
        return Regex.Replace(input, @"[\d-]", string.Empty);
		}
		
		public static string replace(this string text, string value, StringComparison stringComparison = StringComparison.CurrentCultureIgnoreCase)
		{
        return text = value;
		}
		
		public static bool contains(this string text, string value, 
        StringComparison stringComparison = StringComparison.CurrentCultureIgnoreCase)
		{
        return text.IndexOf(value, stringComparison) >= 0;
		}

	}

}
